var searchIndex = {};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator useful for sets of C-style bitmask flags. It can be used for creating typesafe wrappers around C APIs.","items":[[0,"example_generated","bitflags","This module shows an example of code generated by the macro. IT MUST NOT BE USED OUTSIDE THIS CRATE.",null,null],[3,"Flags","bitflags::example_generated","This is the same `Flags` struct defined in the crate level example. Note that this struct is just for documentation purposes only, it must not be used outside this crate.",null,null],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"ordering"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[18,"FLAG_A","","",0,null],[18,"FLAG_B","","",0,null],[18,"FLAG_C","","",0,null],[18,"FLAG_ABC","","",0,null],[11,"empty","","Returns an empty set of flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"all","","Returns the set containing all flags.",0,{"inputs":[],"output":{"name":"flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",0,{"inputs":[{"name":"u32"}],"output":{"generics":["flags"],"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",0,{"inputs":[{"name":"u32"}],"output":{"name":"flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"set","","Inserts or removes the specified flags depending on the passed value.",0,{"inputs":[{"name":"self"},{"name":"flags"},{"name":"bool"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitor_assign","","Adds the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitxor_assign","","Toggles the set of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"bitand","","Returns the intersection between the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"bitand_assign","","Disables all flags disabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"sub","","Returns the set difference of the two sets of flags.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":{"name":"flags"}}],[11,"sub_assign","","Disables all flags enabled in the set.",0,{"inputs":[{"name":"self"},{"name":"flags"}],"output":null}],[11,"not","","Returns the complement of this set of flags.",0,{"inputs":[{"name":"self"}],"output":{"name":"flags"}}],[11,"extend","","",0,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"from_iter","","",0,{"inputs":[{"name":"t"}],"output":{"name":"flags"}}],[14,"bitflags","bitflags","The macro used to generate the flag structure.",null,null]],"paths":[[3,"Flags"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[5,"initialize","lazy_static","Takes a shared reference to a lazy static and initializes it if it has not been already.",null,{"inputs":[{"name":"t"}],"output":null}],[8,"LazyStatic","","Support trait for enabling a few common operation on lazy static values.",null,null],[14,"__lazy_static_create","","",null,null],[14,"lazy_static","","",null,null]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"itimerval","","",null,null],[12,"it_interval","","",16,null],[12,"it_value","","",16,null],[3,"tms","","",null,null],[12,"tms_utime","","",17,null],[12,"tms_stime","","",17,null],[12,"tms_cutime","","",17,null],[12,"tms_cstime","","",17,null],[3,"servent","","",null,null],[12,"s_name","","",18,null],[12,"s_aliases","","",18,null],[12,"s_port","","",18,null],[12,"s_proto","","",18,null],[3,"protoent","","",null,null],[12,"p_name","","",19,null],[12,"p_aliases","","",19,null],[12,"p_proto","","",19,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",20,null],[12,"sa_data","","",20,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",21,null],[12,"sin_port","","",21,null],[12,"sin_addr","","",21,null],[12,"sin_zero","","",21,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",22,null],[12,"sin6_port","","",22,null],[12,"sin6_flowinfo","","",22,null],[12,"sin6_addr","","",22,null],[12,"sin6_scope_id","","",22,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",23,null],[12,"sun_path","","",23,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",24,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",25,null],[12,"ai_family","","",25,null],[12,"ai_socktype","","",25,null],[12,"ai_protocol","","",25,null],[12,"ai_addrlen","","",25,null],[12,"ai_addr","","",25,null],[12,"ai_canonname","","",25,null],[12,"ai_next","","",25,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",26,null],[12,"nl_pid","","",26,null],[12,"nl_groups","","",26,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",27,null],[12,"sll_protocol","","",27,null],[12,"sll_ifindex","","",27,null],[12,"sll_hatype","","",27,null],[12,"sll_pkttype","","",27,null],[12,"sll_halen","","",27,null],[12,"sll_addr","","",27,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",28,null],[12,"tm_min","","",28,null],[12,"tm_hour","","",28,null],[12,"tm_mday","","",28,null],[12,"tm_mon","","",28,null],[12,"tm_year","","",28,null],[12,"tm_wday","","",28,null],[12,"tm_yday","","",28,null],[12,"tm_isdst","","",28,null],[12,"tm_gmtoff","","",28,null],[12,"tm_zone","","",28,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",29,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",30,null],[12,"dli_fbase","","",30,null],[12,"dli_sname","","",30,null],[12,"dli_saddr","","",30,null],[3,"epoll_event","","",null,null],[12,"events","","",31,null],[12,"u64","","",31,null],[3,"utsname","","",null,null],[12,"sysname","","",32,null],[12,"nodename","","",32,null],[12,"release","","",32,null],[12,"version","","",32,null],[12,"machine","","",32,null],[12,"domainname","","",32,null],[3,"lconv","","",null,null],[12,"decimal_point","","",33,null],[12,"thousands_sep","","",33,null],[12,"grouping","","",33,null],[12,"int_curr_symbol","","",33,null],[12,"currency_symbol","","",33,null],[12,"mon_decimal_point","","",33,null],[12,"mon_thousands_sep","","",33,null],[12,"mon_grouping","","",33,null],[12,"positive_sign","","",33,null],[12,"negative_sign","","",33,null],[12,"int_frac_digits","","",33,null],[12,"frac_digits","","",33,null],[12,"p_cs_precedes","","",33,null],[12,"p_sep_by_space","","",33,null],[12,"n_cs_precedes","","",33,null],[12,"n_sep_by_space","","",33,null],[12,"p_sign_posn","","",33,null],[12,"n_sign_posn","","",33,null],[12,"int_p_cs_precedes","","",33,null],[12,"int_p_sep_by_space","","",33,null],[12,"int_n_cs_precedes","","",33,null],[12,"int_n_sep_by_space","","",33,null],[12,"int_p_sign_posn","","",33,null],[12,"int_n_sign_posn","","",33,null],[3,"sigevent","","",null,null],[12,"sigev_value","","",34,null],[12,"sigev_signo","","",34,null],[12,"sigev_notify","","",34,null],[12,"sigev_notify_thread_id","","",34,null],[3,"dirent","","",null,null],[12,"d_ino","","",35,null],[12,"d_off","","",35,null],[12,"d_reclen","","",35,null],[12,"d_type","","",35,null],[12,"d_name","","",35,null],[3,"dirent64","","",null,null],[12,"d_ino","","",36,null],[12,"d_off","","",36,null],[12,"d_reclen","","",36,null],[12,"d_type","","",36,null],[12,"d_name","","",36,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",37,null],[12,"rlim_max","","",37,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",38,null],[12,"gl_pathv","","",38,null],[12,"gl_offs","","",38,null],[12,"gl_flags","","",38,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",39,null],[12,"ifa_name","","",39,null],[12,"ifa_flags","","",39,null],[12,"ifa_addr","","",39,null],[12,"ifa_netmask","","",39,null],[12,"ifa_ifu","","",39,null],[12,"ifa_data","","",39,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_rwlockattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",40,null],[12,"pw_passwd","","",40,null],[12,"pw_uid","","",40,null],[12,"pw_gid","","",40,null],[12,"pw_gecos","","",40,null],[12,"pw_dir","","",40,null],[12,"pw_shell","","",40,null],[3,"spwd","","",null,null],[12,"sp_namp","","",41,null],[12,"sp_pwdp","","",41,null],[12,"sp_lstchg","","",41,null],[12,"sp_min","","",41,null],[12,"sp_max","","",41,null],[12,"sp_warn","","",41,null],[12,"sp_inact","","",41,null],[12,"sp_expire","","",41,null],[12,"sp_flag","","",41,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_frsize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_favail","","",42,null],[12,"f_fsid","","",42,null],[12,"f_flag","","",42,null],[12,"f_namemax","","",42,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",43,null],[12,"dqb_bsoftlimit","","",43,null],[12,"dqb_curspace","","",43,null],[12,"dqb_ihardlimit","","",43,null],[12,"dqb_isoftlimit","","",43,null],[12,"dqb_curinodes","","",43,null],[12,"dqb_btime","","",43,null],[12,"dqb_itime","","",43,null],[12,"dqb_valid","","",43,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",44,null],[12,"ssi_errno","","",44,null],[12,"ssi_code","","",44,null],[12,"ssi_pid","","",44,null],[12,"ssi_uid","","",44,null],[12,"ssi_fd","","",44,null],[12,"ssi_tid","","",44,null],[12,"ssi_band","","",44,null],[12,"ssi_overrun","","",44,null],[12,"ssi_trapno","","",44,null],[12,"ssi_status","","",44,null],[12,"ssi_int","","",44,null],[12,"ssi_ptr","","",44,null],[12,"ssi_utime","","",44,null],[12,"ssi_stime","","",44,null],[12,"ssi_addr","","",44,null],[3,"itimerspec","","",null,null],[12,"it_interval","","",45,null],[12,"it_value","","",45,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",46,null],[12,"mq_maxmsg","","",46,null],[12,"mq_msgsize","","",46,null],[12,"mq_curmsgs","","",46,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",47,null],[12,"if_name","","",47,null],[3,"msginfo","","",null,null],[12,"msgpool","","",48,null],[12,"msgmap","","",48,null],[12,"msgmax","","",48,null],[12,"msgmnb","","",48,null],[12,"msgmni","","",48,null],[12,"msgssz","","",48,null],[12,"msgtql","","",48,null],[12,"msgseg","","",48,null],[3,"mmsghdr","","",null,null],[12,"msg_hdr","","",49,null],[12,"msg_len","","",49,null],[3,"sembuf","","",null,null],[12,"sem_num","","",50,null],[12,"sem_op","","",50,null],[12,"sem_flg","","",50,null],[3,"input_event","","",null,null],[12,"time","","",51,null],[12,"type_","","",51,null],[12,"code","","",51,null],[12,"value","","",51,null],[3,"input_id","","",null,null],[12,"bustype","","",52,null],[12,"vendor","","",52,null],[12,"product","","",52,null],[12,"version","","",52,null],[3,"input_absinfo","","",null,null],[12,"value","","",53,null],[12,"minimum","","",53,null],[12,"maximum","","",53,null],[12,"fuzz","","",53,null],[12,"flat","","",53,null],[12,"resolution","","",53,null],[3,"input_keymap_entry","","",null,null],[12,"flags","","",54,null],[12,"len","","",54,null],[12,"index","","",54,null],[12,"keycode","","",54,null],[12,"scancode","","",54,null],[3,"input_mask","","",null,null],[12,"type_","","",55,null],[12,"codes_size","","",55,null],[12,"codes_ptr","","",55,null],[3,"ff_replay","","",null,null],[12,"length","","",56,null],[12,"delay","","",56,null],[3,"ff_trigger","","",null,null],[12,"button","","",57,null],[12,"interval","","",57,null],[3,"ff_envelope","","",null,null],[12,"attack_length","","",58,null],[12,"attack_level","","",58,null],[12,"fade_length","","",58,null],[12,"fade_level","","",58,null],[3,"ff_constant_effect","","",null,null],[12,"level","","",59,null],[12,"envelope","","",59,null],[3,"ff_ramp_effect","","",null,null],[12,"start_level","","",60,null],[12,"end_level","","",60,null],[12,"envelope","","",60,null],[3,"ff_condition_effect","","",null,null],[12,"right_saturation","","",61,null],[12,"left_saturation","","",61,null],[12,"right_coeff","","",61,null],[12,"left_coeff","","",61,null],[12,"deadband","","",61,null],[12,"center","","",61,null],[3,"ff_periodic_effect","","",null,null],[12,"waveform","","",62,null],[12,"period","","",62,null],[12,"magnitude","","",62,null],[12,"offset","","",62,null],[12,"phase","","",62,null],[12,"envelope","","",62,null],[12,"custom_len","","",62,null],[12,"custom_data","","",62,null],[3,"ff_rumble_effect","","",null,null],[12,"strong_magnitude","","",63,null],[12,"weak_magnitude","","",63,null],[3,"ff_effect","","",null,null],[12,"type_","","",64,null],[12,"id","","",64,null],[12,"direction","","",64,null],[12,"trigger","","",64,null],[12,"replay","","",64,null],[12,"u","","",64,null],[3,"dl_phdr_info","","",null,null],[12,"dlpi_addr","","",65,null],[12,"dlpi_name","","",65,null],[12,"dlpi_phdr","","",65,null],[12,"dlpi_phnum","","",65,null],[12,"dlpi_adds","","",65,null],[12,"dlpi_subs","","",65,null],[12,"dlpi_tls_modid","","",65,null],[12,"dlpi_tls_data","","",65,null],[3,"Elf32_Phdr","","",null,null],[12,"p_type","","",66,null],[12,"p_offset","","",66,null],[12,"p_vaddr","","",66,null],[12,"p_paddr","","",66,null],[12,"p_filesz","","",66,null],[12,"p_memsz","","",66,null],[12,"p_flags","","",66,null],[12,"p_align","","",66,null],[3,"Elf64_Phdr","","",null,null],[12,"p_type","","",67,null],[12,"p_flags","","",67,null],[12,"p_offset","","",67,null],[12,"p_vaddr","","",67,null],[12,"p_paddr","","",67,null],[12,"p_filesz","","",67,null],[12,"p_memsz","","",67,null],[12,"p_align","","",67,null],[3,"ucred","","",null,null],[12,"pid","","",68,null],[12,"uid","","",68,null],[12,"gid","","",68,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",69,null],[12,"aio_lio_opcode","","",69,null],[12,"aio_reqprio","","",69,null],[12,"aio_buf","","",69,null],[12,"aio_nbytes","","",69,null],[12,"aio_sigevent","","",69,null],[12,"aio_offset","","",69,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",70,null],[12,"e_exit","","",70,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",71,null],[12,"tv_usec","","",71,null],[3,"utmpx","","",null,null],[12,"ut_type","","",72,null],[12,"ut_pid","","",72,null],[12,"ut_line","","",72,null],[12,"ut_id","","",72,null],[12,"ut_user","","",72,null],[12,"ut_host","","",72,null],[12,"ut_exit","","",72,null],[12,"ut_session","","",72,null],[12,"ut_tv","","",72,null],[12,"ut_addr_v6","","",72,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",73,null],[12,"sa_mask","","",73,null],[12,"sa_flags","","",73,null],[12,"sa_restorer","","",73,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",74,null],[12,"ss_flags","","",74,null],[12,"ss_size","","",74,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",75,null],[12,"si_errno","","",75,null],[12,"si_code","","",75,null],[12,"_pad","","",75,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",76,null],[12,"gl_pathv","","",76,null],[12,"gl_offs","","",76,null],[12,"gl_flags","","",76,null],[3,"statfs","","",null,null],[12,"f_type","","",77,null],[12,"f_bsize","","",77,null],[12,"f_blocks","","",77,null],[12,"f_bfree","","",77,null],[12,"f_bavail","","",77,null],[12,"f_files","","",77,null],[12,"f_ffree","","",77,null],[12,"f_fsid","","",77,null],[12,"f_namelen","","",77,null],[12,"f_frsize","","",77,null],[3,"msghdr","","",null,null],[12,"msg_name","","",78,null],[12,"msg_namelen","","",78,null],[12,"msg_iov","","",78,null],[12,"msg_iovlen","","",78,null],[12,"msg_control","","",78,null],[12,"msg_controllen","","",78,null],[12,"msg_flags","","",78,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",79,null],[12,"cmsg_level","","",79,null],[12,"cmsg_type","","",79,null],[3,"termios","","",null,null],[12,"c_iflag","","",80,null],[12,"c_oflag","","",80,null],[12,"c_cflag","","",80,null],[12,"c_lflag","","",80,null],[12,"c_line","","",80,null],[12,"c_cc","","",80,null],[12,"c_ispeed","","",80,null],[12,"c_ospeed","","",80,null],[3,"flock","","",null,null],[12,"l_type","","",81,null],[12,"l_whence","","",81,null],[12,"l_start","","",81,null],[12,"l_len","","",81,null],[12,"l_pid","","",81,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",82,null],[12,"loads","","",82,null],[12,"totalram","","",82,null],[12,"freeram","","",82,null],[12,"sharedram","","",82,null],[12,"bufferram","","",82,null],[12,"totalswap","","",82,null],[12,"freeswap","","",82,null],[12,"procs","","",82,null],[12,"pad","","",82,null],[12,"totalhigh","","",82,null],[12,"freehigh","","",82,null],[12,"mem_unit","","",82,null],[12,"_f","","",82,null],[3,"msqid_ds","","",null,null],[12,"msg_perm","","",83,null],[12,"msg_stime","","",83,null],[12,"msg_rtime","","",83,null],[12,"msg_ctime","","",83,null],[12,"msg_qnum","","",83,null],[12,"msg_qbytes","","",83,null],[12,"msg_lspid","","",83,null],[12,"msg_lrpid","","",83,null],[3,"stat","","",null,null],[12,"st_dev","","",84,null],[12,"st_ino","","",84,null],[12,"st_nlink","","",84,null],[12,"st_mode","","",84,null],[12,"st_uid","","",84,null],[12,"st_gid","","",84,null],[12,"st_rdev","","",84,null],[12,"st_size","","",84,null],[12,"st_blksize","","",84,null],[12,"st_blocks","","",84,null],[12,"st_atime","","",84,null],[12,"st_atime_nsec","","",84,null],[12,"st_mtime","","",84,null],[12,"st_mtime_nsec","","",84,null],[12,"st_ctime","","",84,null],[12,"st_ctime_nsec","","",84,null],[3,"stat64","","",null,null],[12,"st_dev","","",85,null],[12,"st_ino","","",85,null],[12,"st_nlink","","",85,null],[12,"st_mode","","",85,null],[12,"st_uid","","",85,null],[12,"st_gid","","",85,null],[12,"st_rdev","","",85,null],[12,"st_size","","",85,null],[12,"st_blksize","","",85,null],[12,"st_blocks","","",85,null],[12,"st_atime","","",85,null],[12,"st_atime_nsec","","",85,null],[12,"st_mtime","","",85,null],[12,"st_mtime_nsec","","",85,null],[12,"st_ctime","","",85,null],[12,"st_ctime_nsec","","",85,null],[3,"statfs64","","",null,null],[12,"f_type","","",86,null],[12,"f_bsize","","",86,null],[12,"f_blocks","","",86,null],[12,"f_bfree","","",86,null],[12,"f_bavail","","",86,null],[12,"f_files","","",86,null],[12,"f_ffree","","",86,null],[12,"f_fsid","","",86,null],[12,"f_namelen","","",86,null],[12,"f_frsize","","",86,null],[12,"f_flags","","",86,null],[12,"f_spare","","",86,null],[3,"statvfs64","","",null,null],[12,"f_bsize","","",87,null],[12,"f_frsize","","",87,null],[12,"f_blocks","","",87,null],[12,"f_bfree","","",87,null],[12,"f_bavail","","",87,null],[12,"f_files","","",87,null],[12,"f_ffree","","",87,null],[12,"f_favail","","",87,null],[12,"f_fsid","","",87,null],[12,"f_flag","","",87,null],[12,"f_namemax","","",87,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",88,null],[12,"exponent","","",88,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",89,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",90,null],[12,"swd","","",90,null],[12,"ftw","","",90,null],[12,"fop","","",90,null],[12,"rip","","",90,null],[12,"rdp","","",90,null],[12,"mxcsr","","",90,null],[12,"mxcr_mask","","",90,null],[12,"_st","","",90,null],[12,"_xmm","","",90,null],[3,"user_fpregs_struct","","",null,null],[12,"cwd","","",91,null],[12,"swd","","",91,null],[12,"ftw","","",91,null],[12,"fop","","",91,null],[12,"rip","","",91,null],[12,"rdp","","",91,null],[12,"mxcsr","","",91,null],[12,"mxcr_mask","","",91,null],[12,"st_space","","",91,null],[12,"xmm_space","","",91,null],[3,"user_regs_struct","","",null,null],[12,"r15","","",92,null],[12,"r14","","",92,null],[12,"r13","","",92,null],[12,"r12","","",92,null],[12,"rbp","","",92,null],[12,"rbx","","",92,null],[12,"r11","","",92,null],[12,"r10","","",92,null],[12,"r9","","",92,null],[12,"r8","","",92,null],[12,"rax","","",92,null],[12,"rcx","","",92,null],[12,"rdx","","",92,null],[12,"rsi","","",92,null],[12,"rdi","","",92,null],[12,"orig_rax","","",92,null],[12,"rip","","",92,null],[12,"cs","","",92,null],[12,"eflags","","",92,null],[12,"rsp","","",92,null],[12,"ss","","",92,null],[12,"fs_base","","",92,null],[12,"gs_base","","",92,null],[12,"ds","","",92,null],[12,"es","","",92,null],[12,"fs","","",92,null],[12,"gs","","",92,null],[3,"user","","",null,null],[12,"regs","","",93,null],[12,"u_fpvalid","","",93,null],[12,"i387","","",93,null],[12,"u_tsize","","",93,null],[12,"u_dsize","","",93,null],[12,"u_ssize","","",93,null],[12,"start_code","","",93,null],[12,"start_stack","","",93,null],[12,"signal","","",93,null],[12,"u_ar0","","",93,null],[12,"u_fpstate","","",93,null],[12,"magic","","",93,null],[12,"u_comm","","",93,null],[12,"u_debugreg","","",93,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",94,null],[12,"fpregs","","",94,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",95,null],[12,"uc_link","","",95,null],[12,"uc_stack","","",95,null],[12,"uc_mcontext","","",95,null],[12,"uc_sigmask","","",95,null],[3,"ipc_perm","","",null,null],[12,"__key","","",96,null],[12,"uid","","",96,null],[12,"gid","","",96,null],[12,"cuid","","",96,null],[12,"cgid","","",96,null],[12,"mode","","",96,null],[12,"__seq","","",96,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",97,null],[12,"shm_segsz","","",97,null],[12,"shm_atime","","",97,null],[12,"shm_dtime","","",97,null],[12,"shm_ctime","","",97,null],[12,"shm_cpid","","",97,null],[12,"shm_lpid","","",97,null],[12,"shm_nattch","","",97,null],[3,"termios2","","",null,null],[12,"c_iflag","","",98,null],[12,"c_oflag","","",98,null],[12,"c_cflag","","",98,null],[12,"c_lflag","","",98,null],[12,"c_line","","",98,null],[12,"c_cc","","",98,null],[12,"c_ispeed","","",98,null],[12,"c_ospeed","","",98,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"QCMD","","",null,{"inputs":[{"name":"c_int"},{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"major","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"minor","","",null,{"inputs":[{"name":"dev_t"}],"output":{"name":"c_uint"}}],[5,"makedev","","",null,{"inputs":[{"name":"c_uint"},{"name":"c_uint"}],"output":{"name":"dev_t"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"wcstombs","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"openat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchown","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"seteuid","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"times","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_exit","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_init","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_rwlockattr_init","","",null,null],[5,"pthread_rwlockattr_destroy","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"res_init","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"gmtime","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"uname","","",null,null],[5,"gethostname","","",null,null],[5,"getservbyname","","",null,null],[5,"getprotobyname","","",null,null],[5,"getprotobynumber","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"readlink","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"sigprocmask","","",null,null],[5,"sigpending","","",null,null],[5,"timegm","","",null,null],[5,"getsid","","",null,null],[5,"sysconf","","",null,null],[5,"mkfifo","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfmakeraw","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"cfsetspeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcgetsid","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkdtemp","","",null,null],[5,"tmpnam","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_settime","","",null,null],[5,"dirfd","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"pipe2","","",null,null],[5,"statfs","","",null,null],[5,"statfs64","","",null,null],[5,"fstatfs","","",null,null],[5,"fstatfs64","","",null,null],[5,"statvfs64","","",null,null],[5,"fstatvfs64","","",null,null],[5,"memrchr","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"fstatat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"openat64","","",null,null],[5,"pread64","","",null,null],[5,"preadv64","","",null,null],[5,"pwrite64","","",null,null],[5,"pwritev64","","",null,null],[5,"readdir64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"truncate64","","",null,null],[5,"fdopendir","","",null,null],[5,"mknodat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"pthread_condattr_setpshared","","",null,null],[5,"accept4","","",null,null],[5,"pthread_mutexattr_setpshared","","",null,null],[5,"pthread_rwlockattr_getpshared","","",null,null],[5,"pthread_rwlockattr_setpshared","","",null,null],[5,"ptsname_r","","",null,null],[5,"clearenv","","",null,null],[5,"waitid","","",null,null],[5,"setreuid","","",null,null],[5,"setregid","","",null,null],[5,"getresuid","","",null,null],[5,"getresgid","","",null,null],[5,"acct","","",null,null],[5,"brk","","",null,null],[5,"sbrk","","",null,null],[5,"vfork","","",null,null],[5,"setresgid","","",null,null],[5,"setresuid","","",null,null],[5,"wait4","","",null,null],[5,"openpty","","",null,null],[5,"execvpe","","",null,null],[5,"fexecve","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"endpwent","","",null,null],[5,"getpwent","","",null,null],[5,"setspent","","",null,null],[5,"endspent","","",null,null],[5,"getspent","","",null,null],[5,"getspnam","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"ftok","","",null,null],[5,"semget","","",null,null],[5,"semop","","",null,null],[5,"semctl","","",null,null],[5,"msgctl","","",null,null],[5,"msgget","","",null,null],[5,"msgrcv","","",null,null],[5,"msgsnd","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"timerfd_create","","",null,null],[5,"timerfd_gettime","","",null,null],[5,"timerfd_settime","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"pthread_setschedprio","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"setfsgid","","",null,null],[5,"setfsuid","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"mremap","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"madvise","","",null,null],[5,"msync","","",null,null],[5,"recvfrom","","",null,null],[5,"mkstemps","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"bind","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"getdomainname","","",null,null],[5,"setdomainname","","",null,null],[5,"vhangup","","",null,null],[5,"sendmmsg","","",null,null],[5,"recvmmsg","","",null,null],[5,"sync","","",null,null],[5,"syscall","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_wait","","",null,null],[5,"epoll_ctl","","",null,null],[5,"pthread_getschedparam","","",null,null],[5,"unshare","","",null,null],[5,"umount","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"tee","","",null,null],[5,"settimeofday","","",null,null],[5,"splice","","",null,null],[5,"eventfd","","",null,null],[5,"sched_rr_get_interval","","",null,null],[5,"sem_timedwait","","",null,null],[5,"sched_setparam","","",null,null],[5,"setns","","",null,null],[5,"swapoff","","",null,null],[5,"vmsplice","","",null,null],[5,"mount","","",null,null],[5,"personality","","",null,null],[5,"prctl","","",null,null],[5,"sched_getparam","","",null,null],[5,"ppoll","","",null,null],[5,"pthread_mutex_timedlock","","",null,null],[5,"clone","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"sethostname","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"pthread_condattr_getpshared","","",null,null],[5,"sysinfo","","",null,null],[5,"umount2","","",null,null],[5,"pthread_setschedparam","","",null,null],[5,"swapon","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sendfile","","",null,null],[5,"sigsuspend","","",null,null],[5,"getgrgid_r","","",null,null],[5,"sigaltstack","","",null,null],[5,"sem_close","","",null,null],[5,"getdtablesize","","",null,null],[5,"getgrnam_r","","",null,null],[5,"initgroups","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"sem_open","","",null,null],[5,"getgrnam","","",null,null],[5,"pthread_cancel","","",null,null],[5,"pthread_kill","","",null,null],[5,"sem_unlink","","",null,null],[5,"daemon","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"sigwait","","",null,null],[5,"pthread_atfork","","",null,null],[5,"getgrgid","","",null,null],[5,"getgrouplist","","",null,null],[5,"pthread_mutexattr_getpshared","","",null,null],[5,"popen","","",null,null],[5,"faccessat","","",null,null],[5,"pthread_create","","",null,null],[5,"dl_iterate_phdr","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"getpt","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"pthread_rwlockattr_getkind_np","","",null,null],[5,"pthread_rwlockattr_setkind_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[5,"iopl","","",null,null],[5,"ioperm","","",null,null],[5,"sysctl","","",null,null],[11,"clone","","",84,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",85,{"inputs":[{"name":"self"}],"output":{"name":"stat64"}}],[11,"clone","","",86,{"inputs":[{"name":"self"}],"output":{"name":"statfs64"}}],[11,"clone","","",87,{"inputs":[{"name":"self"}],"output":{"name":"statvfs64"}}],[11,"clone","","",99,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",88,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpxreg"}}],[11,"clone","","",89,{"inputs":[{"name":"self"}],"output":{"name":"_libc_xmmreg"}}],[11,"clone","","",90,{"inputs":[{"name":"self"}],"output":{"name":"_libc_fpstate"}}],[11,"clone","","",91,{"inputs":[{"name":"self"}],"output":{"name":"user_fpregs_struct"}}],[11,"clone","","",92,{"inputs":[{"name":"self"}],"output":{"name":"user_regs_struct"}}],[11,"clone","","",93,{"inputs":[{"name":"self"}],"output":{"name":"user"}}],[11,"clone","","",94,{"inputs":[{"name":"self"}],"output":{"name":"mcontext_t"}}],[11,"clone","","",95,{"inputs":[{"name":"self"}],"output":{"name":"ucontext_t"}}],[11,"clone","","",96,{"inputs":[{"name":"self"}],"output":{"name":"ipc_perm"}}],[11,"clone","","",97,{"inputs":[{"name":"self"}],"output":{"name":"shmid_ds"}}],[11,"clone","","",98,{"inputs":[{"name":"self"}],"output":{"name":"termios2"}}],[11,"clone","","",100,{"inputs":[{"name":"self"}],"output":{"name":"sigset_t"}}],[11,"clone","","",82,{"inputs":[{"name":"self"}],"output":{"name":"sysinfo"}}],[11,"clone","","",83,{"inputs":[{"name":"self"}],"output":{"name":"msqid_ds"}}],[11,"clone","","",69,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",70,{"inputs":[{"name":"self"}],"output":{"name":"__exit_status"}}],[11,"clone","","",71,{"inputs":[{"name":"self"}],"output":{"name":"__timeval"}}],[11,"clone","","",72,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",73,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",74,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",75,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",76,{"inputs":[{"name":"self"}],"output":{"name":"glob64_t"}}],[11,"clone","","",77,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",78,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",79,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",80,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",81,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",101,{"inputs":[{"name":"self"}],"output":{"name":"sem_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"dirent64"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"rlimit64"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",102,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",103,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",104,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",105,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlockattr_t"}}],[11,"clone","","",106,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",107,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"spwd"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"signalfd_siginfo"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"itimerspec"}}],[11,"clone","","",108,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"mq_attr"}}],[11,"clone","","",109,{"inputs":[{"name":"self"}],"output":{"name":"cpu_set_t"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"msginfo"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"mmsghdr"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sembuf"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"input_event"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"input_id"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"input_absinfo"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"input_keymap_entry"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"input_mask"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"ff_replay"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ff_trigger"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"ff_envelope"}}],[11,"clone","","",59,{"inputs":[{"name":"self"}],"output":{"name":"ff_constant_effect"}}],[11,"clone","","",60,{"inputs":[{"name":"self"}],"output":{"name":"ff_ramp_effect"}}],[11,"clone","","",61,{"inputs":[{"name":"self"}],"output":{"name":"ff_condition_effect"}}],[11,"clone","","",62,{"inputs":[{"name":"self"}],"output":{"name":"ff_periodic_effect"}}],[11,"clone","","",63,{"inputs":[{"name":"self"}],"output":{"name":"ff_rumble_effect"}}],[11,"clone","","",64,{"inputs":[{"name":"self"}],"output":{"name":"ff_effect"}}],[11,"clone","","",65,{"inputs":[{"name":"self"}],"output":{"name":"dl_phdr_info"}}],[11,"clone","","",66,{"inputs":[{"name":"self"}],"output":{"name":"elf32_phdr"}}],[11,"clone","","",67,{"inputs":[{"name":"self"}],"output":{"name":"elf64_phdr"}}],[11,"clone","","",68,{"inputs":[{"name":"self"}],"output":{"name":"ucred"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_nl"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_ll"}}],[11,"clone","","",110,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sched_param"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"epoll_event"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"itimerval"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"tms"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"servent"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"protoent"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"clockid_t","","",null,null],[6,"key_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"idtype_t","","",null,null],[6,"loff_t","","",null,null],[6,"__u8","","",null,null],[6,"__u16","","",null,null],[6,"__s16","","",null,null],[6,"__u32","","",null,null],[6,"__s32","","",null,null],[6,"Elf32_Half","","",null,null],[6,"Elf32_Word","","",null,null],[6,"Elf32_Off","","",null,null],[6,"Elf32_Addr","","",null,null],[6,"Elf64_Half","","",null,null],[6,"Elf64_Word","","",null,null],[6,"Elf64_Off","","",null,null],[6,"Elf64_Addr","","",null,null],[6,"Elf64_Xword","","",null,null],[6,"__priority_which_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"msgqnum_t","","",null,null],[6,"msglen_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"__u64","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"IFNAMSIZ","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"IPPROTO_ICMP","","",null,null],[17,"IPPROTO_ICMPV6","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_UDP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"INADDR_LOOPBACK","","",null,null],[17,"INADDR_ANY","","",null,null],[17,"INADDR_BROADCAST","","",null,null],[17,"INADDR_NONE","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_CANCELLK","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"F_ADD_SEALS","","",null,null],[17,"F_GET_SEALS","","",null,null],[17,"F_SEAL_SEAL","","",null,null],[17,"F_SEAL_SHRINK","","",null,null],[17,"F_SEAL_GROW","","",null,null],[17,"F_SEAL_WRITE","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"SCM_RIGHTS","","",null,null],[17,"SCM_CREDENTIALS","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"MADV_SOFT_OFFLINE","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"SOL_IP","","",null,null],[17,"SOL_TCP","","",null,null],[17,"SOL_UDP","","",null,null],[17,"SOL_IPV6","","",null,null],[17,"SOL_ICMPV6","","",null,null],[17,"SOL_RAW","","",null,null],[17,"SOL_DECNET","","",null,null],[17,"SOL_X25","","",null,null],[17,"SOL_PACKET","","",null,null],[17,"SOL_ATM","","",null,null],[17,"SOL_AAL","","",null,null],[17,"SOL_IRDA","","",null,null],[17,"SOL_NETBEUI","","",null,null],[17,"SOL_LLC","","",null,null],[17,"SOL_DCCP","","",null,null],[17,"SOL_NETLINK","","",null,null],[17,"SOL_TIPC","","",null,null],[17,"AF_UNSPEC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_LOCAL","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_AX25","","",null,null],[17,"AF_IPX","","",null,null],[17,"AF_APPLETALK","","",null,null],[17,"AF_NETROM","","",null,null],[17,"AF_BRIDGE","","",null,null],[17,"AF_ATMPVC","","",null,null],[17,"AF_X25","","",null,null],[17,"AF_INET6","","",null,null],[17,"AF_ROSE","","",null,null],[17,"AF_DECnet","","",null,null],[17,"AF_NETBEUI","","",null,null],[17,"AF_SECURITY","","",null,null],[17,"AF_KEY","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"AF_ROUTE","","",null,null],[17,"AF_PACKET","","",null,null],[17,"AF_ASH","","",null,null],[17,"AF_ECONET","","",null,null],[17,"AF_ATMSVC","","",null,null],[17,"AF_RDS","","",null,null],[17,"AF_SNA","","",null,null],[17,"AF_IRDA","","",null,null],[17,"AF_PPPOX","","",null,null],[17,"AF_WANPIPE","","",null,null],[17,"AF_LLC","","",null,null],[17,"AF_CAN","","",null,null],[17,"AF_TIPC","","",null,null],[17,"AF_BLUETOOTH","","",null,null],[17,"AF_IUCV","","",null,null],[17,"AF_RXRPC","","",null,null],[17,"AF_ISDN","","",null,null],[17,"AF_PHONET","","",null,null],[17,"AF_IEEE802154","","",null,null],[17,"AF_CAIF","","",null,null],[17,"AF_ALG","","",null,null],[17,"PF_UNSPEC","","",null,null],[17,"PF_UNIX","","",null,null],[17,"PF_LOCAL","","",null,null],[17,"PF_INET","","",null,null],[17,"PF_AX25","","",null,null],[17,"PF_IPX","","",null,null],[17,"PF_APPLETALK","","",null,null],[17,"PF_NETROM","","",null,null],[17,"PF_BRIDGE","","",null,null],[17,"PF_ATMPVC","","",null,null],[17,"PF_X25","","",null,null],[17,"PF_INET6","","",null,null],[17,"PF_ROSE","","",null,null],[17,"PF_DECnet","","",null,null],[17,"PF_NETBEUI","","",null,null],[17,"PF_SECURITY","","",null,null],[17,"PF_KEY","","",null,null],[17,"PF_NETLINK","","",null,null],[17,"PF_ROUTE","","",null,null],[17,"PF_PACKET","","",null,null],[17,"PF_ASH","","",null,null],[17,"PF_ECONET","","",null,null],[17,"PF_ATMSVC","","",null,null],[17,"PF_RDS","","",null,null],[17,"PF_SNA","","",null,null],[17,"PF_IRDA","","",null,null],[17,"PF_PPPOX","","",null,null],[17,"PF_WANPIPE","","",null,null],[17,"PF_LLC","","",null,null],[17,"PF_CAN","","",null,null],[17,"PF_TIPC","","",null,null],[17,"PF_BLUETOOTH","","",null,null],[17,"PF_IUCV","","",null,null],[17,"PF_RXRPC","","",null,null],[17,"PF_ISDN","","",null,null],[17,"PF_PHONET","","",null,null],[17,"PF_IEEE802154","","",null,null],[17,"PF_CAIF","","",null,null],[17,"PF_ALG","","",null,null],[17,"SOMAXCONN","","",null,null],[17,"MSG_OOB","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"MSG_DONTROUTE","","",null,null],[17,"MSG_CTRUNC","","",null,null],[17,"MSG_TRUNC","","",null,null],[17,"MSG_DONTWAIT","","",null,null],[17,"MSG_EOR","","",null,null],[17,"MSG_WAITALL","","",null,null],[17,"MSG_FIN","","",null,null],[17,"MSG_SYN","","",null,null],[17,"MSG_CONFIRM","","",null,null],[17,"MSG_RST","","",null,null],[17,"MSG_ERRQUEUE","","",null,null],[17,"MSG_NOSIGNAL","","",null,null],[17,"MSG_MORE","","",null,null],[17,"MSG_WAITFORONE","","",null,null],[17,"MSG_FASTOPEN","","",null,null],[17,"MSG_CMSG_CLOEXEC","","",null,null],[17,"SCM_TIMESTAMP","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_RDM","","",null,null],[17,"IP_MULTICAST_IF","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"OCRNL","","",null,null],[17,"ONOCR","","",null,null],[17,"ONLRET","","",null,null],[17,"OFILL","","",null,null],[17,"OFDEL","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"CLONE_NEWCGROUP","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"PTRACE_O_TRACESYSGOOD","","",null,null],[17,"PTRACE_O_TRACEFORK","","",null,null],[17,"PTRACE_O_TRACEVFORK","","",null,null],[17,"PTRACE_O_TRACECLONE","","",null,null],[17,"PTRACE_O_TRACEEXEC","","",null,null],[17,"PTRACE_O_TRACEVFORKDONE","","",null,null],[17,"PTRACE_O_TRACEEXIT","","",null,null],[17,"PTRACE_O_TRACESECCOMP","","",null,null],[17,"PTRACE_O_EXITKILL","","",null,null],[17,"PTRACE_O_SUSPEND_SECCOMP","","",null,null],[17,"PTRACE_O_MASK","","",null,null],[17,"PTRACE_EVENT_FORK","","",null,null],[17,"PTRACE_EVENT_VFORK","","",null,null],[17,"PTRACE_EVENT_CLONE","","",null,null],[17,"PTRACE_EVENT_EXEC","","",null,null],[17,"PTRACE_EVENT_VFORK_DONE","","",null,null],[17,"PTRACE_EVENT_EXIT","","",null,null],[17,"PTRACE_EVENT_SECCOMP","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"AT_REMOVEDIR","","",null,null],[17,"AT_SYMLINK_FOLLOW","","",null,null],[17,"AT_NO_AUTOMOUNT","","",null,null],[17,"AT_EMPTY_PATH","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"UTIME_OMIT","","",null,null],[17,"UTIME_NOW","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_PC_SYNC_IO","","",null,null],[17,"_PC_ASYNC_IO","","",null,null],[17,"_PC_PRIO_IO","","",null,null],[17,"_PC_SOCK_MAXBUF","","",null,null],[17,"_PC_FILESIZEBITS","","",null,null],[17,"_PC_REC_INCR_XFER_SIZE","","",null,null],[17,"_PC_REC_MAX_XFER_SIZE","","",null,null],[17,"_PC_REC_MIN_XFER_SIZE","","",null,null],[17,"_PC_REC_XFER_ALIGN","","",null,null],[17,"_PC_ALLOC_SIZE_MIN","","",null,null],[17,"_PC_SYMLINK_MAX","","",null,null],[17,"_PC_2_SYMLINKS","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_UIO_MAXIOV","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_PHYS_PAGES","","",null,null],[17,"_SC_AVPHYS_PAGES","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XOPEN_XPG2","","",null,null],[17,"_SC_XOPEN_XPG3","","",null,null],[17,"_SC_XOPEN_XPG4","","",null,null],[17,"_SC_NZERO","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_STREAMS","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_V7_ILP32_OFF32","","",null,null],[17,"_SC_V7_ILP32_OFFBIG","","",null,null],[17,"_SC_V7_LP64_OFF64","","",null,null],[17,"_SC_V7_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_ROBUST_PRIO_PROTECT","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"IFF_LOWER_UP","","",null,null],[17,"IFF_DORMANT","","",null,null],[17,"IFF_ECHO","","",null,null],[17,"TUN_READQ_SIZE","","",null,null],[17,"TUN_TUN_DEV","","",null,null],[17,"TUN_TAP_DEV","","",null,null],[17,"TUN_TYPE_MASK","","",null,null],[17,"IFF_TUN","","",null,null],[17,"IFF_TAP","","",null,null],[17,"IFF_NO_PI","","",null,null],[17,"IFF_ONE_QUEUE","","",null,null],[17,"IFF_VNET_HDR","","",null,null],[17,"IFF_TUN_EXCL","","",null,null],[17,"IFF_MULTI_QUEUE","","",null,null],[17,"IFF_ATTACH_QUEUE","","",null,null],[17,"IFF_DETACH_QUEUE","","",null,null],[17,"IFF_PERSIST","","",null,null],[17,"IFF_NOFILTER","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"PTHREAD_PROCESS_PRIVATE","","",null,null],[17,"PTHREAD_PROCESS_SHARED","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"RENAME_NOREPLACE","","",null,null],[17,"RENAME_EXCHANGE","","",null,null],[17,"RENAME_WHITEOUT","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPPROTO_HOPOPTS","","Hop-by-hop option header",null,null],[17,"IPPROTO_IGMP","","group mgmt protocol",null,null],[17,"IPPROTO_IPIP","","for compatibility",null,null],[17,"IPPROTO_EGP","","exterior gateway protocol",null,null],[17,"IPPROTO_PUP","","pup",null,null],[17,"IPPROTO_IDP","","xns idp",null,null],[17,"IPPROTO_TP","","tp-4 w/ class negotiation",null,null],[17,"IPPROTO_DCCP","","DCCP",null,null],[17,"IPPROTO_ROUTING","","IP6 routing header",null,null],[17,"IPPROTO_FRAGMENT","","IP6 fragmentation header",null,null],[17,"IPPROTO_RSVP","","resource reservation",null,null],[17,"IPPROTO_GRE","","General Routing Encap.",null,null],[17,"IPPROTO_ESP","","IP6 Encap Sec. Payload",null,null],[17,"IPPROTO_AH","","IP6 Auth Header",null,null],[17,"IPPROTO_NONE","","IP6 no next header",null,null],[17,"IPPROTO_DSTOPTS","","IP6 destination option",null,null],[17,"IPPROTO_MTP","","",null,null],[17,"IPPROTO_BEETPH","","",null,null],[17,"IPPROTO_ENCAP","","encapsulation header",null,null],[17,"IPPROTO_PIM","","Protocol indep. multicast",null,null],[17,"IPPROTO_COMP","","IP Payload Comp. Protocol",null,null],[17,"IPPROTO_SCTP","","SCTP",null,null],[17,"IPPROTO_MH","","",null,null],[17,"IPPROTO_UDPLITE","","",null,null],[17,"IPPROTO_MPLS","","",null,null],[17,"IPPROTO_RAW","","raw IP packet",null,null],[17,"IPPROTO_MAX","","",null,null],[17,"AF_IB","","",null,null],[17,"AF_MPLS","","",null,null],[17,"AF_NFC","","",null,null],[17,"AF_VSOCK","","",null,null],[17,"PF_IB","","",null,null],[17,"PF_MPLS","","",null,null],[17,"PF_NFC","","",null,null],[17,"PF_VSOCK","","",null,null],[17,"IPC_PRIVATE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"MSG_STAT","","",null,null],[17,"MSG_INFO","","",null,null],[17,"MSG_NOERROR","","",null,null],[17,"MSG_EXCEPT","","",null,null],[17,"MSG_COPY","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLEXCLUSIVE","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"AI_PASSIVE","","",null,null],[17,"AI_CANONNAME","","",null,null],[17,"AI_NUMERICHOST","","",null,null],[17,"AI_V4MAPPED","","",null,null],[17,"AI_ALL","","",null,null],[17,"AI_ADDRCONFIG","","",null,null],[17,"AI_NUMERICSERV","","",null,null],[17,"EAI_BADFLAGS","","",null,null],[17,"EAI_NONAME","","",null,null],[17,"EAI_AGAIN","","",null,null],[17,"EAI_FAIL","","",null,null],[17,"EAI_NODATA","","",null,null],[17,"EAI_FAMILY","","",null,null],[17,"EAI_SOCKTYPE","","",null,null],[17,"EAI_SERVICE","","",null,null],[17,"EAI_MEMORY","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"EAI_OVERFLOW","","",null,null],[17,"NI_NUMERICHOST","","",null,null],[17,"NI_NUMERICSERV","","",null,null],[17,"NI_NOFQDN","","",null,null],[17,"NI_NAMEREQD","","",null,null],[17,"NI_DGRAM","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"MREMAP_MAYMOVE","","",null,null],[17,"MREMAP_FIXED","","",null,null],[17,"PR_SET_PDEATHSIG","","",null,null],[17,"PR_GET_PDEATHSIG","","",null,null],[17,"PR_GET_DUMPABLE","","",null,null],[17,"PR_SET_DUMPABLE","","",null,null],[17,"PR_GET_UNALIGN","","",null,null],[17,"PR_SET_UNALIGN","","",null,null],[17,"PR_UNALIGN_NOPRINT","","",null,null],[17,"PR_UNALIGN_SIGBUS","","",null,null],[17,"PR_GET_KEEPCAPS","","",null,null],[17,"PR_SET_KEEPCAPS","","",null,null],[17,"PR_GET_FPEMU","","",null,null],[17,"PR_SET_FPEMU","","",null,null],[17,"PR_FPEMU_NOPRINT","","",null,null],[17,"PR_FPEMU_SIGFPE","","",null,null],[17,"PR_GET_FPEXC","","",null,null],[17,"PR_SET_FPEXC","","",null,null],[17,"PR_FP_EXC_SW_ENABLE","","",null,null],[17,"PR_FP_EXC_DIV","","",null,null],[17,"PR_FP_EXC_OVF","","",null,null],[17,"PR_FP_EXC_UND","","",null,null],[17,"PR_FP_EXC_RES","","",null,null],[17,"PR_FP_EXC_INV","","",null,null],[17,"PR_FP_EXC_DISABLED","","",null,null],[17,"PR_FP_EXC_NONRECOV","","",null,null],[17,"PR_FP_EXC_ASYNC","","",null,null],[17,"PR_FP_EXC_PRECISE","","",null,null],[17,"PR_GET_TIMING","","",null,null],[17,"PR_SET_TIMING","","",null,null],[17,"PR_TIMING_STATISTICAL","","",null,null],[17,"PR_TIMING_TIMESTAMP","","",null,null],[17,"PR_SET_NAME","","",null,null],[17,"PR_GET_NAME","","",null,null],[17,"PR_GET_ENDIAN","","",null,null],[17,"PR_SET_ENDIAN","","",null,null],[17,"PR_ENDIAN_BIG","","",null,null],[17,"PR_ENDIAN_LITTLE","","",null,null],[17,"PR_ENDIAN_PPC_LITTLE","","",null,null],[17,"PR_GET_SECCOMP","","",null,null],[17,"PR_SET_SECCOMP","","",null,null],[17,"PR_CAPBSET_READ","","",null,null],[17,"PR_CAPBSET_DROP","","",null,null],[17,"PR_GET_TSC","","",null,null],[17,"PR_SET_TSC","","",null,null],[17,"PR_TSC_ENABLE","","",null,null],[17,"PR_TSC_SIGSEGV","","",null,null],[17,"PR_GET_SECUREBITS","","",null,null],[17,"PR_SET_SECUREBITS","","",null,null],[17,"PR_SET_TIMERSLACK","","",null,null],[17,"PR_GET_TIMERSLACK","","",null,null],[17,"PR_TASK_PERF_EVENTS_DISABLE","","",null,null],[17,"PR_TASK_PERF_EVENTS_ENABLE","","",null,null],[17,"PR_MCE_KILL","","",null,null],[17,"PR_MCE_KILL_CLEAR","","",null,null],[17,"PR_MCE_KILL_SET","","",null,null],[17,"PR_MCE_KILL_LATE","","",null,null],[17,"PR_MCE_KILL_EARLY","","",null,null],[17,"PR_MCE_KILL_DEFAULT","","",null,null],[17,"PR_MCE_KILL_GET","","",null,null],[17,"PR_SET_MM","","",null,null],[17,"PR_SET_MM_START_CODE","","",null,null],[17,"PR_SET_MM_END_CODE","","",null,null],[17,"PR_SET_MM_START_DATA","","",null,null],[17,"PR_SET_MM_END_DATA","","",null,null],[17,"PR_SET_MM_START_STACK","","",null,null],[17,"PR_SET_MM_START_BRK","","",null,null],[17,"PR_SET_MM_BRK","","",null,null],[17,"PR_SET_MM_ARG_START","","",null,null],[17,"PR_SET_MM_ARG_END","","",null,null],[17,"PR_SET_MM_ENV_START","","",null,null],[17,"PR_SET_MM_ENV_END","","",null,null],[17,"PR_SET_MM_AUXV","","",null,null],[17,"PR_SET_MM_EXE_FILE","","",null,null],[17,"PR_SET_MM_MAP","","",null,null],[17,"PR_SET_MM_MAP_SIZE","","",null,null],[17,"PR_SET_PTRACER","","",null,null],[17,"PR_SET_CHILD_SUBREAPER","","",null,null],[17,"PR_GET_CHILD_SUBREAPER","","",null,null],[17,"PR_SET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_NO_NEW_PRIVS","","",null,null],[17,"PR_GET_TID_ADDRESS","","",null,null],[17,"PR_SET_THP_DISABLE","","",null,null],[17,"PR_GET_THP_DISABLE","","",null,null],[17,"PR_MPX_ENABLE_MANAGEMENT","","",null,null],[17,"PR_MPX_DISABLE_MANAGEMENT","","",null,null],[17,"PR_SET_FP_MODE","","",null,null],[17,"PR_GET_FP_MODE","","",null,null],[17,"PR_FP_MODE_FR","","",null,null],[17,"PR_FP_MODE_FRE","","",null,null],[17,"PR_CAP_AMBIENT","","",null,null],[17,"PR_CAP_AMBIENT_IS_SET","","",null,null],[17,"PR_CAP_AMBIENT_RAISE","","",null,null],[17,"PR_CAP_AMBIENT_LOWER","","",null,null],[17,"PR_CAP_AMBIENT_CLEAR_ALL","","",null,null],[17,"GRND_NONBLOCK","","",null,null],[17,"GRND_RANDOM","","",null,null],[17,"SECCOMP_MODE_DISABLED","","",null,null],[17,"SECCOMP_MODE_STRICT","","",null,null],[17,"SECCOMP_MODE_FILTER","","",null,null],[17,"ITIMER_REAL","","",null,null],[17,"ITIMER_VIRTUAL","","",null,null],[17,"ITIMER_PROF","","",null,null],[17,"TFD_CLOEXEC","","",null,null],[17,"TFD_NONBLOCK","","",null,null],[17,"TFD_TIMER_ABSTIME","","",null,null],[17,"XATTR_CREATE","","",null,null],[17,"XATTR_REPLACE","","",null,null],[17,"_POSIX_VDISABLE","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"FALLOC_FL_COLLAPSE_RANGE","","",null,null],[17,"FALLOC_FL_ZERO_RANGE","","",null,null],[17,"FALLOC_FL_INSERT_RANGE","","",null,null],[17,"FALLOC_FL_UNSHARE_RANGE","","",null,null],[17,"ENOATTR","","",null,null],[17,"SO_ORIGINAL_DST","","",null,null],[17,"IUTF8","","",null,null],[17,"CMSPAR","","",null,null],[17,"MFD_CLOEXEC","","",null,null],[17,"MFD_ALLOW_SEALING","","",null,null],[17,"PT_NULL","","",null,null],[17,"PT_LOAD","","",null,null],[17,"PT_DYNAMIC","","",null,null],[17,"PT_INTERP","","",null,null],[17,"PT_NOTE","","",null,null],[17,"PT_SHLIB","","",null,null],[17,"PT_PHDR","","",null,null],[17,"PT_TLS","","",null,null],[17,"PT_NUM","","",null,null],[17,"PT_LOOS","","",null,null],[17,"PT_GNU_EH_FRAME","","",null,null],[17,"PT_GNU_STACK","","",null,null],[17,"PT_GNU_RELRO","","",null,null],[17,"ETH_ALEN","","",null,null],[17,"ETH_HLEN","","",null,null],[17,"ETH_ZLEN","","",null,null],[17,"ETH_DATA_LEN","","",null,null],[17,"ETH_FRAME_LEN","","",null,null],[17,"ETH_FCS_LEN","","",null,null],[17,"ETH_P_LOOP","","",null,null],[17,"ETH_P_PUP","","",null,null],[17,"ETH_P_PUPAT","","",null,null],[17,"ETH_P_IP","","",null,null],[17,"ETH_P_X25","","",null,null],[17,"ETH_P_ARP","","",null,null],[17,"ETH_P_BPQ","","",null,null],[17,"ETH_P_IEEEPUP","","",null,null],[17,"ETH_P_IEEEPUPAT","","",null,null],[17,"ETH_P_BATMAN","","",null,null],[17,"ETH_P_DEC","","",null,null],[17,"ETH_P_DNA_DL","","",null,null],[17,"ETH_P_DNA_RC","","",null,null],[17,"ETH_P_DNA_RT","","",null,null],[17,"ETH_P_LAT","","",null,null],[17,"ETH_P_DIAG","","",null,null],[17,"ETH_P_CUST","","",null,null],[17,"ETH_P_SCA","","",null,null],[17,"ETH_P_TEB","","",null,null],[17,"ETH_P_RARP","","",null,null],[17,"ETH_P_ATALK","","",null,null],[17,"ETH_P_AARP","","",null,null],[17,"ETH_P_8021Q","","",null,null],[17,"ETH_P_IPX","","",null,null],[17,"ETH_P_IPV6","","",null,null],[17,"ETH_P_PAUSE","","",null,null],[17,"ETH_P_SLOW","","",null,null],[17,"ETH_P_WCCP","","",null,null],[17,"ETH_P_MPLS_UC","","",null,null],[17,"ETH_P_MPLS_MC","","",null,null],[17,"ETH_P_ATMMPOA","","",null,null],[17,"ETH_P_PPP_DISC","","",null,null],[17,"ETH_P_PPP_SES","","",null,null],[17,"ETH_P_LINK_CTL","","",null,null],[17,"ETH_P_ATMFATE","","",null,null],[17,"ETH_P_PAE","","",null,null],[17,"ETH_P_AOE","","",null,null],[17,"ETH_P_8021AD","","",null,null],[17,"ETH_P_802_EX1","","",null,null],[17,"ETH_P_TIPC","","",null,null],[17,"ETH_P_MACSEC","","",null,null],[17,"ETH_P_8021AH","","",null,null],[17,"ETH_P_MVRP","","",null,null],[17,"ETH_P_1588","","",null,null],[17,"ETH_P_PRP","","",null,null],[17,"ETH_P_FCOE","","",null,null],[17,"ETH_P_TDLS","","",null,null],[17,"ETH_P_FIP","","",null,null],[17,"ETH_P_80221","","",null,null],[17,"ETH_P_LOOPBACK","","",null,null],[17,"ETH_P_QINQ1","","",null,null],[17,"ETH_P_QINQ2","","",null,null],[17,"ETH_P_QINQ3","","",null,null],[17,"ETH_P_EDSA","","",null,null],[17,"ETH_P_AF_IUCV","","",null,null],[17,"ETH_P_802_3_MIN","","",null,null],[17,"ETH_P_802_3","","",null,null],[17,"ETH_P_AX25","","",null,null],[17,"ETH_P_ALL","","",null,null],[17,"ETH_P_802_2","","",null,null],[17,"ETH_P_SNAP","","",null,null],[17,"ETH_P_DDCMP","","",null,null],[17,"ETH_P_WAN_PPP","","",null,null],[17,"ETH_P_PPP_MP","","",null,null],[17,"ETH_P_LOCALTALK","","",null,null],[17,"ETH_P_CANFD","","",null,null],[17,"ETH_P_PPPTALK","","",null,null],[17,"ETH_P_TR_802_2","","",null,null],[17,"ETH_P_MOBITEX","","",null,null],[17,"ETH_P_CONTROL","","",null,null],[17,"ETH_P_IRDA","","",null,null],[17,"ETH_P_ECONET","","",null,null],[17,"ETH_P_HDLC","","",null,null],[17,"ETH_P_ARCNET","","",null,null],[17,"ETH_P_DSA","","",null,null],[17,"ETH_P_TRAILER","","",null,null],[17,"ETH_P_PHONET","","",null,null],[17,"ETH_P_IEEE802154","","",null,null],[17,"ETH_P_CAIF","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"SOL_RXRPC","","",null,null],[17,"SOL_PPPOL2TP","","",null,null],[17,"SOL_BLUETOOTH","","",null,null],[17,"SOL_PNPIPE","","",null,null],[17,"SOL_RDS","","",null,null],[17,"SOL_IUCV","","",null,null],[17,"SOL_CAIF","","",null,null],[17,"SOL_ALG","","",null,null],[17,"SOL_NFC","","",null,null],[17,"MSG_TRYHARD","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOCK_DCCP","","",null,null],[17,"SOCK_PACKET","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"DCCP_SOCKOPT_PACKET_SIZE","","",null,null],[17,"DCCP_SOCKOPT_SERVICE","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_L","","",null,null],[17,"DCCP_SOCKOPT_CHANGE_R","","",null,null],[17,"DCCP_SOCKOPT_GET_CUR_MPS","","",null,null],[17,"DCCP_SOCKOPT_SERVER_TIMEWAIT","","",null,null],[17,"DCCP_SOCKOPT_SEND_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_RECV_CSCOV","","",null,null],[17,"DCCP_SOCKOPT_AVAILABLE_CCIDS","","",null,null],[17,"DCCP_SOCKOPT_CCID","","",null,null],[17,"DCCP_SOCKOPT_TX_CCID","","",null,null],[17,"DCCP_SOCKOPT_RX_CCID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_ID","","",null,null],[17,"DCCP_SOCKOPT_QPOLICY_TXQLEN","","",null,null],[17,"DCCP_SOCKOPT_CCID_RX_INFO","","",null,null],[17,"DCCP_SOCKOPT_CCID_TX_INFO","","",null,null],[17,"DCCP_SERVICE_LIST_MAX_LEN","","maximum number of services provided on the same listening port",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGEV_THREAD_ID","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_EQUIV_CLASS_MAX","","",null,null],[17,"_SC_CHARCLASS_NAME_MAX","","",null,null],[17,"_SC_PII","","",null,null],[17,"_SC_PII_XTI","","",null,null],[17,"_SC_PII_SOCKET","","",null,null],[17,"_SC_PII_INTERNET","","",null,null],[17,"_SC_PII_OSI","","",null,null],[17,"_SC_POLL","","",null,null],[17,"_SC_SELECT","","",null,null],[17,"_SC_PII_INTERNET_STREAM","","",null,null],[17,"_SC_PII_INTERNET_DGRAM","","",null,null],[17,"_SC_PII_OSI_COTS","","",null,null],[17,"_SC_PII_OSI_CLTS","","",null,null],[17,"_SC_PII_OSI_M","","",null,null],[17,"_SC_T_IOV_MAX","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"_SC_CHAR_BIT","","",null,null],[17,"_SC_CHAR_MAX","","",null,null],[17,"_SC_CHAR_MIN","","",null,null],[17,"_SC_INT_MAX","","",null,null],[17,"_SC_INT_MIN","","",null,null],[17,"_SC_LONG_BIT","","",null,null],[17,"_SC_WORD_BIT","","",null,null],[17,"_SC_MB_LEN_MAX","","",null,null],[17,"_SC_SSIZE_MAX","","",null,null],[17,"_SC_SCHAR_MAX","","",null,null],[17,"_SC_SCHAR_MIN","","",null,null],[17,"_SC_SHRT_MAX","","",null,null],[17,"_SC_SHRT_MIN","","",null,null],[17,"_SC_UCHAR_MAX","","",null,null],[17,"_SC_UINT_MAX","","",null,null],[17,"_SC_ULONG_MAX","","",null,null],[17,"_SC_USHRT_MAX","","",null,null],[17,"_SC_NL_ARGMAX","","",null,null],[17,"_SC_NL_LANGMAX","","",null,null],[17,"_SC_NL_MSGMAX","","",null,null],[17,"_SC_NL_NMAX","","",null,null],[17,"_SC_NL_SETMAX","","",null,null],[17,"_SC_NL_TEXTMAX","","",null,null],[17,"_SC_BASE","","",null,null],[17,"_SC_C_LANG_SUPPORT","","",null,null],[17,"_SC_C_LANG_SUPPORT_R","","",null,null],[17,"_SC_DEVICE_IO","","",null,null],[17,"_SC_DEVICE_SPECIFIC","","",null,null],[17,"_SC_DEVICE_SPECIFIC_R","","",null,null],[17,"_SC_FD_MGMT","","",null,null],[17,"_SC_FIFO","","",null,null],[17,"_SC_PIPE","","",null,null],[17,"_SC_FILE_ATTRIBUTES","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_FILE_SYSTEM","","",null,null],[17,"_SC_MULTI_PROCESS","","",null,null],[17,"_SC_SINGLE_PROCESS","","",null,null],[17,"_SC_NETWORKING","","",null,null],[17,"_SC_REGEX_VERSION","","",null,null],[17,"_SC_SIGNALS","","",null,null],[17,"_SC_SYSTEM_DATABASE","","",null,null],[17,"_SC_SYSTEM_DATABASE_R","","",null,null],[17,"_SC_USER_GROUPS","","",null,null],[17,"_SC_USER_GROUPS_R","","",null,null],[17,"_SC_LEVEL1_ICACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_ICACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_ICACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_SIZE","","",null,null],[17,"_SC_LEVEL1_DCACHE_ASSOC","","",null,null],[17,"_SC_LEVEL1_DCACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL2_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL2_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL3_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL3_CACHE_LINESIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_SIZE","","",null,null],[17,"_SC_LEVEL4_CACHE_ASSOC","","",null,null],[17,"_SC_LEVEL4_CACHE_LINESIZE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"NETLINK_ROUTE","","",null,null],[17,"NETLINK_UNUSED","","",null,null],[17,"NETLINK_USERSOCK","","",null,null],[17,"NETLINK_FIREWALL","","",null,null],[17,"NETLINK_SOCK_DIAG","","",null,null],[17,"NETLINK_NFLOG","","",null,null],[17,"NETLINK_XFRM","","",null,null],[17,"NETLINK_SELINUX","","",null,null],[17,"NETLINK_ISCSI","","",null,null],[17,"NETLINK_AUDIT","","",null,null],[17,"NETLINK_FIB_LOOKUP","","",null,null],[17,"NETLINK_CONNECTOR","","",null,null],[17,"NETLINK_NETFILTER","","",null,null],[17,"NETLINK_IP6_FW","","",null,null],[17,"NETLINK_DNRTMSG","","",null,null],[17,"NETLINK_KOBJECT_UEVENT","","",null,null],[17,"NETLINK_GENERIC","","",null,null],[17,"NETLINK_SCSITRANSPORT","","",null,null],[17,"NETLINK_ECRYPTFS","","",null,null],[17,"NETLINK_RDMA","","",null,null],[17,"NETLINK_CRYPTO","","",null,null],[17,"NETLINK_INET_DIAG","","",null,null],[17,"MAX_LINKS","","",null,null],[17,"NLM_F_REQUEST","","",null,null],[17,"NLM_F_MULTI","","",null,null],[17,"NLM_F_ACK","","",null,null],[17,"NLM_F_ECHO","","",null,null],[17,"NLM_F_DUMP_INTR","","",null,null],[17,"NLM_F_DUMP_FILTERED","","",null,null],[17,"NLM_F_ROOT","","",null,null],[17,"NLM_F_MATCH","","",null,null],[17,"NLM_F_ATOMIC","","",null,null],[17,"NLM_F_DUMP","","",null,null],[17,"NLM_F_REPLACE","","",null,null],[17,"NLM_F_EXCL","","",null,null],[17,"NLM_F_CREATE","","",null,null],[17,"NLM_F_APPEND","","",null,null],[17,"NLMSG_NOOP","","",null,null],[17,"NLMSG_ERROR","","",null,null],[17,"NLMSG_DONE","","",null,null],[17,"NLMSG_OVERRUN","","",null,null],[17,"NLMSG_MIN_TYPE","","",null,null],[17,"NETLINK_ADD_MEMBERSHIP","","",null,null],[17,"NETLINK_DROP_MEMBERSHIP","","",null,null],[17,"NETLINK_PKTINFO","","",null,null],[17,"NETLINK_BROADCAST_ERROR","","",null,null],[17,"NETLINK_NO_ENOBUFS","","",null,null],[17,"NETLINK_RX_RING","","",null,null],[17,"NETLINK_TX_RING","","",null,null],[17,"NETLINK_LISTEN_ALL_NSID","","",null,null],[17,"NETLINK_LIST_MEMBERSHIPS","","",null,null],[17,"NETLINK_CAP_ACK","","",null,null],[17,"NLA_F_NESTED","","",null,null],[17,"NLA_F_NET_BYTEORDER","","",null,null],[17,"NLA_TYPE_MASK","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCKATTR_T","","",null,null],[17,"O_LARGEFILE","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NOATIME","","",null,null],[17,"O_PATH","","",null,null],[17,"O_TMPFILE","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDBUFFORCE","","",null,null],[17,"SO_RCVBUFFORCE","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_NO_CHECK","","",null,null],[17,"SO_PRIORITY","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_BSDCOMPAT","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_PASSCRED","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_SECURITY_AUTHENTICATION","","",null,null],[17,"SO_SECURITY_ENCRYPTION_TRANSPORT","","",null,null],[17,"SO_SECURITY_ENCRYPTION_NETWORK","","",null,null],[17,"SO_BINDTODEVICE","","",null,null],[17,"SO_ATTACH_FILTER","","",null,null],[17,"SO_DETACH_FILTER","","",null,null],[17,"SO_GET_FILTER","","",null,null],[17,"SO_PEERNAME","","",null,null],[17,"SO_TIMESTAMP","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_PEERSEC","","",null,null],[17,"SO_PASSSEC","","",null,null],[17,"SO_TIMESTAMPNS","","",null,null],[17,"SCM_TIMESTAMPNS","","",null,null],[17,"SO_MARK","","",null,null],[17,"SO_TIMESTAMPING","","",null,null],[17,"SCM_TIMESTAMPING","","",null,null],[17,"SO_PROTOCOL","","",null,null],[17,"SO_DOMAIN","","",null,null],[17,"SO_RXQ_OVFL","","",null,null],[17,"SO_WIFI_STATUS","","",null,null],[17,"SCM_WIFI_STATUS","","",null,null],[17,"SO_PEEK_OFF","","",null,null],[17,"SO_NOFCS","","",null,null],[17,"SO_LOCK_FILTER","","",null,null],[17,"SO_SELECT_ERR_QUEUE","","",null,null],[17,"SO_BUSY_POLL","","",null,null],[17,"SO_MAX_PACING_RATE","","",null,null],[17,"SO_BPF_EXTENSIONS","","",null,null],[17,"SO_INCOMING_CPU","","",null,null],[17,"SO_ATTACH_BPF","","",null,null],[17,"SO_DETACH_BPF","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"NCCS","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"PTRACE_PEEKSIGINFO_SHARED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"MINSIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CIBAUD","","",null,null],[17,"CBAUDEX","","",null,null],[17,"VSWTC","","",null,null],[17,"OLCUC","","",null,null],[17,"NLDLY","","",null,null],[17,"CRDLY","","",null,null],[17,"TABDLY","","",null,null],[17,"BSDLY","","",null,null],[17,"FFDLY","","",null,null],[17,"VTDLY","","",null,null],[17,"XTABS","","",null,null],[17,"B0","","",null,null],[17,"B50","","",null,null],[17,"B75","","",null,null],[17,"B110","","",null,null],[17,"B134","","",null,null],[17,"B150","","",null,null],[17,"B200","","",null,null],[17,"B300","","",null,null],[17,"B600","","",null,null],[17,"B1200","","",null,null],[17,"B1800","","",null,null],[17,"B2400","","",null,null],[17,"B4800","","",null,null],[17,"B9600","","",null,null],[17,"B19200","","",null,null],[17,"B38400","","",null,null],[17,"EXTA","","",null,null],[17,"EXTB","","",null,null],[17,"BOTHER","","",null,null],[17,"B57600","","",null,null],[17,"B115200","","",null,null],[17,"B230400","","",null,null],[17,"B460800","","",null,null],[17,"B500000","","",null,null],[17,"B576000","","",null,null],[17,"B921600","","",null,null],[17,"B1000000","","",null,null],[17,"B1152000","","",null,null],[17,"B1500000","","",null,null],[17,"B2000000","","",null,null],[17,"B2500000","","",null,null],[17,"B3000000","","",null,null],[17,"B3500000","","",null,null],[17,"B4000000","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null],[17,"R15","","",null,null],[17,"R14","","",null,null],[17,"R13","","",null,null],[17,"R12","","",null,null],[17,"RBP","","",null,null],[17,"RBX","","",null,null],[17,"R11","","",null,null],[17,"R10","","",null,null],[17,"R9","","",null,null],[17,"R8","","",null,null],[17,"RAX","","",null,null],[17,"RCX","","",null,null],[17,"RDX","","",null,null],[17,"RSI","","",null,null],[17,"RDI","","",null,null],[17,"ORIG_RAX","","",null,null],[17,"RIP","","",null,null],[17,"CS","","",null,null],[17,"EFLAGS","","",null,null],[17,"RSP","","",null,null],[17,"SS","","",null,null],[17,"FS_BASE","","",null,null],[17,"GS_BASE","","",null,null],[17,"DS","","",null,null],[17,"ES","","",null,null],[17,"FS","","",null,null],[17,"GS","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"SYS_read","","",null,null],[17,"SYS_write","","",null,null],[17,"SYS_open","","",null,null],[17,"SYS_close","","",null,null],[17,"SYS_stat","","",null,null],[17,"SYS_fstat","","",null,null],[17,"SYS_lstat","","",null,null],[17,"SYS_poll","","",null,null],[17,"SYS_lseek","","",null,null],[17,"SYS_mmap","","",null,null],[17,"SYS_mprotect","","",null,null],[17,"SYS_munmap","","",null,null],[17,"SYS_brk","","",null,null],[17,"SYS_rt_sigaction","","",null,null],[17,"SYS_rt_sigprocmask","","",null,null],[17,"SYS_rt_sigreturn","","",null,null],[17,"SYS_ioctl","","",null,null],[17,"SYS_pread64","","",null,null],[17,"SYS_pwrite64","","",null,null],[17,"SYS_readv","","",null,null],[17,"SYS_writev","","",null,null],[17,"SYS_access","","",null,null],[17,"SYS_pipe","","",null,null],[17,"SYS_select","","",null,null],[17,"SYS_sched_yield","","",null,null],[17,"SYS_mremap","","",null,null],[17,"SYS_msync","","",null,null],[17,"SYS_mincore","","",null,null],[17,"SYS_madvise","","",null,null],[17,"SYS_shmget","","",null,null],[17,"SYS_shmat","","",null,null],[17,"SYS_shmctl","","",null,null],[17,"SYS_dup","","",null,null],[17,"SYS_dup2","","",null,null],[17,"SYS_pause","","",null,null],[17,"SYS_nanosleep","","",null,null],[17,"SYS_getitimer","","",null,null],[17,"SYS_alarm","","",null,null],[17,"SYS_setitimer","","",null,null],[17,"SYS_getpid","","",null,null],[17,"SYS_sendfile","","",null,null],[17,"SYS_socket","","",null,null],[17,"SYS_connect","","",null,null],[17,"SYS_accept","","",null,null],[17,"SYS_sendto","","",null,null],[17,"SYS_recvfrom","","",null,null],[17,"SYS_sendmsg","","",null,null],[17,"SYS_recvmsg","","",null,null],[17,"SYS_shutdown","","",null,null],[17,"SYS_bind","","",null,null],[17,"SYS_listen","","",null,null],[17,"SYS_getsockname","","",null,null],[17,"SYS_getpeername","","",null,null],[17,"SYS_socketpair","","",null,null],[17,"SYS_setsockopt","","",null,null],[17,"SYS_getsockopt","","",null,null],[17,"SYS_clone","","",null,null],[17,"SYS_fork","","",null,null],[17,"SYS_vfork","","",null,null],[17,"SYS_execve","","",null,null],[17,"SYS_exit","","",null,null],[17,"SYS_wait4","","",null,null],[17,"SYS_kill","","",null,null],[17,"SYS_uname","","",null,null],[17,"SYS_semget","","",null,null],[17,"SYS_semop","","",null,null],[17,"SYS_semctl","","",null,null],[17,"SYS_shmdt","","",null,null],[17,"SYS_msgget","","",null,null],[17,"SYS_msgsnd","","",null,null],[17,"SYS_msgrcv","","",null,null],[17,"SYS_msgctl","","",null,null],[17,"SYS_fcntl","","",null,null],[17,"SYS_flock","","",null,null],[17,"SYS_fsync","","",null,null],[17,"SYS_fdatasync","","",null,null],[17,"SYS_truncate","","",null,null],[17,"SYS_ftruncate","","",null,null],[17,"SYS_getdents","","",null,null],[17,"SYS_getcwd","","",null,null],[17,"SYS_chdir","","",null,null],[17,"SYS_fchdir","","",null,null],[17,"SYS_rename","","",null,null],[17,"SYS_mkdir","","",null,null],[17,"SYS_rmdir","","",null,null],[17,"SYS_creat","","",null,null],[17,"SYS_link","","",null,null],[17,"SYS_unlink","","",null,null],[17,"SYS_symlink","","",null,null],[17,"SYS_readlink","","",null,null],[17,"SYS_chmod","","",null,null],[17,"SYS_fchmod","","",null,null],[17,"SYS_chown","","",null,null],[17,"SYS_fchown","","",null,null],[17,"SYS_lchown","","",null,null],[17,"SYS_umask","","",null,null],[17,"SYS_gettimeofday","","",null,null],[17,"SYS_getrlimit","","",null,null],[17,"SYS_getrusage","","",null,null],[17,"SYS_sysinfo","","",null,null],[17,"SYS_times","","",null,null],[17,"SYS_ptrace","","",null,null],[17,"SYS_getuid","","",null,null],[17,"SYS_syslog","","",null,null],[17,"SYS_getgid","","",null,null],[17,"SYS_setuid","","",null,null],[17,"SYS_setgid","","",null,null],[17,"SYS_geteuid","","",null,null],[17,"SYS_getegid","","",null,null],[17,"SYS_setpgid","","",null,null],[17,"SYS_getppid","","",null,null],[17,"SYS_getpgrp","","",null,null],[17,"SYS_setsid","","",null,null],[17,"SYS_setreuid","","",null,null],[17,"SYS_setregid","","",null,null],[17,"SYS_getgroups","","",null,null],[17,"SYS_setgroups","","",null,null],[17,"SYS_setresuid","","",null,null],[17,"SYS_getresuid","","",null,null],[17,"SYS_setresgid","","",null,null],[17,"SYS_getresgid","","",null,null],[17,"SYS_getpgid","","",null,null],[17,"SYS_setfsuid","","",null,null],[17,"SYS_setfsgid","","",null,null],[17,"SYS_getsid","","",null,null],[17,"SYS_capget","","",null,null],[17,"SYS_capset","","",null,null],[17,"SYS_rt_sigpending","","",null,null],[17,"SYS_rt_sigtimedwait","","",null,null],[17,"SYS_rt_sigqueueinfo","","",null,null],[17,"SYS_rt_sigsuspend","","",null,null],[17,"SYS_sigaltstack","","",null,null],[17,"SYS_utime","","",null,null],[17,"SYS_mknod","","",null,null],[17,"SYS_uselib","","",null,null],[17,"SYS_personality","","",null,null],[17,"SYS_ustat","","",null,null],[17,"SYS_statfs","","",null,null],[17,"SYS_fstatfs","","",null,null],[17,"SYS_sysfs","","",null,null],[17,"SYS_getpriority","","",null,null],[17,"SYS_setpriority","","",null,null],[17,"SYS_sched_setparam","","",null,null],[17,"SYS_sched_getparam","","",null,null],[17,"SYS_sched_setscheduler","","",null,null],[17,"SYS_sched_getscheduler","","",null,null],[17,"SYS_sched_get_priority_max","","",null,null],[17,"SYS_sched_get_priority_min","","",null,null],[17,"SYS_sched_rr_get_interval","","",null,null],[17,"SYS_mlock","","",null,null],[17,"SYS_munlock","","",null,null],[17,"SYS_mlockall","","",null,null],[17,"SYS_munlockall","","",null,null],[17,"SYS_vhangup","","",null,null],[17,"SYS_modify_ldt","","",null,null],[17,"SYS_pivot_root","","",null,null],[17,"SYS__sysctl","","",null,null],[17,"SYS_prctl","","",null,null],[17,"SYS_arch_prctl","","",null,null],[17,"SYS_adjtimex","","",null,null],[17,"SYS_setrlimit","","",null,null],[17,"SYS_chroot","","",null,null],[17,"SYS_sync","","",null,null],[17,"SYS_acct","","",null,null],[17,"SYS_settimeofday","","",null,null],[17,"SYS_mount","","",null,null],[17,"SYS_umount2","","",null,null],[17,"SYS_swapon","","",null,null],[17,"SYS_swapoff","","",null,null],[17,"SYS_reboot","","",null,null],[17,"SYS_sethostname","","",null,null],[17,"SYS_setdomainname","","",null,null],[17,"SYS_iopl","","",null,null],[17,"SYS_ioperm","","",null,null],[17,"SYS_create_module","","",null,null],[17,"SYS_init_module","","",null,null],[17,"SYS_delete_module","","",null,null],[17,"SYS_get_kernel_syms","","",null,null],[17,"SYS_query_module","","",null,null],[17,"SYS_quotactl","","",null,null],[17,"SYS_nfsservctl","","",null,null],[17,"SYS_getpmsg","","",null,null],[17,"SYS_putpmsg","","",null,null],[17,"SYS_afs_syscall","","",null,null],[17,"SYS_tuxcall","","",null,null],[17,"SYS_security","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_readahead","","",null,null],[17,"SYS_setxattr","","",null,null],[17,"SYS_lsetxattr","","",null,null],[17,"SYS_fsetxattr","","",null,null],[17,"SYS_getxattr","","",null,null],[17,"SYS_lgetxattr","","",null,null],[17,"SYS_fgetxattr","","",null,null],[17,"SYS_listxattr","","",null,null],[17,"SYS_llistxattr","","",null,null],[17,"SYS_flistxattr","","",null,null],[17,"SYS_removexattr","","",null,null],[17,"SYS_lremovexattr","","",null,null],[17,"SYS_fremovexattr","","",null,null],[17,"SYS_tkill","","",null,null],[17,"SYS_time","","",null,null],[17,"SYS_futex","","",null,null],[17,"SYS_sched_setaffinity","","",null,null],[17,"SYS_sched_getaffinity","","",null,null],[17,"SYS_set_thread_area","","",null,null],[17,"SYS_io_setup","","",null,null],[17,"SYS_io_destroy","","",null,null],[17,"SYS_io_getevents","","",null,null],[17,"SYS_io_submit","","",null,null],[17,"SYS_io_cancel","","",null,null],[17,"SYS_get_thread_area","","",null,null],[17,"SYS_lookup_dcookie","","",null,null],[17,"SYS_epoll_create","","",null,null],[17,"SYS_epoll_ctl_old","","",null,null],[17,"SYS_epoll_wait_old","","",null,null],[17,"SYS_remap_file_pages","","",null,null],[17,"SYS_getdents64","","",null,null],[17,"SYS_set_tid_address","","",null,null],[17,"SYS_restart_syscall","","",null,null],[17,"SYS_semtimedop","","",null,null],[17,"SYS_fadvise64","","",null,null],[17,"SYS_timer_create","","",null,null],[17,"SYS_timer_settime","","",null,null],[17,"SYS_timer_gettime","","",null,null],[17,"SYS_timer_getoverrun","","",null,null],[17,"SYS_timer_delete","","",null,null],[17,"SYS_clock_settime","","",null,null],[17,"SYS_clock_gettime","","",null,null],[17,"SYS_clock_getres","","",null,null],[17,"SYS_clock_nanosleep","","",null,null],[17,"SYS_exit_group","","",null,null],[17,"SYS_epoll_wait","","",null,null],[17,"SYS_epoll_ctl","","",null,null],[17,"SYS_tgkill","","",null,null],[17,"SYS_utimes","","",null,null],[17,"SYS_vserver","","",null,null],[17,"SYS_mbind","","",null,null],[17,"SYS_set_mempolicy","","",null,null],[17,"SYS_get_mempolicy","","",null,null],[17,"SYS_mq_open","","",null,null],[17,"SYS_mq_unlink","","",null,null],[17,"SYS_mq_timedsend","","",null,null],[17,"SYS_mq_timedreceive","","",null,null],[17,"SYS_mq_notify","","",null,null],[17,"SYS_mq_getsetattr","","",null,null],[17,"SYS_kexec_load","","",null,null],[17,"SYS_waitid","","",null,null],[17,"SYS_add_key","","",null,null],[17,"SYS_request_key","","",null,null],[17,"SYS_keyctl","","",null,null],[17,"SYS_ioprio_set","","",null,null],[17,"SYS_ioprio_get","","",null,null],[17,"SYS_inotify_init","","",null,null],[17,"SYS_inotify_add_watch","","",null,null],[17,"SYS_inotify_rm_watch","","",null,null],[17,"SYS_migrate_pages","","",null,null],[17,"SYS_openat","","",null,null],[17,"SYS_mkdirat","","",null,null],[17,"SYS_mknodat","","",null,null],[17,"SYS_fchownat","","",null,null],[17,"SYS_futimesat","","",null,null],[17,"SYS_newfstatat","","",null,null],[17,"SYS_unlinkat","","",null,null],[17,"SYS_renameat","","",null,null],[17,"SYS_linkat","","",null,null],[17,"SYS_symlinkat","","",null,null],[17,"SYS_readlinkat","","",null,null],[17,"SYS_fchmodat","","",null,null],[17,"SYS_faccessat","","",null,null],[17,"SYS_pselect6","","",null,null],[17,"SYS_ppoll","","",null,null],[17,"SYS_unshare","","",null,null],[17,"SYS_set_robust_list","","",null,null],[17,"SYS_get_robust_list","","",null,null],[17,"SYS_splice","","",null,null],[17,"SYS_tee","","",null,null],[17,"SYS_sync_file_range","","",null,null],[17,"SYS_vmsplice","","",null,null],[17,"SYS_move_pages","","",null,null],[17,"SYS_utimensat","","",null,null],[17,"SYS_epoll_pwait","","",null,null],[17,"SYS_signalfd","","",null,null],[17,"SYS_timerfd_create","","",null,null],[17,"SYS_eventfd","","",null,null],[17,"SYS_fallocate","","",null,null],[17,"SYS_timerfd_settime","","",null,null],[17,"SYS_timerfd_gettime","","",null,null],[17,"SYS_accept4","","",null,null],[17,"SYS_signalfd4","","",null,null],[17,"SYS_eventfd2","","",null,null],[17,"SYS_epoll_create1","","",null,null],[17,"SYS_dup3","","",null,null],[17,"SYS_pipe2","","",null,null],[17,"SYS_inotify_init1","","",null,null],[17,"SYS_preadv","","",null,null],[17,"SYS_pwritev","","",null,null],[17,"SYS_rt_tgsigqueueinfo","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"SYS_recvmmsg","","",null,null],[17,"SYS_fanotify_init","","",null,null],[17,"SYS_fanotify_mark","","",null,null],[17,"SYS_prlimit64","","",null,null],[17,"SYS_name_to_handle_at","","",null,null],[17,"SYS_open_by_handle_at","","",null,null],[17,"SYS_clock_adjtime","","",null,null],[17,"SYS_syncfs","","",null,null],[17,"SYS_sendmmsg","","",null,null],[17,"SYS_setns","","",null,null],[17,"SYS_getcpu","","",null,null],[17,"SYS_process_vm_readv","","",null,null],[17,"SYS_process_vm_writev","","",null,null],[17,"SYS_kcmp","","",null,null],[17,"SYS_finit_module","","",null,null],[17,"SYS_sched_setattr","","",null,null],[17,"SYS_sched_getattr","","",null,null],[17,"SYS_renameat2","","",null,null],[17,"SYS_seccomp","","",null,null],[17,"SYS_getrandom","","",null,null],[17,"SYS_memfd_create","","",null,null],[17,"SYS_kexec_file_load","","",null,null],[17,"SYS_bpf","","",null,null],[17,"SYS_execveat","","",null,null],[17,"SYS_userfaultfd","","",null,null],[17,"SYS_membarrier","","",null,null],[17,"SYS_mlock2","","",null,null],[17,"SYS_copy_file_range","","",null,null],[17,"SYS_preadv2","","",null,null],[17,"SYS_pwritev2","","",null,null],[17,"SYS_pkey_mprotect","","",null,null],[17,"SYS_pkey_alloc","","",null,null],[17,"SYS_pkey_free","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"itimerval"],[3,"tms"],[3,"servent"],[3,"protoent"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"sigevent"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"spwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"itimerspec"],[3,"mq_attr"],[3,"if_nameindex"],[3,"msginfo"],[3,"mmsghdr"],[3,"sembuf"],[3,"input_event"],[3,"input_id"],[3,"input_absinfo"],[3,"input_keymap_entry"],[3,"input_mask"],[3,"ff_replay"],[3,"ff_trigger"],[3,"ff_envelope"],[3,"ff_constant_effect"],[3,"ff_ramp_effect"],[3,"ff_condition_effect"],[3,"ff_periodic_effect"],[3,"ff_rumble_effect"],[3,"ff_effect"],[3,"dl_phdr_info"],[3,"Elf32_Phdr"],[3,"Elf64_Phdr"],[3,"ucred"],[3,"aiocb"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"statfs"],[3,"msghdr"],[3,"cmsghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"msqid_ds"],[3,"stat"],[3,"stat64"],[3,"statfs64"],[3,"statvfs64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"user_fpregs_struct"],[3,"user_regs_struct"],[3,"user"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"termios2"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_rwlockattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["nserror"] = {"doc":"","items":[[6,"nsresult","nserror","The type of errors in gecko. This type is currently a type alias, rather than a newtype, in order to conform to the C ABI. In future versions of rust which support RFC #1758 or similar we may be able to use `#[repr(transparent)]` to get a better API for using nsresult.",null,null],[17,"NS_ERROR_MODULE_BASE_OFFSET","","",null,null],[17,"NS_ERROR_MODULE_XPCOM","","",null,null],[17,"NS_ERROR_MODULE_BASE","","",null,null],[17,"NS_ERROR_MODULE_GFX","","",null,null],[17,"NS_ERROR_MODULE_WIDGET","","",null,null],[17,"NS_ERROR_MODULE_CALENDAR","","",null,null],[17,"NS_ERROR_MODULE_NETWORK","","",null,null],[17,"NS_ERROR_MODULE_PLUGINS","","",null,null],[17,"NS_ERROR_MODULE_LAYOUT","","",null,null],[17,"NS_ERROR_MODULE_HTMLPARSER","","",null,null],[17,"NS_ERROR_MODULE_RDF","","",null,null],[17,"NS_ERROR_MODULE_UCONV","","",null,null],[17,"NS_ERROR_MODULE_REG","","",null,null],[17,"NS_ERROR_MODULE_FILES","","",null,null],[17,"NS_ERROR_MODULE_DOM","","",null,null],[17,"NS_ERROR_MODULE_IMGLIB","","",null,null],[17,"NS_ERROR_MODULE_MAILNEWS","","",null,null],[17,"NS_ERROR_MODULE_EDITOR","","",null,null],[17,"NS_ERROR_MODULE_XPCONNECT","","",null,null],[17,"NS_ERROR_MODULE_PROFILE","","",null,null],[17,"NS_ERROR_MODULE_LDAP","","",null,null],[17,"NS_ERROR_MODULE_SECURITY","","",null,null],[17,"NS_ERROR_MODULE_DOM_XPATH","","",null,null],[17,"NS_ERROR_MODULE_URILOADER","","",null,null],[17,"NS_ERROR_MODULE_CONTENT","","",null,null],[17,"NS_ERROR_MODULE_PYXPCOM","","",null,null],[17,"NS_ERROR_MODULE_XSLT","","",null,null],[17,"NS_ERROR_MODULE_IPC","","",null,null],[17,"NS_ERROR_MODULE_SVG","","",null,null],[17,"NS_ERROR_MODULE_STORAGE","","",null,null],[17,"NS_ERROR_MODULE_SCHEMA","","",null,null],[17,"NS_ERROR_MODULE_DOM_FILE","","",null,null],[17,"NS_ERROR_MODULE_DOM_INDEXEDDB","","",null,null],[17,"NS_ERROR_MODULE_DOM_FILEHANDLE","","",null,null],[17,"NS_ERROR_MODULE_SIGNED_JAR","","",null,null],[17,"NS_ERROR_MODULE_DOM_FILESYSTEM","","",null,null],[17,"NS_ERROR_MODULE_DOM_BLUETOOTH","","",null,null],[17,"NS_ERROR_MODULE_SIGNED_APP","","",null,null],[17,"NS_ERROR_MODULE_DOM_ANIM","","",null,null],[17,"NS_ERROR_MODULE_DOM_PUSH","","",null,null],[17,"NS_ERROR_MODULE_DOM_MEDIA","","",null,null],[17,"NS_ERROR_MODULE_URL_CLASSIFIER","","",null,null],[17,"NS_ERROR_MODULE_ERRORRESULT","","",null,null],[17,"NS_ERROR_MODULE_GENERAL","","",null,null],[17,"NS_OK","","",null,null],[17,"NS_ERROR_BASE","","",null,null],[17,"NS_ERROR_NOT_INITIALIZED","","",null,null],[17,"NS_ERROR_ALREADY_INITIALIZED","","",null,null],[17,"NS_ERROR_NOT_IMPLEMENTED","","",null,null],[17,"NS_NOINTERFACE","","",null,null],[17,"NS_ERROR_NO_INTERFACE","","",null,null],[17,"NS_ERROR_ABORT","","",null,null],[17,"NS_ERROR_FAILURE","","",null,null],[17,"NS_ERROR_UNEXPECTED","","",null,null],[17,"NS_ERROR_OUT_OF_MEMORY","","",null,null],[17,"NS_ERROR_ILLEGAL_VALUE","","",null,null],[17,"NS_ERROR_INVALID_ARG","","",null,null],[17,"NS_ERROR_INVALID_POINTER","","",null,null],[17,"NS_ERROR_NULL_POINTER","","",null,null],[17,"NS_ERROR_NO_AGGREGATION","","",null,null],[17,"NS_ERROR_NOT_AVAILABLE","","",null,null],[17,"NS_ERROR_FACTORY_NOT_REGISTERED","","",null,null],[17,"NS_ERROR_FACTORY_REGISTER_AGAIN","","",null,null],[17,"NS_ERROR_FACTORY_NOT_LOADED","","",null,null],[17,"NS_ERROR_FACTORY_NO_SIGNATURE_SUPPORT","","",null,null],[17,"NS_ERROR_FACTORY_EXISTS","","",null,null],[17,"NS_ERROR_CANNOT_CONVERT_DATA","","",null,null],[17,"NS_ERROR_OBJECT_IS_IMMUTABLE","","",null,null],[17,"NS_ERROR_LOSS_OF_SIGNIFICANT_DATA","","",null,null],[17,"NS_ERROR_NOT_SAME_THREAD","","",null,null],[17,"NS_ERROR_ILLEGAL_DURING_SHUTDOWN","","",null,null],[17,"NS_ERROR_SERVICE_NOT_AVAILABLE","","",null,null],[17,"NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA","","",null,null],[17,"NS_SUCCESS_INTERRUPTED_TRAVERSE","","",null,null],[17,"NS_ERROR_SERVICE_NOT_FOUND","","",null,null],[17,"NS_ERROR_SERVICE_IN_USE","","",null,null],[17,"NS_BASE_STREAM_CLOSED","","",null,null],[17,"NS_BASE_STREAM_OSERROR","","",null,null],[17,"NS_BASE_STREAM_ILLEGAL_ARGS","","",null,null],[17,"NS_BASE_STREAM_NO_CONVERTER","","",null,null],[17,"NS_BASE_STREAM_BAD_CONVERSION","","",null,null],[17,"NS_BASE_STREAM_WOULD_BLOCK","","",null,null],[17,"NS_ERROR_GFX_PRINTER_NO_PRINTER_AVAILABLE","","",null,null],[17,"NS_ERROR_GFX_PRINTER_NAME_NOT_FOUND","","",null,null],[17,"NS_ERROR_GFX_PRINTER_COULD_NOT_OPEN_FILE","","",null,null],[17,"NS_ERROR_GFX_PRINTER_STARTDOC","","",null,null],[17,"NS_ERROR_GFX_PRINTER_ENDDOC","","",null,null],[17,"NS_ERROR_GFX_PRINTER_STARTPAGE","","",null,null],[17,"NS_ERROR_GFX_PRINTER_DOC_IS_BUSY","","",null,null],[17,"NS_ERROR_GFX_CMAP_MALFORMED","","",null,null],[17,"NS_SUCCESS_EVENT_CONSUMED","","",null,null],[17,"NS_SUCCESS_EVENT_HANDLED_ASYNCHRONOUSLY","","",null,null],[17,"NS_BINDING_SUCCEEDED","","",null,null],[17,"NS_BINDING_FAILED","","",null,null],[17,"NS_BINDING_ABORTED","","",null,null],[17,"NS_BINDING_REDIRECTED","","",null,null],[17,"NS_BINDING_RETARGETED","","",null,null],[17,"NS_ERROR_MALFORMED_URI","","",null,null],[17,"NS_ERROR_IN_PROGRESS","","",null,null],[17,"NS_ERROR_NO_CONTENT","","",null,null],[17,"NS_ERROR_UNKNOWN_PROTOCOL","","",null,null],[17,"NS_ERROR_INVALID_CONTENT_ENCODING","","",null,null],[17,"NS_ERROR_CORRUPTED_CONTENT","","",null,null],[17,"NS_ERROR_INVALID_SIGNATURE","","",null,null],[17,"NS_ERROR_FIRST_HEADER_FIELD_COMPONENT_EMPTY","","",null,null],[17,"NS_ERROR_ALREADY_OPENED","","",null,null],[17,"NS_ERROR_ALREADY_CONNECTED","","",null,null],[17,"NS_ERROR_NOT_CONNECTED","","",null,null],[17,"NS_ERROR_CONNECTION_REFUSED","","",null,null],[17,"NS_ERROR_NET_TIMEOUT","","",null,null],[17,"NS_ERROR_OFFLINE","","",null,null],[17,"NS_ERROR_PORT_ACCESS_NOT_ALLOWED","","",null,null],[17,"NS_ERROR_NET_RESET","","",null,null],[17,"NS_ERROR_NET_INTERRUPT","","",null,null],[17,"NS_ERROR_PROXY_CONNECTION_REFUSED","","",null,null],[17,"NS_ERROR_NET_PARTIAL_TRANSFER","","",null,null],[17,"NS_ERROR_NET_INADEQUATE_SECURITY","","",null,null],[17,"NS_ERROR_NOT_RESUMABLE","","",null,null],[17,"NS_ERROR_REDIRECT_LOOP","","",null,null],[17,"NS_ERROR_ENTITY_CHANGED","","",null,null],[17,"NS_ERROR_UNSAFE_CONTENT_TYPE","","",null,null],[17,"NS_ERROR_REMOTE_XUL","","",null,null],[17,"NS_ERROR_LOAD_SHOWED_ERRORPAGE","","",null,null],[17,"NS_ERROR_DOCSHELL_DYING","","",null,null],[17,"NS_ERROR_FTP_LOGIN","","",null,null],[17,"NS_ERROR_FTP_CWD","","",null,null],[17,"NS_ERROR_FTP_PASV","","",null,null],[17,"NS_ERROR_FTP_PWD","","",null,null],[17,"NS_ERROR_FTP_LIST","","",null,null],[17,"NS_ERROR_UNKNOWN_HOST","","",null,null],[17,"NS_ERROR_DNS_LOOKUP_QUEUE_FULL","","",null,null],[17,"NS_ERROR_UNKNOWN_PROXY_HOST","","",null,null],[17,"NS_ERROR_UNKNOWN_SOCKET_TYPE","","",null,null],[17,"NS_ERROR_SOCKET_CREATE_FAILED","","",null,null],[17,"NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED","","",null,null],[17,"NS_ERROR_SOCKET_ADDRESS_IN_USE","","",null,null],[17,"NS_ERROR_CACHE_KEY_NOT_FOUND","","",null,null],[17,"NS_ERROR_CACHE_DATA_IS_STREAM","","",null,null],[17,"NS_ERROR_CACHE_DATA_IS_NOT_STREAM","","",null,null],[17,"NS_ERROR_CACHE_WAIT_FOR_VALIDATION","","",null,null],[17,"NS_ERROR_CACHE_ENTRY_DOOMED","","",null,null],[17,"NS_ERROR_CACHE_READ_ACCESS_DENIED","","",null,null],[17,"NS_ERROR_CACHE_WRITE_ACCESS_DENIED","","",null,null],[17,"NS_ERROR_CACHE_IN_USE","","",null,null],[17,"NS_ERROR_DOCUMENT_NOT_CACHED","","",null,null],[17,"NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS","","",null,null],[17,"NS_ERROR_HOST_IS_IP_ADDRESS","","",null,null],[17,"NS_SUCCESS_ADOPTED_DATA","","",null,null],[17,"NS_NET_STATUS_BEGIN_FTP_TRANSACTION","","",null,null],[17,"NS_NET_STATUS_END_FTP_TRANSACTION","","",null,null],[17,"NS_SUCCESS_AUTH_FINISHED","","",null,null],[17,"NS_NET_STATUS_READING","","",null,null],[17,"NS_NET_STATUS_WRITING","","",null,null],[17,"NS_NET_STATUS_RESOLVING_HOST","","",null,null],[17,"NS_NET_STATUS_RESOLVED_HOST","","",null,null],[17,"NS_NET_STATUS_CONNECTING_TO","","",null,null],[17,"NS_NET_STATUS_CONNECTED_TO","","",null,null],[17,"NS_NET_STATUS_TLS_HANDSHAKE_STARTING","","",null,null],[17,"NS_NET_STATUS_TLS_HANDSHAKE_ENDED","","",null,null],[17,"NS_NET_STATUS_SENDING_TO","","",null,null],[17,"NS_NET_STATUS_WAITING_FOR","","",null,null],[17,"NS_NET_STATUS_RECEIVING_FROM","","",null,null],[17,"NS_ERROR_INTERCEPTION_FAILED","","",null,null],[17,"NS_ERROR_HSTS_PRIMING_TIMEOUT","","",null,null],[17,"NS_ERROR_PLUGINS_PLUGINSNOTCHANGED","","",null,null],[17,"NS_ERROR_PLUGIN_DISABLED","","",null,null],[17,"NS_ERROR_PLUGIN_BLOCKLISTED","","",null,null],[17,"NS_ERROR_PLUGIN_TIME_RANGE_NOT_SUPPORTED","","",null,null],[17,"NS_ERROR_PLUGIN_CLICKTOPLAY","","",null,null],[17,"NS_TABLELAYOUT_CELL_NOT_FOUND","","",null,null],[17,"NS_OK_PARSE_SHEET","","",null,null],[17,"NS_POSITION_BEFORE_TABLE","","",null,null],[17,"NS_STATE_PROPERTY_EXISTS","","",null,null],[17,"NS_STATE_PROPERTY_NOT_THERE","","",null,null],[17,"NS_ERROR_HTMLPARSER_CONTINUE","","",null,null],[17,"NS_ERROR_HTMLPARSER_EOF","","",null,null],[17,"NS_ERROR_HTMLPARSER_UNKNOWN","","",null,null],[17,"NS_ERROR_HTMLPARSER_CANTPROPAGATE","","",null,null],[17,"NS_ERROR_HTMLPARSER_CONTEXTMISMATCH","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADFILENAME","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADURL","","",null,null],[17,"NS_ERROR_HTMLPARSER_INVALIDPARSERCONTEXT","","",null,null],[17,"NS_ERROR_HTMLPARSER_INTERRUPTED","","",null,null],[17,"NS_ERROR_HTMLPARSER_BLOCK","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADTOKENIZER","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADATTRIBUTE","","",null,null],[17,"NS_ERROR_HTMLPARSER_UNRESOLVEDDTD","","",null,null],[17,"NS_ERROR_HTMLPARSER_MISPLACEDTABLECONTENT","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADDTD","","",null,null],[17,"NS_ERROR_HTMLPARSER_BADCONTEXT","","",null,null],[17,"NS_ERROR_HTMLPARSER_STOPPARSING","","",null,null],[17,"NS_ERROR_HTMLPARSER_UNTERMINATEDSTRINGLITERAL","","",null,null],[17,"NS_ERROR_HTMLPARSER_HIERARCHYTOODEEP","","",null,null],[17,"NS_ERROR_HTMLPARSER_FAKE_ENDTAG","","",null,null],[17,"NS_ERROR_HTMLPARSER_INVALID_COMMENT","","",null,null],[17,"NS_HTMLTOKENS_NOT_AN_ENTITY","","",null,null],[17,"NS_HTMLPARSER_VALID_META_CHARSET","","",null,null],[17,"NS_RDF_ASSERTION_ACCEPTED","","",null,null],[17,"NS_RDF_CURSOR_EMPTY","","",null,null],[17,"NS_RDF_NO_VALUE","","",null,null],[17,"NS_RDF_ASSERTION_REJECTED","","",null,null],[17,"NS_RDF_STOP_VISIT","","",null,null],[17,"NS_ERROR_UCONV_NOCONV","","",null,null],[17,"NS_ERROR_UDEC_ILLEGALINPUT","","",null,null],[17,"NS_OK_HAD_REPLACEMENTS","","",null,null],[17,"NS_SUCCESS_USING_FALLBACK_LOCALE","","",null,null],[17,"NS_OK_UDEC_EXACTLENGTH","","",null,null],[17,"NS_OK_UDEC_MOREINPUT","","",null,null],[17,"NS_OK_UDEC_MOREOUTPUT","","",null,null],[17,"NS_OK_UDEC_NOBOMFOUND","","",null,null],[17,"NS_OK_UENC_EXACTLENGTH","","",null,null],[17,"NS_OK_UENC_MOREOUTPUT","","",null,null],[17,"NS_ERROR_UENC_NOMAPPING","","",null,null],[17,"NS_OK_UENC_MOREINPUT","","",null,null],[17,"NS_EXACT_LENGTH","","",null,null],[17,"NS_PARTIAL_MORE_INPUT","","",null,null],[17,"NS_PARTIAL_MORE_OUTPUT","","",null,null],[17,"NS_ERROR_ILLEGAL_INPUT","","",null,null],[17,"NS_ERROR_FILE_UNRECOGNIZED_PATH","","",null,null],[17,"NS_ERROR_FILE_UNRESOLVABLE_SYMLINK","","",null,null],[17,"NS_ERROR_FILE_EXECUTION_FAILED","","",null,null],[17,"NS_ERROR_FILE_UNKNOWN_TYPE","","",null,null],[17,"NS_ERROR_FILE_DESTINATION_NOT_DIR","","",null,null],[17,"NS_ERROR_FILE_TARGET_DOES_NOT_EXIST","","",null,null],[17,"NS_ERROR_FILE_COPY_OR_MOVE_FAILED","","",null,null],[17,"NS_ERROR_FILE_ALREADY_EXISTS","","",null,null],[17,"NS_ERROR_FILE_INVALID_PATH","","",null,null],[17,"NS_ERROR_FILE_DISK_FULL","","",null,null],[17,"NS_ERROR_FILE_CORRUPTED","","",null,null],[17,"NS_ERROR_FILE_NOT_DIRECTORY","","",null,null],[17,"NS_ERROR_FILE_IS_DIRECTORY","","",null,null],[17,"NS_ERROR_FILE_IS_LOCKED","","",null,null],[17,"NS_ERROR_FILE_TOO_BIG","","",null,null],[17,"NS_ERROR_FILE_NO_DEVICE_SPACE","","",null,null],[17,"NS_ERROR_FILE_NAME_TOO_LONG","","",null,null],[17,"NS_ERROR_FILE_NOT_FOUND","","",null,null],[17,"NS_ERROR_FILE_READ_ONLY","","",null,null],[17,"NS_ERROR_FILE_DIR_NOT_EMPTY","","",null,null],[17,"NS_ERROR_FILE_ACCESS_DENIED","","",null,null],[17,"NS_SUCCESS_FILE_DIRECTORY_EMPTY","","",null,null],[17,"NS_SUCCESS_AGGREGATE_RESULT","","",null,null],[17,"NS_ERROR_DOM_INDEX_SIZE_ERR","","",null,null],[17,"NS_ERROR_DOM_HIERARCHY_REQUEST_ERR","","",null,null],[17,"NS_ERROR_DOM_WRONG_DOCUMENT_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_CHARACTER_ERR","","",null,null],[17,"NS_ERROR_DOM_NO_MODIFICATION_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_FOUND_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_SUPPORTED_ERR","","",null,null],[17,"NS_ERROR_DOM_INUSE_ATTRIBUTE_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_ERR","","",null,null],[17,"NS_ERROR_DOM_SYNTAX_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_MODIFICATION_ERR","","",null,null],[17,"NS_ERROR_DOM_NAMESPACE_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_ACCESS_ERR","","",null,null],[17,"NS_ERROR_DOM_TYPE_MISMATCH_ERR","","",null,null],[17,"NS_ERROR_DOM_SECURITY_ERR","","",null,null],[17,"NS_ERROR_DOM_NETWORK_ERR","","",null,null],[17,"NS_ERROR_DOM_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_URL_MISMATCH_ERR","","",null,null],[17,"NS_ERROR_DOM_QUOTA_EXCEEDED_ERR","","",null,null],[17,"NS_ERROR_DOM_TIMEOUT_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_NODE_TYPE_ERR","","",null,null],[17,"NS_ERROR_DOM_DATA_CLONE_ERR","","",null,null],[17,"NS_ERROR_TYPE_ERR","","",null,null],[17,"NS_ERROR_RANGE_ERR","","",null,null],[17,"NS_ERROR_DOM_ENCODING_NOT_SUPPORTED_ERR","","",null,null],[17,"NS_ERROR_DOM_INVALID_POINTER_ERR","","",null,null],[17,"NS_ERROR_DOM_UNKNOWN_ERR","","",null,null],[17,"NS_ERROR_DOM_DATA_ERR","","",null,null],[17,"NS_ERROR_DOM_OPERATION_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_SECMAN_ERR","","",null,null],[17,"NS_ERROR_DOM_WRONG_TYPE_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_OBJECT_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_XPC_OBJECT_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_NUMBER_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_BOOLEAN_ERR","","",null,null],[17,"NS_ERROR_DOM_NOT_FUNCTION_ERR","","",null,null],[17,"NS_ERROR_DOM_TOO_FEW_PARAMETERS_ERR","","",null,null],[17,"NS_ERROR_DOM_BAD_DOCUMENT_DOMAIN","","",null,null],[17,"NS_ERROR_DOM_PROP_ACCESS_DENIED","","",null,null],[17,"NS_ERROR_DOM_XPCONNECT_ACCESS_DENIED","","",null,null],[17,"NS_ERROR_DOM_BAD_URI","","",null,null],[17,"NS_ERROR_DOM_RETVAL_UNDEFINED","","",null,null],[17,"NS_ERROR_DOM_QUOTA_REACHED","","",null,null],[17,"NS_ERROR_UNCATCHABLE_EXCEPTION","","",null,null],[17,"NS_ERROR_DOM_MALFORMED_URI","","",null,null],[17,"NS_ERROR_DOM_INVALID_HEADER_NAME","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_HAS_INVALID_CONTEXT","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_MUST_BE_OPENED","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_MUST_NOT_BE_SENDING","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_MUST_NOT_BE_LOADING_OR_DONE","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_HAS_WRONG_RESPONSETYPE_FOR_RESPONSEXML","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_HAS_WRONG_RESPONSETYPE_FOR_RESPONSETEXT","","",null,null],[17,"NS_ERROR_DOM_INVALID_STATE_XHR_CHUNKED_RESPONSETYPES_UNSUPPORTED_FOR_SYNC","","",null,null],[17,"NS_ERROR_DOM_INVALID_ACCESS_XHR_TIMEOUT_AND_RESPONSETYPE_UNSUPPORTED_FOR_SYNC","","",null,null],[17,"NS_ERROR_DOM_JS_DECODING_ERROR","","",null,null],[17,"NS_SUCCESS_DOM_NO_OPERATION","","",null,null],[17,"NS_SUCCESS_DOM_SCRIPT_EVALUATION_THREW","","",null,null],[17,"NS_SUCCESS_DOM_SCRIPT_EVALUATION_THREW_UNCATCHABLE","","",null,null],[17,"NS_IMAGELIB_SUCCESS_LOAD_FINISHED","","",null,null],[17,"NS_IMAGELIB_ERROR_FAILURE","","",null,null],[17,"NS_IMAGELIB_ERROR_NO_DECODER","","",null,null],[17,"NS_IMAGELIB_ERROR_NOT_FINISHED","","",null,null],[17,"NS_IMAGELIB_ERROR_NO_ENCODER","","",null,null],[17,"NS_SUCCESS_EDITOR_ELEMENT_NOT_FOUND","","",null,null],[17,"NS_SUCCESS_EDITOR_FOUND_TARGET","","",null,null],[17,"NS_ERROR_XPC_NOT_ENOUGH_ARGS","","",null,null],[17,"NS_ERROR_XPC_NEED_OUT_OBJECT","","",null,null],[17,"NS_ERROR_XPC_CANT_SET_OUT_VAL","","",null,null],[17,"NS_ERROR_XPC_NATIVE_RETURNED_FAILURE","","",null,null],[17,"NS_ERROR_XPC_CANT_GET_INTERFACE_INFO","","",null,null],[17,"NS_ERROR_XPC_CANT_GET_PARAM_IFACE_INFO","","",null,null],[17,"NS_ERROR_XPC_CANT_GET_METHOD_INFO","","",null,null],[17,"NS_ERROR_XPC_UNEXPECTED","","",null,null],[17,"NS_ERROR_XPC_BAD_CONVERT_JS","","",null,null],[17,"NS_ERROR_XPC_BAD_CONVERT_NATIVE","","",null,null],[17,"NS_ERROR_XPC_BAD_CONVERT_JS_NULL_REF","","",null,null],[17,"NS_ERROR_XPC_BAD_OP_ON_WN_PROTO","","",null,null],[17,"NS_ERROR_XPC_CANT_CONVERT_WN_TO_FUN","","",null,null],[17,"NS_ERROR_XPC_CANT_DEFINE_PROP_ON_WN","","",null,null],[17,"NS_ERROR_XPC_CANT_WATCH_WN_STATIC","","",null,null],[17,"NS_ERROR_XPC_CANT_EXPORT_WN_STATIC","","",null,null],[17,"NS_ERROR_XPC_SCRIPTABLE_CALL_FAILED","","",null,null],[17,"NS_ERROR_XPC_SCRIPTABLE_CTOR_FAILED","","",null,null],[17,"NS_ERROR_XPC_CANT_CALL_WO_SCRIPTABLE","","",null,null],[17,"NS_ERROR_XPC_CANT_CTOR_WO_SCRIPTABLE","","",null,null],[17,"NS_ERROR_XPC_CI_RETURNED_FAILURE","","",null,null],[17,"NS_ERROR_XPC_GS_RETURNED_FAILURE","","",null,null],[17,"NS_ERROR_XPC_BAD_CID","","",null,null],[17,"NS_ERROR_XPC_BAD_IID","","",null,null],[17,"NS_ERROR_XPC_CANT_CREATE_WN","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_EXCEPTION","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_NATIVE_OBJECT","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_JS_OBJECT","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_NULL","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_STRING","","",null,null],[17,"NS_ERROR_XPC_JS_THREW_NUMBER","","",null,null],[17,"NS_ERROR_XPC_JAVASCRIPT_ERROR","","",null,null],[17,"NS_ERROR_XPC_JAVASCRIPT_ERROR_WITH_DETAILS","","",null,null],[17,"NS_ERROR_XPC_CANT_CONVERT_PRIMITIVE_TO_ARRAY","","",null,null],[17,"NS_ERROR_XPC_CANT_CONVERT_OBJECT_TO_ARRAY","","",null,null],[17,"NS_ERROR_XPC_NOT_ENOUGH_ELEMENTS_IN_ARRAY","","",null,null],[17,"NS_ERROR_XPC_CANT_GET_ARRAY_INFO","","",null,null],[17,"NS_ERROR_XPC_NOT_ENOUGH_CHARS_IN_STRING","","",null,null],[17,"NS_ERROR_XPC_SECURITY_MANAGER_VETO","","",null,null],[17,"NS_ERROR_XPC_INTERFACE_NOT_SCRIPTABLE","","",null,null],[17,"NS_ERROR_XPC_INTERFACE_NOT_FROM_NSISUPPORTS","","",null,null],[17,"NS_ERROR_XPC_CANT_GET_JSOBJECT_OF_DOM_OBJECT","","",null,null],[17,"NS_ERROR_XPC_CANT_SET_READ_ONLY_CONSTANT","","",null,null],[17,"NS_ERROR_XPC_CANT_SET_READ_ONLY_ATTRIBUTE","","",null,null],[17,"NS_ERROR_XPC_CANT_SET_READ_ONLY_METHOD","","",null,null],[17,"NS_ERROR_XPC_CANT_ADD_PROP_TO_WRAPPED_NATIVE","","",null,null],[17,"NS_ERROR_XPC_CALL_TO_SCRIPTABLE_FAILED","","",null,null],[17,"NS_ERROR_XPC_JSOBJECT_HAS_NO_FUNCTION_NAMED","","",null,null],[17,"NS_ERROR_XPC_BAD_ID_STRING","","",null,null],[17,"NS_ERROR_XPC_BAD_INITIALIZER_NAME","","",null,null],[17,"NS_ERROR_XPC_HAS_BEEN_SHUTDOWN","","",null,null],[17,"NS_ERROR_XPC_CANT_MODIFY_PROP_ON_WN","","",null,null],[17,"NS_ERROR_XPC_BAD_CONVERT_JS_ZERO_ISNOT_NULL","","",null,null],[17,"NS_ERROR_XPC_CANT_PASS_CPOW_TO_NATIVE","","",null,null],[17,"NS_ERROR_LAUNCHED_CHILD_PROCESS","","",null,null],[17,"NS_ERROR_CSP_FORM_ACTION_VIOLATION","","",null,null],[17,"NS_ERROR_CSP_FRAME_ANCESTOR_VIOLATION","","",null,null],[17,"NS_ERROR_SRI_CORRUPT","","",null,null],[17,"NS_ERROR_SRI_DISABLED","","",null,null],[17,"NS_ERROR_SRI_NOT_ELIGIBLE","","",null,null],[17,"NS_ERROR_SRI_UNEXPECTED_HASH_TYPE","","",null,null],[17,"NS_ERROR_SRI_IMPORT","","",null,null],[17,"NS_ERROR_CMS_VERIFY_NOT_SIGNED","","",null,null],[17,"NS_ERROR_CMS_VERIFY_NO_CONTENT_INFO","","",null,null],[17,"NS_ERROR_CMS_VERIFY_BAD_DIGEST","","",null,null],[17,"NS_ERROR_CMS_VERIFY_NOCERT","","",null,null],[17,"NS_ERROR_CMS_VERIFY_UNTRUSTED","","",null,null],[17,"NS_ERROR_CMS_VERIFY_ERROR_UNVERIFIED","","",null,null],[17,"NS_ERROR_CMS_VERIFY_ERROR_PROCESSING","","",null,null],[17,"NS_ERROR_CMS_VERIFY_BAD_SIGNATURE","","",null,null],[17,"NS_ERROR_CMS_VERIFY_DIGEST_MISMATCH","","",null,null],[17,"NS_ERROR_CMS_VERIFY_UNKNOWN_ALGO","","",null,null],[17,"NS_ERROR_CMS_VERIFY_UNSUPPORTED_ALGO","","",null,null],[17,"NS_ERROR_CMS_VERIFY_MALFORMED_SIGNATURE","","",null,null],[17,"NS_ERROR_CMS_VERIFY_HEADER_MISMATCH","","",null,null],[17,"NS_ERROR_CMS_VERIFY_NOT_YET_ATTEMPTED","","",null,null],[17,"NS_ERROR_CMS_VERIFY_CERT_WITHOUT_ADDRESS","","",null,null],[17,"NS_ERROR_CMS_ENCRYPT_NO_BULK_ALG","","",null,null],[17,"NS_ERROR_CMS_ENCRYPT_INCOMPLETE","","",null,null],[17,"NS_ERROR_DOM_INVALID_EXPRESSION_ERR","","",null,null],[17,"NS_ERROR_DOM_TYPE_ERR","","",null,null],[17,"NS_ERROR_WONT_HANDLE_CONTENT","","",null,null],[17,"NS_ERROR_MALWARE_URI","","",null,null],[17,"NS_ERROR_PHISHING_URI","","",null,null],[17,"NS_ERROR_TRACKING_URI","","",null,null],[17,"NS_ERROR_UNWANTED_URI","","",null,null],[17,"NS_ERROR_BLOCKED_URI","","",null,null],[17,"NS_ERROR_HARMFUL_URI","","",null,null],[17,"NS_ERROR_SAVE_LINK_AS_TIMEOUT","","",null,null],[17,"NS_ERROR_PARSED_DATA_CACHED","","",null,null],[17,"NS_REFRESHURI_HEADER_FOUND","","",null,null],[17,"NS_ERROR_CONTENT_BLOCKED","","",null,null],[17,"NS_ERROR_CONTENT_BLOCKED_SHOW_ALT","","",null,null],[17,"NS_PROPTABLE_PROP_NOT_THERE","","",null,null],[17,"NS_ERROR_XBL_BLOCKED","","",null,null],[17,"NS_ERROR_CONTENT_CRASHED","","",null,null],[17,"NS_HTML_STYLE_PROPERTY_NOT_THERE","","",null,null],[17,"NS_CONTENT_BLOCKED","","",null,null],[17,"NS_CONTENT_BLOCKED_SHOW_ALT","","",null,null],[17,"NS_PROPTABLE_PROP_OVERWRITTEN","","",null,null],[17,"NS_FINDBROADCASTER_NOT_FOUND","","",null,null],[17,"NS_FINDBROADCASTER_FOUND","","",null,null],[17,"NS_FINDBROADCASTER_AWAIT_OVERLAYS","","",null,null],[17,"NS_ERROR_XPATH_INVALID_ARG","","",null,null],[17,"NS_ERROR_XSLT_PARSE_FAILURE","","",null,null],[17,"NS_ERROR_XPATH_PARSE_FAILURE","","",null,null],[17,"NS_ERROR_XSLT_ALREADY_SET","","",null,null],[17,"NS_ERROR_XSLT_EXECUTION_FAILURE","","",null,null],[17,"NS_ERROR_XPATH_UNKNOWN_FUNCTION","","",null,null],[17,"NS_ERROR_XSLT_BAD_RECURSION","","",null,null],[17,"NS_ERROR_XSLT_BAD_VALUE","","",null,null],[17,"NS_ERROR_XSLT_NODESET_EXPECTED","","",null,null],[17,"NS_ERROR_XSLT_ABORTED","","",null,null],[17,"NS_ERROR_XSLT_NETWORK_ERROR","","",null,null],[17,"NS_ERROR_XSLT_WRONG_MIME_TYPE","","",null,null],[17,"NS_ERROR_XSLT_LOAD_RECURSION","","",null,null],[17,"NS_ERROR_XPATH_BAD_ARGUMENT_COUNT","","",null,null],[17,"NS_ERROR_XPATH_BAD_EXTENSION_FUNCTION","","",null,null],[17,"NS_ERROR_XPATH_PAREN_EXPECTED","","",null,null],[17,"NS_ERROR_XPATH_INVALID_AXIS","","",null,null],[17,"NS_ERROR_XPATH_NO_NODE_TYPE_TEST","","",null,null],[17,"NS_ERROR_XPATH_BRACKET_EXPECTED","","",null,null],[17,"NS_ERROR_XPATH_INVALID_VAR_NAME","","",null,null],[17,"NS_ERROR_XPATH_UNEXPECTED_END","","",null,null],[17,"NS_ERROR_XPATH_OPERATOR_EXPECTED","","",null,null],[17,"NS_ERROR_XPATH_UNCLOSED_LITERAL","","",null,null],[17,"NS_ERROR_XPATH_BAD_COLON","","",null,null],[17,"NS_ERROR_XPATH_BAD_BANG","","",null,null],[17,"NS_ERROR_XPATH_ILLEGAL_CHAR","","",null,null],[17,"NS_ERROR_XPATH_BINARY_EXPECTED","","",null,null],[17,"NS_ERROR_XSLT_LOAD_BLOCKED_ERROR","","",null,null],[17,"NS_ERROR_XPATH_INVALID_EXPRESSION_EVALUATED","","",null,null],[17,"NS_ERROR_XPATH_UNBALANCED_CURLY_BRACE","","",null,null],[17,"NS_ERROR_XSLT_BAD_NODE_NAME","","",null,null],[17,"NS_ERROR_XSLT_VAR_ALREADY_SET","","",null,null],[17,"NS_ERROR_XSLT_CALL_TO_KEY_NOT_ALLOWED","","",null,null],[17,"NS_XSLT_GET_NEW_HANDLER","","",null,null],[17,"NS_ERROR_TRANSPORT_INIT","","",null,null],[17,"NS_ERROR_DUPLICATE_HANDLE","","",null,null],[17,"NS_ERROR_BRIDGE_OPEN_PARENT","","",null,null],[17,"NS_ERROR_BRIDGE_OPEN_CHILD","","",null,null],[17,"NS_ERROR_DOM_SVG_WRONG_TYPE_ERR","","",null,null],[17,"NS_ERROR_DOM_SVG_MATRIX_NOT_INVERTABLE","","",null,null],[17,"NS_ERROR_STORAGE_BUSY","","",null,null],[17,"NS_ERROR_STORAGE_IOERR","","",null,null],[17,"NS_ERROR_STORAGE_CONSTRAINT","","",null,null],[17,"NS_ERROR_DOM_FILE_NOT_FOUND_ERR","","",null,null],[17,"NS_ERROR_DOM_FILE_NOT_READABLE_ERR","","",null,null],[17,"NS_ERROR_DOM_FILE_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_UNKNOWN_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_NOT_FOUND_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_CONSTRAINT_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_DATA_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_NOT_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_TRANSACTION_INACTIVE_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_READ_ONLY_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_TIMEOUT_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_QUOTA_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_VERSION_ERR","","",null,null],[17,"NS_ERROR_DOM_INDEXEDDB_RECOVERABLE_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_UNKNOWN_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_NOT_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_INACTIVE_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_READ_ONLY_ERR","","",null,null],[17,"NS_ERROR_DOM_FILEHANDLE_QUOTA_ERR","","",null,null],[17,"NS_ERROR_SIGNED_JAR_NOT_SIGNED","","",null,null],[17,"NS_ERROR_SIGNED_JAR_MODIFIED_ENTRY","","",null,null],[17,"NS_ERROR_SIGNED_JAR_UNSIGNED_ENTRY","","",null,null],[17,"NS_ERROR_SIGNED_JAR_ENTRY_MISSING","","",null,null],[17,"NS_ERROR_SIGNED_JAR_WRONG_SIGNATURE","","",null,null],[17,"NS_ERROR_SIGNED_JAR_ENTRY_TOO_LARGE","","",null,null],[17,"NS_ERROR_SIGNED_JAR_ENTRY_INVALID","","",null,null],[17,"NS_ERROR_SIGNED_JAR_MANIFEST_INVALID","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_INVALID_PATH_ERR","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_INVALID_MODIFICATION_ERR","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_NO_MODIFICATION_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_PATH_EXISTS_ERR","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_TYPE_MISMATCH_ERR","","",null,null],[17,"NS_ERROR_DOM_FILESYSTEM_UNKNOWN_ERR","","",null,null],[17,"NS_ERROR_SIGNED_APP_MANIFEST_INVALID","","",null,null],[17,"NS_ERROR_DOM_ANIM_MISSING_PROPS_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_INVALID_REGISTRATION_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_DENIED_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_SERVICE_UNREACHABLE","","",null,null],[17,"NS_ERROR_DOM_PUSH_INVALID_KEY_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_MISMATCHED_KEY_ERR","","",null,null],[17,"NS_ERROR_DOM_PUSH_GCM_DISABLED","","",null,null],[17,"NS_ERROR_DOM_MEDIA_ABORT_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_NOT_ALLOWED_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_NOT_SUPPORTED_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_DECODE_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_FATAL_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_METADATA_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_OVERFLOW_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_END_OF_STREAM","","",null,null],[17,"NS_ERROR_DOM_MEDIA_WAITING_FOR_DATA","","",null,null],[17,"NS_ERROR_DOM_MEDIA_CANCELED","","",null,null],[17,"NS_ERROR_DOM_MEDIA_MEDIASINK_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_DEMUXER_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_CDM_ERR","","",null,null],[17,"NS_ERROR_DOM_MEDIA_NEED_NEW_DECODER","","",null,null],[17,"NS_ERROR_DOM_MEDIA_INITIALIZING_DECODER","","",null,null],[17,"NS_ERROR_DOM_MEDIA_CUBEB_INITIALIZATION_ERR","","",null,null],[17,"NS_ERROR_UC_UPDATE_UNKNOWN","","",null,null],[17,"NS_ERROR_UC_UPDATE_DUPLICATE_PREFIX","","",null,null],[17,"NS_ERROR_UC_UPDATE_INFINITE_LOOP","","",null,null],[17,"NS_ERROR_UC_UPDATE_WRONG_REMOVAL_INDICES","","",null,null],[17,"NS_ERROR_UC_UPDATE_CHECKSUM_MISMATCH","","",null,null],[17,"NS_ERROR_UC_UPDATE_MISSING_CHECKSUM","","",null,null],[17,"NS_ERROR_UC_UPDATE_SHUTDOWNING","","",null,null],[17,"NS_ERROR_UC_UPDATE_TABLE_NOT_FOUND","","",null,null],[17,"NS_ERROR_UC_UPDATE_BUILD_PREFIX_FAILURE","","",null,null],[17,"NS_ERROR_UC_UPDATE_FAIL_TO_WRITE_DISK","","",null,null],[17,"NS_ERROR_UC_UPDATE_PROTOCOL_PARSER_ERROR","","",null,null],[17,"NS_ERROR_INTERNAL_ERRORRESULT_JS_EXCEPTION","","",null,null],[17,"NS_ERROR_INTERNAL_ERRORRESULT_DOMEXCEPTION","","",null,null],[17,"NS_ERROR_INTERNAL_ERRORRESULT_EXCEPTION_ON_JSCONTEXT","","",null,null],[17,"NS_ERROR_INTERNAL_ERRORRESULT_TYPEERROR","","",null,null],[17,"NS_ERROR_INTERNAL_ERRORRESULT_RANGEERROR","","",null,null],[17,"NS_ERROR_DOWNLOAD_COMPLETE","","",null,null],[17,"NS_ERROR_DOWNLOAD_NOT_PARTIAL","","",null,null],[17,"NS_ERROR_UNORM_MOREOUTPUT","","",null,null],[17,"NS_ERROR_DOCSHELL_REQUEST_REJECTED","","",null,null],[17,"NS_ERROR_DOCUMENT_IS_PRINTMODE","","",null,null],[17,"NS_SUCCESS_DONT_FIXUP","","",null,null],[17,"NS_SUCCESS_RESTART_APP","","",null,null],[17,"NS_SUCCESS_RESTART_APP_NOT_SAME_PROFILE","","",null,null],[17,"NS_SUCCESS_UNORM_NOTFOUND","","",null,null],[17,"NS_ERROR_NOT_IN_TREE","","",null,null],[17,"NS_OK_NO_NAME_CLAUSE_HANDLED","","",null,null],[8,"NsresultExt","","An extension trait which is intended to add methods to `nsresult` types. Unfortunately, due to ABI issues, this trait is implemented on all u32 types. These methods are meaningless on non-nsresult values.",null,null],[10,"failed","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"succeeded","","",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"to_result","","",0,{"inputs":[{"name":"self"}],"output":{"generics":["nsresult","nsresult"],"name":"result"}}],[10,"error_name","","Get a printable name for the nsresult error code. This function returns a nsCString<'static>, which implements `Display`.",0,{"inputs":[{"name":"self"}],"output":{"name":"nscstring"}}],[11,"failed","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"succeeded","","",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"to_result","","",1,{"inputs":[{"name":"self"}],"output":{"generics":["nsresult","nsresult"],"name":"result"}}],[11,"error_name","","",1,{"inputs":[{"name":"self"}],"output":{"name":"nscstring"}}]],"paths":[[8,"NsresultExt"],[6,"nsresult"]]};
searchIndex["nsstring"] = {"doc":"This module provides rust bindings for the XPCOM string types.","items":[[3,"nsCStringRepr","nsstring","The representation of a ns[C]String type in C++. This type is used internally by our definition of ns[C]String to ensure layout compatibility with the C++ ns[C]String type.",null,null],[3,"nsACString","","This type is the abstract type which is used for interacting with strings in rust. Each string type can derefence to an instance of this type, which provides the useful operations on strings.",null,null],[3,"nsCStr","","",null,null],[3,"nsCString","","",null,null],[3,"nsStringRepr","","The representation of a ns[C]String type in C++. This type is used internally by our definition of ns[C]String to ensure layout compatibility with the C++ ns[C]String type.",null,null],[3,"nsAString","","This type is the abstract type which is used for interacting with strings in rust. Each string type can derefence to an instance of this type, which provides the useful operations on strings.",null,null],[3,"nsStr","","",null,null],[3,"nsString","","",null,null],[4,"nsCStringAdapter","","An adapter type to allow for passing both types which coerce to &[$char_type], and &$AString to a function, while still performing optimized operations when passed the $AString.",null,null],[13,"Borrowed","","",0,null],[13,"Abstract","","",0,null],[4,"nsStringAdapter","","An adapter type to allow for passing both types which coerce to &[$char_type], and &$AString to a function, while still performing optimized operations when passed the $AString.",null,null],[13,"Borrowed","","",1,null],[13,"Abstract","","",1,null],[0,"test_helpers","","This module only exists to help with ensuring that the layout of the structs inside of rust and C++ are identical.",null,null],[5,"Rust_Test_ReprSizeAlign_nsString","nsstring::test_helpers","",null,null],[5,"Rust_Test_ReprSizeAlign_nsCString","","",null,null],[5,"Rust_Test_Member_nsString_mData","","",null,null],[5,"Rust_Test_Member_nsString_mLength","","",null,null],[5,"Rust_Test_Member_nsString_mDataFlags","","",null,null],[5,"Rust_Test_Member_nsString_mClassFlags","","",null,null],[5,"Rust_Test_Member_nsCString_mData","","",null,null],[5,"Rust_Test_Member_nsCString_mLength","","",null,null],[5,"Rust_Test_Member_nsCString_mDataFlags","","",null,null],[5,"Rust_Test_Member_nsCString_mClassFlags","","",null,null],[5,"Rust_Test_NsStringFlags","","",null,null],[8,"nsCStringLike","nsstring","This trait is implemented on types which are `ns[C]String`-like, in that they can at very low cost be converted to a borrowed `&nsA[C]String`. Unfortunately, the intermediate type `ns[C]StringAdapter` is required as well due to types like `&[u8]` needing to be (cheaply) wrapped in a `nsCString` on the stack to create the `&nsACString`.",null,null],[10,"adapt","","",2,{"inputs":[{"name":"self"}],"output":{"name":"nscstringadapter"}}],[8,"nsStringLike","","This trait is implemented on types which are `ns[C]String`-like, in that they can at very low cost be converted to a borrowed `&nsA[C]String`. Unfortunately, the intermediate type `ns[C]StringAdapter` is required as well due to types like `&[u8]` needing to be (cheaply) wrapped in a `nsCString` on the stack to create the `&nsACString`.",null,null],[10,"adapt","","",3,{"inputs":[{"name":"self"}],"output":{"name":"nsstringadapter"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",4,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"deref_mut","","",4,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"assign","","Assign the value of `other` into self, overwriting any value currently stored. Performs an optimized assignment when possible if `other` is a `nsA[C]String`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_assign","","Assign the value of `other` into self, overwriting any value currently stored. Performs an optimized assignment when possible if `other` is a `nsA[C]String`.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"take_from","","Take the value of `other` and set `self`, overwriting any value currently stored. The passed-in string will be truncated.",5,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":null}],[11,"fallible_take_from","","Take the value of `other` and set `self`, overwriting any value currently stored. If this function fails, the source string will be left untouched, otherwise it will be truncated.",5,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"result"}}],[11,"append","","Append the value of `other` into self.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_append","","Append the value of `other` into self.",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"set_length","","Set the length of the string to the passed-in length, and expand the backing capacity to match. This method is unsafe as it can expose uninitialized memory when len is greater than the current length of the string.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"fallible_set_length","","Set the length of the string to the passed-in length, and expand the backing capacity to match. This method is unsafe as it can expose uninitialized memory when len is greater than the current length of the string.",5,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"truncate","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"to_mut","","Get a `&mut` reference to the backing data for this string. This method will allocate and copy if the current backing buffer is immutable or shared.",5,null],[11,"fallible_to_mut","","Get a `&mut` reference to the backing data for this string. This method will allocate and copy if the current backing buffer is immutable or shared.",5,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",5,null],[11,"as_ref","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"bool"}}],[11,"eq","","",5,null],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"nscstring"}],"output":{"name":"bool"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"nscstr"}],"output":{"name":"bool"}}],[11,"new","","",6,{"inputs":[],"output":{"name":"nscstr"}}],[11,"drop","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"as_ref","","",6,null],[11,"from","","",6,null],[11,"from","","",6,{"inputs":[{"name":"vec"}],"output":{"name":"nscstr"}}],[11,"from","","",6,{"inputs":[{"name":"nsacstring"}],"output":{"name":"nscstr"}}],[11,"write_str","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"nscstr"}],"output":{"name":"bool"}}],[11,"eq","","",6,null],[11,"eq","","",6,null],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"new","","",7,{"inputs":[],"output":{"name":"nscstring"}}],[11,"drop","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"deref_mut","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"as_ref","","",7,null],[11,"from","","",7,null],[11,"from","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"name":"nsacstring"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"name":"box"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"nscstring"}}],[11,"write_str","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"nscstring"}],"output":{"name":"bool"}}],[11,"eq","","",7,null],[11,"eq","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"deref","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nsacstring"}}],[11,"adapt","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nscstringadapter"}}],[11,"adapt","","",6,{"inputs":[{"name":"self"}],"output":{"name":"nscstringadapter"}}],[11,"adapt","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nscstringadapter"}}],[11,"assign_utf16","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_assign_utf16","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"append_utf16","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_append_utf16","","",5,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"as_str_unchecked","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","","",6,{"inputs":[{"name":"str"}],"output":{"name":"nscstr"}}],[11,"from","","",6,{"inputs":[{"name":"string"}],"output":{"name":"nscstr"}}],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"generics":["str"],"name":"box"}],"output":{"name":"nscstring"}}],[11,"from","","",7,{"inputs":[{"name":"string"}],"output":{"name":"nscstring"}}],[11,"write_str","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"deref_mut","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"assign","","Assign the value of `other` into self, overwriting any value currently stored. Performs an optimized assignment when possible if `other` is a `nsA[C]String`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_assign","","Assign the value of `other` into self, overwriting any value currently stored. Performs an optimized assignment when possible if `other` is a `nsA[C]String`.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"take_from","","Take the value of `other` and set `self`, overwriting any value currently stored. The passed-in string will be truncated.",9,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":null}],[11,"fallible_take_from","","Take the value of `other` and set `self`, overwriting any value currently stored. If this function fails, the source string will be left untouched, otherwise it will be truncated.",9,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"result"}}],[11,"append","","Append the value of `other` into self.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_append","","Append the value of `other` into self.",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"set_length","","Set the length of the string to the passed-in length, and expand the backing capacity to match. This method is unsafe as it can expose uninitialized memory when len is greater than the current length of the string.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"fallible_set_length","","Set the length of the string to the passed-in length, and expand the backing capacity to match. This method is unsafe as it can expose uninitialized memory when len is greater than the current length of the string.",9,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"result"}}],[11,"truncate","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"to_mut","","Get a `&mut` reference to the backing data for this string. This method will allocate and copy if the current backing buffer is immutable or shared.",9,null],[11,"fallible_to_mut","","Get a `&mut` reference to the backing data for this string. This method will allocate and copy if the current backing buffer is immutable or shared.",9,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"deref","","",9,null],[11,"as_ref","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"bool"}}],[11,"eq","","",9,null],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nsstring"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"nsstr"}],"output":{"name":"bool"}}],[11,"new","","",10,{"inputs":[],"output":{"name":"nsstr"}}],[11,"drop","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"deref_mut","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"as_ref","","",10,null],[11,"from","","",10,null],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"nsstr"}}],[11,"from","","",10,{"inputs":[{"name":"nsastring"}],"output":{"name":"nsstr"}}],[11,"write_str","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"nsstr"}],"output":{"name":"bool"}}],[11,"eq","","",10,null],[11,"eq","","",10,null],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"nsstring"}}],[11,"drop","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"deref_mut","","",11,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"as_ref","","",11,null],[11,"from","","",11,null],[11,"from","","",11,{"inputs":[{"name":"vec"}],"output":{"name":"nsstring"}}],[11,"from","","",11,{"inputs":[{"name":"nsastring"}],"output":{"name":"nsstring"}}],[11,"from","","",11,{"inputs":[{"name":"box"}],"output":{"name":"nsstring"}}],[11,"from","","",11,{"inputs":[{"generics":["u16"],"name":"vec"}],"output":{"name":"nsstring"}}],[11,"write_str","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"nsstring"}],"output":{"name":"bool"}}],[11,"eq","","",11,null],[11,"eq","","",11,null],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"nsastring"}}],[11,"adapt","","",9,{"inputs":[{"name":"self"}],"output":{"name":"nsstringadapter"}}],[11,"adapt","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nsstringadapter"}}],[11,"adapt","","",11,{"inputs":[{"name":"self"}],"output":{"name":"nsstringadapter"}}],[11,"assign_utf8","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_assign_utf8","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"append_utf8","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"fallible_append_utf8","","",9,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"str"}],"output":{"name":"nsstring"}}],[11,"from","","",11,{"inputs":[{"name":"string"}],"output":{"name":"nsstring"}}],[11,"write_str","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}]],"paths":[[4,"nsCStringAdapter"],[4,"nsStringAdapter"],[8,"nsCStringLike"],[8,"nsStringLike"],[3,"nsCStringRepr"],[3,"nsACString"],[3,"nsCStr"],[3,"nsCString"],[3,"nsStringRepr"],[3,"nsAString"],[3,"nsStr"],[3,"nsString"]]};
searchIndex["quote"] = {"doc":"Quasi-quoting without a Syntex dependency, intended for use with Macros 1.1.","items":[[3,"Tokens","quote","Tokens produced by a `quote!(...)` invocation.",null,null],[3,"ByteStr","","Wrap a `&str` so it interpolates as a byte-string: `b\"abc\"`.",null,null],[12,"0","","",0,null],[3,"Hex","","Wrap an integer so it interpolates as a hexadecimal.",null,null],[12,"0","","",1,null],[3,"Ident","","An identifier that should be interpolated without quotes.",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"tokens"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":{"name":"bool"}}],[11,"new","","Empty tokens.",2,{"inputs":[],"output":{"name":"self"}}],[11,"append","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"append_all","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"append_separated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"append_terminated","","For use by `ToTokens` implementations.",2,{"inputs":[{"name":"self"},{"name":"i"},{"name":"s"}],"output":null}],[11,"as_str","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_string","","",2,{"inputs":[{"name":"self"}],"output":{"name":"string"}}],[11,"parse","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"default","","",2,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",3,null],[11,"new","","",3,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"as_ref","","",3,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[8,"ToTokens","","Types that can be interpolated inside a `quote!(...)` invocation.",null,null],[10,"to_tokens","","Write `self` to the given `Tokens`.",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[14,"quote","","The whole point.",null,null]],"paths":[[3,"ByteStr"],[3,"Hex"],[3,"Tokens"],[3,"Ident"],[8,"ToTokens"]]};
searchIndex["syn"] = {"doc":"","items":[[3,"Attribute","syn","Doc-comments are promoted to attributes that have `is_sugared_doc` = true",null,null],[12,"style","","",0,null],[12,"value","","",0,null],[12,"is_sugared_doc","","",0,null],[3,"Field","","A field of a struct or enum variant.",null,null],[12,"ident","","Name of the field, if any.",1,null],[12,"vis","","Visibility of the field.",1,null],[12,"attrs","","Attributes tagged on the field.",1,null],[12,"ty","","Type of the field.",1,null],[3,"Variant","","An enum variant.",null,null],[12,"ident","","Name of the variant.",2,null],[12,"attrs","","Attributes tagged on the variant.",2,null],[12,"data","","Type of variant.",2,null],[12,"discriminant","","Explicit discriminant, e.g. `Foo = 1`",2,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration of a function, enum, trait, etc.",null,null],[12,"lifetimes","","",3,null],[12,"ty_params","","",3,null],[12,"where_clause","","",3,null],[3,"Lifetime","","",null,null],[12,"ident","","",4,null],[3,"LifetimeDef","","A lifetime definition, e.g. `'a: 'b+'c+'d`",null,null],[12,"attrs","","",5,null],[12,"lifetime","","",5,null],[12,"bounds","","",5,null],[3,"TyParam","","A generic type parameter, e.g. `T: Into<String>`.",null,null],[12,"attrs","","",6,null],[12,"ident","","",6,null],[12,"bounds","","",6,null],[12,"default","","",6,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",7,null],[12,"bounded_ty","","The type being bounded",7,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+'static`)",7,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"predicates","","",8,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"lhs_ty","","",9,null],[12,"rhs_ty","","",9,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"lifetime","","",10,null],[12,"bounds","","",10,null],[3,"ImplGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Turbofish","","Returned by `TyGenerics::as_turbofish`.",null,null],[3,"TyGenerics","","Returned by `Generics::split_for_impl`.",null,null],[3,"Ident","","",null,null],[3,"ByteStrLit","","",null,null],[12,"value","","",11,null],[12,"style","","",11,null],[3,"FloatLit","","",null,null],[12,"value","","",12,null],[12,"suffix","","",12,null],[3,"IntLit","","",null,null],[12,"value","","",13,null],[12,"suffix","","",13,null],[3,"StrLit","","",null,null],[12,"value","","",14,null],[12,"style","","",14,null],[3,"Delimited","","",null,null],[12,"delim","","The type of delimiter",15,null],[12,"tts","","The delimited sequence of token trees",15,null],[3,"Mac","","Represents a macro invocation. The Path indicates which macro is being invoked, and the vector of token-trees contains the source of the macro invocation.",null,null],[12,"path","","",16,null],[12,"tts","","",16,null],[3,"DeriveInput","","Struct or enum sent to a `proc_macro_derive` macro.",null,null],[12,"ident","","Name of the struct or enum.",17,null],[12,"vis","","Visibility of the struct or enum.",17,null],[12,"attrs","","Attributes tagged on the whole struct or enum.",17,null],[12,"generics","","Generics required to complete the definition.",17,null],[12,"body","","Data within the struct or enum.",17,null],[3,"AngleBracketedParameterData","","A path like `Foo<'a, T>`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",18,null],[12,"types","","The type parameters for this path segment, if present.",18,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",18,null],[3,"BareFnArg","","An argument in a function type.",null,null],[12,"name","","",19,null],[12,"ty","","",19,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",20,null],[12,"abi","","",20,null],[12,"lifetimes","","",20,null],[12,"inputs","","",20,null],[12,"output","","",20,null],[12,"variadic","","",20,null],[3,"MutTy","","",null,null],[12,"ty","","",21,null],[12,"mutability","","",21,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -> C`",null,null],[12,"inputs","","`(A, B)`",22,null],[12,"output","","`C`",22,null],[3,"Path","","A \"Path\" is essentially Rust's notion of a name.",null,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current module (like paths in an import).",23,null],[12,"segments","","The segments in the path: the things separated by `::`.",23,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"ident","","The identifier portion of this path segment.",24,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in two flavors: `Path<A,B,C>` and `Path(A,B) -> C`. Note that this is more than just simple syntactic sugar; the use of parens affects the region binding rules, so we preserve the distinction.",24,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `'a` in `<'a> Foo<&'a T>`",25,null],[12,"trait_ref","","The `Foo<&'a T>` in `<'a> Foo<&'a T>`",25,null],[3,"QSelf","","The explicit Self type in a \"qualified path\". The actual path, including the trait and the associated item, is stored separately. `position` represents the index of the associated item qualified with this Self type.",null,null],[12,"ty","","",26,null],[12,"position","","",26,null],[3,"TypeBinding","","Bind a type to an associated type: `A=Foo`.",null,null],[12,"ident","","",27,null],[12,"ty","","",27,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that are contained as statements within items. These two cases need to be distinguished for pretty-printing.",null,null],[13,"Outer","","Attribute of the form `#![...]`.",28,null],[13,"Inner","","Attribute of the form `#[...]`.",28,null],[4,"MetaItem","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",29,null],[13,"List","","List meta item.",29,null],[13,"NameValue","","Name-value meta item.",29,null],[4,"NestedMetaItem","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full `MetaItem`.",30,null],[13,"Literal","","A Rust literal.",30,null],[4,"ConstExpr","","",null,null],[13,"Call","","A function call",31,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",31,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",31,null],[13,"Lit","","A literal (For example: `1`, `\"foo\"`)",31,null],[13,"Cast","","A cast (`foo as f64`)",31,null],[13,"Path","","Variable reference, possibly containing `::` and/or type parameters, e.g. foo::bar::.",31,null],[13,"Index","","An indexing operation (`foo[2]`)",31,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",31,null],[13,"Other","","If compiling with full support for expression syntax, any expression is allowed",31,null],[4,"VariantData","","Data stored within an enum variant or struct.",null,null],[13,"Struct","","Struct variant, e.g. `Point { x: f64, y: f64 }`.",32,null],[13,"Tuple","","Tuple variant, e.g. `Some(T)`.",32,null],[13,"Unit","","Unit variant, e.g. `None`.",32,null],[4,"Visibility","","Visibility level of an item.",null,null],[13,"Public","","Public, i.e. `pub`.",33,null],[13,"Crate","","Crate-visible, i.e. `pub(crate)`.",33,null],[13,"Restricted","","Restricted, e.g. `pub(some::module)`.",33,null],[13,"Inherited","","Inherited, i.e. private.",33,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the modifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",34,null],[13,"Maybe","","",34,null],[4,"TyParamBound","","The AST represents all type param bounds as types. `typeck::collect::compute_bounds` matches these against the \"special\" built-in traits (see `middle::lang_items`) and detects Copy, Send and Sync.",null,null],[13,"Trait","","",35,null],[13,"Region","","",35,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for<'c> Foo: Send+Clone+'c`",36,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `'a: 'b+'c`",36,null],[13,"EqPredicate","","An equality predicate (unsupported)",36,null],[4,"FloatTy","","",null,null],[13,"F32","","",37,null],[13,"F64","","",37,null],[13,"Unsuffixed","","",37,null],[4,"IntTy","","",null,null],[13,"Isize","","",38,null],[13,"I8","","",38,null],[13,"I16","","",38,null],[13,"I32","","",38,null],[13,"I64","","",38,null],[13,"Usize","","",38,null],[13,"U8","","",38,null],[13,"U16","","",38,null],[13,"U32","","",38,null],[13,"U64","","",38,null],[13,"Unsuffixed","","",38,null],[4,"Lit","","Literal kind.",null,null],[13,"Str","","A string literal (`\"foo\"`)",39,null],[13,"ByteStr","","A byte string (`b\"foo\"`)",39,null],[13,"Byte","","A byte char (`b'f'`)",39,null],[13,"Char","","A character literal (`'a'`)",39,null],[13,"Int","","An integer literal (`1`)",39,null],[13,"Float","","A float literal (`1f64` or `1E10f64` or `1.0E10`)",39,null],[13,"Bool","","A boolean literal",39,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `\"foo\"`",40,null],[13,"Raw","","A raw string, like `r##\"foo\"##`",40,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",41,null],[13,"Minus","","",41,null],[13,"Star","","",41,null],[13,"Slash","","",41,null],[13,"Percent","","",41,null],[13,"Caret","","",41,null],[13,"And","","",41,null],[13,"Or","","",41,null],[13,"Shl","","",41,null],[13,"Shr","","",41,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",42,null],[13,"Bracket","","A square bracket: `[` or `]`",42,null],[13,"Brace","","A curly brace: `{` or `}`",42,null],[4,"Token","","",null,null],[13,"Eq","","",43,null],[13,"Lt","","",43,null],[13,"Le","","",43,null],[13,"EqEq","","",43,null],[13,"Ne","","",43,null],[13,"Ge","","",43,null],[13,"Gt","","",43,null],[13,"AndAnd","","",43,null],[13,"OrOr","","",43,null],[13,"Not","","",43,null],[13,"Tilde","","",43,null],[13,"BinOp","","",43,null],[13,"BinOpEq","","",43,null],[13,"At","","",43,null],[13,"Dot","","",43,null],[13,"DotDot","","",43,null],[13,"DotDotDot","","",43,null],[13,"Comma","","",43,null],[13,"Semi","","",43,null],[13,"Colon","","",43,null],[13,"ModSep","","",43,null],[13,"RArrow","","",43,null],[13,"LArrow","","",43,null],[13,"FatArrow","","",43,null],[13,"Pound","","",43,null],[13,"Dollar","","",43,null],[13,"Question","","",43,null],[13,"Literal","","",43,null],[13,"Ident","","",43,null],[13,"Underscore","","",43,null],[13,"Lifetime","","",43,null],[13,"DocComment","","",43,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it parses the arguments to the invocation as a token-tree. This is a very loose structure, such that all sorts of different AST-fragments can be passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",44,null],[13,"Delimited","","A delimited sequence of token trees",44,null],[4,"Body","","Body of a derived struct or enum.",null,null],[13,"Enum","","It's an enum.",45,null],[13,"Struct","","It's a struct.",45,null],[4,"BinOp","","",null,null],[13,"Add","","The `+` operator (addition)",46,null],[13,"Sub","","The `-` operator (subtraction)",46,null],[13,"Mul","","The `*` operator (multiplication)",46,null],[13,"Div","","The `/` operator (division)",46,null],[13,"Rem","","The `%` operator (modulus)",46,null],[13,"And","","The `&&` operator (logical and)",46,null],[13,"Or","","The `||` operator (logical or)",46,null],[13,"BitXor","","The `^` operator (bitwise xor)",46,null],[13,"BitAnd","","The `&` operator (bitwise and)",46,null],[13,"BitOr","","The `|` operator (bitwise or)",46,null],[13,"Shl","","The `<<` operator (shift left)",46,null],[13,"Shr","","The `>>` operator (shift right)",46,null],[13,"Eq","","The `==` operator (equality)",46,null],[13,"Lt","","The `<` operator (less than)",46,null],[13,"Le","","The `<=` operator (less than or equal to)",46,null],[13,"Ne","","The `!=` operator (not equal to)",46,null],[13,"Ge","","The `>=` operator (greater than or equal to)",46,null],[13,"Gt","","The `>` operator (greater than)",46,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",47,null],[13,"Not","","The `!` operator for logical inversion",47,null],[13,"Neg","","The `-` operator for negation",47,null],[4,"Abi","","",null,null],[13,"Named","","",48,null],[13,"Rust","","",48,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",49,null],[13,"Ty","","Everything else",49,null],[4,"Mutability","","",null,null],[13,"Mutable","","",50,null],[13,"Immutable","","",50,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`",51,null],[13,"Parenthesized","","The `(A, B)` and `C` in `Foo(A, B) -> C`",51,null],[4,"Ty","","The different kinds of types recognized by the compiler",null,null],[13,"Slice","","A variable-length array (`[T]`)",52,null],[13,"Array","","A fixed length array (`[T; n]`)",52,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",52,null],[13,"Rptr","","A reference (`&'a T` or `&'a mut T`)",52,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -> bool`)",52,null],[13,"Never","","The never type (`!`)",52,null],[13,"Tup","","A tuple (`(A, B, C, D, ...)`)",52,null],[13,"Path","","A path (`module::module::...::Type`), optionally \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.",52,null],[13,"TraitObject","","A trait object type `Bound1 + Bound2 + Bound3` where `Bound` is a trait or a lifetime.",52,null],[13,"ImplTrait","","An `impl Bound1 + Bound2 + Bound3` type where `Bound` is a trait or a lifetime.",52,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",52,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been specified. This can appear anywhere in a type.",52,null],[13,"Mac","","A macro in the type position.",52,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",53,null],[13,"Normal","","",53,null],[5,"parse_derive_input","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["deriveinput","string"],"name":"result"}}],[5,"parse_type","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ty","string"],"name":"result"}}],[5,"parse_path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["path","string"],"name":"result"}}],[5,"parse_where_clause","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["whereclause","string"],"name":"result"}}],[5,"parse_token_trees","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["vec","string"],"name":"result"}}],[5,"parse_ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["ident","string"],"name":"result"}}],[5,"parse_ty_param_bound","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["typarambound","string"],"name":"result"}}],[5,"parse_outer_attr","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["attribute","string"],"name":"result"}}],[11,"to_tokens","","",0,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",29,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",30,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"attribute"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"attribute"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"name","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"attrstyle"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"attrstyle"}],"output":{"name":"bool"}}],[11,"hash","","",28,null],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"metaitem"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"metaitem"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"name","","Name of the item.",29,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nestedmetaitem"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"nestedmetaitem"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"to_tokens","","",31,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"constexpr"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"constexpr"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"to_tokens","","",2,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",32,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",1,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",33,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"variant"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"variant"}],"output":{"name":"bool"}}],[11,"hash","","",2,null],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"variantdata"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"variantdata"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"fields","","Slice containing the fields stored in the variant.",32,null],[11,"fields_mut","","Mutable slice containing the fields stored in the variant.",32,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"field"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"field"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"visibility"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"visibility"}],"output":{"name":"bool"}}],[11,"hash","","",33,null],[11,"to_tokens","","",3,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",54,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",55,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",56,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",4,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",5,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",6,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",35,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",8,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",36,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",7,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",10,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",9,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"generics"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"generics"}],"output":{"name":"bool"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"generics"}}],[11,"hash","","",3,null],[11,"fmt","","",54,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",55,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",56,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"split_for_impl","","Split a type's generics into the pieces required for impl'ing a trait for that type.",3,null],[11,"as_turbofish","","Turn a type's generics like `<X, Y>` into a turbofish like `::<X, Y>`.",55,{"inputs":[{"name":"self"}],"output":{"name":"turbofish"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"lifetime"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"hash","","",4,null],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"lifetime"}],"output":{"name":"bool"}}],[11,"new","","",4,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"lifetimedef"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"lifetimedef"}],"output":{"name":"bool"}}],[11,"hash","","",5,null],[11,"new","","",5,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"typaram"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"typaram"}],"output":{"name":"bool"}}],[11,"hash","","",6,null],[11,"from","","",6,{"inputs":[{"name":"ident"}],"output":{"name":"self"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"typarambound"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"typarambound"}],"output":{"name":"bool"}}],[11,"hash","","",35,null],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"traitboundmodifier"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"traitboundmodifier"}],"output":{"name":"bool"}}],[11,"hash","","",34,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"whereclause"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"whereclause"}],"output":{"name":"bool"}}],[11,"default","","",8,{"inputs":[],"output":{"name":"whereclause"}}],[11,"hash","","",8,null],[11,"none","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"wherepredicate"}}],[11,"eq","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"self"},{"name":"wherepredicate"}],"output":{"name":"bool"}}],[11,"hash","","",36,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"whereboundpredicate"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"whereboundpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"whereregionpredicate"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"whereregionpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"whereeqpredicate"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"whereeqpredicate"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"to_tokens","","",57,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"ident"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"self"},{"name":"ident"}],"output":{"name":"bool"}}],[11,"new","","",57,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"generics":["str"],"name":"cow"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",57,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"as_ref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",57,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"eq","","",57,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"to_tokens","","",39,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"lit"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"strstyle"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"strstyle"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"from","","",39,{"inputs":[{"name":"string"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"str"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"lit"}}],[11,"from","","",39,null],[11,"from","","",39,{"inputs":[{"name":"char"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"bool"}],"output":{"name":"lit"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"intty"}}],[11,"eq","","",38,{"inputs":[{"name":"self"},{"name":"intty"}],"output":{"name":"bool"}}],[11,"hash","","",38,null],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"floatty"}}],[11,"eq","","",37,{"inputs":[{"name":"self"},{"name":"floatty"}],"output":{"name":"bool"}}],[11,"hash","","",37,null],[11,"from","","",39,{"inputs":[{"name":"isize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"i64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"usize"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u8"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u16"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"u64"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f32"}],"output":{"name":"lit"}}],[11,"from","","",39,{"inputs":[{"name":"f64"}],"output":{"name":"lit"}}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"strlit"}}],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"bytestrlit"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"intlit"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"floatlit"}}],[11,"to_tokens","","",16,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",44,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",15,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",43,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",41,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"mac"}}],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"mac"}],"output":{"name":"bool"}}],[11,"hash","","",16,null],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"tokentree"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"self"},{"name":"tokentree"}],"output":{"name":"bool"}}],[11,"hash","","",44,null],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"delimited"}}],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"delimited"}],"output":{"name":"bool"}}],[11,"hash","","",15,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"token"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"token"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"binoptoken"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"binoptoken"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"delimtoken"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"delimtoken"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"to_tokens","","",17,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"deriveinput"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"self"},{"name":"deriveinput"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"body"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"self"},{"name":"body"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"op","","",46,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"assign_op","","",46,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"to_tokens","","",46,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"op","","",47,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"to_tokens","","",47,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"binop"}}],[11,"eq","","",46,{"inputs":[{"name":"self"},{"name":"binop"}],"output":{"name":"bool"}}],[11,"hash","","",46,null],[11,"fmt","","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"unop"}}],[11,"eq","","",47,{"inputs":[{"name":"self"},{"name":"unop"}],"output":{"name":"bool"}}],[11,"hash","","",47,null],[11,"to_tokens","","",52,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",50,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",23,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",24,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",51,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",18,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",27,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",22,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",25,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",20,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",19,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",53,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"to_tokens","","",48,{"inputs":[{"name":"self"},{"name":"tokens"}],"output":null}],[11,"fmt","","",52,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"ty"}}],[11,"eq","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"self"},{"name":"ty"}],"output":{"name":"bool"}}],[11,"hash","","",52,null],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"mutty"}}],[11,"eq","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"self"},{"name":"mutty"}],"output":{"name":"bool"}}],[11,"hash","","",21,null],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"mutability"}}],[11,"eq","","",50,{"inputs":[{"name":"self"},{"name":"mutability"}],"output":{"name":"bool"}}],[11,"hash","","",50,null],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"path"}}],[11,"eq","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"self"},{"name":"path"}],"output":{"name":"bool"}}],[11,"hash","","",23,null],[11,"from","","",23,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"pathsegment"}}],[11,"eq","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"self"},{"name":"pathsegment"}],"output":{"name":"bool"}}],[11,"hash","","",24,null],[11,"from","","",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",51,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pathparameters"}}],[11,"eq","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"self"},{"name":"pathparameters"}],"output":{"name":"bool"}}],[11,"hash","","",51,null],[11,"none","","",51,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",51,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"anglebracketedparameterdata"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"anglebracketedparameterdata"}],"output":{"name":"bool"}}],[11,"default","","",18,{"inputs":[],"output":{"name":"anglebracketedparameterdata"}}],[11,"hash","","",18,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"typebinding"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"typebinding"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"parenthesizedparameterdata"}}],[11,"eq","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"self"},{"name":"parenthesizedparameterdata"}],"output":{"name":"bool"}}],[11,"hash","","",22,null],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"polytraitref"}}],[11,"eq","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"self"},{"name":"polytraitref"}],"output":{"name":"bool"}}],[11,"hash","","",25,null],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"qself"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"qself"}],"output":{"name":"bool"}}],[11,"hash","","",26,null],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"barefnty"}}],[11,"eq","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"self"},{"name":"barefnty"}],"output":{"name":"bool"}}],[11,"hash","","",20,null],[11,"fmt","","",53,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"unsafety"}}],[11,"eq","","",53,{"inputs":[{"name":"self"},{"name":"unsafety"}],"output":{"name":"bool"}}],[11,"hash","","",53,null],[11,"fmt","","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"abi"}}],[11,"eq","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"self"},{"name":"abi"}],"output":{"name":"bool"}}],[11,"hash","","",48,null],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"barefnarg"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"barefnarg"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"fmt","","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"functionretty"}}],[11,"eq","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"self"},{"name":"functionretty"}],"output":{"name":"bool"}}],[11,"hash","","",49,null],[0,"parse","","This module contains a set of exported nom parsers which can be used to parse custom grammars when used alongside the `synom` crate.",null,null],[4,"IResult","syn::parse","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",58,null],[13,"Error","","Parsing failed.",58,null],[5,"lit","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lit"],"name":"iresult"}}],[5,"string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","strlit"],"name":"iresult"}}],[5,"byte_string","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bytestrlit"],"name":"iresult"}}],[5,"byte","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","u8"],"name":"iresult"}}],[5,"character","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","char"],"name":"iresult"}}],[5,"float","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","floatlit"],"name":"iresult"}}],[5,"int","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","intlit"],"name":"iresult"}}],[5,"boolean","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","bool"],"name":"iresult"}}],[5,"ty","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ty"],"name":"iresult"}}],[5,"path","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","path"],"name":"iresult"}}],[5,"tt","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","tokentree"],"name":"iresult"}}],[5,"ident","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","ident"],"name":"iresult"}}],[5,"lifetime","","",null,{"inputs":[{"name":"str"}],"output":{"generics":["str","lifetime"],"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",58,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[11,"eq","","",58,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}]],"paths":[[3,"Attribute"],[3,"Field"],[3,"Variant"],[3,"Generics"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"TyParam"],[3,"WhereBoundPredicate"],[3,"WhereClause"],[3,"WhereEqPredicate"],[3,"WhereRegionPredicate"],[3,"ByteStrLit"],[3,"FloatLit"],[3,"IntLit"],[3,"StrLit"],[3,"Delimited"],[3,"Mac"],[3,"DeriveInput"],[3,"AngleBracketedParameterData"],[3,"BareFnArg"],[3,"BareFnTy"],[3,"MutTy"],[3,"ParenthesizedParameterData"],[3,"Path"],[3,"PathSegment"],[3,"PolyTraitRef"],[3,"QSelf"],[3,"TypeBinding"],[4,"AttrStyle"],[4,"MetaItem"],[4,"NestedMetaItem"],[4,"ConstExpr"],[4,"VariantData"],[4,"Visibility"],[4,"TraitBoundModifier"],[4,"TyParamBound"],[4,"WherePredicate"],[4,"FloatTy"],[4,"IntTy"],[4,"Lit"],[4,"StrStyle"],[4,"BinOpToken"],[4,"DelimToken"],[4,"Token"],[4,"TokenTree"],[4,"Body"],[4,"BinOp"],[4,"UnOp"],[4,"Abi"],[4,"FunctionRetTy"],[4,"Mutability"],[4,"PathParameters"],[4,"Ty"],[4,"Unsafety"],[3,"ImplGenerics"],[3,"TyGenerics"],[3,"Turbofish"],[3,"Ident"],[4,"IResult"]]};
searchIndex["synom"] = {"doc":"Adapted from `nom` by removing the `IResult::Incomplete` variant which:","items":[[4,"IResult","synom","The result of a parser.",null,null],[13,"Done","","Parsing succeeded. The first field contains the rest of the unparsed data and the second field contains the parse result.",0,null],[13,"Error","","Parsing failed.",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"iresult"}}],[11,"expect","","Unwraps the result, asserting the the parse is complete. Panics with a message based on the given string if the parse failed or is incomplete.",0,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"o"}}],[14,"punct","","Parse a piece of punctuation like \"+\" or \"+=\".",null,null],[14,"keyword","","Parse a keyword like \"fn\" or \"struct\".",null,null],[14,"option","","Turn a failed parse into `None` and a successful parse into `Some`.",null,null],[14,"opt_vec","","Turn a failed parse into an empty vector. The argument parser must itself return a vector.",null,null],[14,"epsilon","","Parses nothing and always succeeds.",null,null],[14,"separated_list","","Zero or more values separated by some separator. Does not allow a trailing seperator.",null,null],[14,"terminated_list","","Zero or more values separated by some separator. A trailing separator is allowed.",null,null],[14,"named","","Define a function from a parser combination.",null,null],[14,"call","","Invoke the given parser function with the passed in arguments.",null,null],[14,"map","","Transform the result of a parser by applying a function or closure.",null,null],[14,"not","","Parses successfully if the given parser fails to parse. Does not consume any of the input.",null,null],[14,"cond","","Conditionally execute the given parser.",null,null],[14,"cond_reduce","","Fail to parse if condition is false, otherwise parse the given parser.",null,null],[14,"preceded","","Parse two things, returning the value of the second.",null,null],[14,"terminated","","Parse two things, returning the value of the first.",null,null],[14,"many0","","Parse zero or more values using the given parser.",null,null],[14,"peek","","Parse a value without consuming it from the input data.",null,null],[14,"take_until","","Parse the part of the input up to but not including the given string. Fail to parse if the given string is not present in the input.",null,null],[14,"tag","","Parse the given string from exactly the current position in the input. You almost always want `punct!` or `keyword!` instead of this.",null,null],[14,"switch","","Pattern-match the result of a parser to select which other parser to run.",null,null],[14,"value","","Produce the given value without parsing anything. Useful as an argument to `switch!`.",null,null],[14,"delimited","","Value surrounded by a pair of delimiters.",null,null],[14,"separated_nonempty_list","","One or more values separated by some separator. Does not allow a trailing separator.",null,null],[14,"tuple","","Run a series of parsers and produce all of the results in a tuple.",null,null],[14,"alt","","Run a series of parsers, returning the result of the first one which succeeds.",null,null],[14,"do_parse","","Run a series of parsers, one after another, optionally assigning the results a name. Fail if any of the parsers fails.",null,null]],"paths":[[4,"IResult"]]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to Unicode Standard Annex #31 rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of Unicode that this version of unicode-xid is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the 'XID_Start' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the 'XID_Continue' Unicode property.",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"UnicodeXID"]]};
searchIndex["xpcom"] = {"doc":"This crate contains the functionality required in order to both implement and call XPCOM methods from rust code.","items":[[3,"nsID","xpcom","A \"unique identifier\". This is modeled after OSF DCE UUIDs.",null,null],[12,"0","","",0,null],[12,"1","","",0,null],[12,"2","","",0,null],[12,"3","","",0,null],[3,"RefPtr","","A smart pointer holding a RefCounted object. The object itself manages its own memory. RefPtr will invoke the addref and release methods at the appropriate times to facilitate the bookkeeping.",null,null],[3,"GetterAddrefs","","A helper struct for constructing `RefPtr<T>` from raw pointer outparameters. Holds a `*const T` internally which will be released if non null when destructed, and can be easily transformed into an `Option<RefPtr<T>>`.",null,null],[3,"Refcnt","","The type of the reference count type for xpcom structs.",null,null],[3,"AtomicRefcnt","","The type of the atomic reference count used for xpcom structs.",null,null],[5,"getter_addrefs","","Helper method for calling XPCOM methods which return a reference counted value through an outparameter. Takes a lambda, which is called with a valid outparameter argument (`*mut *const T`), and returns a `nsresult`. Returns either a `RefPtr<T>` with the value returned from the outparameter, or a `nsresult`.",null,{"inputs":[{"name":"f"}],"output":{"generics":["refptr","nsresult"],"name":"result"}}],[5,"component_manager","","Get a reference to the global `nsIComponentManager`.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"service_manager","","Get a reference to the global `nsIServiceManager`.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"component_registrar","","Get a reference to the global `nsIComponentRegistrar`",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"create_instance","","Helper for calling `nsIComponentManager::CreateInstanceByContractID` on the global `nsIComponentRegistrar`.",null,{"inputs":[{"name":"cstr"}],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_service","","Helper for calling `nsIServiceManager::GetServiceByContractID` on the global `nsIServiceManager`.",null,{"inputs":[{"name":"cstr"}],"output":{"generics":["refptr"],"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"nsid"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"nsid"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"nsid"}],"output":{"name":"bool"}}],[11,"new","","Construct a new RefPtr from a reference to the refcounted object.",1,{"inputs":[{"name":"t"}],"output":{"name":"refptr"}}],[11,"from_raw","","Construct a RefPtr from a raw pointer, addrefing it.",1,null],[11,"from_raw_dont_addref","","Construct a RefPtr from a raw pointer, without addrefing it.",1,null],[11,"forget","","Write this RefPtr's value into an outparameter.",1,null],[11,"deref","","",1,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"refptr"}}],[11,"new","","Create a `GetterAddrefs`, initializing it with the null pointer.",2,{"inputs":[],"output":{"name":"getteraddrefs"}}],[11,"ptr","","Get a reference to the internal `*const T`. This method is unsafe, as the destructor of this class depends on the internal `*const T` being either a valid reference to a value of type `T`, or null.",2,null],[11,"void_ptr","","Get a reference to the internal `*const T` as a `*mut libc::c_void`. This is useful to pass to functions like `GetInterface` which take a void pointer outparameter.",2,null],[11,"refptr","","Transform this `GetterAddrefs` into an `Option<RefPtr<T>>`, without performing any addrefs or releases.",2,{"inputs":[{"name":"self"}],"output":{"generics":["refptr"],"name":"option"}}],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new reference count value. This is unsafe as manipulating Refcnt values is an easy footgun.",3,{"inputs":[],"output":{"name":"self"}}],[11,"inc","","Increment the reference count. Returns the new reference count. This is unsafe as modifying this value can cause a use-after-free.",3,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"dec","","Decrement the reference count. Returns the new reference count. This is unsafe as modifying this value can cause a use-after-free.",3,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"get","","Get the current value of the reference count.",3,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new reference count value. This is unsafe as manipulating Refcnt values is an easy footgun.",4,{"inputs":[],"output":{"name":"self"}}],[11,"inc","","Increment the reference count. Returns the new reference count. This is unsafe as modifying this value can cause a use-after-free.",4,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"dec","","Decrement the reference count. Returns the new reference count. This is unsafe as modifying this value can cause a use-after-free.",4,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"get","","Get the current value of the reference count.",4,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[0,"interfaces","","This module contains the xpcom interfaces exposed to rust code.",null,null],[3,"nsIExternalProtocolService","xpcom::interfaces","`interface nsIExternalProtocolService : nsISupports`",null,null],[3,"nsIDOMHTMLDocument","","`interface nsIDOMHTMLDocument : nsIDOMDocument`",null,null],[3,"nsIApplicationCacheChannel","","`interface nsIApplicationCacheChannel : nsIApplicationCacheContainer`",null,null],[3,"nsITimeService","","`interface nsITimeService : nsISupports`",null,null],[3,"nsIProtocolProxyService2","","`interface nsIProtocolProxyService2 : nsIProtocolProxyService`",null,null],[3,"nsIPK11Token","","`interface nsIPK11Token : nsISupports`",null,null],[3,"nsIAboutNewTabService","","`interface nsIAboutNewTabService : nsISupports`",null,null],[3,"nsIDOMParser","","`interface nsIDOMParser : nsISupports`",null,null],[3,"nsIChannel","","`interface nsIChannel : nsIRequest`",null,null],[3,"nsIAsyncVerifyRedirectReadyCallback","","`interface nsIAsyncVerifyRedirectReadyCallback : nsISupports`",null,null],[3,"nsIParentRedirectingChannel","","`interface nsIParentRedirectingChannel : nsIParentChannel`",null,null],[3,"nsIProxyInfo","","`interface nsIProxyInfo : nsISupports`",null,null],[3,"nsISecurityReporter","","`interface nsISecurityReporter : nsISupports`",null,null],[3,"nsICryptoHash","","`interface nsICryptoHash : nsISupports`",null,null],[3,"nsIClipboard","","`interface nsIClipboard : nsISupports`",null,null],[3,"nsICacheStorageVisitor","","`interface nsICacheStorageVisitor : nsISupports`",null,null],[3,"nsPIPromptService","","`interface nsPIPromptService : nsISupports`",null,null],[3,"mozIStorageAggregateFunction","","`interface mozIStorageAggregateFunction : nsISupports`",null,null],[3,"nsIHandleReportCallback","","`interface nsIHandleReportCallback : nsISupports`",null,null],[3,"nsIMemoryReporter","","`interface nsIMemoryReporter : nsISupports`",null,null],[3,"nsIFinishReportingCallback","","`interface nsIFinishReportingCallback : nsISupports`",null,null],[3,"nsIHeapAllocatedCallback","","`interface nsIHeapAllocatedCallback : nsISupports`",null,null],[3,"nsIMemoryReporterManager","","`interface nsIMemoryReporterManager : nsISupports`",null,null],[3,"nsIMIMEInputStream","","`interface nsIMIMEInputStream : nsIInputStream`",null,null],[3,"nsIQuotaRequestBase","","`interface nsIQuotaRequestBase : nsISupports`",null,null],[3,"nsIQuotaUsageRequest","","`interface nsIQuotaUsageRequest : nsIQuotaRequestBase`",null,null],[3,"nsIQuotaRequest","","`interface nsIQuotaRequest : nsIQuotaRequestBase`",null,null],[3,"nsIArrayExtensions","","`interface nsIArrayExtensions : nsIArray`",null,null],[3,"nsIAppShell","","`interface nsIAppShell : nsISupports`",null,null],[3,"nsIUnicharStreamLoaderObserver","","`interface nsIUnicharStreamLoaderObserver : nsISupports`",null,null],[3,"nsIUnicharStreamLoader","","`interface nsIUnicharStreamLoader : nsIStreamListener`",null,null],[3,"nsIDOMGeoPositionErrorCallback","","`interface nsIDOMGeoPositionErrorCallback : nsISupports`",null,null],[3,"nsIScriptableBase64Encoder","","`interface nsIScriptableBase64Encoder : nsISupports`",null,null],[3,"nsITransactionListener","","`interface nsITransactionListener : nsISupports`",null,null],[3,"nsIMIMEService","","`interface nsIMIMEService : nsISupports`",null,null],[3,"nsIDOMMozNamedAttrMap","","`interface nsIDOMMozNamedAttrMap : nsISupports`",null,null],[3,"rdfITripleVisitor","","`interface rdfITripleVisitor : nsISupports`",null,null],[3,"nsIDOMXULControlElement","","`interface nsIDOMXULControlElement : nsISupports`",null,null],[3,"nsIDOMMediaList","","`interface nsIDOMMediaList : nsISupports`",null,null],[3,"nsIBidiKeyboard","","`interface nsIBidiKeyboard : nsISupports`",null,null],[3,"nsIURILoader","","`interface nsIURILoader : nsISupports`",null,null],[3,"nsIProperty","","`interface nsIProperty : nsISupports`",null,null],[3,"nsIAutoCompleteResult","","`interface nsIAutoCompleteResult : nsISupports`",null,null],[3,"imgILoader","","`interface imgILoader : nsISupports`",null,null],[3,"nsIRDFXMLSinkObserver","","`interface nsIRDFXMLSinkObserver : nsISupports`",null,null],[3,"nsIRDFXMLSink","","`interface nsIRDFXMLSink : nsISupports`",null,null],[3,"nsILoadURIDelegate","","`interface nsILoadURIDelegate : nsISupports`",null,null],[3,"nsIPrefetchService","","`interface nsIPrefetchService : nsISupports`",null,null],[3,"nsIASN1Object","","`interface nsIASN1Object : nsISupports`",null,null],[3,"nsIDOMMutationEvent","","`interface nsIDOMMutationEvent : nsISupports`",null,null],[3,"nsIFileURL","","`interface nsIFileURL : nsIURL`",null,null],[3,"nsIWebBrowserPersistURIMap","","`interface nsIWebBrowserPersistURIMap : nsISupports`",null,null],[3,"nsIWebBrowserPersistDocument","","`interface nsIWebBrowserPersistDocument : nsISupports`",null,null],[3,"nsIWebBrowserPersistResourceVisitor","","`interface nsIWebBrowserPersistResourceVisitor : nsISupports`",null,null],[3,"nsIWebBrowserPersistWriteCompletion","","`interface nsIWebBrowserPersistWriteCompletion : nsISupports`",null,null],[3,"nsIWebBrowserPersistDocumentReceiver","","`interface nsIWebBrowserPersistDocumentReceiver : nsISupports`",null,null],[3,"nsIContentProcessInfo","","`interface nsIContentProcessInfo : nsISupports`",null,null],[3,"nsIContentProcessProvider","","`interface nsIContentProcessProvider : nsISupports`",null,null],[3,"nsIDOMRange","","`interface nsIDOMRange : nsISupports`",null,null],[3,"nsIConverterInputStream","","`interface nsIConverterInputStream : nsIUnicharInputStream`",null,null],[3,"nsIAccessibleEvent","","`interface nsIAccessibleEvent : nsISupports`",null,null],[3,"nsIReadConfig","","`interface nsIReadConfig : nsISupports`",null,null],[3,"nsIDragService","","`interface nsIDragService : nsISupports`",null,null],[3,"nsIAsyncVerifyRedirectCallback","","`interface nsIAsyncVerifyRedirectCallback : nsISupports`",null,null],[3,"nsIDownloadManagerResult","","`interface nsIDownloadManagerResult : nsISupports`",null,null],[3,"nsIDownloadManager","","`interface nsIDownloadManager : nsISupports`",null,null],[3,"nsIDOMScrollAreaEvent","","`interface nsIDOMScrollAreaEvent : nsIDOMUIEvent`",null,null],[3,"nsIDOMCSSValue","","`interface nsIDOMCSSValue : nsISupports`",null,null],[3,"nsISAXXMLReader","","`interface nsISAXXMLReader : nsIStreamListener`",null,null],[3,"nsIPermission","","`interface nsIPermission : nsISupports`",null,null],[3,"nsIDOMCSSGroupingRule","","`interface nsIDOMCSSGroupingRule : nsISupports`",null,null],[3,"nsIBrowser","","`interface nsIBrowser : nsISupports`",null,null],[3,"nsICacheService","","`interface nsICacheService : nsISupports`",null,null],[3,"nsICacheServiceInternal","","`interface nsICacheServiceInternal : nsICacheService`",null,null],[3,"nsITCPSocketCallback","","`interface nsITCPSocketCallback : nsISupports`",null,null],[3,"nsIJARURI","","`interface nsIJARURI : nsIURL`",null,null],[3,"amIAddonPathService","","`interface amIAddonPathService : nsISupports`",null,null],[3,"nsIAccessibleHyperText","","`interface nsIAccessibleHyperText : nsISupports`",null,null],[3,"nsIDOMRect","","`interface nsIDOMRect : nsISupports`",null,null],[3,"nsIFormFillController","","`interface nsIFormFillController : nsISupports`",null,null],[3,"nsIStreamBufferAccess","","`interface nsIStreamBufferAccess : nsISupports`",null,null],[3,"nsIURLFormatter","","`interface nsIURLFormatter : nsISupports`",null,null],[3,"nsITabParent","","`interface nsITabParent : nsISupports`",null,null],[3,"nsIJSInspector","","`interface nsIJSInspector : nsISupports`",null,null],[3,"nsIHttpAuthenticator","","`interface nsIHttpAuthenticator : nsISupports`",null,null],[3,"nsIPrefBranch","","`interface nsIPrefBranch : nsISupports`",null,null],[3,"nsIThread","","`interface nsIThread : nsISerialEventTarget`",null,null],[3,"nsIDOMChromeWindow","","`interface nsIDOMChromeWindow : nsISupports`",null,null],[3,"nsIFTPChannel","","`interface nsIFTPChannel : nsISupports`",null,null],[3,"nsIFTPEventSink","","`interface nsIFTPEventSink : nsISupports`",null,null],[3,"nsIAutoCompletePopup","","`interface nsIAutoCompletePopup : nsISupports`",null,null],[3,"nsILoginInfo","","`interface nsILoginInfo : nsISupports`",null,null],[3,"nsIDOMPaintRequest","","`interface nsIDOMPaintRequest : nsISupports`",null,null],[3,"nsIStyleSheetService","","`interface nsIStyleSheetService : nsISupports`",null,null],[3,"nsIHttpChannelChild","","`interface nsIHttpChannelChild : nsISupports`",null,null],[3,"nsIDocShellTreeOwner","","`interface nsIDocShellTreeOwner : nsISupports`",null,null],[3,"nsIDocCharset","","`interface nsIDocCharset : nsISupports`",null,null],[3,"nsIIncrementalDownload","","`interface nsIIncrementalDownload : nsIRequest`",null,null],[3,"mozIAsyncFavicons","","`interface mozIAsyncFavicons : nsISupports`",null,null],[3,"nsIAboutModule","","`interface nsIAboutModule : nsISupports`",null,null],[3,"nsIWifiListener","","`interface nsIWifiListener : nsISupports`",null,null],[3,"nsIHangDetails","","`interface nsIHangDetails : nsISupports`",null,null],[3,"nsICookiePermission","","`interface nsICookiePermission : nsISupports`",null,null],[3,"nsICacheEntry","","`interface nsICacheEntry : nsISupports`",null,null],[3,"nsICacheEntryMetaDataVisitor","","`interface nsICacheEntryMetaDataVisitor : nsISupports`",null,null],[3,"nsIGeolocationUpdate","","`interface nsIGeolocationUpdate : nsISupports`",null,null],[3,"nsIGeolocationProvider","","`interface nsIGeolocationProvider : nsISupports`",null,null],[3,"nsIApplicationCacheService","","`interface nsIApplicationCacheService : nsISupports`",null,null],[3,"nsIEditActionListener","","`interface nsIEditActionListener : nsISupports`",null,null],[3,"nsITreeSelection","","`interface nsITreeSelection : nsISupports`",null,null],[3,"nsINativeTreeSelection","","`interface nsINativeTreeSelection : nsITreeSelection`",null,null],[3,"nsIInputStream","","`interface nsIInputStream : nsISupports`",null,null],[3,"nsIObserverService","","`interface nsIObserverService : nsISupports`",null,null],[3,"nsIDOMMouseScrollEvent","","`interface nsIDOMMouseScrollEvent : nsIDOMMouseEvent`",null,null],[3,"nsISelection","","`interface nsISelection : nsISupports`",null,null],[3,"nsITokenPasswordDialogs","","`interface nsITokenPasswordDialogs : nsISupports`",null,null],[3,"nsIWebBrowserPrint","","`interface nsIWebBrowserPrint : nsISupports`",null,null],[3,"nsIHTTPIndex","","`interface nsIHTTPIndex : nsISupports`",null,null],[3,"nsIDeprecationWarner","","`interface nsIDeprecationWarner : nsISupports`",null,null],[3,"nsISensitiveInfoHiddenURI","","`interface nsISensitiveInfoHiddenURI : nsISupports`",null,null],[3,"nsIPlatformInfo","","`interface nsIPlatformInfo : nsISupports`",null,null],[3,"nsIUrlClassifierPositiveCacheEntry","","`interface nsIUrlClassifierPositiveCacheEntry : nsISupports`",null,null],[3,"nsIUrlClassifierCacheEntry","","`interface nsIUrlClassifierCacheEntry : nsISupports`",null,null],[3,"nsIUrlClassifierCacheInfo","","`interface nsIUrlClassifierCacheInfo : nsISupports`",null,null],[3,"nsIUrlClassifierGetCacheCallback","","`interface nsIUrlClassifierGetCacheCallback : nsISupports`",null,null],[3,"nsIUrlClassifierInfo","","`interface nsIUrlClassifierInfo : nsISupports`",null,null],[3,"nsIResumableChannel","","`interface nsIResumableChannel : nsISupports`",null,null],[3,"nsIExpatSink","","`interface nsIExpatSink : nsISupports`",null,null],[3,"nsIPrivateBrowsingChannel","","`interface nsIPrivateBrowsingChannel : nsISupports`",null,null],[3,"nsIWifiMonitor","","`interface nsIWifiMonitor : nsISupports`",null,null],[3,"nsIGIOMimeApp","","`interface nsIGIOMimeApp : nsIHandlerApp`",null,null],[3,"nsIGIOService","","`interface nsIGIOService : nsISupports`",null,null],[3,"nsILoadGroupChild","","`interface nsILoadGroupChild : nsISupports`",null,null],[3,"nsIPluginTag","","`interface nsIPluginTag : nsISupports`",null,null],[3,"nsIFakePluginTag","","`interface nsIFakePluginTag : nsIPluginTag`",null,null],[3,"nsIEditor","","`interface nsIEditor : nsISupports`",null,null],[3,"nsIObserver","","`interface nsIObserver : nsISupports`",null,null],[3,"nsIXPCTestBug809674","","`interface nsIXPCTestBug809674 : nsISupports`",null,null],[3,"nsIDOMFileList","","`interface nsIDOMFileList : nsISupports`",null,null],[3,"nsICycleCollectorHandler","","`interface nsICycleCollectorHandler : nsISupports`",null,null],[3,"nsICycleCollectorLogSink","","`interface nsICycleCollectorLogSink : nsISupports`",null,null],[3,"nsICycleCollectorListener","","`interface nsICycleCollectorListener : nsISupports`",null,null],[3,"nsIDivertableChannel","","`interface nsIDivertableChannel : nsISupports`",null,null],[3,"nsIDOMDOMException","","`interface nsIDOMDOMException : nsISupports`",null,null],[3,"nsISecurityUITelemetry","","`interface nsISecurityUITelemetry : nsISupports`",null,null],[3,"nsIWifiAccessPoint","","`interface nsIWifiAccessPoint : nsISupports`",null,null],[3,"nsIDroppedLinkItem","","`interface nsIDroppedLinkItem : nsISupports`",null,null],[3,"nsIDroppedLinkHandler","","`interface nsIDroppedLinkHandler : nsISupports`",null,null],[3,"amIAddonManager","","`interface amIAddonManager : nsISupports`",null,null],[3,"nsIAccessibleSelectable","","`interface nsIAccessibleSelectable : nsISupports`",null,null],[3,"nsIClientAuthDialogs","","`interface nsIClientAuthDialogs : nsISupports`",null,null],[3,"nsIClientAuthUserDecision","","`interface nsIClientAuthUserDecision : nsISupports`",null,null],[3,"nsINetworkPredictor","","`interface nsINetworkPredictor : nsISupports`",null,null],[3,"nsIVersionComparator","","`interface nsIVersionComparator : nsISupports`",null,null],[3,"imgICache","","`interface imgICache : nsISupports`",null,null],[3,"nsIReflowObserver","","`interface nsIReflowObserver : nsISupports`",null,null],[3,"nsIFetchTelemetryDataCallback","","`interface nsIFetchTelemetryDataCallback : nsISupports`",null,null],[3,"nsITelemetry","","`interface nsITelemetry : nsISupports`",null,null],[3,"nsIMessageLoop","","`interface nsIMessageLoop : nsISupports`",null,null],[3,"nsIDOMXULLabelElement","","`interface nsIDOMXULLabelElement : nsIDOMXULDescriptionElement`",null,null],[3,"nsIPresentationSessionRequest","","`interface nsIPresentationSessionRequest : nsISupports`",null,null],[3,"nsICacheSession","","`interface nsICacheSession : nsISupports`",null,null],[3,"nsIPrefService","","`interface nsIPrefService : nsISupports`",null,null],[3,"nsIBlocklistService","","`interface nsIBlocklistService : nsISupports`",null,null],[3,"nsIBlocklistPrompt","","`interface nsIBlocklistPrompt : nsISupports`",null,null],[3,"nsIFilePickerShownCallback","","`interface nsIFilePickerShownCallback : nsISupports`",null,null],[3,"nsIFilePicker","","`interface nsIFilePicker : nsISupports`",null,null],[3,"nsIUrlClassifierStreamUpdater","","`interface nsIUrlClassifierStreamUpdater : nsISupports`",null,null],[3,"nsIDOMCSSKeyframesRule","","`interface nsIDOMCSSKeyframesRule : nsISupports`",null,null],[3,"mozIGeckoMediaPluginChromeService","","`interface mozIGeckoMediaPluginChromeService : nsISupports`",null,null],[3,"nsIBadCertListener2","","`interface nsIBadCertListener2 : nsISupports`",null,null],[3,"nsIServerTiming","","`interface nsIServerTiming : nsISupports`",null,null],[3,"nsITimedChannel","","`interface nsITimedChannel : nsISupports`",null,null],[3,"nsIUploadChannel","","`interface nsIUploadChannel : nsISupports`",null,null],[3,"nsIContentSecurityPolicy","","`interface nsIContentSecurityPolicy : nsISerializable`",null,null],[3,"nsISelectionListener","","`interface nsISelectionListener : nsISupports`",null,null],[3,"nsIRDFResource","","`interface nsIRDFResource : nsIRDFNode`",null,null],[3,"nsIRefreshURI","","`interface nsIRefreshURI : nsISupports`",null,null],[3,"nsIHttpPushListener","","`interface nsIHttpPushListener : nsISupports`",null,null],[3,"nsIFileView","","`interface nsIFileView : nsISupports`",null,null],[3,"nsIAccessibleApplication","","`interface nsIAccessibleApplication : nsISupports`",null,null],[3,"nsIDOMGeoPosition","","`interface nsIDOMGeoPosition : nsISupports`",null,null],[3,"nsILoginManagerStorage","","`interface nsILoginManagerStorage : nsISupports`",null,null],[3,"nsIDOMGeoPositionCoords","","`interface nsIDOMGeoPositionCoords : nsISupports`",null,null],[3,"nsIDOMHTMLFormElement","","`interface nsIDOMHTMLFormElement : nsISupports`",null,null],[3,"nsIDataType","","`interface nsIDataType : nsISupports`",null,null],[3,"nsIVariant","","`interface nsIVariant : nsISupports`",null,null],[3,"nsIWritableVariant","","`interface nsIWritableVariant : nsIVariant`",null,null],[3,"mozIStorageAsyncConnection","","`interface mozIStorageAsyncConnection : nsISupports`",null,null],[3,"nsIRDFInMemoryDataSource","","`interface nsIRDFInMemoryDataSource : nsISupports`",null,null],[3,"nsIAuthPromptAdapterFactory","","`interface nsIAuthPromptAdapterFactory : nsISupports`",null,null],[3,"inICSSValueSearch","","`interface inICSSValueSearch : inISearchProcess`",null,null],[3,"nsIHttpServer","","`interface nsIHttpServer : nsISupports`",null,null],[3,"nsIHttpServerStoppedCallback","","`interface nsIHttpServerStoppedCallback : nsISupports`",null,null],[3,"nsIHttpServerIdentity","","`interface nsIHttpServerIdentity : nsISupports`",null,null],[3,"nsIHttpRequestHandler","","`interface nsIHttpRequestHandler : nsISupports`",null,null],[3,"nsIHttpRequest","","`interface nsIHttpRequest : nsISupports`",null,null],[3,"nsIHttpResponse","","`interface nsIHttpResponse : nsISupports`",null,null],[3,"nsIUrlListManager","","`interface nsIUrlListManager : nsISupports`",null,null],[3,"nsILoginMetaInfo","","`interface nsILoginMetaInfo : nsISupports`",null,null],[3,"nsIDOMHistory","","`interface nsIDOMHistory : nsISupports`",null,null],[3,"nsIPrintSession","","`interface nsIPrintSession : nsISupports`",null,null],[3,"nsIContentSecurityManager","","`interface nsIContentSecurityManager : nsISupports`",null,null],[3,"nsIDOMCSSSupportsRule","","`interface nsIDOMCSSSupportsRule : nsIDOMCSSConditionRule`",null,null],[3,"nsIPKCS11ModuleDB","","`interface nsIPKCS11ModuleDB : nsISupports`",null,null],[3,"nsIUnicharOutputStream","","`interface nsIUnicharOutputStream : nsISupports`",null,null],[3,"nsIPaymentRequestService","","`interface nsIPaymentRequestService : nsISupports`",null,null],[3,"nsIUnicharLineInputStream","","`interface nsIUnicharLineInputStream : nsISupports`",null,null],[3,"nsIRDFContainerUtils","","`interface nsIRDFContainerUtils : nsISupports`",null,null],[3,"nsIIOService","","`interface nsIIOService : nsISupports`",null,null],[3,"nsIIOServiceInternal","","`interface nsIIOServiceInternal : nsISupports`",null,null],[3,"nsIByteRangeRequest","","`interface nsIByteRangeRequest : nsISupports`",null,null],[3,"nsIRemoteBrowser","","`interface nsIRemoteBrowser : nsISupports`",null,null],[3,"nsIApplicationCacheContainer","","`interface nsIApplicationCacheContainer : nsISupports`",null,null],[3,"nsICertificateDialogs","","`interface nsICertificateDialogs : nsISupports`",null,null],[3,"nsIClipboardDragDropHookList","","`interface nsIClipboardDragDropHookList : nsISupports`",null,null],[3,"nsISimpleEnumerator","","`interface nsISimpleEnumerator : nsISupports`",null,null],[3,"nsIFaviconService","","`interface nsIFaviconService : nsISupports`",null,null],[3,"nsIFaviconDataCallback","","`interface nsIFaviconDataCallback : nsISupports`",null,null],[3,"nsINSSVersion","","`interface nsINSSVersion : nsISupports`",null,null],[3,"nsITokenDialogs","","`interface nsITokenDialogs : nsISupports`",null,null],[3,"nsISSLStatus","","`interface nsISSLStatus : nsISupports`",null,null],[3,"nsIDOMCommandEvent","","`interface nsIDOMCommandEvent : nsISupports`",null,null],[3,"nsISelectionDisplay","","`interface nsISelectionDisplay : nsISupports`",null,null],[3,"nsIMemory","","`interface nsIMemory : nsISupports`",null,null],[3,"nsIURIClassifierCallback","","`interface nsIURIClassifierCallback : nsISupports`",null,null],[3,"nsIURIClassifier","","`interface nsIURIClassifier : nsISupports`",null,null],[3,"nsIDOMSerializer","","`interface nsIDOMSerializer : nsISupports`",null,null],[3,"nsISerializationHelper","","`interface nsISerializationHelper : nsISupports`",null,null],[3,"nsIInterfaceInfo","","`interface nsIInterfaceInfo : nsISupports`",null,null],[3,"nsISpeculativeConnect","","`interface nsISpeculativeConnect : nsISupports`",null,null],[3,"nsISpeculativeConnectionOverrider","","`interface nsISpeculativeConnectionOverrider : nsISupports`",null,null],[3,"nsIZipWriter","","`interface nsIZipWriter : nsISupports`",null,null],[3,"nsIDOMNotifyPaintEvent","","`interface nsIDOMNotifyPaintEvent : nsISupports`",null,null],[3,"imgIContainerDebug","","`interface imgIContainerDebug : nsISupports`",null,null],[3,"nsINetworkLinkService","","`interface nsINetworkLinkService : nsISupports`",null,null],[3,"nsIConsoleMessage","","`interface nsIConsoleMessage : nsISupports`",null,null],[3,"nsITreeColumn","","`interface nsITreeColumn : nsISupports`",null,null],[3,"nsITreeColumns","","`interface nsITreeColumns : nsISupports`",null,null],[3,"nsINavHistoryResultNode","","`interface nsINavHistoryResultNode : nsISupports`",null,null],[3,"nsINavHistoryContainerResultNode","","`interface nsINavHistoryContainerResultNode : nsINavHistoryResultNode`",null,null],[3,"nsINavHistoryQueryResultNode","","`interface nsINavHistoryQueryResultNode : nsINavHistoryContainerResultNode`",null,null],[3,"nsINavHistoryResultObserver","","`interface nsINavHistoryResultObserver : nsISupports`",null,null],[3,"nsINavHistoryResultTreeViewer","","`interface nsINavHistoryResultTreeViewer : nsINavHistoryResultObserver`",null,null],[3,"nsINavHistoryResult","","`interface nsINavHistoryResult : nsISupports`",null,null],[3,"nsINavHistoryObserver","","`interface nsINavHistoryObserver : nsISupports`",null,null],[3,"nsINavHistoryQuery","","`interface nsINavHistoryQuery : nsISupports`",null,null],[3,"nsINavHistoryQueryOptions","","`interface nsINavHistoryQueryOptions : nsISupports`",null,null],[3,"nsINavHistoryService","","`interface nsINavHistoryService : nsISupports`",null,null],[3,"nsINavHistoryBatchCallback","","`interface nsINavHistoryBatchCallback : nsISupports`",null,null],[3,"nsIASN1PrintableItem","","`interface nsIASN1PrintableItem : nsIASN1Object`",null,null],[3,"nsIDOMFontFaceList","","`interface nsIDOMFontFaceList : nsISupports`",null,null],[3,"nsIDOMDocument","","`interface nsIDOMDocument : nsIDOMNode`",null,null],[3,"nsIXPCException","","`interface nsIXPCException : nsIException`",null,null],[3,"nsISeekableStream","","`interface nsISeekableStream : nsISupports`",null,null],[3,"nsISecCheckWrapChannel","","`interface nsISecCheckWrapChannel : nsISupports`",null,null],[3,"nsILoadContextInfo","","`interface nsILoadContextInfo : nsISupports`",null,null],[3,"nsILoadContextInfoFactory","","`interface nsILoadContextInfoFactory : nsISupports`",null,null],[3,"nsIBrowserGlue","","`interface nsIBrowserGlue : nsISupports`",null,null],[3,"nsIAccessibleText","","`interface nsIAccessibleText : nsISupports`",null,null],[3,"nsIAutoCompleteSearch","","`interface nsIAutoCompleteSearch : nsISupports`",null,null],[3,"nsIAutoCompleteObserver","","`interface nsIAutoCompleteObserver : nsISupports`",null,null],[3,"nsIAutoCompleteSearchDescriptor","","`interface nsIAutoCompleteSearchDescriptor : nsISupports`",null,null],[3,"txIFunctionEvaluationContext","","`interface txIFunctionEvaluationContext : nsISupports`",null,null],[3,"nsIConsoleListener","","`interface nsIConsoleListener : nsISupports`",null,null],[3,"nsIContentPrefObserver","","`interface nsIContentPrefObserver : nsISupports`",null,null],[3,"nsIContentPrefService2","","`interface nsIContentPrefService2 : nsISupports`",null,null],[3,"nsIContentPrefCallback2","","`interface nsIContentPrefCallback2 : nsISupports`",null,null],[3,"nsIContentPref","","`interface nsIContentPref : nsISupports`",null,null],[3,"nsISelectionController","","`interface nsISelectionController : nsISelectionDisplay`",null,null],[3,"txIXPathObject","","`interface txIXPathObject : nsISupports`",null,null],[3,"nsITypeAheadFind","","`interface nsITypeAheadFind : nsISupports`",null,null],[3,"nsIHttpAuthenticatorCallback","","`interface nsIHttpAuthenticatorCallback : nsISupports`",null,null],[3,"nsIDOMTreeWalker","","`interface nsIDOMTreeWalker : nsISupports`",null,null],[3,"nsIScriptableRegion","","`interface nsIScriptableRegion : nsISupports`",null,null],[3,"nsIXULAppInfo","","`interface nsIXULAppInfo : nsIPlatformInfo`",null,null],[3,"nsIXULOverlayProvider","","`interface nsIXULOverlayProvider : nsISupports`",null,null],[3,"nsIHandlerInfo","","`interface nsIHandlerInfo : nsISupports`",null,null],[3,"nsIMIMEInfo","","`interface nsIMIMEInfo : nsIHandlerInfo`",null,null],[3,"nsIHandlerApp","","`interface nsIHandlerApp : nsISupports`",null,null],[3,"nsILocalHandlerApp","","`interface nsILocalHandlerApp : nsIHandlerApp`",null,null],[3,"nsIWebHandlerApp","","`interface nsIWebHandlerApp : nsIHandlerApp`",null,null],[3,"nsIDBusHandlerApp","","`interface nsIDBusHandlerApp : nsIHandlerApp`",null,null],[3,"nsISAXErrorHandler","","`interface nsISAXErrorHandler : nsISupports`",null,null],[3,"nsIIdentityCryptoService","","`interface nsIIdentityCryptoService : nsISupports`",null,null],[3,"nsIIdentityKeyPair","","`interface nsIIdentityKeyPair : nsISupports`",null,null],[3,"nsIIdentityKeyGenCallback","","`interface nsIIdentityKeyGenCallback : nsISupports`",null,null],[3,"nsIIdentitySignCallback","","`interface nsIIdentitySignCallback : nsISupports`",null,null],[3,"xpcIJSModuleLoader","","`interface xpcIJSModuleLoader : nsISupports`",null,null],[3,"nsILoadInfo","","`interface nsILoadInfo : nsISupports`",null,null],[3,"nsIEffectiveTLDService","","`interface nsIEffectiveTLDService : nsISupports`",null,null],[3,"nsIWebProgress","","`interface nsIWebProgress : nsISupports`",null,null],[3,"nsISupports","","`interface nsISupports`",null,null],[3,"nsINativeAppSupport","","`interface nsINativeAppSupport : nsISupports`",null,null],[3,"mozIExtensionProcessScript","","`interface mozIExtensionProcessScript : nsISupports`",null,null],[3,"nsPICommandUpdater","","`interface nsPICommandUpdater : nsISupports`",null,null],[3,"nsIIdleService","","`interface nsIIdleService : nsISupports`",null,null],[3,"nsIShellService","","`interface nsIShellService : nsISupports`",null,null],[3,"mozIPlacesPendingOperation","","`interface mozIPlacesPendingOperation : nsISupports`",null,null],[3,"nsIScrollable","","`interface nsIScrollable : nsISupports`",null,null],[3,"NetDashboardCallback","","`interface NetDashboardCallback : nsISupports`",null,null],[3,"nsIDashboard","","`interface nsIDashboard : nsISupports`",null,null],[3,"nsIRDFInferDataSource","","`interface nsIRDFInferDataSource : nsIRDFDataSource`",null,null],[3,"nsICommandParams","","`interface nsICommandParams : nsISupports`",null,null],[3,"nsICacheStorageService","","`interface nsICacheStorageService : nsISupports`",null,null],[3,"nsICacheStorageConsumptionObserver","","`interface nsICacheStorageConsumptionObserver : nsISupports`",null,null],[3,"nsPIPlacesDatabase","","`interface nsPIPlacesDatabase : nsISupports`",null,null],[3,"nsIEditorSpellCheck","","`interface nsIEditorSpellCheck : nsISupports`",null,null],[3,"nsIEditorSpellCheckCallback","","`interface nsIEditorSpellCheckCallback : nsISupports`",null,null],[3,"nsIContentHandler","","`interface nsIContentHandler : nsISupports`",null,null],[3,"nsITimerCallback","","`interface nsITimerCallback : nsISupports`",null,null],[3,"nsITimer","","`interface nsITimer : nsISupports`",null,null],[3,"nsIWebBrowserPersistable","","`interface nsIWebBrowserPersistable : nsISupports`",null,null],[3,"nsIHttpAuthManager","","`interface nsIHttpAuthManager : nsISupports`",null,null],[3,"nsIQuotaUsageResult","","`interface nsIQuotaUsageResult : nsISupports`",null,null],[3,"nsIQuotaOriginUsageResult","","`interface nsIQuotaOriginUsageResult : nsISupports`",null,null],[3,"nsIXPCTestObjectReadOnly","","`interface nsIXPCTestObjectReadOnly : nsISupports`",null,null],[3,"nsIXPCTestObjectReadWrite","","`interface nsIXPCTestObjectReadWrite : nsISupports`",null,null],[3,"nsIHttpHeaderVisitor","","`interface nsIHttpHeaderVisitor : nsISupports`",null,null],[3,"nsIGfxInfoDebug","","`interface nsIGfxInfoDebug : nsISupports`",null,null],[3,"nsIControllerCommand","","`interface nsIControllerCommand : nsISupports`",null,null],[3,"nsIDragSession","","`interface nsIDragSession : nsISupports`",null,null],[3,"nsIProxiedChannel","","`interface nsIProxiedChannel : nsISupports`",null,null],[3,"nsIAccessibleTableChangeEvent","","`interface nsIAccessibleTableChangeEvent : nsIAccessibleEvent`",null,null],[3,"nsIDOMStorage","","`interface nsIDOMStorage : nsISupports`",null,null],[3,"nsICacheEntryOpenCallback","","`interface nsICacheEntryOpenCallback : nsISupports`",null,null],[3,"nsIUDPSocket","","`interface nsIUDPSocket : nsISupports`",null,null],[3,"nsIUDPSocketListener","","`interface nsIUDPSocketListener : nsISupports`",null,null],[3,"nsIUDPMessage","","`interface nsIUDPMessage : nsISupports`",null,null],[3,"nsIObjectLoadingContent","","`interface nsIObjectLoadingContent : nsISupports`",null,null],[3,"nsIXSLTProcessor","","`interface nsIXSLTProcessor : nsISupports`",null,null],[3,"nsIWorkerDebuggerManagerListener","","`interface nsIWorkerDebuggerManagerListener : nsISupports`",null,null],[3,"nsIWorkerDebuggerManager","","`interface nsIWorkerDebuggerManager : nsISupports`",null,null],[3,"nsICacheTesting","","`interface nsICacheTesting : nsISupports`",null,null],[3,"nsIDOMWindow","","`interface nsIDOMWindow : nsISupports`",null,null],[3,"nsIPluginDocument","","`interface nsIPluginDocument : nsISupports`",null,null],[3,"nsIDOMCustomEvent","","`interface nsIDOMCustomEvent : nsISupports`",null,null],[3,"nsIContentPolicy","","`interface nsIContentPolicy : nsISupports`",null,null],[3,"nsIWritablePropertyBag2","","`interface nsIWritablePropertyBag2 : nsIPropertyBag2`",null,null],[3,"nsIRDFLiteral","","`interface nsIRDFLiteral : nsIRDFNode`",null,null],[3,"nsIRDFDate","","`interface nsIRDFDate : nsIRDFNode`",null,null],[3,"nsIRDFInt","","`interface nsIRDFInt : nsIRDFNode`",null,null],[3,"nsIRDFBlob","","`interface nsIRDFBlob : nsIRDFNode`",null,null],[3,"nsIDOMCSSUnknownRule","","`interface nsIDOMCSSUnknownRule : nsISupports`",null,null],[3,"nsIDataSignatureVerifier","","`interface nsIDataSignatureVerifier : nsISupports`",null,null],[3,"mozIPersonalDictionary","","`interface mozIPersonalDictionary : nsISupports`",null,null],[3,"nsISecureBrowserUI","","`interface nsISecureBrowserUI : nsISupports`",null,null],[3,"nsIDOMMozBrowserFrame","","`interface nsIDOMMozBrowserFrame : nsISupports`",null,null],[3,"nsIListNetworkAddressesListener","","`interface nsIListNetworkAddressesListener : nsISupports`",null,null],[3,"nsIGetHostnameListener","","`interface nsIGetHostnameListener : nsISupports`",null,null],[3,"nsINetworkInfoService","","`interface nsINetworkInfoService : nsISupports`",null,null],[3,"nsIEditingSession","","`interface nsIEditingSession : nsISupports`",null,null],[3,"nsITreeView","","`interface nsITreeView : nsISupports`",null,null],[3,"nsINativeTreeView","","`interface nsINativeTreeView : nsITreeView`",null,null],[3,"nsIDOMDocumentXBL","","`interface nsIDOMDocumentXBL : nsISupports`",null,null],[3,"nsIMenuBoxObject","","`interface nsIMenuBoxObject : nsISupports`",null,null],[3,"nsICursorContinueCallback","","`interface nsICursorContinueCallback : nsISupports`",null,null],[3,"nsIDOMDOMCursor","","`interface nsIDOMDOMCursor : nsISupports`",null,null],[3,"nsICommandLineRunner","","`interface nsICommandLineRunner : nsICommandLine`",null,null],[3,"nsIHangReport","","`interface nsIHangReport : nsISupports`",null,null],[3,"nsISHistory","","`interface nsISHistory : nsISupports`",null,null],[3,"nsIClassInfo","","`interface nsIClassInfo : nsISupports`",null,null],[3,"nsIWyciwygChannel","","`interface nsIWyciwygChannel : nsIChannel`",null,null],[3,"mozIAsyncLivemarks","","`interface mozIAsyncLivemarks : nsISupports`",null,null],[3,"mozILivemarkInfo","","`interface mozILivemarkInfo : nsISupports`",null,null],[3,"mozILivemark","","`interface mozILivemark : mozILivemarkInfo`",null,null],[3,"nsIRDFDataSource","","`interface nsIRDFDataSource : nsISupports`",null,null],[3,"nsIDOMCSSRuleList","","`interface nsIDOMCSSRuleList : nsISupports`",null,null],[3,"nsIParentalControlsService","","`interface nsIParentalControlsService : nsISupports`",null,null],[3,"mozIDownloadPlatform","","`interface mozIDownloadPlatform : nsISupports`",null,null],[3,"nsIRemoteWindowContext","","`interface nsIRemoteWindowContext : nsISupports`",null,null],[3,"nsITransactionManager","","`interface nsITransactionManager : nsISupports`",null,null],[3,"nsIWorkerTestCallback","","`interface nsIWorkerTestCallback : nsISupports`",null,null],[3,"nsIWorkerTest","","`interface nsIWorkerTest : nsISupports`",null,null],[3,"nsIEditorObserver","","`interface nsIEditorObserver : nsISupports`",null,null],[3,"nsITreeContentView","","`interface nsITreeContentView : nsISupports`",null,null],[3,"nsIFinalizationWitnessService","","`interface nsIFinalizationWitnessService : nsISupports`",null,null],[3,"inISearchProcess","","`interface inISearchProcess : nsISupports`",null,null],[3,"nsIPaymentActionCallback","","`interface nsIPaymentActionCallback : nsISupports`",null,null],[3,"nsIPaymentActionRequest","","`interface nsIPaymentActionRequest : nsISupports`",null,null],[3,"nsIPaymentCreateActionRequest","","`interface nsIPaymentCreateActionRequest : nsIPaymentActionRequest`",null,null],[3,"nsIPaymentCompleteActionRequest","","`interface nsIPaymentCompleteActionRequest : nsIPaymentActionRequest`",null,null],[3,"nsIPaymentUpdateActionRequest","","`interface nsIPaymentUpdateActionRequest : nsIPaymentActionRequest`",null,null],[3,"nsIDOMXULLabeledControlElement","","`interface nsIDOMXULLabeledControlElement : nsIDOMXULControlElement`",null,null],[3,"nsIPaymentResponseData","","`interface nsIPaymentResponseData : nsISupports`",null,null],[3,"nsIGeneralResponseData","","`interface nsIGeneralResponseData : nsIPaymentResponseData`",null,null],[3,"nsIBasicCardResponseData","","`interface nsIBasicCardResponseData : nsIPaymentResponseData`",null,null],[3,"nsIPaymentActionResponse","","`interface nsIPaymentActionResponse : nsISupports`",null,null],[3,"nsIPaymentCanMakeActionResponse","","`interface nsIPaymentCanMakeActionResponse : nsIPaymentActionResponse`",null,null],[3,"nsIPaymentShowActionResponse","","`interface nsIPaymentShowActionResponse : nsIPaymentActionResponse`",null,null],[3,"nsIPaymentAbortActionResponse","","`interface nsIPaymentAbortActionResponse : nsIPaymentActionResponse`",null,null],[3,"nsIPaymentCompleteActionResponse","","`interface nsIPaymentCompleteActionResponse : nsIPaymentActionResponse`",null,null],[3,"nsIWebBrowserChrome2","","`interface nsIWebBrowserChrome2 : nsIWebBrowserChrome`",null,null],[3,"nsIWebSocketFrame","","`interface nsIWebSocketFrame : nsISupports`",null,null],[3,"nsIWebSocketEventListener","","`interface nsIWebSocketEventListener : nsISupports`",null,null],[3,"nsIWebSocketEventService","","`interface nsIWebSocketEventService : nsISupports`",null,null],[3,"nsIServerSocket","","`interface nsIServerSocket : nsISupports`",null,null],[3,"nsIServerSocketListener","","`interface nsIServerSocketListener : nsISupports`",null,null],[3,"nsIProxiedProtocolHandler","","`interface nsIProxiedProtocolHandler : nsIProtocolHandler`",null,null],[3,"nsIStorageStream","","`interface nsIStorageStream : nsISupports`",null,null],[3,"nsIScriptableUnicodeConverter","","`interface nsIScriptableUnicodeConverter : nsISupports`",null,null],[3,"nsIForcePendingChannel","","`interface nsIForcePendingChannel : nsISupports`",null,null],[3,"nsIExternalProtocolHandler","","`interface nsIExternalProtocolHandler : nsIProtocolHandler`",null,null],[3,"nsIInlineSpellChecker","","`interface nsIInlineSpellChecker : nsISupports`",null,null],[3,"nsIQueryContentEventResult","","`interface nsIQueryContentEventResult : nsISupports`",null,null],[3,"nsIDOMClipboardEvent","","`interface nsIDOMClipboardEvent : nsISupports`",null,null],[3,"nsIDOMXULElement","","`interface nsIDOMXULElement : nsIDOMElement`",null,null],[3,"inIDOMUtils","","`interface inIDOMUtils : nsISupports`",null,null],[3,"nsIPushSubscription","","`interface nsIPushSubscription : nsISupports`",null,null],[3,"nsIPushSubscriptionCallback","","`interface nsIPushSubscriptionCallback : nsISupports`",null,null],[3,"nsIUnsubscribeResultCallback","","`interface nsIUnsubscribeResultCallback : nsISupports`",null,null],[3,"nsIPushClearResultCallback","","`interface nsIPushClearResultCallback : nsISupports`",null,null],[3,"nsIPushService","","`interface nsIPushService : nsISupports`",null,null],[3,"nsIPushQuotaManager","","`interface nsIPushQuotaManager : nsISupports`",null,null],[3,"nsITabChild","","`interface nsITabChild : nsISupports`",null,null],[3,"nsISHContainer","","`interface nsISHContainer : nsISupports`",null,null],[3,"nsIRDFObserver","","`interface nsIRDFObserver : nsISupports`",null,null],[3,"nsINetworkPredictorVerifier","","`interface nsINetworkPredictorVerifier : nsISupports`",null,null],[3,"nsIControllerContext","","`interface nsIControllerContext : nsISupports`",null,null],[3,"nsIDNSListener","","`interface nsIDNSListener : nsISupports`",null,null],[3,"nsIDNSListenerProxy","","`interface nsIDNSListenerProxy : nsISupports`",null,null],[3,"IPeerConnectionObserver","","`interface IPeerConnectionObserver : nsISupports`",null,null],[3,"IPeerConnection","","`interface IPeerConnection : nsISupports`",null,null],[3,"mozIStorageResultSet","","`interface mozIStorageResultSet : nsISupports`",null,null],[3,"nsIDocumentLoaderFactory","","`interface nsIDocumentLoaderFactory : nsISupports`",null,null],[3,"nsIAccessiblePivot","","`interface nsIAccessiblePivot : nsISupports`",null,null],[3,"nsIAccessiblePivotObserver","","`interface nsIAccessiblePivotObserver : nsISupports`",null,null],[3,"nsIAccessibleTraversalRule","","`interface nsIAccessibleTraversalRule : nsISupports`",null,null],[3,"nsIAutoConfig","","`interface nsIAutoConfig : nsISupports`",null,null],[3,"nsINullChannel","","`interface nsINullChannel : nsISupports`",null,null],[3,"nsIDOMSVGLength","","`interface nsIDOMSVGLength : nsISupports`",null,null],[3,"nsIUnicharInputStream","","`interface nsIUnicharInputStream : nsISupports`",null,null],[3,"nsISOCKSSocketInfo","","`interface nsISOCKSSocketInfo : nsISupports`",null,null],[3,"nsIPartialSHistoryListener","","`interface nsIPartialSHistoryListener : nsISupports`",null,null],[3,"nsIXPCTestFunctionInterface","","`interface nsIXPCTestFunctionInterface : nsISupports`",null,null],[3,"nsIXPCTestUtils","","`interface nsIXPCTestUtils : nsISupports`",null,null],[3,"nsIContainerBoxObject","","`interface nsIContainerBoxObject : nsISupports`",null,null],[3,"nsICacheEntryDescriptor","","`interface nsICacheEntryDescriptor : nsICacheEntryInfo`",null,null],[3,"nsICacheMetaDataVisitor","","`interface nsICacheMetaDataVisitor : nsISupports`",null,null],[3,"nsIStringInputStream","","`interface nsIStringInputStream : nsIInputStream`",null,null],[3,"nsIPresentationAvailabilityListener","","`interface nsIPresentationAvailabilityListener : nsISupports`",null,null],[3,"nsIPresentationSessionListener","","`interface nsIPresentationSessionListener : nsISupports`",null,null],[3,"nsIPresentationRespondingListener","","`interface nsIPresentationRespondingListener : nsISupports`",null,null],[3,"nsIStringEnumerator","","`interface nsIStringEnumerator : nsISupports`",null,null],[3,"nsIUTF8StringEnumerator","","`interface nsIUTF8StringEnumerator : nsISupports`",null,null],[3,"nsIServiceWorkerUnregisterCallback","","`interface nsIServiceWorkerUnregisterCallback : nsISupports`",null,null],[3,"nsIServiceWorkerInfo","","`interface nsIServiceWorkerInfo : nsISupports`",null,null],[3,"nsIServiceWorkerRegistrationInfoListener","","`interface nsIServiceWorkerRegistrationInfoListener : nsISupports`",null,null],[3,"nsIServiceWorkerRegistrationInfo","","`interface nsIServiceWorkerRegistrationInfo : nsISupports`",null,null],[3,"nsIServiceWorkerManagerListener","","`interface nsIServiceWorkerManagerListener : nsISupports`",null,null],[3,"nsIServiceWorkerManager","","`interface nsIServiceWorkerManager : nsISupports`",null,null],[3,"nsISecurityEventSink","","`interface nsISecurityEventSink : nsISupports`",null,null],[3,"nsIClearSiteDataCallback","","`interface nsIClearSiteDataCallback : nsISupports`",null,null],[3,"nsIPluginHost","","`interface nsIPluginHost : nsISupports`",null,null],[3,"nsIUrlClassifierParseFindFullHashCallback","","`interface nsIUrlClassifierParseFindFullHashCallback : nsISupports`",null,null],[3,"nsIUrlClassifierUtils","","`interface nsIUrlClassifierUtils : nsISupports`",null,null],[3,"nsIEnvironment","","`interface nsIEnvironment : nsISupports`",null,null],[3,"nsIEmbeddingSiteWindow","","`interface nsIEmbeddingSiteWindow : nsISupports`",null,null],[3,"nsIDOMClientRectList","","`interface nsIDOMClientRectList : nsISupports`",null,null],[3,"nsISessionStartup","","`interface nsISessionStartup : nsISupports`",null,null],[3,"nsIIOUtil","","`interface nsIIOUtil : nsISupports`",null,null],[3,"nsIUrlClassifierPrefixSet","","`interface nsIUrlClassifierPrefixSet : nsISupports`",null,null],[3,"nsIURISetSpec","","`interface nsIURISetSpec : nsISupports`",null,null],[3,"nsIURISetters","","`interface nsIURISetters : nsIURISetSpec`",null,null],[3,"nsIURIMutator","","`interface nsIURIMutator : nsIURISetters`",null,null],[3,"nsIJARProtocolHandler","","`interface nsIJARProtocolHandler : nsIProtocolHandler`",null,null],[3,"nsIListBoxObject","","`interface nsIListBoxObject : nsISupports`",null,null],[3,"nsIGfxInfo","","`interface nsIGfxInfo : nsISupports`",null,null],[3,"nsIDOMHTMLInputElement","","`interface nsIDOMHTMLInputElement : nsISupports`",null,null],[3,"inIDOMView","","`interface inIDOMView : nsISupports`",null,null],[3,"nsIOutputIterator","","`interface nsIOutputIterator : nsISupports`",null,null],[3,"nsIInputIterator","","`interface nsIInputIterator : nsISupports`",null,null],[3,"nsIForwardIterator","","`interface nsIForwardIterator : nsISupports`",null,null],[3,"nsIBidirectionalIterator","","`interface nsIBidirectionalIterator : nsISupports`",null,null],[3,"nsIRandomAccessIterator","","`interface nsIRandomAccessIterator : nsISupports`",null,null],[3,"nsINativeOSFileResult","","`interface nsINativeOSFileResult : nsISupports`",null,null],[3,"nsINativeOSFileSuccessCallback","","`interface nsINativeOSFileSuccessCallback : nsISupports`",null,null],[3,"nsINativeOSFileErrorCallback","","`interface nsINativeOSFileErrorCallback : nsISupports`",null,null],[3,"nsINativeOSFileInternalsService","","`interface nsINativeOSFileInternalsService : nsISupports`",null,null],[3,"nsIUpdatePatch","","`interface nsIUpdatePatch : nsISupports`",null,null],[3,"nsIUpdate","","`interface nsIUpdate : nsISupports`",null,null],[3,"nsIUpdateCheckListener","","`interface nsIUpdateCheckListener : nsISupports`",null,null],[3,"nsIUpdateChecker","","`interface nsIUpdateChecker : nsISupports`",null,null],[3,"nsIApplicationUpdateService","","`interface nsIApplicationUpdateService : nsISupports`",null,null],[3,"nsIUpdateProcessor","","`interface nsIUpdateProcessor : nsISupports`",null,null],[3,"nsIUpdateManager","","`interface nsIUpdateManager : nsISupports`",null,null],[3,"nsIUpdatePrompt","","`interface nsIUpdatePrompt : nsISupports`",null,null],[3,"nsIWeakReference","","`interface nsIWeakReference : nsISupports`",null,null],[3,"nsISupportsWeakReference","","`interface nsISupportsWeakReference : nsISupports`",null,null],[3,"nsINestedURI","","`interface nsINestedURI : nsISupports`",null,null],[3,"nsIWebVTTParserWrapper","","`interface nsIWebVTTParserWrapper : nsISupports`",null,null],[3,"nsIPromptFactory","","`interface nsIPromptFactory : nsISupports`",null,null],[3,"nsISocketTransport","","`interface nsISocketTransport : nsITransport`",null,null],[3,"nsIDocShellLoadInfo","","`interface nsIDocShellLoadInfo : nsISupports`",null,null],[3,"nsIDateTimeInputArea","","`interface nsIDateTimeInputArea : nsISupports`",null,null],[3,"mozIStorageValueArray","","`interface mozIStorageValueArray : nsISupports`",null,null],[3,"nsICommandLineHandler","","`interface nsICommandLineHandler : nsISupports`",null,null],[3,"nsIPlaintextEditor","","`interface nsIPlaintextEditor : nsISupports`",null,null],[3,"nsICookie2","","`interface nsICookie2 : nsICookie`",null,null],[3,"txINodeSet","","`interface txINodeSet : nsISupports`",null,null],[3,"nsISecretDecoderRing","","`interface nsISecretDecoderRing : nsISupports`",null,null],[3,"nsIZipEntry","","`interface nsIZipEntry : nsISupports`",null,null],[3,"nsIZipReader","","`interface nsIZipReader : nsISupports`",null,null],[3,"nsIZipReaderCache","","`interface nsIZipReaderCache : nsISupports`",null,null],[3,"nsIXULBrowserWindow","","`interface nsIXULBrowserWindow : nsISupports`",null,null],[3,"imgIScriptedNotificationObserver","","`interface imgIScriptedNotificationObserver : nsISupports`",null,null],[3,"nsIASN1Sequence","","`interface nsIASN1Sequence : nsIASN1Object`",null,null],[3,"nsIPrintSettings","","`interface nsIPrintSettings : nsISupports`",null,null],[3,"nsIDOMUIEvent","","`interface nsIDOMUIEvent : nsISupports`",null,null],[3,"mozISpellI18NUtil","","`interface mozISpellI18NUtil : nsISupports`",null,null],[3,"nsIToolkitChromeRegistry","","`interface nsIToolkitChromeRegistry : nsIXULChromeRegistry`",null,null],[3,"nsIRDFCompositeDataSource","","`interface nsIRDFCompositeDataSource : nsIRDFDataSource`",null,null],[3,"rdfIDataSource","","`interface rdfIDataSource : nsISupports`",null,null],[3,"nsIDOMCSSConditionRule","","`interface nsIDOMCSSConditionRule : nsIDOMCSSGroupingRule`",null,null],[3,"nsIX509CertValidity","","`interface nsIX509CertValidity : nsISupports`",null,null],[3,"nsIDocShellTreeItem","","`interface nsIDocShellTreeItem : nsISupports`",null,null],[3,"nsISharingHandlerApp","","`interface nsISharingHandlerApp : nsIHandlerApp`",null,null],[3,"nsIExternalSharingAppService","","`interface nsIExternalSharingAppService : nsISupports`",null,null],[3,"nsIImageDocument","","`interface nsIImageDocument : nsISupports`",null,null],[3,"nsIAsyncInputStream","","`interface nsIAsyncInputStream : nsIInputStream`",null,null],[3,"nsIInputStreamCallback","","`interface nsIInputStreamCallback : nsISupports`",null,null],[3,"nsINamed","","`interface nsINamed : nsISupports`",null,null],[3,"nsISystemProxySettings","","`interface nsISystemProxySettings : nsISupports`",null,null],[3,"nsIProgressEventSink","","`interface nsIProgressEventSink : nsISupports`",null,null],[3,"nsIURL","","`interface nsIURL : nsIURI`",null,null],[3,"nsILoginReputationResult","","`interface nsILoginReputationResult : nsISupports`",null,null],[3,"nsILoginReputationQuery","","`interface nsILoginReputationQuery : nsISupports`",null,null],[3,"nsILoginReputationQueryCallback","","`interface nsILoginReputationQueryCallback : nsISupports`",null,null],[3,"nsILoginReputationService","","`interface nsILoginReputationService : nsISupports`",null,null],[3,"nsIURLParser","","`interface nsIURLParser : nsISupports`",null,null],[3,"nsIDOMCounter","","`interface nsIDOMCounter : nsISupports`",null,null],[3,"nsITLSServerSocket","","`interface nsITLSServerSocket : nsIServerSocket`",null,null],[3,"nsITLSClientStatus","","`interface nsITLSClientStatus : nsISupports`",null,null],[3,"nsITLSServerConnectionInfo","","`interface nsITLSServerConnectionInfo : nsISupports`",null,null],[3,"nsITLSServerSecurityObserver","","`interface nsITLSServerSecurityObserver : nsISupports`",null,null],[3,"nsIPrintProgress","","`interface nsIPrintProgress : nsIWebProgressListener`",null,null],[3,"nsIClassOfService","","`interface nsIClassOfService : nsISupports`",null,null],[3,"nsIDOMGlobalPropertyInitializer","","`interface nsIDOMGlobalPropertyInitializer : nsISupports`",null,null],[3,"nsIDOMSVGElement","","`interface nsIDOMSVGElement : nsIDOMElement`",null,null],[3,"nsIFTPChannelParentInternal","","`interface nsIFTPChannelParentInternal : nsISupports`",null,null],[3,"mozISpellI18NManager","","`interface mozISpellI18NManager : nsISupports`",null,null],[3,"nsIDirectoryEnumerator","","`interface nsIDirectoryEnumerator : nsISupports`",null,null],[3,"nsIWebBrowser","","`interface nsIWebBrowser : nsISupports`",null,null],[3,"mozIOSPreferences","","`interface mozIOSPreferences : nsISupports`",null,null],[3,"nsIMutable","","`interface nsIMutable : nsISupports`",null,null],[3,"nsIPrefLocalizedString","","`interface nsIPrefLocalizedString : nsISupportsString`",null,null],[3,"nsIPrintSettingsService","","`interface nsIPrintSettingsService : nsISupports`",null,null],[3,"nsIThreadPoolListener","","`interface nsIThreadPoolListener : nsISupports`",null,null],[3,"nsIThreadPool","","`interface nsIThreadPool : nsIEventTarget`",null,null],[3,"nsIFeedPerson","","`interface nsIFeedPerson : nsIFeedElementBase`",null,null],[3,"nsISocketProvider","","`interface nsISocketProvider : nsISupports`",null,null],[3,"nsISessionStore","","`interface nsISessionStore : nsISupports`",null,null],[3,"nsIRandomGenerator","","`interface nsIRandomGenerator : nsISupports`",null,null],[3,"mozILocaleService","","`interface mozILocaleService : nsISupports`",null,null],[3,"nsIDOMFocusEvent","","`interface nsIDOMFocusEvent : nsIDOMUIEvent`",null,null],[3,"nsIDOMXULTextBoxElement","","`interface nsIDOMXULTextBoxElement : nsIDOMXULControlElement`",null,null],[3,"nsIProtocolHandlerWithDynamicFlags","","`interface nsIProtocolHandlerWithDynamicFlags : nsISupports`",null,null],[3,"nsIProtocolHandler","","`interface nsIProtocolHandler : nsISupports`",null,null],[3,"mozIPlacesAutoComplete","","`interface mozIPlacesAutoComplete : nsISupports`",null,null],[3,"nsIScriptableInputStream","","`interface nsIScriptableInputStream : nsISupports`",null,null],[3,"nsIMenuBuilder","","`interface nsIMenuBuilder : nsISupports`",null,null],[3,"txIEXSLTRegExFunctions","","`interface txIEXSLTRegExFunctions : nsISupports`",null,null],[3,"nsIAccessibilityService","","`interface nsIAccessibilityService : nsISupports`",null,null],[3,"nsIDOMClientRect","","`interface nsIDOMClientRect : nsISupports`",null,null],[3,"nsIWellKnownOpportunisticUtils","","`interface nsIWellKnownOpportunisticUtils : nsISupports`",null,null],[3,"nsIWebBrowserChromeFocus","","`interface nsIWebBrowserChromeFocus : nsISupports`",null,null],[3,"nsIDOMXULRelatedElement","","`interface nsIDOMXULRelatedElement : nsISupports`",null,null],[3,"nsISessionStoreUtilsFrameCallback","","`interface nsISessionStoreUtilsFrameCallback : nsISupports`",null,null],[3,"nsISessionStoreUtils","","`interface nsISessionStoreUtils : nsISupports`",null,null],[3,"nsIDOMCSSMozDocumentRule","","`interface nsIDOMCSSMozDocumentRule : nsIDOMCSSConditionRule`",null,null],[3,"nsIConsoleAPIStorage","","`interface nsIConsoleAPIStorage : nsISupports`",null,null],[3,"nsIDomainPolicy","","`interface nsIDomainPolicy : nsISupports`",null,null],[3,"nsIDomainSet","","`interface nsIDomainSet : nsISupports`",null,null],[3,"nsIDOMMozWakeLockListener","","`interface nsIDOMMozWakeLockListener : nsISupports`",null,null],[3,"nsIPresentationChannelDescription","","`interface nsIPresentationChannelDescription : nsISupports`",null,null],[3,"nsIPresentationControlChannelListener","","`interface nsIPresentationControlChannelListener : nsISupports`",null,null],[3,"nsIPresentationControlChannel","","`interface nsIPresentationControlChannel : nsISupports`",null,null],[3,"nsIPaymentAddress","","`interface nsIPaymentAddress : nsISupports`",null,null],[3,"nsIObjectInputStream","","`interface nsIObjectInputStream : nsIBinaryInputStream`",null,null],[3,"nsIRDFContainer","","`interface nsIRDFContainer : nsISupports`",null,null],[3,"inIDeepTreeWalker","","`interface inIDeepTreeWalker : nsISupports`",null,null],[3,"nsIResProtocolHandler","","`interface nsIResProtocolHandler : nsISubstitutingProtocolHandler`",null,null],[3,"nsITransportSecurityInfo","","`interface nsITransportSecurityInfo : nsISupports`",null,null],[3,"nsIClipboardHelper","","`interface nsIClipboardHelper : nsISupports`",null,null],[3,"nsIDOMXULCheckboxElement","","`interface nsIDOMXULCheckboxElement : nsIDOMXULLabeledControlElement`",null,null],[3,"nsIProperties","","`interface nsIProperties : nsISupports`",null,null],[3,"nsIAccessibleTable","","`interface nsIAccessibleTable : nsISupports`",null,null],[3,"nsIAccessibleTableCell","","`interface nsIAccessibleTableCell : nsISupports`",null,null],[3,"nsIDOMCSSKeyframeRule","","`interface nsIDOMCSSKeyframeRule : nsISupports`",null,null],[3,"nsIProtocolProxyCallback","","`interface nsIProtocolProxyCallback : nsISupports`",null,null],[3,"nsIRequestObserverProxy","","`interface nsIRequestObserverProxy : nsIRequestObserver`",null,null],[3,"nsIDownloader","","`interface nsIDownloader : nsIStreamListener`",null,null],[3,"nsIDownloadObserver","","`interface nsIDownloadObserver : nsISupports`",null,null],[3,"nsIMIMEHeaderParam","","`interface nsIMIMEHeaderParam : nsISupports`",null,null],[3,"nsICaptivePortalCallback","","`interface nsICaptivePortalCallback : nsISupports`",null,null],[3,"nsICaptivePortalDetector","","`interface nsICaptivePortalDetector : nsISupports`",null,null],[3,"IJSDebugger","","`interface IJSDebugger : nsISupports`",null,null],[3,"nsISearchSubmission","","`interface nsISearchSubmission : nsISupports`",null,null],[3,"nsISearchEngine","","`interface nsISearchEngine : nsISupports`",null,null],[3,"nsISearchParseSubmissionResult","","`interface nsISearchParseSubmissionResult : nsISupports`",null,null],[3,"nsISearchInstallCallback","","`interface nsISearchInstallCallback : nsISupports`",null,null],[3,"nsIBrowserSearchInitObserver","","`interface nsIBrowserSearchInitObserver : nsISupports`",null,null],[3,"nsIBrowserSearchService","","`interface nsIBrowserSearchService : nsISupports`",null,null],[3,"nsIDOMDOMConstructor","","`interface nsIDOMDOMConstructor : nsISupports`",null,null],[3,"mozIStorageBindingParamsArray","","`interface mozIStorageBindingParamsArray : nsISupports`",null,null],[3,"nsITCPDeviceInfo","","`interface nsITCPDeviceInfo : nsISupports`",null,null],[3,"nsIPresentationControlServerListener","","`interface nsIPresentationControlServerListener : nsISupports`",null,null],[3,"nsIPresentationControlService","","`interface nsIPresentationControlService : nsISupports`",null,null],[3,"nsIWindowProvider","","`interface nsIWindowProvider : nsISupports`",null,null],[3,"nsIFeedProcessor","","`interface nsIFeedProcessor : nsIStreamListener`",null,null],[3,"nsIWebProgressListener","","`interface nsIWebProgressListener : nsISupports`",null,null],[3,"nsPILoadGroupInternal","","`interface nsPILoadGroupInternal : nsISupports`",null,null],[3,"nsIFontEnumerator","","`interface nsIFontEnumerator : nsISupports`",null,null],[3,"nsIThreadRetargetableStreamListener","","`interface nsIThreadRetargetableStreamListener : nsISupports`",null,null],[3,"nsISiteSecurityState","","`interface nsISiteSecurityState : nsISupports`",null,null],[3,"nsISiteHSTSState","","`interface nsISiteHSTSState : nsISiteSecurityState`",null,null],[3,"nsISiteHPKPState","","`interface nsISiteHPKPState : nsISiteSecurityState`",null,null],[3,"nsISiteSecurityService","","`interface nsISiteSecurityService : nsISupports`",null,null],[3,"nsIPowerManagerService","","`interface nsIPowerManagerService : nsISupports`",null,null],[3,"nsICancelable","","`interface nsICancelable : nsISupports`",null,null],[3,"nsIControllerCommandTable","","`interface nsIControllerCommandTable : nsISupports`",null,null],[3,"nsIPresentationSessionTransportCallback","","`interface nsIPresentationSessionTransportCallback : nsISupports`",null,null],[3,"nsIPresentationSessionTransport","","`interface nsIPresentationSessionTransport : nsISupports`",null,null],[3,"nsIMozNavigatorNetwork","","`interface nsIMozNavigatorNetwork : nsISupports`",null,null],[3,"nsIDOMStorageManager","","`interface nsIDOMStorageManager : nsISupports`",null,null],[3,"nsICrashService","","`interface nsICrashService : nsISupports`",null,null],[3,"nsIFullHashMatch","","`interface nsIFullHashMatch : nsISupports`",null,null],[3,"nsIUrlClassifierHashCompleterCallback","","`interface nsIUrlClassifierHashCompleterCallback : nsISupports`",null,null],[3,"nsIUrlClassifierHashCompleter","","`interface nsIUrlClassifierHashCompleter : nsISupports`",null,null],[3,"nsIPresentationRequestUIGlue","","`interface nsIPresentationRequestUIGlue : nsISupports`",null,null],[3,"nsIDOMXULDescriptionElement","","`interface nsIDOMXULDescriptionElement : nsISupports`",null,null],[3,"nsIAuthModule","","`interface nsIAuthModule : nsISupports`",null,null],[3,"nsIViewSourceChannel","","`interface nsIViewSourceChannel : nsIChannel`",null,null],[3,"nsIMediaManagerService","","`interface nsIMediaManagerService : nsISupports`",null,null],[3,"nsISynthVoiceRegistry","","`interface nsISynthVoiceRegistry : nsISupports`",null,null],[3,"nsINetworkActivityData","","`interface nsINetworkActivityData : nsISupports`",null,null],[3,"nsIProfileStartup","","`interface nsIProfileStartup : nsISupports`",null,null],[3,"nsIProfileMigrator","","`interface nsIProfileMigrator : nsISupports`",null,null],[3,"nsIQuotaUsageCallback","","`interface nsIQuotaUsageCallback : nsISupports`",null,null],[3,"nsIQuotaCallback","","`interface nsIQuotaCallback : nsISupports`",null,null],[3,"nsIWebBrowserSetup","","`interface nsIWebBrowserSetup : nsISupports`",null,null],[3,"nsIProfileUnlocker","","`interface nsIProfileUnlocker : nsISupports`",null,null],[3,"nsIInterfaceRequestor","","`interface nsIInterfaceRequestor : nsISupports`",null,null],[3,"nsIAppShellService","","`interface nsIAppShellService : nsISupports`",null,null],[3,"nsIPresentationTerminateRequest","","`interface nsIPresentationTerminateRequest : nsISupports`",null,null],[3,"nsIDOMModalContentWindow","","`interface nsIDOMModalContentWindow : nsISupports`",null,null],[3,"nsIFindService","","`interface nsIFindService : nsISupports`",null,null],[3,"nsIArrayBufferInputStream","","`interface nsIArrayBufferInputStream : nsIInputStream`",null,null],[3,"nsITooltipTextProvider","","`interface nsITooltipTextProvider : nsISupports`",null,null],[3,"nsIWebBrowserFocus","","`interface nsIWebBrowserFocus : nsISupports`",null,null],[3,"nsIStreamConverter","","`interface nsIStreamConverter : nsIStreamListener`",null,null],[3,"mozIRepresentativeColorCallback","","`interface mozIRepresentativeColorCallback : nsISupports`",null,null],[3,"mozIColorAnalyzer","","`interface mozIColorAnalyzer : nsISupports`",null,null],[3,"nsIDOMCSSStyleRule","","`interface nsIDOMCSSStyleRule : nsISupports`",null,null],[3,"nsIIdleServiceInternal","","`interface nsIIdleServiceInternal : nsIIdleService`",null,null],[3,"nsIRedirectResultListener","","`interface nsIRedirectResultListener : nsISupports`",null,null],[3,"nsIDocumentLoader","","`interface nsIDocumentLoader : nsISupports`",null,null],[3,"nsITransport","","`interface nsITransport : nsISupports`",null,null],[3,"nsITransportEventSink","","`interface nsITransportEventSink : nsISupports`",null,null],[3,"nsIDOMCanvasRenderingContext2D","","`interface nsIDOMCanvasRenderingContext2D : nsISupports`",null,null],[3,"nsIPrintProgressParams","","`interface nsIPrintProgressParams : nsISupports`",null,null],[3,"nsIDownloadProgressListener","","`interface nsIDownloadProgressListener : nsISupports`",null,null],[3,"nsIDOMNode","","`interface nsIDOMNode : nsISupports`",null,null],[3,"nsIBinaryOutputStream","","`interface nsIBinaryOutputStream : nsIOutputStream`",null,null],[3,"nsIAddonPolicyService","","`interface nsIAddonPolicyService : nsISupports`",null,null],[3,"nsIAddonContentPolicy","","`interface nsIAddonContentPolicy : nsISupports`",null,null],[3,"nsIAccessibleStates","","`interface nsIAccessibleStates : nsISupports`",null,null],[3,"nsITransportProvider","","`interface nsITransportProvider : nsISupports`",null,null],[3,"nsIDOMEventListener","","`interface nsIDOMEventListener : nsISupports`",null,null],[3,"nsIBrowserHistory","","`interface nsIBrowserHistory : nsISupports`",null,null],[3,"nsIScrollBoxObject","","`interface nsIScrollBoxObject : nsISupports`",null,null],[3,"nsIUUIDGenerator","","`interface nsIUUIDGenerator : nsISupports`",null,null],[3,"nsISupportsPrimitive","","`interface nsISupportsPrimitive : nsISupports`",null,null],[3,"nsISupportsID","","`interface nsISupportsID : nsISupportsPrimitive`",null,null],[3,"nsISupportsCString","","`interface nsISupportsCString : nsISupportsPrimitive`",null,null],[3,"nsISupportsString","","`interface nsISupportsString : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRBool","","`interface nsISupportsPRBool : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRUint8","","`interface nsISupportsPRUint8 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRUint16","","`interface nsISupportsPRUint16 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRUint32","","`interface nsISupportsPRUint32 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRUint64","","`interface nsISupportsPRUint64 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRTime","","`interface nsISupportsPRTime : nsISupportsPrimitive`",null,null],[3,"nsISupportsChar","","`interface nsISupportsChar : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRInt16","","`interface nsISupportsPRInt16 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRInt32","","`interface nsISupportsPRInt32 : nsISupportsPrimitive`",null,null],[3,"nsISupportsPRInt64","","`interface nsISupportsPRInt64 : nsISupportsPrimitive`",null,null],[3,"nsISupportsFloat","","`interface nsISupportsFloat : nsISupportsPrimitive`",null,null],[3,"nsISupportsDouble","","`interface nsISupportsDouble : nsISupportsPrimitive`",null,null],[3,"nsISupportsInterfacePointer","","`interface nsISupportsInterfacePointer : nsISupportsPrimitive`",null,null],[3,"nsIPKCS11Module","","`interface nsIPKCS11Module : nsISupports`",null,null],[3,"nsIURIFixupInfo","","`interface nsIURIFixupInfo : nsISupports`",null,null],[3,"nsIURIFixup","","`interface nsIURIFixup : nsISupports`",null,null],[3,"nsIWebSocketChannel","","`interface nsIWebSocketChannel : nsISupports`",null,null],[3,"nsITraceableChannel","","`interface nsITraceableChannel : nsISupports`",null,null],[3,"nsIQuotaManagerService","","`interface nsIQuotaManagerService : nsISupports`",null,null],[3,"nsIControllers","","`interface nsIControllers : nsISupports`",null,null],[3,"nsIDOMScreen","","`interface nsIDOMScreen : nsIDOMEventTarget`",null,null],[3,"nsIInputListAutoComplete","","`interface nsIInputListAutoComplete : nsISupports`",null,null],[3,"nsITransaction","","`interface nsITransaction : nsISupports`",null,null],[3,"nsIRDFRemoteDataSource","","`interface nsIRDFRemoteDataSource : nsISupports`",null,null],[3,"nsIRedirectHistoryEntry","","`interface nsIRedirectHistoryEntry : nsISupports`",null,null],[3,"nsIGSettingsCollection","","`interface nsIGSettingsCollection : nsISupports`",null,null],[3,"nsIGSettingsService","","`interface nsIGSettingsService : nsISupports`",null,null],[3,"nsIFile","","`interface nsIFile : nsISupports`",null,null],[3,"nsIDOMStyleSheetList","","`interface nsIDOMStyleSheetList : nsISupports`",null,null],[3,"nsIHttpActivityObserver","","`interface nsIHttpActivityObserver : nsISupports`",null,null],[3,"nsIHttpActivityDistributor","","`interface nsIHttpActivityDistributor : nsIHttpActivityObserver`",null,null],[3,"nsIWindowlessBrowser","","`interface nsIWindowlessBrowser : nsIWebNavigation`",null,null],[3,"nsIPK11TokenDB","","`interface nsIPK11TokenDB : nsISupports`",null,null],[3,"nsINotificationStorageCallback","","`interface nsINotificationStorageCallback : nsISupports`",null,null],[3,"nsINotificationStorage","","`interface nsINotificationStorage : nsISupports`",null,null],[3,"nsIPageThumbsStorageService","","`interface nsIPageThumbsStorageService : nsISupports`",null,null],[3,"nsIPipe","","`interface nsIPipe : nsISupports`",null,null],[3,"nsISearchableInputStream","","`interface nsISearchableInputStream : nsISupports`",null,null],[3,"nsIOSFileConstantsService","","`interface nsIOSFileConstantsService : nsISupports`",null,null],[3,"nsIPrivateModeCallback","","`interface nsIPrivateModeCallback : nsISupports`",null,null],[3,"nsICookieManager","","`interface nsICookieManager : nsISupports`",null,null],[3,"nsIFeedContainer","","`interface nsIFeedContainer : nsIFeedElementBase`",null,null],[3,"nsPIEditorTransaction","","`interface nsPIEditorTransaction : nsISupports`",null,null],[3,"nsIDOMDragEvent","","`interface nsIDOMDragEvent : nsIDOMMouseEvent`",null,null],[3,"nsIPresentationDeviceRequest","","`interface nsIPresentationDeviceRequest : nsISupports`",null,null],[3,"nsIPresentationDevicePrompt","","`interface nsIPresentationDevicePrompt : nsISupports`",null,null],[3,"nsISpeechGrammarCompilationCallback","","`interface nsISpeechGrammarCompilationCallback : nsISupports`",null,null],[3,"nsISpeechRecognitionService","","`interface nsISpeechRecognitionService : nsISupports`",null,null],[3,"nsIHapticFeedback","","`interface nsIHapticFeedback : nsISupports`",null,null],[3,"nsIHstsPrimingCallback","","`interface nsIHstsPrimingCallback : nsISupports`",null,null],[3,"nsIDOMGeoPositionCallback","","`interface nsIDOMGeoPositionCallback : nsISupports`",null,null],[3,"nsIXULSortService","","`interface nsIXULSortService : nsISupports`",null,null],[3,"nsIInterceptedBodyCallback","","`interface nsIInterceptedBodyCallback : nsISupports`",null,null],[3,"nsIInterceptedChannel","","`interface nsIInterceptedChannel : nsISupports`",null,null],[3,"nsINetworkInterceptController","","`interface nsINetworkInterceptController : nsISupports`",null,null],[3,"nsIDOMCSSPageRule","","`interface nsIDOMCSSPageRule : nsISupports`",null,null],[3,"nsIXULWindow","","`interface nsIXULWindow : nsISupports`",null,null],[3,"nsIDOMValidityState","","`interface nsIDOMValidityState : nsISupports`",null,null],[3,"nsIDOMXULMultiSelectControlElement","","`interface nsIDOMXULMultiSelectControlElement : nsIDOMXULSelectControlElement`",null,null],[3,"mozISandboxSettings","","`interface mozISandboxSettings : nsISupports`",null,null],[3,"nsIAccessibleTextRange","","`interface nsIAccessibleTextRange : nsISupports`",null,null],[3,"nsICategoryManager","","`interface nsICategoryManager : nsISupports`",null,null],[3,"nsIBufferedInputStream","","`interface nsIBufferedInputStream : nsIInputStream`",null,null],[3,"nsIBufferedOutputStream","","`interface nsIBufferedOutputStream : nsIOutputStream`",null,null],[3,"nsIDNSRecord","","`interface nsIDNSRecord : nsISupports`",null,null],[3,"nsIWebContentHandlerRegistrar","","`interface nsIWebContentHandlerRegistrar : nsISupports`",null,null],[3,"nsIXMLHttpRequestEventTarget","","`interface nsIXMLHttpRequestEventTarget : nsIDOMEventTarget`",null,null],[3,"nsIXMLHttpRequestUpload","","`interface nsIXMLHttpRequestUpload : nsIXMLHttpRequestEventTarget`",null,null],[3,"nsIXMLHttpRequest","","`interface nsIXMLHttpRequest : nsISupports`",null,null],[3,"nsIXHRSendable","","`interface nsIXHRSendable : nsISupports`",null,null],[3,"nsIPresentationDeviceManager","","`interface nsIPresentationDeviceManager : nsISupports`",null,null],[3,"nsIOutputStream","","`interface nsIOutputStream : nsISupports`",null,null],[3,"nsIDOMCrypto","","`interface nsIDOMCrypto : nsISupports`",null,null],[3,"nsITreeBoxObject","","`interface nsITreeBoxObject : nsISupports`",null,null],[3,"nsICommandManager","","`interface nsICommandManager : nsISupports`",null,null],[3,"nsIStructuredCloneContainer","","`interface nsIStructuredCloneContainer : nsISupports`",null,null],[3,"nsIINIParser","","`interface nsIINIParser : nsISupports`",null,null],[3,"nsIINIParserWriter","","`interface nsIINIParserWriter : nsISupports`",null,null],[3,"nsIINIParserFactory","","`interface nsIINIParserFactory : nsISupports`",null,null],[3,"nsIAccessibleStateChangeEvent","","`interface nsIAccessibleStateChangeEvent : nsIAccessibleEvent`",null,null],[3,"nsIDownloadHistory","","`interface nsIDownloadHistory : nsISupports`",null,null],[3,"mozIMozIntlHelper","","`interface mozIMozIntlHelper : nsISupports`",null,null],[3,"nsIWebBrowserChrome","","`interface nsIWebBrowserChrome : nsISupports`",null,null],[3,"nsIDOMComment","","`interface nsIDOMComment : nsIDOMCharacterData`",null,null],[3,"nsIStreamTransportService","","`interface nsIStreamTransportService : nsISupports`",null,null],[3,"nsIInputAvailableCallback","","`interface nsIInputAvailableCallback : nsISupports`",null,null],[3,"nsIDOMXULButtonElement","","`interface nsIDOMXULButtonElement : nsIDOMXULLabeledControlElement`",null,null],[3,"nsIWorkerDebuggerListener","","`interface nsIWorkerDebuggerListener : nsISupports`",null,null],[3,"nsIWorkerDebugger","","`interface nsIWorkerDebugger : nsISupports`",null,null],[3,"nsIBackgroundChannelRegistrar","","`interface nsIBackgroundChannelRegistrar : nsISupports`",null,null],[3,"nsIPermissionManager","","`interface nsIPermissionManager : nsISupports`",null,null],[3,"nsIHelperAppLauncherDialog","","`interface nsIHelperAppLauncherDialog : nsISupports`",null,null],[3,"nsISerializable","","`interface nsISerializable : nsISupports`",null,null],[3,"nsIHTMLAbsPosEditor","","`interface nsIHTMLAbsPosEditor : nsISupports`",null,null],[3,"nsITextScroll","","`interface nsITextScroll : nsISupports`",null,null],[3,"nsIDOMTimeEvent","","`interface nsIDOMTimeEvent : nsIDOMEvent`",null,null],[3,"nsIStreamListener","","`interface nsIStreamListener : nsIRequestObserver`",null,null],[3,"nsIDirIndex","","`interface nsIDirIndex : nsISupports`",null,null],[3,"nsIDOMXPathResult","","`interface nsIDOMXPathResult : nsISupports`",null,null],[3,"nsIContentViewerEdit","","`interface nsIContentViewerEdit : nsISupports`",null,null],[3,"nsIDOMDOMRequest","","`interface nsIDOMDOMRequest : nsIDOMEventTarget`",null,null],[3,"nsIDOMRequestService","","`interface nsIDOMRequestService : nsISupports`",null,null],[3,"nsIAccessibleRole","","`interface nsIAccessibleRole : nsISupports`",null,null],[3,"nsICompressConvStats","","`interface nsICompressConvStats : nsISupports`",null,null],[3,"nsIDOMDOMImplementation","","`interface nsIDOMDOMImplementation : nsISupports`",null,null],[3,"nsILoginManagerCrypto","","`interface nsILoginManagerCrypto : nsISupports`",null,null],[3,"nsICommandLine","","`interface nsICommandLine : nsISupports`",null,null],[3,"nsIHashable","","`interface nsIHashable : nsISupports`",null,null],[3,"nsIPresentationSessionTransportBuilderListener","","`interface nsIPresentationSessionTransportBuilderListener : nsISupports`",null,null],[3,"nsIPresentationSessionTransportBuilder","","`interface nsIPresentationSessionTransportBuilder : nsISupports`",null,null],[3,"nsIPresentationTransportBuilderConstructor","","`interface nsIPresentationTransportBuilderConstructor : nsISupports`",null,null],[3,"nsIPresentationTCPSessionTransportBuilder","","`interface nsIPresentationTCPSessionTransportBuilder : nsIPresentationSessionTransportBuilder`",null,null],[3,"nsIPresentationDataChannelSessionTransportBuilder","","`interface nsIPresentationDataChannelSessionTransportBuilder : nsIPresentationSessionTransportBuilder`",null,null],[3,"nsIPrintStatusFeedback","","`interface nsIPrintStatusFeedback : nsISupports`",null,null],[3,"nsIFeedResult","","`interface nsIFeedResult : nsISupports`",null,null],[3,"nsICacheEntryDoomCallback","","`interface nsICacheEntryDoomCallback : nsISupports`",null,null],[3,"nsIWebPageDescriptor","","`interface nsIWebPageDescriptor : nsISupports`",null,null],[3,"nsIKeygenThread","","`interface nsIKeygenThread : nsISupports`",null,null],[3,"nsIRaceCacheWithNetwork","","`interface nsIRaceCacheWithNetwork : nsISupports`",null,null],[3,"nsIPrompt","","`interface nsIPrompt : nsISupports`",null,null],[3,"nsIDOMCDATASection","","`interface nsIDOMCDATASection : nsIDOMText`",null,null],[3,"mozIStorageBindingParams","","`interface mozIStorageBindingParams : nsISupports`",null,null],[3,"mozIStorageBaseStatement","","`interface mozIStorageBaseStatement : mozIStorageBindingParams`",null,null],[3,"nsIDirectoryServiceProvider","","`interface nsIDirectoryServiceProvider : nsISupports`",null,null],[3,"nsIDirectoryServiceProvider2","","`interface nsIDirectoryServiceProvider2 : nsIDirectoryServiceProvider`",null,null],[3,"nsIDirectoryService","","`interface nsIDirectoryService : nsISupports`",null,null],[3,"nsIScriptSecurityManager","","`interface nsIScriptSecurityManager : nsISupports`",null,null],[3,"nsICacheVisitor","","`interface nsICacheVisitor : nsISupports`",null,null],[3,"nsICacheDeviceInfo","","`interface nsICacheDeviceInfo : nsISupports`",null,null],[3,"nsICacheEntryInfo","","`interface nsICacheEntryInfo : nsISupports`",null,null],[3,"nsIGlobalHistory2","","`interface nsIGlobalHistory2 : nsISupports`",null,null],[3,"nsIFormAutoComplete","","`interface nsIFormAutoComplete : nsISupports`",null,null],[3,"nsIFormAutoCompleteObserver","","`interface nsIFormAutoCompleteObserver : nsISupports`",null,null],[3,"nsIXULRuntime","","`interface nsIXULRuntime : nsISupports`",null,null],[3,"nsITransfer","","`interface nsITransfer : nsIWebProgressListener2`",null,null],[3,"nsIStreamConverterService","","`interface nsIStreamConverterService : nsISupports`",null,null],[3,"nsIX509Cert","","`interface nsIX509Cert : nsISupports`",null,null],[3,"nsIDOMXULMenuListElement","","`interface nsIDOMXULMenuListElement : nsIDOMXULSelectControlElement`",null,null],[3,"nsIStringBundle","","`interface nsIStringBundle : nsISupports`",null,null],[3,"nsIStringBundleService","","`interface nsIStringBundleService : nsISupports`",null,null],[3,"nsIStackFrame","","`interface nsIStackFrame : nsISupports`",null,null],[3,"nsIException","","`interface nsIException : nsISupports`",null,null],[3,"nsIFlavorDataProvider","","`interface nsIFlavorDataProvider : nsISupports`",null,null],[3,"nsITransferable","","`interface nsITransferable : nsISupports`",null,null],[3,"nsINavBookmarkObserver","","`interface nsINavBookmarkObserver : nsISupports`",null,null],[3,"nsINavBookmarksService","","`interface nsINavBookmarksService : nsISupports`",null,null],[3,"nsICookieTransactionCallback","","`interface nsICookieTransactionCallback : nsISupports`",null,null],[3,"nsICookieService","","`interface nsICookieService : nsISupports`",null,null],[3,"nsIColorPickerShownCallback","","`interface nsIColorPickerShownCallback : nsISupports`",null,null],[3,"nsIColorPicker","","`interface nsIColorPicker : nsISupports`",null,null],[3,"nsICacheListener","","`interface nsICacheListener : nsISupports`",null,null],[3,"nsIContentSniffer","","`interface nsIContentSniffer : nsISupports`",null,null],[3,"nsPISocketTransportService","","`interface nsPISocketTransportService : nsIRoutedSocketTransportService`",null,null],[3,"nsIEventListenerChange","","`interface nsIEventListenerChange : nsISupports`",null,null],[3,"nsIListenerChangeListener","","`interface nsIListenerChangeListener : nsISupports`",null,null],[3,"nsIEventListenerInfo","","`interface nsIEventListenerInfo : nsISupports`",null,null],[3,"nsIEventListenerService","","`interface nsIEventListenerService : nsISupports`",null,null],[3,"nsINSSErrorsService","","`interface nsINSSErrorsService : nsISupports`",null,null],[3,"imgIRequest","","`interface imgIRequest : nsIRequest`",null,null],[3,"nsIUDPSocketChild","","`interface nsIUDPSocketChild : nsISupports`",null,null],[3,"nsIUDPSocketInternal","","`interface nsIUDPSocketInternal : nsISupports`",null,null],[3,"nsIChildChannel","","`interface nsIChildChannel : nsISupports`",null,null],[3,"nsIXULStore","","`interface nsIXULStore : nsISupports`",null,null],[3,"nsIHTMLEditor","","`interface nsIHTMLEditor : nsISupports`",null,null],[3,"mozIMozIntl","","`interface mozIMozIntl : nsISupports`",null,null],[3,"nsIUserInfo","","`interface nsIUserInfo : nsISupports`",null,null],[3,"nsISHistoryInternal","","`interface nsISHistoryInternal : nsISupports`",null,null],[3,"nsIAccessibleCaretMoveEvent","","`interface nsIAccessibleCaretMoveEvent : nsIAccessibleEvent`",null,null],[3,"nsILocalFileWin","","`interface nsILocalFileWin : nsIFile`",null,null],[3,"nsIPaymentUIService","","`interface nsIPaymentUIService : nsISupports`",null,null],[3,"nsIInputChannelThrottleQueue","","`interface nsIInputChannelThrottleQueue : nsISupports`",null,null],[3,"nsIThrottledInputChannel","","`interface nsIThrottledInputChannel : nsISupports`",null,null],[3,"nsIMessageListener","","`interface nsIMessageListener : nsISupports`",null,null],[3,"nsIMessageListenerManager","","`interface nsIMessageListenerManager : nsISupports`",null,null],[3,"nsIMessageSender","","`interface nsIMessageSender : nsIMessageListenerManager`",null,null],[3,"nsIMessageBroadcaster","","`interface nsIMessageBroadcaster : nsIMessageListenerManager`",null,null],[3,"nsISyncMessageSender","","`interface nsISyncMessageSender : nsIMessageSender`",null,null],[3,"nsIMessageManagerGlobal","","`interface nsIMessageManagerGlobal : nsISyncMessageSender`",null,null],[3,"nsIContentFrameMessageManager","","`interface nsIContentFrameMessageManager : nsIMessageManagerGlobal`",null,null],[3,"nsIInProcessContentFrameMessageManager","","`interface nsIInProcessContentFrameMessageManager : nsIContentFrameMessageManager`",null,null],[3,"nsIContentProcessMessageManager","","`interface nsIContentProcessMessageManager : nsIMessageManagerGlobal`",null,null],[3,"nsIFrameScriptLoader","","`interface nsIFrameScriptLoader : nsISupports`",null,null],[3,"nsIProcessScriptLoader","","`interface nsIProcessScriptLoader : nsISupports`",null,null],[3,"nsIGlobalProcessScriptLoader","","`interface nsIGlobalProcessScriptLoader : nsIProcessScriptLoader`",null,null],[3,"mozIStorageProgressHandler","","`interface mozIStorageProgressHandler : nsISupports`",null,null],[3,"nsIOpenSignedAppFileCallback","","`interface nsIOpenSignedAppFileCallback : nsISupports`",null,null],[3,"nsIVerifySignedDirectoryCallback","","`interface nsIVerifySignedDirectoryCallback : nsISupports`",null,null],[3,"nsICertVerificationCallback","","`interface nsICertVerificationCallback : nsISupports`",null,null],[3,"nsIX509CertDB","","`interface nsIX509CertDB : nsISupports`",null,null],[3,"nsIDOMDocumentFragment","","`interface nsIDOMDocumentFragment : nsIDOMNode`",null,null],[3,"nsIFileChannel","","`interface nsIFileChannel : nsISupports`",null,null],[3,"nsISliderListener","","`interface nsISliderListener : nsISupports`",null,null],[3,"nsIThreadRetargetableRequest","","`interface nsIThreadRetargetableRequest : nsISupports`",null,null],[3,"nsIProcess","","`interface nsIProcess : nsISupports`",null,null],[3,"nsIAddonInterposition","","`interface nsIAddonInterposition : nsISupports`",null,null],[3,"mozIStorageStatementCallback","","`interface mozIStorageStatementCallback : nsISupports`",null,null],[3,"nsINetworkProperties","","`interface nsINetworkProperties : nsISupports`",null,null],[3,"nsIPresentationServiceCallback","","`interface nsIPresentationServiceCallback : nsISupports`",null,null],[3,"nsIPresentationService","","`interface nsIPresentationService : nsISupports`",null,null],[3,"nsIAlertNotificationImageListener","","`interface nsIAlertNotificationImageListener : nsISupports`",null,null],[3,"nsIAlertNotification","","`interface nsIAlertNotification : nsISupports`",null,null],[3,"nsIAlertsService","","`interface nsIAlertsService : nsISupports`",null,null],[3,"nsIAlertsDoNotDisturb","","`interface nsIAlertsDoNotDisturb : nsISupports`",null,null],[3,"nsIAlertsIconData","","`interface nsIAlertsIconData : nsISupports`",null,null],[3,"nsIAlertsIconURI","","`interface nsIAlertsIconURI : nsISupports`",null,null],[3,"nsIWebBrowserChrome3","","`interface nsIWebBrowserChrome3 : nsIWebBrowserChrome2`",null,null],[3,"nsIWindowMediator","","`interface nsIWindowMediator : nsISupports`",null,null],[3,"nsIWindowMediator_44","","`interface nsIWindowMediator_44 : nsIWindowMediator`",null,null],[3,"nsIScriptLoaderObserver","","`interface nsIScriptLoaderObserver : nsISupports`",null,null],[3,"nsICaptivePortalServiceCallback","","`interface nsICaptivePortalServiceCallback : nsISupports`",null,null],[3,"nsICaptivePortalService","","`interface nsICaptivePortalService : nsISupports`",null,null],[3,"nsIDOMStyleSheet","","`interface nsIDOMStyleSheet : nsISupports`",null,null],[3,"nsIDOMElement","","`interface nsIDOMElement : nsIDOMNode`",null,null],[3,"nsIInputStreamTee","","`interface nsIInputStreamTee : nsIInputStream`",null,null],[3,"nsISHTransaction","","`interface nsISHTransaction : nsISupports`",null,null],[3,"nsIFrameLoader","","`interface nsIFrameLoader : nsISupports`",null,null],[3,"nsIFrameLoaderOwner","","`interface nsIFrameLoaderOwner : nsISupports`",null,null],[3,"nsIDOMWindowUtils","","`interface nsIDOMWindowUtils : nsISupports`",null,null],[3,"nsITranslationNodeList","","`interface nsITranslationNodeList : nsISupports`",null,null],[3,"nsIJSRAIIHelper","","`interface nsIJSRAIIHelper : nsISupports`",null,null],[3,"nsIAuthPrompt","","`interface nsIAuthPrompt : nsISupports`",null,null],[3,"nsIFind","","`interface nsIFind : nsISupports`",null,null],[3,"nsIDOMXULDocument","","`interface nsIDOMXULDocument : nsIDOMDocument`",null,null],[3,"nsIDOMNSEvent","","`interface nsIDOMNSEvent : nsISupports`",null,null],[3,"nsIAccessibleObjectAttributeChangedEvent","","`interface nsIAccessibleObjectAttributeChangedEvent : nsIAccessibleEvent`",null,null],[3,"nsIDOMNodeList","","`interface nsIDOMNodeList : nsISupports`",null,null],[3,"nsICertTreeItem","","`interface nsICertTreeItem : nsISupports`",null,null],[3,"nsICertTree","","`interface nsICertTree : nsITreeView`",null,null],[3,"nsIAccessibleImage","","`interface nsIAccessibleImage : nsISupports`",null,null],[3,"nsIDownload","","`interface nsIDownload : nsITransfer`",null,null],[3,"nsIDOMOfflineResourceList","","`interface nsIDOMOfflineResourceList : nsISupports`",null,null],[3,"nsIDOMCSSImportRule","","`interface nsIDOMCSSImportRule : nsISupports`",null,null],[3,"nsIFeedElementBase","","`interface nsIFeedElementBase : nsISupports`",null,null],[3,"nsISupportsPriority","","`interface nsISupportsPriority : nsISupports`",null,null],[3,"nsIParserUtils","","`interface nsIParserUtils : nsISupports`",null,null],[3,"nsIGroupedSHistory","","`interface nsIGroupedSHistory : nsISupports`",null,null],[3,"nsIDOMBlob","","`interface nsIDOMBlob : nsISupports`",null,null],[3,"nsIChromeRegistry","","`interface nsIChromeRegistry : nsISupports`",null,null],[3,"nsIXULChromeRegistry","","`interface nsIXULChromeRegistry : nsIChromeRegistry`",null,null],[3,"nsIX509CertList","","`interface nsIX509CertList : nsISupports`",null,null],[3,"nsIStreamLoaderObserver","","`interface nsIStreamLoaderObserver : nsISupports`",null,null],[3,"nsIStreamLoader","","`interface nsIStreamLoader : nsIStreamListener`",null,null],[3,"nsIGZFileWriter","","`interface nsIGZFileWriter : nsISupports`",null,null],[3,"nsIPaymentMethodData","","`interface nsIPaymentMethodData : nsISupports`",null,null],[3,"nsIPaymentCurrencyAmount","","`interface nsIPaymentCurrencyAmount : nsISupports`",null,null],[3,"nsIPaymentItem","","`interface nsIPaymentItem : nsISupports`",null,null],[3,"nsIPaymentDetailsModifier","","`interface nsIPaymentDetailsModifier : nsISupports`",null,null],[3,"nsIPaymentShippingOption","","`interface nsIPaymentShippingOption : nsISupports`",null,null],[3,"nsIPaymentDetails","","`interface nsIPaymentDetails : nsISupports`",null,null],[3,"nsIPaymentOptions","","`interface nsIPaymentOptions : nsISupports`",null,null],[3,"nsIPaymentRequest","","`interface nsIPaymentRequest : nsISupports`",null,null],[3,"nsIDOMHTMLElement","","`interface nsIDOMHTMLElement : nsIDOMElement`",null,null],[3,"nsIDOMWheelEvent","","`interface nsIDOMWheelEvent : nsIDOMMouseEvent`",null,null],[3,"nsIHTMLInlineTableEditor","","`interface nsIHTMLInlineTableEditor : nsISupports`",null,null],[3,"nsIXPConnectJSObjectHolder","","`interface nsIXPConnectJSObjectHolder : nsISupports`",null,null],[3,"nsIXPConnectWrappedNative","","`interface nsIXPConnectWrappedNative : nsIXPConnectJSObjectHolder`",null,null],[3,"nsIXPConnectWrappedJS","","`interface nsIXPConnectWrappedJS : nsIXPConnectJSObjectHolder`",null,null],[3,"nsIXPConnectWrappedJSUnmarkGray","","`interface nsIXPConnectWrappedJSUnmarkGray : nsIXPConnectWrappedJS`",null,null],[3,"nsIXPCWrappedJSObjectGetter","","`interface nsIXPCWrappedJSObjectGetter : nsISupports`",null,null],[3,"nsIXPCFunctionThisTranslator","","`interface nsIXPCFunctionThisTranslator : nsISupports`",null,null],[3,"nsIXPConnect","","`interface nsIXPConnect : nsISupports`",null,null],[3,"nsISubstitutingProtocolHandler","","`interface nsISubstitutingProtocolHandler : nsIProtocolHandler`",null,null],[3,"nsILayoutHistoryState","","`interface nsILayoutHistoryState : nsISupports`",null,null],[3,"nsIXPCTestReturnCodeParent","","`interface nsIXPCTestReturnCodeParent : nsISupports`",null,null],[3,"nsIXPCTestReturnCodeChild","","`interface nsIXPCTestReturnCodeChild : nsISupports`",null,null],[3,"mozIStorageVacuumParticipant","","`interface mozIStorageVacuumParticipant : nsISupports`",null,null],[3,"nsIDOMFontFace","","`interface nsIDOMFontFace : nsISupports`",null,null],[3,"nsIBFCacheEntry","","`interface nsIBFCacheEntry : nsISupports`",null,null],[3,"nsIDashboardEventNotifier","","`interface nsIDashboardEventNotifier : nsISupports`",null,null],[3,"nsIWebVTTListener","","`interface nsIWebVTTListener : nsISupports`",null,null],[3,"nsIFeedTextConstruct","","`interface nsIFeedTextConstruct : nsISupports`",null,null],[3,"nsIDOMEventTarget","","`interface nsIDOMEventTarget : nsISupports`",null,null],[3,"nsIBinaryInputStream","","`interface nsIBinaryInputStream : nsIInputStream`",null,null],[3,"nsIDOMCSSFontFeatureValuesRule","","`interface nsIDOMCSSFontFeatureValuesRule : nsISupports`",null,null],[3,"nsIAsyncStreamCopier2","","`interface nsIAsyncStreamCopier2 : nsIRequest`",null,null],[3,"nsIAsyncOutputStream","","`interface nsIAsyncOutputStream : nsIOutputStream`",null,null],[3,"nsIOutputStreamCallback","","`interface nsIOutputStreamCallback : nsISupports`",null,null],[3,"nsIHttpAuthenticableChannel","","`interface nsIHttpAuthenticableChannel : nsIProxiedChannel`",null,null],[3,"nsIWebProgressListener2","","`interface nsIWebProgressListener2 : nsIWebProgressListener`",null,null],[3,"nsIDisplayInfo","","`interface nsIDisplayInfo : nsISupports`",null,null],[3,"nsIClipboardDragDropHooks","","`interface nsIClipboardDragDropHooks : nsISupports`",null,null],[3,"nsIPresentationDevice","","`interface nsIPresentationDevice : nsISupports`",null,null],[3,"nsIOfflineCacheUpdateObserver","","`interface nsIOfflineCacheUpdateObserver : nsISupports`",null,null],[3,"nsIOfflineCacheUpdate","","`interface nsIOfflineCacheUpdate : nsISupports`",null,null],[3,"nsIOfflineCacheUpdateService","","`interface nsIOfflineCacheUpdateService : nsISupports`",null,null],[3,"nsITableEditor","","`interface nsITableEditor : nsISupports`",null,null],[3,"mozIStorageService","","`interface mozIStorageService : nsISupports`",null,null],[3,"nsISecurityInfoProvider","","`interface nsISecurityInfoProvider : nsISupports`",null,null],[3,"nsITextToSubURI","","`interface nsITextToSubURI : nsISupports`",null,null],[3,"nsIDOMXULTreeElement","","`interface nsIDOMXULTreeElement : nsISupports`",null,null],[3,"nsIAccessibleScrollType","","`interface nsIAccessibleScrollType : nsISupports`",null,null],[3,"nsIAccessibleCoordinateType","","`interface nsIAccessibleCoordinateType : nsISupports`",null,null],[3,"nsIDOMFormData","","`interface nsIDOMFormData : nsISupports`",null,null],[3,"nsISAXContentHandler","","`interface nsISAXContentHandler : nsISupports`",null,null],[3,"nsIDOMAnimationEvent","","`interface nsIDOMAnimationEvent : nsISupports`",null,null],[3,"nsIPrivacyTransitionObserver","","`interface nsIPrivacyTransitionObserver : nsISupports`",null,null],[3,"nsIDOMCSSFontFaceRule","","`interface nsIDOMCSSFontFaceRule : nsISupports`",null,null],[3,"nsIWritablePropertyBag","","`interface nsIWritablePropertyBag : nsIPropertyBag`",null,null],[3,"nsIPopupWindowManager","","`interface nsIPopupWindowManager : nsISupports`",null,null],[3,"nsIPreloadedStyleSheet","","`interface nsIPreloadedStyleSheet : nsISupports`",null,null],[3,"nsIProtocolProxyFilter","","`interface nsIProtocolProxyFilter : nsISupports`",null,null],[3,"nsIProtocolProxyChannelFilter","","`interface nsIProtocolProxyChannelFilter : nsISupports`",null,null],[3,"nsIURI","","`interface nsIURI : nsISupports`",null,null],[3,"mozIStorageCompletionCallback","","`interface mozIStorageCompletionCallback : nsISupports`",null,null],[3,"nsIMozBrowserFrame","","`interface nsIMozBrowserFrame : nsIDOMMozBrowserFrame`",null,null],[3,"nsIProtocolProxyService","","`interface nsIProtocolProxyService : nsISupports`",null,null],[3,"nsIBrowserHandler","","`interface nsIBrowserHandler : nsISupports`",null,null],[3,"nsIURIWithPrincipal","","`interface nsIURIWithPrincipal : nsISupports`",null,null],[3,"nsIInterfaceInfoManager","","`interface nsIInterfaceInfoManager : nsISupports`",null,null],[3,"nsIWebNavigationInfo","","`interface nsIWebNavigationInfo : nsISupports`",null,null],[3,"nsIDOMXMLDocument","","`interface nsIDOMXMLDocument : nsISupports`",null,null],[3,"nsIDOMBeforeUnloadEvent","","`interface nsIDOMBeforeUnloadEvent : nsISupports`",null,null],[3,"imgIEncoder","","`interface imgIEncoder : nsIAsyncInputStream`",null,null],[3,"nsIDOMProcessingInstruction","","`interface nsIDOMProcessingInstruction : nsIDOMCharacterData`",null,null],[3,"mozIStorageStatement","","`interface mozIStorageStatement : mozIStorageBaseStatement`",null,null],[3,"nsIEventTarget","","`interface nsIEventTarget : nsISupports`",null,null],[3,"nsILoginManager","","`interface nsILoginManager : nsISupports`",null,null],[3,"nsINestedEventLoopCondition","","`interface nsINestedEventLoopCondition : nsISupports`",null,null],[3,"nsIThreadManager","","`interface nsIThreadManager : nsISupports`",null,null],[3,"nsIAccessibleVirtualCursorChangeEvent","","`interface nsIAccessibleVirtualCursorChangeEvent : nsIAccessibleEvent`",null,null],[3,"nsIInputStreamChannel","","`interface nsIInputStreamChannel : nsISupports`",null,null],[3,"nsISerialEventTarget","","`interface nsISerialEventTarget : nsIEventTarget`",null,null],[3,"nsIAutoCompleteController","","`interface nsIAutoCompleteController : nsISupports`",null,null],[3,"nsIPluginInstanceOwner","","`interface nsIPluginInstanceOwner : nsISupports`",null,null],[3,"nsIAssociatedContentSecurity","","`interface nsIAssociatedContentSecurity : nsISupports`",null,null],[3,"nsIHTMLObjectResizer","","`interface nsIHTMLObjectResizer : nsISupports`",null,null],[3,"nsIToolkitProfileService","","`interface nsIToolkitProfileService : nsISupports`",null,null],[3,"nsIStringBundleOverride","","`interface nsIStringBundleOverride : nsISupports`",null,null],[3,"nsIHandlerService","","`interface nsIHandlerService : nsISupports`",null,null],[3,"nsIDOMCSSStyleSheet","","`interface nsIDOMCSSStyleSheet : nsIDOMStyleSheet`",null,null],[3,"nsIDOMTimeRanges","","`interface nsIDOMTimeRanges : nsISupports`",null,null],[3,"nsIRDFXMLParser","","`interface nsIRDFXMLParser : nsISupports`",null,null],[3,"mozIJSSubScriptLoader","","`interface mozIJSSubScriptLoader : nsISupports`",null,null],[3,"nsIProtectedAuthThread","","`interface nsIProtectedAuthThread : nsISupports`",null,null],[3,"nsIXPCTestInterfaceA","","`interface nsIXPCTestInterfaceA : nsISupports`",null,null],[3,"nsIXPCTestInterfaceB","","`interface nsIXPCTestInterfaceB : nsISupports`",null,null],[3,"nsIXPCTestInterfaceC","","`interface nsIXPCTestInterfaceC : nsISupports`",null,null],[3,"mozIStorageError","","`interface mozIStorageError : nsISupports`",null,null],[3,"nsISocketProviderService","","`interface nsISocketProviderService : nsISupports`",null,null],[3,"nsIRemoteService","","`interface nsIRemoteService : nsISupports`",null,null],[3,"nsIWindowCreator2","","`interface nsIWindowCreator2 : nsIWindowCreator`",null,null],[3,"nsISimpleStreamListener","","`interface nsISimpleStreamListener : nsIStreamListener`",null,null],[3,"nsIDOMXPathEvaluator","","`interface nsIDOMXPathEvaluator : nsISupports`",null,null],[3,"nsINativeFileWatcherErrorCallback","","`interface nsINativeFileWatcherErrorCallback : nsISupports`",null,null],[3,"nsINativeFileWatcherCallback","","`interface nsINativeFileWatcherCallback : nsISupports`",null,null],[3,"nsINativeFileWatcherSuccessCallback","","`interface nsINativeFileWatcherSuccessCallback : nsISupports`",null,null],[3,"nsINativeFileWatcherService","","`interface nsINativeFileWatcherService : nsISupports`",null,null],[3,"nsIAuthPromptCallback","","`interface nsIAuthPromptCallback : nsISupports`",null,null],[3,"nsIStreamListenerTee","","`interface nsIStreamListenerTee : nsIStreamListener`",null,null],[3,"imgITools","","`interface imgITools : nsISupports`",null,null],[3,"imgIContainerCallback","","`interface imgIContainerCallback : nsISupports`",null,null],[3,"nsITextServicesFilter","","`interface nsITextServicesFilter : nsISupports`",null,null],[3,"nsIPrinterEnumerator","","`interface nsIPrinterEnumerator : nsISupports`",null,null],[3,"nsISHistoryListener","","`interface nsISHistoryListener : nsISupports`",null,null],[3,"nsIPKCS11Slot","","`interface nsIPKCS11Slot : nsISupports`",null,null],[3,"nsIDOMGeoGeolocation","","`interface nsIDOMGeoGeolocation : nsISupports`",null,null],[3,"nsIXPCScriptable","","`interface nsIXPCScriptable : nsISupports`",null,null],[3,"nsISuspendedTypes","","`interface nsISuspendedTypes : nsISupports`",null,null],[3,"nsIAudioChannelAgentCallback","","`interface nsIAudioChannelAgentCallback : nsISupports`",null,null],[3,"nsIAudioChannelAgent","","`interface nsIAudioChannelAgent : nsISupports`",null,null],[3,"nsILoadGroup","","`interface nsILoadGroup : nsIRequest`",null,null],[3,"nsIDebug2","","`interface nsIDebug2 : nsISupports`",null,null],[3,"nsIDOMGeoPositionError","","`interface nsIDOMGeoPositionError : nsISupports`",null,null],[3,"nsIHttpChannel","","`interface nsIHttpChannel : nsIChannel`",null,null],[3,"nsINetUtil","","`interface nsINetUtil : nsISupports`",null,null],[3,"nsIASN1Tree","","`interface nsIASN1Tree : nsITreeView`",null,null],[3,"nsIDialogParamBlock","","`interface nsIDialogParamBlock : nsISupports`",null,null],[3,"nsIScreenManager","","`interface nsIScreenManager : nsISupports`",null,null],[3,"nsIMultiPartChannel","","`interface nsIMultiPartChannel : nsISupports`",null,null],[3,"nsIPushNotifier","","`interface nsIPushNotifier : nsISupports`",null,null],[3,"nsIPushData","","`interface nsIPushData : nsISupports`",null,null],[3,"nsIPushMessage","","`interface nsIPushMessage : nsISupports`",null,null],[3,"nsISubstitutionObserver","","`interface nsISubstitutionObserver : nsISupports`",null,null],[3,"nsIDOMCSSCounterStyleRule","","`interface nsIDOMCSSCounterStyleRule : nsISupports`",null,null],[3,"nsIPresentationDeviceListener","","`interface nsIPresentationDeviceListener : nsISupports`",null,null],[3,"nsIPresentationDeviceProvider","","`interface nsIPresentationDeviceProvider : nsISupports`",null,null],[3,"nsILocalCertService","","`interface nsILocalCertService : nsISupports`",null,null],[3,"nsILocalCertGetCallback","","`interface nsILocalCertGetCallback : nsISupports`",null,null],[3,"nsILocalCertCallback","","`interface nsILocalCertCallback : nsISupports`",null,null],[3,"nsISocketTransportService","","`interface nsISocketTransportService : nsISupports`",null,null],[3,"nsIRoutedSocketTransportService","","`interface nsIRoutedSocketTransportService : nsISocketTransportService`",null,null],[3,"nsIXPCTestParams","","`interface nsIXPCTestParams : nsISupports`",null,null],[3,"nsIDOMXULCommandDispatcher","","`interface nsIDOMXULCommandDispatcher : nsISupports`",null,null],[3,"nsIAuthInformation","","`interface nsIAuthInformation : nsISupports`",null,null],[3,"nsIFinishDumpingCallback","","`interface nsIFinishDumpingCallback : nsISupports`",null,null],[3,"nsIDumpGCAndCCLogsCallback","","`interface nsIDumpGCAndCCLogsCallback : nsISupports`",null,null],[3,"nsIMemoryInfoDumper","","`interface nsIMemoryInfoDumper : nsISupports`",null,null],[3,"nsIAccessibleDocument","","`interface nsIAccessibleDocument : nsISupports`",null,null],[3,"nsIRequestTailUnblockCallback","","`interface nsIRequestTailUnblockCallback : nsISupports`",null,null],[3,"nsIRequestContext","","`interface nsIRequestContext : nsISupports`",null,null],[3,"nsIRequestContextService","","`interface nsIRequestContextService : nsISupports`",null,null],[3,"nsIBackgroundFileSaver","","`interface nsIBackgroundFileSaver : nsISupports`",null,null],[3,"nsIBackgroundFileSaverObserver","","`interface nsIBackgroundFileSaverObserver : nsISupports`",null,null],[3,"nsIAuthPromptProvider","","`interface nsIAuthPromptProvider : nsISupports`",null,null],[3,"nsIFormatConverter","","`interface nsIFormatConverter : nsISupports`",null,null],[3,"imgIContainer","","`interface imgIContainer : nsISupports`",null,null],[3,"amIAddonManagerStartup","","`interface amIAddonManagerStartup : nsISupports`",null,null],[3,"nsIWindowWatcher","","`interface nsIWindowWatcher : nsISupports`",null,null],[3,"nsIXSLTProcessorPrivate","","`interface nsIXSLTProcessorPrivate : nsISupports`",null,null],[3,"nsIDOMDataTransfer","","`interface nsIDOMDataTransfer : nsISupports`",null,null],[3,"nsIFileInputStream","","`interface nsIFileInputStream : nsIInputStream`",null,null],[3,"nsIFileOutputStream","","`interface nsIFileOutputStream : nsIOutputStream`",null,null],[3,"nsIFileStream","","`interface nsIFileStream : nsISupports`",null,null],[3,"nsIFileMetadata","","`interface nsIFileMetadata : nsISupports`",null,null],[3,"nsIAsyncFileMetadata","","`interface nsIAsyncFileMetadata : nsIFileMetadata`",null,null],[3,"nsIFileMetadataCallback","","`interface nsIFileMetadataCallback : nsISupports`",null,null],[3,"nsIRDFDelegateFactory","","`interface nsIRDFDelegateFactory : nsISupports`",null,null],[3,"nsIAccessibleTextChangeEvent","","`interface nsIAccessibleTextChangeEvent : nsIAccessibleEvent`",null,null],[3,"nsIRDFService","","`interface nsIRDFService : nsISupports`",null,null],[3,"nsIUpdateTimerManager","","`interface nsIUpdateTimerManager : nsISupports`",null,null],[3,"nsIRelativeFilePref","","`interface nsIRelativeFilePref : nsISupports`",null,null],[3,"nsIXBLAccessible","","`interface nsIXBLAccessible : nsISupports`",null,null],[3,"inISearchObserver","","`interface inISearchObserver : nsISupports`",null,null],[3,"nsIBoxObject","","`interface nsIBoxObject : nsISupports`",null,null],[3,"nsIBrowserProfileMigrator","","`interface nsIBrowserProfileMigrator : nsISupports`",null,null],[3,"mozISpellCheckingEngine","","`interface mozISpellCheckingEngine : nsISupports`",null,null],[3,"nsIRDFPurgeableDataSource","","`interface nsIRDFPurgeableDataSource : nsISupports`",null,null],[3,"nsIKeyObject","","`interface nsIKeyObject : nsISupports`",null,null],[3,"nsIKeyObjectFactory","","`interface nsIKeyObjectFactory : nsISupports`",null,null],[3,"nsIInputStreamPump","","`interface nsIInputStreamPump : nsIRequest`",null,null],[3,"nsIEditorStyleSheets","","`interface nsIEditorStyleSheets : nsISupports`",null,null],[3,"nsIDOMNavigator","","`interface nsIDOMNavigator : nsISupports`",null,null],[3,"nsIIncrementalStreamLoaderObserver","","`interface nsIIncrementalStreamLoaderObserver : nsISupports`",null,null],[3,"nsIIncrementalStreamLoader","","`interface nsIIncrementalStreamLoader : nsIStreamListener`",null,null],[3,"nsPIWindowWatcher","","`interface nsPIWindowWatcher : nsISupports`",null,null],[3,"mozIStorageAsyncStatement","","`interface mozIStorageAsyncStatement : mozIStorageBaseStatement`",null,null],[3,"nsIIdlePeriod","","`interface nsIIdlePeriod : nsISupports`",null,null],[3,"nsIFeed","","`interface nsIFeed : nsIFeedContainer`",null,null],[3,"nsIModule","","`interface nsIModule : nsISupports`",null,null],[3,"nsIDOMHTMLMediaElement","","`interface nsIDOMHTMLMediaElement : nsISupports`",null,null],[3,"nsIFocusManager","","`interface nsIFocusManager : nsISupports`",null,null],[3,"nsIDOMEvent","","`interface nsIDOMEvent : nsISupports`",null,null],[3,"nsIPrintingPromptService","","`interface nsIPrintingPromptService : nsISupports`",null,null],[3,"mozIVisitInfo","","`interface mozIVisitInfo : nsISupports`",null,null],[3,"mozIPlaceInfo","","`interface mozIPlaceInfo : nsISupports`",null,null],[3,"mozIVisitInfoCallback","","`interface mozIVisitInfoCallback : nsISupports`",null,null],[3,"mozIVisitedStatusCallback","","`interface mozIVisitedStatusCallback : nsISupports`",null,null],[3,"mozIAsyncHistory","","`interface mozIAsyncHistory : nsISupports`",null,null],[3,"nsIClipboardCommands","","`interface nsIClipboardCommands : nsISupports`",null,null],[3,"nsIRDFPropagatableDataSource","","`interface nsIRDFPropagatableDataSource : nsISupports`",null,null],[3,"nsIContentSignatureVerifier","","`interface nsIContentSignatureVerifier : nsISupports`",null,null],[3,"nsIContentSignatureReceiverCallback","","`interface nsIContentSignatureReceiverCallback : nsISupports`",null,null],[3,"nsIContentViewer","","`interface nsIContentViewer : nsISupports`",null,null],[3,"nsIDOMDataChannel","","`interface nsIDOMDataChannel : nsIDOMEventTarget`",null,null],[3,"nsICryptoHMAC","","`interface nsICryptoHMAC : nsISupports`",null,null],[3,"nsPIDNSService","","`interface nsPIDNSService : nsIDNSService`",null,null],[3,"nsIScreen","","`interface nsIScreen : nsISupports`",null,null],[3,"nsIEditorMailSupport","","`interface nsIEditorMailSupport : nsISupports`",null,null],[3,"nsIDOMKeyEvent","","`interface nsIDOMKeyEvent : nsIDOMUIEvent`",null,null],[3,"nsIMultiplexInputStream","","`interface nsIMultiplexInputStream : nsISupports`",null,null],[3,"nsICrashReporter","","`interface nsICrashReporter : nsISupports`",null,null],[3,"xpcIJSWeakReference","","`interface xpcIJSWeakReference : nsISupports`",null,null],[3,"nsISyncStreamListener","","`interface nsISyncStreamListener : nsIStreamListener`",null,null],[3,"nsICollationFactory","","`interface nsICollationFactory : nsISupports`",null,null],[3,"nsICollation","","`interface nsICollation : nsISupports`",null,null],[3,"nsIDocumentEncoderNodeFixup","","`interface nsIDocumentEncoderNodeFixup : nsISupports`",null,null],[3,"nsIDocumentEncoder","","`interface nsIDocumentEncoder : nsISupports`",null,null],[3,"nsIHttpProtocolHandler","","`interface nsIHttpProtocolHandler : nsIProxiedProtocolHandler`",null,null],[3,"nsIFileProtocolHandler","","`interface nsIFileProtocolHandler : nsIProtocolHandler`",null,null],[3,"nsIHTTPHeaderListener","","`interface nsIHTTPHeaderListener : nsISupports`",null,null],[3,"nsIClipboardOwner","","`interface nsIClipboardOwner : nsISupports`",null,null],[3,"nsIComponentManager","","`interface nsIComponentManager : nsISupports`",null,null],[3,"nsILoginManagerPrompter","","`interface nsILoginManagerPrompter : nsISupports`",null,null],[3,"nsIPromptService","","`interface nsIPromptService : nsISupports`",null,null],[3,"nsIDOMCSSPrimitiveValue","","`interface nsIDOMCSSPrimitiveValue : nsIDOMCSSValue`",null,null],[3,"nsIRDFNode","","`interface nsIRDFNode : nsISupports`",null,null],[3,"imgINotificationObserver","","`interface imgINotificationObserver : nsISupports`",null,null],[3,"nsIMediaDevice","","`interface nsIMediaDevice : nsISupports`",null,null],[3,"nsIGetUserMediaDevicesSuccessCallback","","`interface nsIGetUserMediaDevicesSuccessCallback : nsISupports`",null,null],[3,"nsIDOMGetUserMediaSuccessCallback","","`interface nsIDOMGetUserMediaSuccessCallback : nsISupports`",null,null],[3,"nsIDOMGetUserMediaErrorCallback","","`interface nsIDOMGetUserMediaErrorCallback : nsISupports`",null,null],[3,"nsIAutoCompleteInput","","`interface nsIAutoCompleteInput : nsISupports`",null,null],[3,"nsIAccessibleRelation","","`interface nsIAccessibleRelation : nsISupports`",null,null],[3,"nsITextInputProcessorNotification","","`interface nsITextInputProcessorNotification : nsISupports`",null,null],[3,"nsITextInputProcessorCallback","","`interface nsITextInputProcessorCallback : nsISupports`",null,null],[3,"nsIPluginInputStream","","`interface nsIPluginInputStream : nsIInputStream`",null,null],[3,"nsIDeviceSensorData","","`interface nsIDeviceSensorData : nsISupports`",null,null],[3,"nsIDeviceSensors","","`interface nsIDeviceSensors : nsISupports`",null,null],[3,"mozIStorageRow","","`interface mozIStorageRow : mozIStorageValueArray`",null,null],[3,"nsISound","","`interface nsISound : nsISupports`",null,null],[3,"nsIDNSServiceInfo","","`interface nsIDNSServiceInfo : nsISupports`",null,null],[3,"nsIDNSServiceDiscoveryListener","","`interface nsIDNSServiceDiscoveryListener : nsISupports`",null,null],[3,"nsIDNSRegistrationListener","","`interface nsIDNSRegistrationListener : nsISupports`",null,null],[3,"nsIDNSServiceResolveListener","","`interface nsIDNSServiceResolveListener : nsISupports`",null,null],[3,"nsIDNSServiceDiscovery","","`interface nsIDNSServiceDiscovery : nsISupports`",null,null],[3,"nsIDOMDocumentType","","`interface nsIDOMDocumentType : nsIDOMNode`",null,null],[3,"nsIApplicationCacheNamespace","","`interface nsIApplicationCacheNamespace : nsISupports`",null,null],[3,"nsIApplicationCache","","`interface nsIApplicationCache : nsISupports`",null,null],[3,"nsIExternalHelperAppService","","`interface nsIExternalHelperAppService : nsISupports`",null,null],[3,"nsPIExternalAppLauncher","","`interface nsPIExternalAppLauncher : nsISupports`",null,null],[3,"nsIHelperAppLauncher","","`interface nsIHelperAppLauncher : nsICancelable`",null,null],[3,"nsIDOMXULContainerItemElement","","`interface nsIDOMXULContainerItemElement : nsISupports`",null,null],[3,"nsIDOMXULContainerElement","","`interface nsIDOMXULContainerElement : nsIDOMXULContainerItemElement`",null,null],[3,"nsIDOMText","","`interface nsIDOMText : nsIDOMCharacterData`",null,null],[3,"nsIDOMCSSValueList","","`interface nsIDOMCSSValueList : nsIDOMCSSValue`",null,null],[3,"nsIDOMXULSelectControlItemElement","","`interface nsIDOMXULSelectControlItemElement : nsISupports`",null,null],[3,"nsIJARChannel","","`interface nsIJARChannel : nsIChannel`",null,null],[3,"nsIApplicationChooserFinishedCallback","","`interface nsIApplicationChooserFinishedCallback : nsISupports`",null,null],[3,"nsIApplicationChooser","","`interface nsIApplicationChooser : nsISupports`",null,null],[3,"nsIDOMCSSMediaRule","","`interface nsIDOMCSSMediaRule : nsIDOMCSSConditionRule`",null,null],[3,"nsITaggingService","","`interface nsITaggingService : nsISupports`",null,null],[3,"nsISHEntry","","`interface nsISHEntry : nsISupports`",null,null],[3,"nsISHEntryInternal","","`interface nsISHEntryInternal : nsISupports`",null,null],[3,"nsIURIRefObject","","`interface nsIURIRefObject : nsISupports`",null,null],[3,"nsIScriptErrorNote","","`interface nsIScriptErrorNote : nsISupports`",null,null],[3,"nsIScriptError","","`interface nsIScriptError : nsIConsoleMessage`",null,null],[3,"nsIImageLoadingContent","","`interface nsIImageLoadingContent : imgINotificationObserver`",null,null],[3,"nsIAccessible","","`interface nsIAccessible : nsISupports`",null,null],[3,"nsIContentDispatchChooser","","`interface nsIContentDispatchChooser : nsISupports`",null,null],[3,"nsIUploadChannel2","","`interface nsIUploadChannel2 : nsISupports`",null,null],[3,"nsIConsoleService","","`interface nsIConsoleService : nsISupports`",null,null],[3,"nsIDOMWindowCollection","","`interface nsIDOMWindowCollection : nsISupports`",null,null],[3,"nsIDOMNodeFilter","","`interface nsIDOMNodeFilter : nsISupports`",null,null],[3,"nsIAudioDeviceInfo","","`interface nsIAudioDeviceInfo : nsISupports`",null,null],[3,"nsIIDNService","","`interface nsIIDNService : nsISupports`",null,null],[3,"nsIRequestObserver","","`interface nsIRequestObserver : nsISupports`",null,null],[3,"IUrlClassifierUITelemetry","","`interface IUrlClassifierUITelemetry : nsISupports`",null,null],[3,"nsIChannelEventSink","","`interface nsIChannelEventSink : nsISupports`",null,null],[3,"nsIDOMCharacterData","","`interface nsIDOMCharacterData : nsIDOMNode`",null,null],[3,"nsIGNOMEShellService","","`interface nsIGNOMEShellService : nsIShellService`",null,null],[3,"mozIDOMWindow","","`interface mozIDOMWindow : nsISupports`",null,null],[3,"mozIDOMWindowProxy","","`interface mozIDOMWindowProxy : nsISupports`",null,null],[3,"nsIPresentationLocalDevice","","`interface nsIPresentationLocalDevice : nsIPresentationDevice`",null,null],[3,"nsIContentViewerContainer","","`interface nsIContentViewerContainer : nsISupports`",null,null],[3,"nsIWebNavigation","","`interface nsIWebNavigation : nsISupports`",null,null],[3,"nsIStandardURL","","`interface nsIStandardURL : nsIMutable`",null,null],[3,"mozIStoragePendingStatement","","`interface mozIStoragePendingStatement : nsISupports`",null,null],[3,"mozISandboxReport","","`interface mozISandboxReport : nsISupports`",null,null],[3,"mozISandboxReportArray","","`interface mozISandboxReportArray : nsISupports`",null,null],[3,"mozISandboxReporter","","`interface mozISandboxReporter : nsISupports`",null,null],[3,"nsILineInputStream","","`interface nsILineInputStream : nsISupports`",null,null],[3,"nsIFxAccountsUIGlue","","`interface nsIFxAccountsUIGlue : nsISupports`",null,null],[3,"nsIRedirectChannelRegistrar","","`interface nsIRedirectChannelRegistrar : nsISupports`",null,null],[3,"nsIFeedGenerator","","`interface nsIFeedGenerator : nsIFeedElementBase`",null,null],[3,"nsIAsyncShutdownBlocker","","`interface nsIAsyncShutdownBlocker : nsISupports`",null,null],[3,"nsIAsyncShutdownClient","","`interface nsIAsyncShutdownClient : nsISupports`",null,null],[3,"nsIAsyncShutdownCompletionCallback","","`interface nsIAsyncShutdownCompletionCallback : nsISupports`",null,null],[3,"nsIAsyncShutdownBarrier","","`interface nsIAsyncShutdownBarrier : nsISupports`",null,null],[3,"nsIAsyncShutdownService","","`interface nsIAsyncShutdownService : nsISupports`",null,null],[3,"nsIAccessibleHideEvent","","`interface nsIAccessibleHideEvent : nsIAccessibleEvent`",null,null],[3,"nsIMarionette","","`interface nsIMarionette : nsISupports`",null,null],[3,"nsIDirIndexListener","","`interface nsIDirIndexListener : nsISupports`",null,null],[3,"nsIDirIndexParser","","`interface nsIDirIndexParser : nsIStreamListener`",null,null],[3,"nsIPrivateBrowsingTrackingProtectionWhitelist","","`interface nsIPrivateBrowsingTrackingProtectionWhitelist : nsISupports`",null,null],[3,"nsIFactory","","`interface nsIFactory : nsISupports`",null,null],[3,"nsIClassifiedChannel","","`interface nsIClassifiedChannel : nsISupports`",null,null],[3,"nsIJSID","","`interface nsIJSID : nsISupports`",null,null],[3,"nsIJSIID","","`interface nsIJSIID : nsIJSID`",null,null],[3,"nsIJSCID","","`interface nsIJSCID : nsIJSID`",null,null],[3,"nsIDNSService","","`interface nsIDNSService : nsISupports`",null,null],[3,"nsIBrowserElementNextPaintListener","","`interface nsIBrowserElementNextPaintListener : nsISupports`",null,null],[3,"nsIBrowserElementAPI","","`interface nsIBrowserElementAPI : nsISupports`",null,null],[3,"nsIChannelWithDivertableParentListener","","`interface nsIChannelWithDivertableParentListener : nsISupports`",null,null],[3,"nsICacheStorage","","`interface nsICacheStorage : nsISupports`",null,null],[3,"nsIPropertyBag","","`interface nsIPropertyBag : nsISupports`",null,null],[3,"nsIDownloadManagerUI","","`interface nsIDownloadManagerUI : nsISupports`",null,null],[3,"nsIRDFXMLSource","","`interface nsIRDFXMLSource : nsISupports`",null,null],[3,"nsIThreadInternal","","`interface nsIThreadInternal : nsIThread`",null,null],[3,"nsIThreadObserver","","`interface nsIThreadObserver : nsISupports`",null,null],[3,"mozIGeckoMediaPluginService","","`interface mozIGeckoMediaPluginService : nsISupports`",null,null],[3,"nsIWebBrowserPersist","","`interface nsIWebBrowserPersist : nsICancelable`",null,null],[3,"nsIRunnable","","`interface nsIRunnable : nsISupports`",null,null],[3,"nsIRunnablePriority","","`interface nsIRunnablePriority : nsISupports`",null,null],[3,"nsIAnnotationObserver","","`interface nsIAnnotationObserver : nsISupports`",null,null],[3,"nsIAnnotationService","","`interface nsIAnnotationService : nsISupports`",null,null],[3,"mozIAnnotatedResult","","`interface mozIAnnotatedResult : nsISupports`",null,null],[3,"nsIXPCComponents_InterfacesByID","","`interface nsIXPCComponents_InterfacesByID : nsISupports`",null,null],[3,"nsIXPCComponents_Interfaces","","`interface nsIXPCComponents_Interfaces : nsISupports`",null,null],[3,"nsIXPCComponents_Classes","","`interface nsIXPCComponents_Classes : nsISupports`",null,null],[3,"nsIXPCComponents_ClassesByID","","`interface nsIXPCComponents_ClassesByID : nsISupports`",null,null],[3,"nsIXPCComponents_Results","","`interface nsIXPCComponents_Results : nsISupports`",null,null],[3,"nsIXPCComponents_ID","","`interface nsIXPCComponents_ID : nsISupports`",null,null],[3,"nsIXPCComponents_Exception","","`interface nsIXPCComponents_Exception : nsISupports`",null,null],[3,"nsIXPCComponents_Constructor","","`interface nsIXPCComponents_Constructor : nsISupports`",null,null],[3,"nsIXPCConstructor","","`interface nsIXPCConstructor : nsISupports`",null,null],[3,"nsIXPCComponents_utils_Sandbox","","`interface nsIXPCComponents_utils_Sandbox : nsISupports`",null,null],[3,"ScheduledGCCallback","","`interface ScheduledGCCallback : nsISupports`",null,null],[3,"nsIBlockThreadedExecutionCallback","","`interface nsIBlockThreadedExecutionCallback : nsISupports`",null,null],[3,"nsIXPCComponents_Utils","","`interface nsIXPCComponents_Utils : nsISupports`",null,null],[3,"nsIXPCComponentsBase","","`interface nsIXPCComponentsBase : nsISupports`",null,null],[3,"nsIXPCComponents","","`interface nsIXPCComponents : nsIXPCComponentsBase`",null,null],[3,"nsIAccessibleValue","","`interface nsIAccessibleValue : nsISupports`",null,null],[3,"nsIUrlClassifierCallback","","`interface nsIUrlClassifierCallback : nsISupports`",null,null],[3,"nsIUrlClassifierUpdateObserver","","`interface nsIUrlClassifierUpdateObserver : nsISupports`",null,null],[3,"nsIUrlClassifierDBService","","`interface nsIUrlClassifierDBService : nsISupports`",null,null],[3,"nsIUrlClassifierLookupCallback","","`interface nsIUrlClassifierLookupCallback : nsISupports`",null,null],[3,"nsIUrlClassifierClassifyCallback","","`interface nsIUrlClassifierClassifyCallback : nsISupports`",null,null],[3,"nsIApplicationReputationService","","`interface nsIApplicationReputationService : nsISupports`",null,null],[3,"nsIApplicationReputationQuery","","`interface nsIApplicationReputationQuery : nsISupports`",null,null],[3,"nsIApplicationReputationCallback","","`interface nsIApplicationReputationCallback : nsISupports`",null,null],[3,"nsIAccessibleEditableText","","`interface nsIAccessibleEditableText : nsISupports`",null,null],[3,"nsIDOMTransitionEvent","","`interface nsIDOMTransitionEvent : nsISupports`",null,null],[3,"nsIFeedEntry","","`interface nsIFeedEntry : nsIFeedContainer`",null,null],[3,"nsIDOMCSSStyleDeclaration","","`interface nsIDOMCSSStyleDeclaration : nsISupports`",null,null],[3,"mozIStorageFunction","","`interface mozIStorageFunction : nsISupports`",null,null],[3,"nsIDOMCSSRule","","`interface nsIDOMCSSRule : nsISupports`",null,null],[3,"nsIIdleObserver","","`interface nsIIdleObserver : nsISupports`",null,null],[3,"nsIBaseWindow","","`interface nsIBaseWindow : nsISupports`",null,null],[3,"nsIFormSubmitObserver","","`interface nsIFormSubmitObserver : nsISupports`",null,null],[3,"nsIDocumentStateListener","","`interface nsIDocumentStateListener : nsISupports`",null,null],[3,"nsIDOMNSEditableElement","","`interface nsIDOMNSEditableElement : nsISupports`",null,null],[3,"nsIConverterOutputStream","","`interface nsIConverterOutputStream : nsIUnicharOutputStream`",null,null],[3,"nsIRequest","","`interface nsIRequest : nsISupports`",null,null],[3,"mozITXTToHTMLConv","","`interface mozITXTToHTMLConv : nsIStreamConverter`",null,null],[3,"ScriptableOK","","`interface ScriptableOK : nsISupports`",null,null],[3,"ScriptableWithNotXPCOM","","`interface ScriptableWithNotXPCOM : nsISupports`",null,null],[3,"ScriptableWithNotXPCOMBase","","`interface ScriptableWithNotXPCOMBase : ScriptableWithNotXPCOM`",null,null],[3,"nsIScriptChannel","","`interface nsIScriptChannel : nsISupports`",null,null],[3,"nsIHttpUpgradeListener","","`interface nsIHttpUpgradeListener : nsISupports`",null,null],[3,"nsIHttpChannelInternal","","`interface nsIHttpChannelInternal : nsISupports`",null,null],[3,"nsIArray","","`interface nsIArray : nsISupports`",null,null],[3,"nsIProfilerStartParams","","`interface nsIProfilerStartParams : nsISupports`",null,null],[3,"nsIProfiler","","`interface nsIProfiler : nsISupports`",null,null],[3,"nsIAppStartup","","`interface nsIAppStartup : nsISupports`",null,null],[3,"nsIDOMWebGLRenderingContext","","`interface nsIDOMWebGLRenderingContext : nsISupports`",null,null],[3,"nsIFormPOSTActionChannel","","`interface nsIFormPOSTActionChannel : nsIUploadChannel`",null,null],[3,"nsIOpenURIInFrameParams","","`interface nsIOpenURIInFrameParams : nsISupports`",null,null],[3,"nsIBrowserDOMWindow","","`interface nsIBrowserDOMWindow : nsISupports`",null,null],[3,"nsIDOMXULCommandEvent","","`interface nsIDOMXULCommandEvent : nsIDOMUIEvent`",null,null],[3,"nsICacheInfoChannel","","`interface nsICacheInfoChannel : nsISupports`",null,null],[3,"nsIMutableArray","","`interface nsIMutableArray : nsIArrayExtensions`",null,null],[3,"nsIGConfService","","`interface nsIGConfService : nsISupports`",null,null],[3,"nsIPropertyBag2","","`interface nsIPropertyBag2 : nsIPropertyBag`",null,null],[3,"nsISpeechTaskCallback","","`interface nsISpeechTaskCallback : nsISupports`",null,null],[3,"nsISpeechTask","","`interface nsISpeechTask : nsISupports`",null,null],[3,"nsISpeechService","","`interface nsISpeechService : nsISupports`",null,null],[3,"nsIDOMAttr","","`interface nsIDOMAttr : nsIDOMNode`",null,null],[3,"nsIDOMNodeIterator","","`interface nsIDOMNodeIterator : nsISupports`",null,null],[3,"nsICookie","","`interface nsICookie : nsISupports`",null,null],[3,"nsICloneableInputStream","","`interface nsICloneableInputStream : nsISupports`",null,null],[3,"nsICloneableInputStreamWithRange","","`interface nsICloneableInputStreamWithRange : nsICloneableInputStream`",null,null],[3,"nsIPropertyElement","","`interface nsIPropertyElement : nsISupports`",null,null],[3,"nsIPersistentProperties","","`interface nsIPersistentProperties : nsIProperties`",null,null],[3,"nsIDOMSimpleGestureEvent","","`interface nsIDOMSimpleGestureEvent : nsIDOMMouseEvent`",null,null],[3,"nsIScriptableUnescapeHTML","","`interface nsIScriptableUnescapeHTML : nsISupports`",null,null],[3,"nsITooltipListener","","`interface nsITooltipListener : nsISupports`",null,null],[3,"nsIEncodedChannel","","`interface nsIEncodedChannel : nsISupports`",null,null],[3,"nsIContentURIGrouper","","`interface nsIContentURIGrouper : nsISupports`",null,null],[3,"nsIController","","`interface nsIController : nsISupports`",null,null],[3,"nsICommandController","","`interface nsICommandController : nsISupports`",null,null],[3,"nsIControllerCommandGroup","","`interface nsIControllerCommandGroup : nsISupports`",null,null],[3,"nsICachingChannel","","`interface nsICachingChannel : nsICacheInfoChannel`",null,null],[3,"nsIAutoCompleteSimpleResult","","`interface nsIAutoCompleteSimpleResult : nsIAutoCompleteResult`",null,null],[3,"nsIAutoCompleteSimpleResultListener","","`interface nsIAutoCompleteSimpleResultListener : nsISupports`",null,null],[3,"nsIDOMXULSelectControlElement","","`interface nsIDOMXULSelectControlElement : nsIDOMXULControlElement`",null,null],[3,"nsIAccessibleHyperLink","","`interface nsIAccessibleHyperLink : nsISupports`",null,null],[3,"nsITextInputProcessor","","`interface nsITextInputProcessor : nsISupports`",null,null],[3,"nsIWindowCreator","","`interface nsIWindowCreator : nsISupports`",null,null],[3,"nsIObjectOutputStream","","`interface nsIObjectOutputStream : nsIBinaryOutputStream`",null,null],[3,"nsIMozIconURI","","`interface nsIMozIconURI : nsIURI`",null,null],[3,"nsIRDFXMLSerializer","","`interface nsIRDFXMLSerializer : nsISupports`",null,null],[3,"nsIPrincipal","","`interface nsIPrincipal : nsISerializable`",null,null],[3,"nsIExpandedPrincipal","","`interface nsIExpandedPrincipal : nsISupports`",null,null],[3,"nsICertBlocklist","","`interface nsICertBlocklist : nsISupports`",null,null],[3,"nsILoadContext","","`interface nsILoadContext : nsISupports`",null,null],[3,"nsITXTToHTMLConv","","`interface nsITXTToHTMLConv : nsIStreamConverter`",null,null],[3,"nsIDOMMouseEvent","","`interface nsIDOMMouseEvent : nsIDOMUIEvent`",null,null],[3,"nsINetAddr","","`interface nsINetAddr : nsISupports`",null,null],[3,"nsISAXAttributes","","`interface nsISAXAttributes : nsISupports`",null,null],[3,"xpcIJSGetFactory","","`interface xpcIJSGetFactory : nsISupports`",null,null],[3,"mozIStorageConnection","","`interface mozIStorageConnection : mozIStorageAsyncConnection`",null,null],[3,"nsIURIWithBlobImpl","","`interface nsIURIWithBlobImpl : nsISupports`",null,null],[3,"nsISafeOutputStream","","`interface nsISafeOutputStream : nsISupports`",null,null],[3,"nsISocketFilter","","`interface nsISocketFilter : nsISupports`",null,null],[3,"nsISocketFilterHandler","","`interface nsISocketFilterHandler : nsISupports`",null,null],[3,"nsICertOverrideService","","`interface nsICertOverrideService : nsISupports`",null,null],[3,"nsIWebContentHandlerInfo","","`interface nsIWebContentHandlerInfo : nsIHandlerApp`",null,null],[3,"nsIWebContentConverterService","","`interface nsIWebContentConverterService : nsIWebContentHandlerRegistrar`",null,null],[3,"nsIServiceManager","","`interface nsIServiceManager : nsISupports`",null,null],[3,"nsIPartialSHistory","","`interface nsIPartialSHistory : nsISupports`",null,null],[3,"nsIPerformanceGroupDetails","","`interface nsIPerformanceGroupDetails : nsISupports`",null,null],[3,"nsIPerformanceStats","","`interface nsIPerformanceStats : nsIPerformanceGroupDetails`",null,null],[3,"nsIPerformanceSnapshot","","`interface nsIPerformanceSnapshot : nsISupports`",null,null],[3,"nsIPerformanceAlert","","`interface nsIPerformanceAlert : nsISupports`",null,null],[3,"nsIPerformanceObserver","","`interface nsIPerformanceObserver : nsISupports`",null,null],[3,"nsIPerformanceObservable","","`interface nsIPerformanceObservable : nsISupports`",null,null],[3,"nsIPerformanceStatsService","","`interface nsIPerformanceStatsService : nsISupports`",null,null],[3,"nsISSLStatusProvider","","`interface nsISSLStatusProvider : nsISupports`",null,null],[3,"nsIDiskSpaceWatcher","","`interface nsIDiskSpaceWatcher : nsISupports`",null,null],[3,"nsISlowScriptDebugCallback","","`interface nsISlowScriptDebugCallback : nsISupports`",null,null],[3,"nsISlowScriptDebuggerStartupCallback","","`interface nsISlowScriptDebuggerStartupCallback : nsISupports`",null,null],[3,"nsISlowScriptDebugRemoteCallback","","`interface nsISlowScriptDebugRemoteCallback : nsISupports`",null,null],[3,"nsISlowScriptDebug","","`interface nsISlowScriptDebug : nsISupports`",null,null],[3,"nsIURIContentListener","","`interface nsIURIContentListener : nsISupports`",null,null],[3,"nsIProfileLock","","`interface nsIProfileLock : nsISupports`",null,null],[3,"nsIToolkitProfile","","`interface nsIToolkitProfile : nsISupports`",null,null],[3,"nsIWebSocketListener","","`interface nsIWebSocketListener : nsISupports`",null,null],[3,"nsIEditorBlobListener","","`interface nsIEditorBlobListener : nsISupports`",null,null],[3,"nsIEditorUtils","","`interface nsIEditorUtils : nsISupports`",null,null],[3,"nsIWindowMediatorListener","","`interface nsIWindowMediatorListener : nsISupports`",null,null],[3,"amIWebInstallPrompt","","`interface amIWebInstallPrompt : nsISupports`",null,null],[3,"mozIThirdPartyUtil","","`interface mozIThirdPartyUtil : nsISupports`",null,null],[3,"nsIAuthPrompt2","","`interface nsIAuthPrompt2 : nsISupports`",null,null],[3,"nsIDocShell","","`interface nsIDocShell : nsIDocShellTreeItem`",null,null],[3,"nsITabSource","","`interface nsITabSource : nsISupports`",null,null],[3,"nsIErrorService","","`interface nsIErrorService : nsISupports`",null,null],[3,"nsISSLSocketControl","","`interface nsISSLSocketControl : nsISupports`",null,null],[3,"nsICommandLineValidator","","`interface nsICommandLineValidator : nsISupports`",null,null],[3,"nsISelectionPrivate","","`interface nsISelectionPrivate : nsISupports`",null,null],[3,"nsIComponentRegistrar","","`interface nsIComponentRegistrar : nsISupports`",null,null],[3,"nsIParentChannel","","`interface nsIParentChannel : nsIStreamListener`",null,null],[3,"nsIWebBrowserFind","","`interface nsIWebBrowserFind : nsISupports`",null,null],[3,"nsIWebBrowserFindInFrames","","`interface nsIWebBrowserFindInFrames : nsISupports`",null,null],[3,"nsIFeedResultService","","`interface nsIFeedResultService : nsISupports`",null,null],[3,"nsIHttpChannelAuthProvider","","`interface nsIHttpChannelAuthProvider : nsICancelable`",null,null],[3,"nsIUTF8ConverterService","","`interface nsIUTF8ConverterService : nsISupports`",null,null],[3,"nsIFeedResultListener","","`interface nsIFeedResultListener : nsISupports`",null,null],[3,"nsIFeedProgressListener","","`interface nsIFeedProgressListener : nsIFeedResultListener`",null,null],[3,"nsIAsyncStreamCopier","","`interface nsIAsyncStreamCopier : nsIRequest`",null,null],[3,"nsIExternalURLHandlerService","","`interface nsIExternalURLHandlerService : nsISupports`",null,null],[3,"nsIGeneratingKeypairInfoDialogs","","`interface nsIGeneratingKeypairInfoDialogs : nsISupports`",null,null],[3,"nsIPushErrorReporter","","`interface nsIPushErrorReporter : nsISupports`",null,null],[3,"nsISecurityConsoleMessage","","`interface nsISecurityConsoleMessage : nsISupports`",null,null],[3,"nsIContentPermissionType","","`interface nsIContentPermissionType : nsISupports`",null,null],[3,"nsIContentPermissionRequestCallback","","`interface nsIContentPermissionRequestCallback : nsISupports`",null,null],[3,"nsIContentPermissionRequester","","`interface nsIContentPermissionRequester : nsISupports`",null,null],[3,"nsIContentPermissionRequest","","`interface nsIContentPermissionRequest : nsISupports`",null,null],[3,"nsIContentPermissionPrompt","","`interface nsIContentPermissionPrompt : nsISupports`",null,null],[3,"nsIDocument","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsINode","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIContent","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIConsoleReportCollector","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIGlobalObject","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIScriptElement","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsPIDOMWindowOuter","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsPIDOMWindowInner","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIScriptContext","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIScriptGlobalObject","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIScrollObserver","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[3,"nsIWidget","","This interface is referenced from idl files, but not defined in them. It exports no methods to rust code.",null,null],[11,"addref","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",5,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExternalProtocolService` to one of its base interfaces.",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",5,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ExternalProtocolHandlerExists","","`text /** * Check whether a handler for a specific protocol exists. Specifically, * this looks to see whether there are any known possible application handlers * in either the nsIHandlerService datastore or registered with the OS. * * @param aProtocolScheme The scheme from a url: http, ftp, mailto, etc. * * @return true if we have a handler and false otherwise. * * XXX shouldn't aProtocolScheme be an ACString like nsIURI::scheme? */`",5,null],[11,"IsExposedProtocol","","`text /** * Check whether a handler for a specific protocol is \"exposed\" as a visible * feature of the current application. * * An exposed protocol handler is one that can be used in all contexts. A * non-exposed protocol handler is one that can only be used internally by the * application. For example, a non-exposed protocol would not be loaded by the * application in response to a link click or a X-remote openURL command. * Instead, it would be deferred to the system's external protocol handler. * XXX shouldn't aProtocolScheme be an ACString like nsIURI::scheme? */`",5,null],[11,"GetProtocolHandlerInfo","","`text /** * Retrieve the handler for the given protocol. If neither the application * nor the OS knows about a handler for the protocol, the object this method * returns will represent a default handler for unknown content. * * @param aProtocolScheme the scheme from a URL: http, ftp, mailto, etc. * * Note: aProtocolScheme should not include a trailing colon, which is part * of the URI syntax, not part of the scheme itself (i.e. pass \"mailto\" not * \"mailto:\"). * * @return the handler, if any; otherwise a default handler */`",5,null],[11,"GetProtocolHandlerInfoFromOS","","`text /** * Given a scheme, looks up the protocol info from the OS. This should be * overridden by each OS's implementation. * * @param aScheme The protocol scheme we are looking for. * @param aFound Was an OS default handler for this scheme found? * @return An nsIHanderInfo for the protocol. */`",5,null],[11,"SetProtocolHandlerDefaults","","`text /** * Set some sane defaults for a protocol handler object. * * @param aHandlerInfo nsIHandlerInfo object, as returned by * getProtocolHandlerInfoFromOS * @param aOSHandlerExists was the object above created for an extant * OS default handler? This is generally the * value of the aFound out param from * getProtocolHandlerInfoFromOS. */`",5,null],[11,"LoadURI","","`text /** * Used to load a URI via an external application. Might prompt the user for * permission to load the external application. * * @param aURI * The URI to load * * @param aWindowContext * The window to parent the dialog against, and, if a web handler * is chosen, it is loaded in this window as well. This parameter * may be ultimately passed nsIURILoader.openURI in the case of a * web handler, and aWindowContext is null or not present, web * handlers will fail. We need to do better than that; bug 394483 * filed in order to track. * * @note Embedders that do not expose the http protocol should not currently * use web-based protocol handlers, as handoff won't work correctly * (bug 394479). */`",5,null],[11,"GetApplicationDescription","","`text /** * Gets a human-readable description for the application responsible for * handling a specific protocol. * * @param aScheme The scheme to look up. For example, \"mms\". * * @throw NS_ERROR_NOT_IMPLEMENTED * If getting descriptions for protocol helpers is not supported * @throw NS_ERROR_NOT_AVAILABLE * If no protocol helper exists for this scheme, or if it is not * possible to get a description for it. */`",5,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",6,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHTMLDocument` to one of its base interfaces.",6,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",6,{"inputs":[{"name":"self"}],"output":{"name":"nsidomdocument"}}],[11,"GetDomain","","`attribute DOMString domain;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDomain","","`attribute DOMString domain;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCookie","","`attribute DOMString cookie;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCookie","","`attribute DOMString cookie;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHead","","`readonly attribute nsISupports head;`",6,null],[11,"GetBody","","`attribute nsIDOMHTMLElement body;`",6,null],[11,"SetBody","","`attribute nsIDOMHTMLElement body;`",6,null],[11,"Close","","`void close ();`",6,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDesignMode","","`text /** * Midas additions */`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDesignMode","","`text /** * Midas additions */`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"QueryCommandIndeterm","","`boolean queryCommandIndeterm (in DOMString commandID);`",6,null],[11,"QueryCommandState","","`boolean queryCommandState (in DOMString commandID);`",6,null],[11,"QueryCommandValue","","`DOMString queryCommandValue (in DOMString commandID);`",6,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFgColor","","`attribute DOMString fgColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFgColor","","`attribute DOMString fgColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBgColor","","`attribute DOMString bgColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetBgColor","","`attribute DOMString bgColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLinkColor","","`attribute DOMString linkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetLinkColor","","`attribute DOMString linkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVlinkColor","","`attribute DOMString vlinkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetVlinkColor","","`attribute DOMString vlinkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAlinkColor","","`attribute DOMString alinkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAlinkColor","","`attribute DOMString alinkColor;`",6,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Clear","","`void clear ();`",6,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSelection","","`nsISelection getSelection ();`",6,null],[11,"CaptureEvents","","`text /** * @deprecated These are old Netscape 4 methods. Do not use, * the implementation is no-op. */`",6,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ReleaseEvents","","`void releaseEvents ();`",6,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",7,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationCacheChannel` to one of its base interfaces.",7,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",7,{"inputs":[{"name":"self"}],"output":{"name":"nsiapplicationcachecontainer"}}],[11,"GetLoadedFromApplicationCache","","`text /** * TRUE when the resource came from the application cache. This * might be false even there is assigned an application cache * e.g. in case of fallback of load of an entry matching bypass * namespace. */`",7,null],[11,"GetInheritApplicationCache","","`text /** * When true, the channel will ask its notification callbacks for * an application cache if one is not explicitly provided. Default * value is true. * * NS_ERROR_ALREADY_OPENED will be thrown if set after AsyncOpen() * is called. */`",7,null],[11,"SetInheritApplicationCache","","`text /** * When true, the channel will ask its notification callbacks for * an application cache if one is not explicitly provided. Default * value is true. * * NS_ERROR_ALREADY_OPENED will be thrown if set after AsyncOpen() * is called. */`",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetChooseApplicationCache","","`text /** * When true, the channel will choose an application cache if one * was not explicitly provided and none is available from the * notification callbacks. Default value is false. * * This attribute will not be transferred through a redirect. * * NS_ERROR_ALREADY_OPENED will be thrown if set after AsyncOpen() * is called. */`",7,null],[11,"SetChooseApplicationCache","","`text /** * When true, the channel will choose an application cache if one * was not explicitly provided and none is available from the * notification callbacks. Default value is false. * * This attribute will not be transferred through a redirect. * * NS_ERROR_ALREADY_OPENED will be thrown if set after AsyncOpen() * is called. */`",7,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"MarkOfflineCacheEntryAsForeign","","`text /** * A shortcut method to mark the cache item of this channel as 'foreign'. * See the 'cache selection algorithm' and CACHE_SELECTION_RELOAD * action handling in nsContentSink. */`",7,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetApplicationCacheForWrite","","`text /** * Set offline application cache object to instruct the channel * to cache for offline use using this application cache. */`",7,null],[11,"SetApplicationCacheForWrite","","`text /** * Set offline application cache object to instruct the channel * to cache for offline use using this application cache. */`",7,null],[11,"addref","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",8,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITimeService` to one of its base interfaces.",8,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Set","","`void set (in int64_t aTimeInMS);`",8,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",9,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolProxyService2` to one of its base interfaces.",9,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",9,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolproxyservice"}}],[11,"ReloadPAC","","`text /** * Call this method to cause the PAC file (if any is configured) to be * reloaded. The PAC file is loaded asynchronously. */`",9,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AsyncResolve2","","`text /** * This method is identical to asyncResolve() except: * - it only accepts an nsIChannel, not an nsIURI; * - it may execute the callback function immediately (i.e from the stack * of asyncResolve2()) if it is immediately ready to run. * The nsICancelable return value will be null in that case. */`",9,null],[11,"addref","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",10,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPK11Token` to one of its base interfaces.",10,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",10,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTokenName","","`[must_use] readonly attribute AUTF8String tokenName;`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTokenLabel","","`[must_use] readonly attribute AUTF8String tokenLabel;`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTokenManID","","`text /** * Manufacturer ID of the token. */`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTokenHWVersion","","`text /** * Hardware version of the token. */`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTokenFWVersion","","`text /** * Firmware version of the token. */`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTokenSerialNumber","","`[must_use] readonly attribute AUTF8String tokenSerialNumber;`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsLoggedIn","","`[must_use] boolean isLoggedIn ();`",10,null],[11,"Login","","`[must_use] void login (in boolean force);`",10,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"LogoutSimple","","`[must_use] void logoutSimple ();`",10,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"LogoutAndDropAuthenticatedResources","","`[must_use] void logoutAndDropAuthenticatedResources ();`",10,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NeedsLogin","","`[must_use] boolean needsLogin ();`",10,null],[11,"GetNeedsUserInit","","`[must_use] readonly attribute boolean needsUserInit;`",10,null],[11,"Reset","","`[must_use] void reset ();`",10,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CheckPassword","","`text /** * Checks whether the given password is correct. Logs the token out if an * incorrect password is given. * * @param password The password to check. * @return true if the password was correct, false otherwise. */`",10,null],[11,"InitPassword","","`[must_use] void initPassword (in AUTF8String initialPassword);`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ChangePassword","","`[must_use] void changePassword (in AUTF8String oldPassword, in AUTF8String newPassword);`",10,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHasPassword","","`[must_use] readonly attribute boolean hasPassword;`",10,null],[11,"addref","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",11,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAboutNewTabService` to one of its base interfaces.",11,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",11,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNewTabURL","","`text /** * Returns the url of the resource for the newtab page if not overridden, * otherwise a string represenation of the new URL. */`",11,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetNewTabURL","","`text /** * Returns the url of the resource for the newtab page if not overridden, * otherwise a string represenation of the new URL. */`",11,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultURL","","`text /** * Returns the default URL (local or activity stream depending on pref) */`",11,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDefaultURL","","`text /** * Returns the default URL (local or activity stream depending on pref) */`",11,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetWillNotifyUser","","`text /** * Returns true if opening the New Tab page will notify the user of a change. */`",11,null],[11,"SetWillNotifyUser","","`text /** * Returns true if opening the New Tab page will notify the user of a change. */`",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOverridden","","`text /** * Returns true if the default resource got overridden. */`",11,null],[11,"GetActivityStreamEnabled","","`text /** * Returns true if the default resource is activity stream and isn't * overridden */`",11,null],[11,"GetActivityStreamPrerender","","`text /** * Returns true if the the prerendering pref for activity stream is true */`",11,null],[11,"GetActivityStreamDebug","","`text /** * Returns true if the the debug pref for activity stream is true */`",11,null],[11,"ResetNewTabURL","","`text /** * Resets to the default resource and also resets the * overridden attribute to false. */`",11,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",12,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMParser` to one of its base interfaces.",12,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",12,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ParseFromString","","`text /** * The string passed in is parsed into a DOM document. * * @param str The UTF16 string to be parsed * @param contentType The content type of the string (see parseFromStream) * @returns The DOM document created as a result of parsing the * string */`",12,null],[11,"ParseFromBuffer","","`text /** * The buffer is parsed into a DOM document. * The charset is determined from the xml entity decl. * * @param buf The octet array data to be parsed * @param bufLen Length (in bytes) of the data * @param contentType The content type of the data (see parseFromStream) * @returns The DOM document created as a result of parsing the * string */`",12,null],[11,"ParseFromStream","","`text /** * The byte stream passed in is parsed into a DOM document. * * Not accessible from web content. * * @param stream The byte stream whose contents are parsed * @param charset The character set that was used to encode the byte * stream. NULL if not specified. * @param contentLength The number of bytes in the input stream. * @param contentType The content type of the string - either text/xml, * application/xml, or application/xhtml+xml. * Must not be NULL. * @returns The DOM document created as a result of parsing the * stream */`",12,null],[11,"Init","","`text /** * Initialize the principal and document and base URIs that the parser should * use for documents it creates. If this is not called, then a null * principal and its URI will be used. When creating a DOMParser via the JS * constructor, this will be called automatically. This method may only be * called once. If this method fails, all following parse attempts will * fail. * * @param principal The principal to use for documents we create. * If this is null, a codebase principal will be created * based on documentURI; in that case the documentURI must * be non-null. * @param documentURI The documentURI to use for the documents we create. * If null, the principal's URI will be used; * in that case, the principal must be non-null and its * URI must be non-null. * @param baseURI The baseURI to use for the documents we create. * If null, the documentURI will be used. * @param scriptObject The object from which the context for event handling * can be got. */`",12,null],[11,"addref","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",13,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIChannel` to one of its base interfaces.",13,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",13,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[18,"LOAD_DOCUMENT_URI","","`text /************************************************************************** * Channel specific load flags: * * Bits 26-31 are reserved for future use by this interface or one of its * derivatives (e.g., see nsICachingChannel). */ /** * Set (e.g., by the docshell) to indicate whether or not the channel * corresponds to a document URI. * While setting this flag is sufficient to mark a channel as a document * load, _checking_ whether the channel is a document load requires the use * of the new channel.isDocument */`",13,null],[18,"LOAD_RETARGETED_DOCUMENT_URI","","`text /** * If the end consumer for this load has been retargeted after discovering * its content, this flag will be set: */`",13,null],[18,"LOAD_REPLACE","","`text /** * This flag is set to indicate that this channel is replacing another * channel. This means that: * * 1) the stream listener this channel will be notifying was initially * passed to the asyncOpen method of some other channel * * and * * 2) this channel's URI is a better identifier of the resource being * accessed than this channel's originalURI. * * This flag can be set, for example, for redirects or for cases when a * single channel has multiple parts to it (and thus can follow * onStopRequest with another onStartRequest/onStopRequest pair, each pair * for a different request). */`",13,null],[18,"LOAD_INITIAL_DOCUMENT_URI","","`text /** * Set (e.g., by the docshell) to indicate whether or not the channel * corresponds to an initial document URI load (e.g., link click). */`",13,null],[18,"LOAD_TARGETED","","`text /** * Set (e.g., by the URILoader) to indicate whether or not the end consumer * for this load has been determined. */`",13,null],[18,"LOAD_CALL_CONTENT_SNIFFERS","","`text /** * If this flag is set, the channel should call the content sniffers as * described in nsNetCID.h about NS_CONTENT_SNIFFER_CATEGORY. * * Note: Channels may ignore this flag; however, new channel implementations * should only do so with good reason. */`",13,null],[18,"LOAD_CLASSIFY_URI","","`text /** * This flag tells the channel to use URI classifier service to check * the URI when opening the channel. */`",13,null],[18,"LOAD_MEDIA_SNIFFER_OVERRIDES_CONTENT_TYPE","","`text /** * If this flag is set, the media-type content sniffer will be allowed * to override any server-set content-type. Otherwise it will only * be allowed to override \"no content type\" and application/octet-stream. */`",13,null],[18,"LOAD_EXPLICIT_CREDENTIALS","","`text /** * Set to let explicitely provided credentials be used over credentials * we have cached previously. In some situations like form login using HTTP * auth via XMLHttpRequest we need to let consumers override the cached * credentials explicitely. For form login 403 response instead of 401 is * usually used to prevent an auth dialog. But any code other then 401/7 * will leave original credentials in the cache and there is then no way * to override them for the same user name. */`",13,null],[18,"LOAD_BYPASS_SERVICE_WORKER","","`text /** * Set to force bypass of any service worker interception of the channel. */`",13,null],[18,"DISPOSITION_INLINE","","",13,null],[18,"DISPOSITION_ATTACHMENT","","",13,null],[11,"GetOriginalURI","","`text /** * The nsIChannel interface allows clients to construct \"GET\" requests for * specific protocols, and manage them in a uniform way. Once a channel is * created (via nsIIOService::newChannel), parameters for that request may * be set by using the channel attributes, or by QI'ing to a subclass of * nsIChannel for protocol-specific parameters. Then, the URI can be fetched * by calling nsIChannel::open or nsIChannel::asyncOpen. * * After a request has been completed, the channel is still valid for accessing * protocol-specific results. For example, QI'ing to nsIHttpChannel allows * response headers to be retrieved for the corresponding http transaction. * * This interface must be used only from the XPCOM main thread. */ /** * The original URI used to construct the channel. This is used in * the case of a redirect or URI \"resolution\" (e.g. resolving a * resource: URI to a file: URI) so that the original pre-redirect * URI can still be obtained. This is never null. Attempts to * set it to null must throw. * * NOTE: this is distinctly different from the http Referer (referring URI), * which is typically the page that contained the original URI (accessible * from nsIHttpChannel). */`",13,null],[11,"SetOriginalURI","","`text /** * The nsIChannel interface allows clients to construct \"GET\" requests for * specific protocols, and manage them in a uniform way. Once a channel is * created (via nsIIOService::newChannel), parameters for that request may * be set by using the channel attributes, or by QI'ing to a subclass of * nsIChannel for protocol-specific parameters. Then, the URI can be fetched * by calling nsIChannel::open or nsIChannel::asyncOpen. * * After a request has been completed, the channel is still valid for accessing * protocol-specific results. For example, QI'ing to nsIHttpChannel allows * response headers to be retrieved for the corresponding http transaction. * * This interface must be used only from the XPCOM main thread. */ /** * The original URI used to construct the channel. This is used in * the case of a redirect or URI \"resolution\" (e.g. resolving a * resource: URI to a file: URI) so that the original pre-redirect * URI can still be obtained. This is never null. Attempts to * set it to null must throw. * * NOTE: this is distinctly different from the http Referer (referring URI), * which is typically the page that contained the original URI (accessible * from nsIHttpChannel). */`",13,null],[11,"GetURI","","`text /** * The URI corresponding to the channel. Its value is immutable. */`",13,null],[11,"GetOwner","","`text /** * The owner, corresponding to the entity that is responsible for this * channel. Used by the security manager to grant or deny privileges to * mobile code loaded from this channel. * * NOTE: this is a strong reference to the owner, so if the owner is also * holding a strong reference to the channel, care must be taken to * explicitly drop its reference to the channel. */`",13,null],[11,"SetOwner","","`text /** * The owner, corresponding to the entity that is responsible for this * channel. Used by the security manager to grant or deny privileges to * mobile code loaded from this channel. * * NOTE: this is a strong reference to the owner, so if the owner is also * holding a strong reference to the channel, care must be taken to * explicitly drop its reference to the channel. */`",13,null],[11,"GetNotificationCallbacks","","`text /** * The notification callbacks for the channel. This is set by clients, who * wish to provide a means to receive progress, status and protocol-specific * notifications. If this value is NULL, the channel implementation may use * the notification callbacks from its load group. The channel may also * query the notification callbacks from its load group if its notification * callbacks do not supply the requested interface. * * Interfaces commonly requested include: nsIProgressEventSink, nsIPrompt, * and nsIAuthPrompt/nsIAuthPrompt2. * * When the channel is done, it must not continue holding references to * this object. * * NOTE: A channel implementation should take care when \"caching\" an * interface pointer queried from its notification callbacks. If the * notification callbacks are changed, then a cached interface pointer may * become invalid and may therefore need to be re-queried. */`",13,null],[11,"SetNotificationCallbacks","","`text /** * The notification callbacks for the channel. This is set by clients, who * wish to provide a means to receive progress, status and protocol-specific * notifications. If this value is NULL, the channel implementation may use * the notification callbacks from its load group. The channel may also * query the notification callbacks from its load group if its notification * callbacks do not supply the requested interface. * * Interfaces commonly requested include: nsIProgressEventSink, nsIPrompt, * and nsIAuthPrompt/nsIAuthPrompt2. * * When the channel is done, it must not continue holding references to * this object. * * NOTE: A channel implementation should take care when \"caching\" an * interface pointer queried from its notification callbacks. If the * notification callbacks are changed, then a cached interface pointer may * become invalid and may therefore need to be re-queried. */`",13,null],[11,"GetSecurityInfo","","`text /** * Transport-level security information (if any) corresponding to the * channel. * * NOTE: In some circumstances TLS information is propagated onto * non-nsIHttpChannel objects to indicate that their contents were likely * delivered over TLS all the same. For example, document.open() may * create an nsWyciwygChannel to store the data that will be written to the * document. In that case, if the caller has TLS information, we propagate * that info onto the nsWyciwygChannel given that it is likely that the * caller will be writing data that was delivered over TLS to the document. */`",13,null],[11,"GetContentType","","`text /** * The MIME type of the channel's content if available. * * NOTE: the content type can often be wrongly specified (e.g., wrong file * extension, wrong MIME type, wrong document type stored on a server, etc.), * and the caller most likely wants to verify with the actual data. * * Setting contentType before the channel has been opened provides a hint * to the channel as to what the MIME type is. The channel may ignore this * hint in deciding on the actual MIME type that it will report. * * Setting contentType after onStartRequest has been fired or after open() * is called will override the type determined by the channel. * * Setting contentType between the time that asyncOpen() is called and the * time when onStartRequest is fired has undefined behavior at this time. * * The value of the contentType attribute is a lowercase string. A value * assigned to this attribute will be parsed and normalized as follows: * 1- any parameters (delimited with a ';') will be stripped. * 2- if a charset parameter is given, then its value will replace the * the contentCharset attribute of the channel. * 3- the stripped contentType will be lowercased. * Any implementation of nsIChannel must follow these rules. */`",13,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetContentType","","`text /** * The MIME type of the channel's content if available. * * NOTE: the content type can often be wrongly specified (e.g., wrong file * extension, wrong MIME type, wrong document type stored on a server, etc.), * and the caller most likely wants to verify with the actual data. * * Setting contentType before the channel has been opened provides a hint * to the channel as to what the MIME type is. The channel may ignore this * hint in deciding on the actual MIME type that it will report. * * Setting contentType after onStartRequest has been fired or after open() * is called will override the type determined by the channel. * * Setting contentType between the time that asyncOpen() is called and the * time when onStartRequest is fired has undefined behavior at this time. * * The value of the contentType attribute is a lowercase string. A value * assigned to this attribute will be parsed and normalized as follows: * 1- any parameters (delimited with a ';') will be stripped. * 2- if a charset parameter is given, then its value will replace the * the contentCharset attribute of the channel. * 3- the stripped contentType will be lowercased. * Any implementation of nsIChannel must follow these rules. */`",13,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetContentCharset","","`text /** * The character set of the channel's content if available and if applicable. * This attribute only applies to textual data. * * The value of the contentCharset attribute is a mixedcase string. */`",13,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetContentCharset","","`text /** * The character set of the channel's content if available and if applicable. * This attribute only applies to textual data. * * The value of the contentCharset attribute is a mixedcase string. */`",13,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetContentLength","","`text /** * The length of the data associated with the channel if available. A value * of -1 indicates that the content length is unknown. Note that this is a * 64-bit value and obsoletes the \"content-length\" property used on some * channels. */`",13,null],[11,"SetContentLength","","`text /** * The length of the data associated with the channel if available. A value * of -1 indicates that the content length is unknown. Note that this is a * 64-bit value and obsoletes the \"content-length\" property used on some * channels. */`",13,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"Open","","`text /** * Synchronously open the channel. * * @return blocking input stream to the channel's data. * * NOTE: nsIChannel implementations are not required to implement this * method. Moreover, since this method may block the calling thread, it * should not be called on a thread that processes UI events. Like any * other nsIChannel method it must not be called on any thread other * than the XPCOM main thread. * * NOTE: Implementations should throw NS_ERROR_IN_PROGRESS if the channel * is reopened. */`",13,null],[11,"Open2","","`text /** * Performs content security check and calls open() */`",13,null],[11,"AsyncOpen","","`text /** * Asynchronously open this channel. Data is fed to the specified stream * listener as it becomes available. The stream listener's methods are * called on the thread that calls asyncOpen and are not called until * after asyncOpen returns. If asyncOpen returns successfully, the * channel promises to call at least onStartRequest and onStopRequest. * * If the nsIRequest object passed to the stream listener's methods is not * this channel, an appropriate onChannelRedirect notification needs to be * sent to the notification callbacks before onStartRequest is called. * Once onStartRequest is called, all following method calls on aListener * will get the request that was passed to onStartRequest. * * If the channel's and loadgroup's notification callbacks do not provide * an nsIChannelEventSink when onChannelRedirect would be called, that's * equivalent to having called onChannelRedirect. * * If asyncOpen returns successfully, the channel is responsible for * keeping itself alive until it has called onStopRequest on aListener or * called onChannelRedirect. * * Implementations are allowed to synchronously add themselves to the * associated load group (if any). * * NOTE: Implementations should throw NS_ERROR_ALREADY_OPENED if the * channel is reopened. * * @param aListener the nsIStreamListener implementation * @param aContext an opaque parameter forwarded to aListener's methods * @see nsIChannelEventSink for onChannelRedirect */`",13,null],[11,"AsyncOpen2","","`text /** * Performs content security check and calls asyncOpen(). */`",13,null],[11,"GetContentDisposition","","`text /** * Access to the type implied or stated by the Content-Disposition header * if available and if applicable. This allows determining inline versus * attachment. * * Setting contentDisposition provides a hint to the channel about the * disposition. If a normal Content-Disposition header is present its * value will always be used. If it is missing the hinted value will * be used if set. * * Implementations should throw NS_ERROR_NOT_AVAILABLE if the header either * doesn't exist for this type of channel or is empty, and return * DISPOSITION_ATTACHMENT if an invalid/noncompliant value is present. */`",13,null],[11,"SetContentDisposition","","`text /** * Access to the type implied or stated by the Content-Disposition header * if available and if applicable. This allows determining inline versus * attachment. * * Setting contentDisposition provides a hint to the channel about the * disposition. If a normal Content-Disposition header is present its * value will always be used. If it is missing the hinted value will * be used if set. * * Implementations should throw NS_ERROR_NOT_AVAILABLE if the header either * doesn't exist for this type of channel or is empty, and return * DISPOSITION_ATTACHMENT if an invalid/noncompliant value is present. */`",13,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetContentDispositionFilename","","`text /** * Access to the filename portion of the Content-Disposition header if * available and if applicable. This allows getting the preferred filename * without having to parse it out yourself. * * Setting contentDispositionFilename provides a hint to the channel about * the disposition. If a normal Content-Disposition header is present its * value will always be used. If it is missing the hinted value will be * used if set. * * Implementations should throw NS_ERROR_NOT_AVAILABLE if the header doesn't * exist for this type of channel, if the header is empty, if the header * doesn't contain a filename portion, or the value of the filename * attribute is empty/missing. */`",13,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetContentDispositionFilename","","`text /** * Access to the filename portion of the Content-Disposition header if * available and if applicable. This allows getting the preferred filename * without having to parse it out yourself. * * Setting contentDispositionFilename provides a hint to the channel about * the disposition. If a normal Content-Disposition header is present its * value will always be used. If it is missing the hinted value will be * used if set. * * Implementations should throw NS_ERROR_NOT_AVAILABLE if the header doesn't * exist for this type of channel, if the header is empty, if the header * doesn't contain a filename portion, or the value of the filename * attribute is empty/missing. */`",13,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetContentDispositionHeader","","`text /** * Access to the raw Content-Disposition header if available and applicable. * * Implementations should throw NS_ERROR_NOT_AVAILABLE if the header either * doesn't exist for this type of channel or is empty. * * @deprecated Use contentDisposition/contentDispositionFilename instead. */`",13,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetLoadInfo","","`text /** * The LoadInfo object contains information about a network load, why it * was started, and how we plan on using the resulting response. * If a network request is redirected, the new channel will receive a new * LoadInfo object. The new object will contain mostly the same * information as the pre-redirect one, but updated as appropriate. * For detailed information about what parts of LoadInfo are updated on * redirect, see documentation on individual properties. */`",13,null],[11,"SetLoadInfo","","`text /** * The LoadInfo object contains information about a network load, why it * was started, and how we plan on using the resulting response. * If a network request is redirected, the new channel will receive a new * LoadInfo object. The new object will contain mostly the same * information as the pre-redirect one, but updated as appropriate. * For detailed information about what parts of LoadInfo are updated on * redirect, see documentation on individual properties. */`",13,null],[11,"GetIsDocument","","`text /** * Returns true if the channel is used to create a document. * It returns true if the loadFlags have LOAD_DOCUMENT_URI set, or if * LOAD_HTML_OBJECT_DATA is set and the channel has the appropriate * MIME type. * Note: May have the wrong value if called before OnStartRequest as we * don't know the MIME type yet. */`",13,null],[11,"addref","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",14,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncVerifyRedirectReadyCallback` to one of its base interfaces.",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",14,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReadyToVerify","","`text /** * Asynchronous callback when redirected channel finishes the preparation for * completing the verification procedure. * * @param result * SUCCEEDED if preparation for redirection verification succceed. * If FAILED the redirection must be aborted. */`",14,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",15,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIParentRedirectingChannel` to one of its base interfaces.",15,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",15,{"inputs":[{"name":"self"}],"output":{"name":"nsiparentchannel"}}],[11,"StartRedirect","","`text /** * Called when the channel got a response that redirects it to a different * URI. The implementation is responsible for calling the redirect observers * on the child process and provide the decision result to the callback. * * @param newChannelId * id of the redirect channel obtained from nsIRedirectChannelRegistrar. * @param newURI * the URI we redirect to * @param callback * redirect result callback, usage is compatible with how * nsIChannelEventSink defines it */`",15,null],[11,"ContinueVerification","","`text /** * Called to new channel when the original channel got Redirect2Verify * response from child. Callback will be invoked when the new channel * finishes the preparation for Redirect2Verify and can be called immediately. * * @param callback * redirect ready callback, will be called when redirect verification * procedure can proceed. */`",15,null],[11,"CompleteRedirect","","`text /** * Called after we are done with redirecting process and we know if to * redirect or not. Forward the redirect result to the child process. From * that moment the nsIParentChannel implementation expects it will be * forwarded all notifications from the 'real' channel. * * Primarilly used by HttpChannelParentListener::OnRedirectResult and kept * as mActiveChannel and mRedirectChannel in that class. */`",15,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",16,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProxyInfo` to one of its base interfaces.",16,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",16,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TRANSPARENT_PROXY_RESOLVES_HOST","","`text /**************************************************************************** * The following \"Proxy Flags\" may be bit-wise combined to construct the * flags attribute defined on this interface. All unspecified bits are * reserved for future use. */ /** * This flag is set if the proxy is to perform name resolution itself. If * this is the case, the hostname is used in some fashion, and we shouldn't * do any form of DNS lookup ourselves. */`",16,null],[11,"GetHost","","`text /** * This attribute specifies the hostname of the proxy server. */`",16,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * This attribute specifies the port number of the proxy server. */`",16,null],[11,"GetType","","`text /** * This attribute specifies the type of the proxy server as an ASCII string. * * Some special values for this attribute include (but are not limited to) * the following: * \"http\" HTTP proxy (or SSL CONNECT for HTTPS) * \"https\" HTTP proxying over TLS connection to proxy * \"socks\" SOCKS v5 proxy * \"socks4\" SOCKS v4 proxy * \"direct\" no proxy * \"unknown\" unknown proxy (see nsIProtocolProxyService::resolve) * * A future version of this interface may define additional types. */`",16,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFlags","","`text /** * This attribute specifies flags that modify the proxy type. The value of * this attribute is the bit-wise combination of the Proxy Flags defined * below. Any undefined bits are reserved for future use. */`",16,null],[11,"GetResolveFlags","","`text /** * This attribute specifies flags that were used by nsIProxyProtocolService when * creating this ProxyInfo element. */`",16,null],[11,"GetUsername","","`text /** * Specifies a proxy username. */`",16,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPassword","","`text /** * Specifies a proxy password. */`",16,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFailoverTimeout","","`text /** * This attribute specifies the failover timeout in seconds for this proxy. * If a nsIProxyInfo is reported as failed via nsIProtocolProxyService:: * getFailoverForProxy, then the failed proxy will not be used again for this * many seconds. */`",16,null],[11,"GetFailoverProxy","","`text /** * This attribute specifies the proxy to failover to when this proxy fails. */`",16,null],[11,"SetFailoverProxy","","`text /** * This attribute specifies the proxy to failover to when this proxy fails. */`",16,null],[11,"addref","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",17,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecurityReporter` to one of its base interfaces.",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",17,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReportTLSError","","`void reportTLSError (in nsITransportSecurityInfo aSecurityInfo, in AUTF8String aHostname, in long aPort);`",17,null],[11,"addref","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",18,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICryptoHash` to one of its base interfaces.",18,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MD2","","`text /** * Hashing Algorithms. These values are to be used by the * |init| method to indicate which hashing function to * use. These values map directly onto the values defined * in mozilla/security/nss/lib/cryptohi/hasht.h. */`",18,null],[18,"MD5","","",18,null],[18,"SHA1","","",18,null],[18,"SHA256","","",18,null],[18,"SHA384","","",18,null],[18,"SHA512","","",18,null],[11,"Init","","`text /** * Initialize the hashing object. This method may be * called multiple times with different algorithm types. * * @param aAlgorithm the algorithm type to be used. * This value must be one of the above valid * algorithm types. * * @throws NS_ERROR_INVALID_ARG if an unsupported algorithm * type is passed. * * NOTE: This method or initWithString must be called * before any other method on this interface is called. */`",18,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"InitWithString","","`text /** * Initialize the hashing object. This method may be * called multiple times with different algorithm types. * * @param aAlgorithm the algorithm type to be used. * * @throws NS_ERROR_INVALID_ARG if an unsupported algorithm * type is passed. * * NOTE: This method or init must be called before any * other method on this interface is called. */`",18,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Update","","`text /** * @param aData a buffer to calculate the hash over * * @param aLen the length of the buffer |aData| * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. */`",18,null],[11,"UpdateFromStream","","`text /** * Calculates and updates a new hash based on a given data stream. * * @param aStream an input stream to read from. * * @param aLen How much to read from the given |aStream|. Passing UINT32_MAX * indicates that all data available will be used to update the hash. * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. * * @throws NS_ERROR_NOT_AVAILABLE If the requested amount of * data to be calculated into the hash is not available. * */`",18,null],[11,"Finish","","`text /** * Completes this hash object and produces the actual hash data. * * @param aASCII If true then the returned value is a base64 encoded string. * If false, then the returned value is binary data. * * @return a hash of the data that was read by this object. This can * be either binary data or base 64 encoded. * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. * * NOTE: This method may be called any time after |init| * is called. This call resets the object to its * pre-init state. */`",18,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",19,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboard` to one of its base interfaces.",19,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",19,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kSelectionClipboard","","",19,null],[18,"kGlobalClipboard","","",19,null],[18,"kFindClipboard","","",19,null],[18,"kSelectionCache","","",19,null],[11,"SetData","","`text /** * Given a transferable, set the data on the native clipboard * * @param aTransferable The transferable * @param anOwner The owner of the transferable * @param aWhichClipboard Specifies the clipboard to which this operation applies. * @result NS_Ok if no errors */`",19,null],[11,"GetData","","`text /** * Given a transferable, get the clipboard data. * * @param aTransferable The transferable * @param aWhichClipboard Specifies the clipboard to which this operation applies. * @result NS_Ok if no errors */`",19,null],[11,"EmptyClipboard","","`text /** * This empties the clipboard and notifies the clipboard owner. * This empties the \"logical\" clipboard. It does not clear the native clipboard. * * @param aWhichClipboard Specifies the clipboard to which this operation applies. * @result NS_OK if successful. */`",19,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"HasDataMatchingFlavors","","`text /** * This provides a way to give correct UI feedback about, for instance, a paste * should be allowed. It does _NOT_ actually retreive the data and should be a very * inexpensive call. All it does is check if there is data on the clipboard matching * any of the flavors in the given list. * * @param aFlavorList An array of ASCII strings. * @param aLength The length of the aFlavorList. * @param aWhichClipboard Specifies the clipboard to which this operation applies. * @outResult - if data is present matching one of * @result NS_OK if successful. */`",19,null],[11,"SupportsSelectionClipboard","","`text /** * Allows clients to determine if the implementation supports the concept of a * separate clipboard for selection. * * @outResult - true if * @result NS_OK if successful. */`",19,null],[11,"SupportsFindClipboard","","`text /** * Allows clients to determine if the implementation supports the concept of a * separate clipboard for find search strings. * * @result NS_OK if successful. */`",19,null],[11,"addref","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",20,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheStorageVisitor` to one of its base interfaces.",20,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",20,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnCacheStorageInfo","","`text /** */`",20,null],[11,"OnCacheEntryInfo","","`text /** */`",20,null],[11,"OnCacheEntryVisitCompleted","","`text /** */`",20,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",21,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIPromptService` to one of its base interfaces.",21,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",21,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DoDialog","","`void doDialog (in nsIDOMWindow aParent, in nsIDialogParamBlock aParamBlock, in string aChromeURL);`",21,null],[11,"addref","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",22,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageAggregateFunction` to one of its base interfaces.",22,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",22,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStep","","`text /** * onStep is called when next value should be passed to * a custom function. * * @param aFunctionArguments The arguments passed in to the function */`",22,null],[11,"OnFinal","","`text /** * Called when all tuples in a group have been processed and the engine * needs the aggregate function's value. * * @returns aggregate result as Variant. */`",22,null],[11,"addref","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",23,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHandleReportCallback` to one of its base interfaces.",23,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",23,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback (in ACString process, in AUTF8String path, in int32_t kind, in int32_t units, in int64_t amount, in AUTF8String description, in nsISupports data);`",23,null],[11,"addref","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",24,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMemoryReporter` to one of its base interfaces.",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",24,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"KIND_NONHEAP","","",24,null],[18,"KIND_HEAP","","",24,null],[18,"KIND_OTHER","","",24,null],[18,"UNITS_BYTES","","",24,null],[18,"UNITS_COUNT","","",24,null],[18,"UNITS_COUNT_CUMULATIVE","","",24,null],[18,"UNITS_PERCENTAGE","","",24,null],[11,"CollectReports","","`void collectReports (in nsIHandleReportCallback callback, in nsISupports data, in boolean anonymize);`",24,null],[11,"addref","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",25,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFinishReportingCallback` to one of its base interfaces.",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",25,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback (in nsISupports data);`",25,null],[11,"addref","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",26,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHeapAllocatedCallback` to one of its base interfaces.",26,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",26,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback (in int64_t bytesAllocated);`",26,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",27,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMemoryReporterManager` to one of its base interfaces.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",27,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`[must_use] void init ();`",27,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RegisterStrongReporter","","`void registerStrongReporter (in nsIMemoryReporter reporter);`",27,null],[11,"RegisterStrongAsyncReporter","","`void registerStrongAsyncReporter (in nsIMemoryReporter reporter);`",27,null],[11,"RegisterWeakReporter","","`void registerWeakReporter (in nsIMemoryReporter reporter);`",27,null],[11,"RegisterWeakAsyncReporter","","`void registerWeakAsyncReporter (in nsIMemoryReporter reporter);`",27,null],[11,"UnregisterStrongReporter","","`void unregisterStrongReporter (in nsIMemoryReporter reporter);`",27,null],[11,"UnregisterWeakReporter","","`void unregisterWeakReporter (in nsIMemoryReporter reporter);`",27,null],[11,"BlockRegistrationAndHideExistingReporters","","`void blockRegistrationAndHideExistingReporters ();`",27,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UnblockRegistrationAndRestoreOriginalReporters","","`void unblockRegistrationAndRestoreOriginalReporters ();`",27,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RegisterStrongReporterEvenIfBlocked","","`void registerStrongReporterEvenIfBlocked (in nsIMemoryReporter aReporter);`",27,null],[11,"GetReports","","`void getReports (in nsIHandleReportCallback handleReport, in nsISupports handleReportData, in nsIFinishReportingCallback finishReporting, in nsISupports finishReportingData, in boolean anonymize);`",27,null],[11,"GetReportsExtended","","`[noscript] void getReportsExtended (in nsIHandleReportCallback handleReport, in nsISupports handleReportData, in nsIFinishReportingCallback finishReporting, in nsISupports finishReportingData, in boolean anonymize, in boolean minimizeMemoryUsage, in AString DMDDumpIdent);`",27,null],[11,"EndReport","","`[noscript] void endReport ();`",27,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetVsize","","`[must_use] readonly attribute int64_t vsize;`",27,null],[11,"GetVsizeMaxContiguous","","`[must_use] readonly attribute int64_t vsizeMaxContiguous;`",27,null],[11,"GetResident","","`[must_use] readonly attribute int64_t resident;`",27,null],[11,"GetResidentFast","","`[must_use] readonly attribute int64_t residentFast;`",27,null],[11,"GetResidentPeak","","`[must_use] readonly attribute int64_t residentPeak;`",27,null],[11,"GetResidentUnique","","`[must_use] readonly attribute int64_t residentUnique;`",27,null],[11,"GetHeapAllocated","","`[must_use] readonly attribute int64_t heapAllocated;`",27,null],[11,"GetHeapOverheadFraction","","`[must_use] readonly attribute int64_t heapOverheadFraction;`",27,null],[11,"GetJSMainRuntimeGCHeap","","`[must_use] readonly attribute int64_t JSMainRuntimeGCHeap;`",27,null],[11,"GetJSMainRuntimeTemporaryPeak","","`[must_use] readonly attribute int64_t JSMainRuntimeTemporaryPeak;`",27,null],[11,"GetJSMainRuntimeCompartmentsSystem","","`[must_use] readonly attribute int64_t JSMainRuntimeCompartmentsSystem;`",27,null],[11,"GetJSMainRuntimeCompartmentsUser","","`[must_use] readonly attribute int64_t JSMainRuntimeCompartmentsUser;`",27,null],[11,"GetImagesContentUsedUncompressed","","`[must_use] readonly attribute int64_t imagesContentUsedUncompressed;`",27,null],[11,"GetStorageSQLite","","`[must_use] readonly attribute int64_t storageSQLite;`",27,null],[11,"GetLowMemoryEventsVirtual","","`[must_use] readonly attribute int64_t lowMemoryEventsVirtual;`",27,null],[11,"GetLowMemoryEventsPhysical","","`[must_use] readonly attribute int64_t lowMemoryEventsPhysical;`",27,null],[11,"GetGhostWindows","","`[must_use] readonly attribute int64_t ghostWindows;`",27,null],[11,"GetPageFaultsHard","","`[must_use] readonly attribute int64_t pageFaultsHard;`",27,null],[11,"GetHasMozMallocUsableSize","","`[infallible] readonly attribute boolean hasMozMallocUsableSize;`",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsDMDEnabled","","`[infallible] readonly attribute boolean isDMDEnabled;`",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsDMDRunning","","`[infallible] readonly attribute boolean isDMDRunning;`",27,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHeapAllocatedAsync","","`[must_use] void getHeapAllocatedAsync (in nsIHeapAllocatedCallback callback);`",27,null],[11,"MinimizeMemoryUsage","","`[must_use] void minimizeMemoryUsage (in nsIRunnable callback);`",27,null],[11,"SizeOfTab","","`[must_use] void sizeOfTab (in mozIDOMWindowProxy window, out int64_t jsObjectsSize, out int64_t jsStringsSize, out int64_t jsOtherSize, out int64_t domSize, out int64_t styleSize, out int64_t otherSize, out int64_t totalSize, out double jsMilliseconds, out double nonJSMilliseconds);`",27,null],[11,"addref","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",28,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMIMEInputStream` to one of its base interfaces.",28,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",28,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"AddHeader","","`text /** * Adds an additional header to the stream on the form \"name: value\". May * not be called once the stream has been started to be read. * @param name name of the header * @param value value of the header */`",28,null],[11,"VisitHeaders","","`text /** * Visits all headers which have been added via addHeader. Calling * addHeader while visiting request headers has undefined behavior. * * @param aVisitor * The header visitor instance. */`",28,null],[11,"SetData","","`text /** * Sets data-stream. May not be called once the stream has been started * to be read. * The cursor of the new stream should be located at the beginning of the * stream if the implementation of the nsIMIMEInputStream also is used as * an nsISeekableStream. * @param stream stream containing the data for the stream */`",28,null],[11,"GetData","","`text /** * Get the wrapped data stream */`",28,null],[11,"addref","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",29,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaRequestBase` to one of its base interfaces.",29,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",29,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",29,null],[11,"GetResultCode","","`[must_use] readonly attribute nsresult resultCode;`",29,null],[11,"addref","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",30,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaUsageRequest` to one of its base interfaces.",30,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",30,{"inputs":[{"name":"self"}],"output":{"name":"nsiquotarequestbase"}}],[11,"GetResult","","`[must_use] readonly attribute nsIVariant result;`",30,null],[11,"GetCallback","","`attribute nsIQuotaUsageCallback callback;`",30,null],[11,"SetCallback","","`attribute nsIQuotaUsageCallback callback;`",30,null],[11,"Cancel","","`[must_use] void cancel ();`",30,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",31,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaRequest` to one of its base interfaces.",31,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",31,{"inputs":[{"name":"self"}],"output":{"name":"nsiquotarequestbase"}}],[11,"GetResult","","`[must_use] readonly attribute nsIVariant result;`",31,null],[11,"GetCallback","","`attribute nsIQuotaCallback callback;`",31,null],[11,"SetCallback","","`attribute nsIQuotaCallback callback;`",31,null],[11,"addref","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",32,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIArrayExtensions` to one of its base interfaces.",32,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",32,{"inputs":[{"name":"self"}],"output":{"name":"nsiarray"}}],[11,"Count","","`text /** * Count() * * Retrieves the length of the array. This is an alias for the * |nsIArray.length| attribute. */`",32,null],[11,"GetElementAt","","`text /** * GetElementAt() * * Retrieve a specific element of the array. null is a valid result for * this method. * * Note: If the index is out of bounds null will be returned. * This differs from the behavior of nsIArray.queryElementAt() which * will throw if an invalid index is specified. * * @param index position of element */`",32,null],[11,"addref","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",33,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAppShell` to one of its base interfaces.",33,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",33,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Run","","`text /** * Enter an event loop. Don't leave until exit() is called. */`",33,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Exit","","`text /** * Exit the handle event loop */`",33,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"FavorPerformanceHint","","`text /** * Give hint to native event queue notification mechanism. If the native * platform needs to tradeoff performance vs. native event starvation this * hint tells the native dispatch code which to favor. The default is to * prevent native event starvation. * * Calls to this function may be nested. When the number of calls that pass * PR_TRUE is subtracted from the number of calls that pass PR_FALSE is * greater than 0, performance is given precedence over preventing event * starvation. * * The starvationDelay arg is only used when favorPerfOverStarvation is * PR_FALSE. It is the amount of time in milliseconds to wait before the * PR_FALSE actually takes effect. */`",33,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SuspendNative","","`text /** * Suspends the use of additional platform-specific methods (besides the * nsIAppShell->run() event loop) to run Gecko events on the main * application thread. Under some circumstances these \"additional methods\" * can cause Gecko event handlers to be re-entered, sometimes leading to * hangs and crashes. Calls to suspendNative() and resumeNative() may be * nested. On some platforms (those that don't use any \"additional * methods\") this will be a no-op. Does not (in itself) stop Gecko events * from being processed on the main application thread. But if the * nsIAppShell->run() event loop is blocked when this call is made, Gecko * events will stop being processed until resumeNative() is called (even * if a plugin or library is temporarily processing events on a nested * event loop). */`",33,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumeNative","","`text /** * Resumes the use of additional platform-specific methods to run Gecko * events on the main application thread. Calls to suspendNative() and * resumeNative() may be nested. On some platforms this will be a no-op. */`",33,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEventloopNestingLevel","","`text /** * The current event loop nesting level. */`",33,null],[11,"addref","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",34,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnicharStreamLoaderObserver` to one of its base interfaces.",34,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",34,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDetermineCharset","","`text /** * Called as soon as at least 512 octets of data have arrived. * If the stream receives fewer than 512 octets of data in total, * called upon stream completion but before calling OnStreamComplete. * Will not be called if the stream receives no data at all. * * @param aLoader the unichar stream loader * @param aContext the context parameter of the underlying channel * @param aSegment up to 512 octets of raw data from the stream * * @return the name of the character set to be used to decode this stream */`",34,null],[11,"OnStreamComplete","","`text /** * Called when the entire stream has been loaded and decoded. * * @param aLoader the unichar stream loader * @param aContext the context parameter of the underlying channel * @param aStatus the status of the underlying channel * @param aBuffer the contents of the stream, decoded to UTF-16. * * This method will always be called asynchronously by the * nsUnicharIStreamLoader involved, on the thread that called the * loader's init() method. If onDetermineCharset fails, * onStreamComplete will still be called, but aStatus will be an * error code. */`",34,null],[11,"addref","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",35,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnicharStreamLoader` to one of its base interfaces.",35,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",35,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Asynchronously load a channel, converting the data to UTF-16. * * To use this interface, first call init() with a * nsIUnicharStreamLoaderObserver that will be notified when the data has been * loaded. Then call asyncOpen() on the channel with the nsIUnicharStreamLoader * as the listener. The context argument in the asyncOpen() call will be * passed to the onStreamComplete() callback. */ /** * Initializes the unichar stream loader * * @param aObserver the observer to notify when a charset is needed and when * the load is complete */`",35,null],[11,"GetChannel","","`text /** * The channel attribute is only valid inside the onDetermineCharset * and onStreamComplete callbacks. Otherwise it will be null. */`",35,null],[11,"GetCharset","","`text /** * The charset that onDetermineCharset returned, if that's been * called. */`",35,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRawBuffer","","`text /** * Get the raw bytes as seen on the wire prior to character converstion. * Used by Subresource Integrity checker to generate the correct hash. */`",35,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",36,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoPositionErrorCallback` to one of its base interfaces.",36,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",36,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleEvent","","`void handleEvent (in nsIDOMGeoPositionError positionError);`",36,null],[11,"addref","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",37,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptableBase64Encoder` to one of its base interfaces.",37,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",37,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EncodeToCString","","`text /** * These methods take an nsIInputStream and return a narrow or wide * string with the contents of the nsIInputStream base64 encoded. * * The stream passed in must support ReadSegments and must not be * a non-blocking stream that will return NS_BASE_STREAM_WOULD_BLOCK. * If either of these restrictions are violated we will abort. */`",37,null],[11,"EncodeToString","","`AString encodeToString (in nsIInputStream stream, in unsigned long length);`",37,null],[11,"addref","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",38,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransactionListener` to one of its base interfaces.",38,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",38,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"WillDo","","`text /** * Called before a transaction manager calls a transaction's * doTransaction() method. * @param aManager the transaction manager doing the transaction. * @param aTransaction the transaction being executed. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. */`",38,null],[11,"DidDo","","`text /** * Called after a transaction manager calls the doTransaction() method of * a transaction. * @param aManager the transaction manager that did the transaction. * @param aTransaction the transaction that was executed. * @param aDoResult the nsresult returned after executing * the transaction. */`",38,null],[11,"WillUndo","","`text /** * Called before a transaction manager calls the Undo() method of * a transaction. * @param aManager the transaction manager undoing the transaction. * @param aTransaction the transaction being undone. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. Note that listeners can also interrupt normal * control flow by throwing an nsresult that indicates an error. */`",38,null],[11,"DidUndo","","`text /** * Called after a transaction manager calls the Undo() method of * a transaction. * @param aManager the transaction manager undoing the transaction. * @param aTransaction the transaction being undone. * @param aUndoResult the nsresult returned after undoing the transaction. */`",38,null],[11,"WillRedo","","`text /** * Called before a transaction manager calls the Redo() method of * a transaction. * @param aManager the transaction manager redoing the transaction. * @param aTransaction the transaction being redone. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. Note that listeners can also interrupt normal * control flow by throwing an nsresult that indicates an error. */`",38,null],[11,"DidRedo","","`text /** * Called after a transaction manager calls the Redo() method of * a transaction. * @param aManager the transaction manager redoing the transaction. * @param aTransaction the transaction being redone. * @param aRedoResult the nsresult returned after redoing the transaction. */`",38,null],[11,"WillBeginBatch","","`text /** * Called before a transaction manager begins a batch. * @param aManager the transaction manager beginning a batch. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. Note that listeners can also interrupt normal * control flow by throwing an nsresult that indicates an error. */`",38,null],[11,"DidBeginBatch","","`text /** * Called after a transaction manager begins a batch. * @param aManager the transaction manager that began a batch. * @param aResult the nsresult returned after beginning a batch. */`",38,null],[11,"WillEndBatch","","`text /** * Called before a transaction manager ends a batch. * @param aManager the transaction manager ending a batch. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. Note that listeners can also interrupt normal * control flow by throwing an nsresult that indicates an error. */`",38,null],[11,"DidEndBatch","","`text /** * Called after a transaction manager ends a batch. * @param aManager the transaction manager ending a batch. * @param aResult the nsresult returned after ending a batch. */`",38,null],[11,"WillMerge","","`text /** * Called before a transaction manager tries to merge * a transaction, that was just executed, with the * transaction at the top of the undo stack. * @param aManager the transaction manager ending a batch. * @param aTopTransaction the transaction at the top of the undo stack. * @param aTransactionToMerge the transaction to merge. * @result boolean value returned by listener which indicates * its desire to interrupt normal control flow. Listeners should * return true if they want to interrupt normal control flow, without * throwing an error. Note that listeners can also interrupt normal * control flow by throwing an nsresult that indicates an error. */`",38,null],[11,"DidMerge","","`text /** * Called after a transaction manager tries to merge * a transaction, that was just executed, with the * transaction at the top of the undo stack. * @param aManager the transaction manager ending a batch. * @param aTopTransaction the transaction at the top of the undo stack. * @param aTransactionToMerge the transaction to merge. * @param aDidMerge true if transaction was merged, else false. * @param aMergeResult the nsresult returned after the merge attempt. * @param aInterrupt listeners should set this to PR_TRUE if they * want to interrupt normal control flow, without throwing an error. */`",38,null],[11,"addref","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",39,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMIMEService` to one of its base interfaces.",39,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",39,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFromTypeAndExtension","","`text /** * Retrieves an nsIMIMEInfo using both the extension * and the type of a file. The type is given preference * during the lookup. One of aMIMEType and aFileExt * can be an empty string. At least one of aMIMEType and aFileExt * must be nonempty. */`",39,null],[11,"GetTypeFromExtension","","`text /** * Retrieves a ACString representation of the MIME type * associated with this file extension. * * @param A file extension (excluding the dot ('.')). * @return The MIME type, if any. */`",39,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTypeFromURI","","`text /** * Retrieves a ACString representation of the MIME type * associated with this URI. The association is purely * file extension to MIME type based. No attempt to determine * the type via server headers or byte scanning is made. * * @param The URI the user wants MIME info on. * @return The MIME type, if any. */`",39,null],[11,"GetTypeFromFile","","`ACString getTypeFromFile (in nsIFile aFile);`",39,null],[11,"GetPrimaryExtension","","`text /** * Given a Type/Extension combination, returns the default extension * for this type. This may be identical to the passed-in extension. * * @param aMIMEType The Type to get information on. Must not be empty. * @param aFileExt File Extension. Can be empty. */`",39,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",40,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMozNamedAttrMap` to one of its base interfaces.",40,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",40,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNamedItem","","`nsIDOMAttr getNamedItem (in DOMString name);`",40,null],[11,"SetNamedItem","","`nsIDOMAttr setNamedItem (in nsIDOMAttr arg) raises (DOMException);`",40,null],[11,"RemoveNamedItem","","`nsIDOMAttr removeNamedItem (in DOMString name) raises (DOMException);`",40,null],[11,"Item","","`nsIDOMAttr item (in unsigned long index);`",40,null],[11,"GetLength","","`readonly attribute unsigned long length;`",40,null],[11,"GetNamedItemNS","","`nsIDOMAttr getNamedItemNS (in DOMString namespaceURI, in DOMString localName);`",40,null],[11,"SetNamedItemNS","","`nsIDOMAttr setNamedItemNS (in nsIDOMAttr arg) raises (DOMException);`",40,null],[11,"RemoveNamedItemNS","","`nsIDOMAttr removeNamedItemNS (in DOMString namespaceURI, in DOMString localName) raises (DOMException);`",40,null],[11,"addref","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",41,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `rdfITripleVisitor` to one of its base interfaces.",41,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",41,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Visit","","`text /** * Callback function for returning query results. * * @param aSubject, aPredicate, aObject describe the (sub-)arc * @returnCode NS_RDF_STOP_VISIT to stop iterating over the query result. * Any error code will stop the iteration as well. */`",41,null],[11,"addref","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",42,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULControlElement` to one of its base interfaces.",42,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",42,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDisabled","","`attribute boolean disabled;`",42,null],[11,"SetDisabled","","`attribute boolean disabled;`",42,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTabIndex","","`attribute long tabIndex;`",42,null],[11,"SetTabIndex","","`attribute long tabIndex;`",42,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",43,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMediaList` to one of its base interfaces.",43,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",43,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMediaText","","`text /** * The nsIDOMMediaList interface is a datatype for a list of media * types in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",43,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetMediaText","","`text /** * The nsIDOMMediaList interface is a datatype for a list of media * types in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",43,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",43,null],[11,"Item","","`DOMString item (in unsigned long index);`",43,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"DeleteMedium","","`void deleteMedium (in DOMString oldMedium) raises (DOMException);`",43,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendMedium","","`void appendMedium (in DOMString newMedium) raises (DOMException);`",43,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",44,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBidiKeyboard` to one of its base interfaces.",44,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",44,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Reset","","`text /** * Inspects the installed keyboards and resets the bidi keyboard state */`",44,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsLangRTL","","`text /** * Determines if the current keyboard language is right-to-left * @throws NS_ERROR_FAILURE if no right-to-left keyboards are installed */`",44,null],[11,"GetHaveBidiKeyboards","","`text /** * Determines whether the system has at least one keyboard of each direction * installed. * * @throws NS_ERROR_NOT_IMPLEMENTED if the widget layer does not provide this * information. */`",44,null],[11,"addref","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",45,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURILoader` to one of its base interfaces.",45,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",45,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"IS_CONTENT_PREFERRED","","`text /** * @name Flags for opening URIs. */ /** * Should the content be displayed in a container that prefers the * content-type, or will any container do. */`",45,null],[18,"DONT_RETARGET","","`text /** * If this flag is set, only the listener of the specified window context will * be considered for content handling; if it refuses the load, an error will * be indicated. */`",45,null],[11,"RegisterContentListener","","`text /** * As applications such as messenger and the browser are instantiated, * they register content listener's with the uri dispatcher corresponding * to content windows within that application. * * Note to self: we may want to optimize things a bit more by requiring * the content types the registered content listener cares about. * * @param aContentListener * The listener to register. This listener must implement * nsISupportsWeakReference. * * @see the nsIURILoader class description */`",45,null],[11,"UnRegisterContentListener","","`void unRegisterContentListener (in nsIURIContentListener aContentListener);`",45,null],[11,"OpenURI","","`text /** * OpenURI requires the following parameters..... * @param aChannel * The channel that should be opened. This must not be asyncOpen'd yet! * If a loadgroup is set on the channel, it will get replaced with a * different one. * @param aFlags * Combination (bitwise OR) of the flags specified above. 0 indicates * default handling. * @param aWindowContext * If you are running the url from a doc shell or a web shell, this is * your window context. If you have a content listener you want to * give first crack to, the uri loader needs to be able to get it * from the window context. We will also be using the window context * to get at the progress event sink interface. * <b>Must not be null!</b> */`",45,null],[11,"OpenChannel","","`text /** * Loads data from a channel. This differs from openURI in that the channel * may already be opened, and that it returns a stream listener into which the * caller should pump data. The caller is responsible for opening the channel * and pumping the channel's data into the returned stream listener. * * Note: If the channel already has a loadgroup, it will be replaced with the * window context's load group, or null if the context doesn't have one. * * If the window context's nsIURIContentListener refuses the load immediately * (e.g. in nsIURIContentListener::onStartURIOpen), this method will return * NS_ERROR_WONT_HANDLE_CONTENT. At that point, the caller should probably * cancel the channel if it's already open (this method will not cancel the * channel). * * If flags include DONT_RETARGET, and the content listener refuses the load * during onStartRequest (e.g. in canHandleContent/isPreferred), then the * returned stream listener's onStartRequest method will return * NS_ERROR_WONT_HANDLE_CONTENT. * * @param aChannel * The channel that should be loaded. The channel may already be * opened. It must not be closed (i.e. this must be called before the * channel calls onStopRequest on its stream listener). * @param aFlags * Combination (bitwise OR) of the flags specified above. 0 indicates * default handling. * @param aWindowContext * If you are running the url from a doc shell or a web shell, this is * your window context. If you have a content listener you want to * give first crack to, the uri loader needs to be able to get it * from the window context. We will also be using the window context * to get at the progress event sink interface. * <b>Must not be null!</b> */`",45,null],[11,"Stop","","`text /** * Stops an in progress load */`",45,null],[11,"addref","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",46,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProperty` to one of its base interfaces.",46,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",46,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`text /** * Get the name of the property. */`",46,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`text /** * Get the value of the property. */`",46,null],[11,"addref","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",47,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteResult` to one of its base interfaces.",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",47,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"RESULT_IGNORED","","`text /** * Possible values for the searchResult attribute */`",47,null],[18,"RESULT_FAILURE","","",47,null],[18,"RESULT_NOMATCH","","",47,null],[18,"RESULT_SUCCESS","","",47,null],[18,"RESULT_NOMATCH_ONGOING","","",47,null],[18,"RESULT_SUCCESS_ONGOING","","",47,null],[11,"GetSearchString","","`text /** * The original search string */`",47,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSearchResult","","`text /** * The result of the search */`",47,null],[11,"GetDefaultIndex","","`text /** * Index of the default item that should be entered if none is selected */`",47,null],[11,"GetErrorDescription","","`text /** * A string describing the cause of a search failure */`",47,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMatchCount","","`text /** * The number of matches */`",47,null],[11,"GetValueAt","","`text /** * Get the value of the result at the given index */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLabelAt","","`text /** * This returns the string that is displayed in the dropdown */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCommentAt","","`text /** * Get the comment of the result at the given index */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStyleAt","","`text /** * Get the style hint for the result at the given index */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImageAt","","`text /** * Get the image of the result at the given index */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFinalCompleteValueAt","","`text /** * Get the final value that should be completed when the user confirms * the match at the given index. */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveValueAt","","`text /** * Remove the value at the given index from the autocomplete results. * If removeFromDb is set to true, the value should be removed from * persistent storage as well. */`",47,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",48,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgILoader` to one of its base interfaces.",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",48,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LOAD_CORS_ANONYMOUS","","",48,null],[18,"LOAD_CORS_USE_CREDENTIALS","","",48,null],[11,"LoadImageXPCOM","","",48,null],[11,"LoadImageWithChannelXPCOM","","`text /** * Start the load and decode of an image. * @param aChannel the channel to load the image from. This must * already be opened before ths method is called, and there * must have been no OnDataAvailable calls for it yet. * @param aObserver the observer (may be null) * @param cx some random data * @param aListener [out] * A listener that you must send the channel's notifications and data * to. Can be null, in which case imagelib has found a cached image * and is not interested in the data. @aChannel will be canceled for * you in this case. * * ImageLib does NOT keep a strong ref to the observer; this prevents * reference cycles. This means that callers of loadImageWithChannel should * make sure to Cancel() the resulting request before the observer goes away. */`",48,null],[11,"addref","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",49,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFXMLSinkObserver` to one of its base interfaces.",49,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",49,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnBeginLoad","","`text /** * Called when the load begins. * @param aSink the RDF/XML sink on which the load is beginning. */`",49,null],[11,"OnInterrupt","","`text /** * Called when the load is suspended (e.g., for network quantization). * @param aSink the RDF/XML sink that is being interrupted. */`",49,null],[11,"OnResume","","`text /** * Called when a suspended load is resuming. * @param aSink the RDF/XML sink that is resuming. */`",49,null],[11,"OnEndLoad","","`text /** * Called when an RDF/XML load completes successfully. * @param aSink the RDF/XML sink that has finished loading. */`",49,null],[11,"OnError","","`text /** * Called when an error occurs during the load * @param aSink the RDF/XML sink in which the error occurred * @param aStatus the networking result code * @param aErrorMsg an error message, if applicable */`",49,null],[11,"addref","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",50,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFXMLSink` to one of its base interfaces.",50,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",50,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetReadOnly","","`text /** * A \"sink\" that receives and processes RDF/XML. This interface is used * by the RDF/XML parser. */ /** * Set to <code>true</code> if the sink is read-only and cannot * be modified */`",50,null],[11,"SetReadOnly","","`text /** * A \"sink\" that receives and processes RDF/XML. This interface is used * by the RDF/XML parser. */ /** * Set to <code>true</code> if the sink is read-only and cannot * be modified */`",50,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"BeginLoad","","`text /** * Initiate the RDF/XML load. */`",50,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Interrupt","","`text /** * Suspend the RDF/XML load. */`",50,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Resume","","`text /** * Resume the RDF/XML load. */`",50,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndLoad","","`text /** * Complete the RDF/XML load. */`",50,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddXMLSinkObserver","","`text /** * Add an observer that will be notified as the RDF/XML load * progresses. * <p> * * Note that the sink will acquire a strong reference to the * observer, so care should be taken to avoid cyclical references * that cannot be released (i.e., if the observer holds a * reference to the sink, it should be sure that it eventually * clears the reference). * * @param aObserver the observer to add to the sink's set of * load observers. */`",50,null],[11,"RemoveXMLSinkObserver","","`text /** * Remove an observer from the sink's set of observers. * @param aObserver the observer to remove. */`",50,null],[11,"addref","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",51,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadURIDelegate` to one of its base interfaces.",51,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",51,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LoadURI","","`text /** * Delegates the URI load. * * @param aURI The URI to load. * @param aWhere See possible values described in nsIBrowserDOMWindow. * @param aFlags Flags which control the behavior of the load. * @param aTriggeringPrincipal The principal that triggered the load of aURI. */`",51,null],[11,"addref","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",52,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrefetchService` to one of its base interfaces.",52,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",52,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PrefetchURI","","`text /** * Enqueue a request to prefetch the specified URI. * * @param aURI the URI of the document to prefetch * @param aReferrerURI the URI of the referring page * @param aSource the DOM node (such as a <link> tag) that requested this * fetch, or null if the prefetch was not requested by a DOM node. * @param aExplicit the link element has an explicit prefetch link type */`",52,null],[11,"PreloadURI","","`text /** * Start a preload of the specified URI. * * @param aURI the URI of the document to preload * @param aReferrerURI the URI of the referring page * @param aSource the DOM node (such as a <link> tag) that requested this * fetch, or null if the prefetch was not requested by a DOM node. * @param aPolicyType content policy to be used for this load. */`",52,null],[11,"HasMoreElements","","`text /** * Find out if there are any prefetches running or queued */`",52,null],[11,"CancelPrefetchPreloadURI","","`text /** * Cancel prefetch or preload for a nsIDomNode. */`",52,null],[11,"addref","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",53,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIASN1Object` to one of its base interfaces.",53,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",53,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ASN1_END_CONTENTS","","`text /** * Identifiers for the possible types of object. */`",53,null],[18,"ASN1_BOOLEAN","","",53,null],[18,"ASN1_INTEGER","","",53,null],[18,"ASN1_BIT_STRING","","",53,null],[18,"ASN1_OCTET_STRING","","",53,null],[18,"ASN1_NULL","","",53,null],[18,"ASN1_OBJECT_ID","","",53,null],[18,"ASN1_ENUMERATED","","",53,null],[18,"ASN1_UTF8_STRING","","",53,null],[18,"ASN1_SEQUENCE","","",53,null],[18,"ASN1_SET","","",53,null],[18,"ASN1_PRINTABLE_STRING","","",53,null],[18,"ASN1_T61_STRING","","",53,null],[18,"ASN1_IA5_STRING","","",53,null],[18,"ASN1_UTC_TIME","","",53,null],[18,"ASN1_GEN_TIME","","",53,null],[18,"ASN1_VISIBLE_STRING","","",53,null],[18,"ASN1_UNIVERSAL_STRING","","",53,null],[18,"ASN1_BMP_STRING","","",53,null],[18,"ASN1_HIGH_TAG_NUMBER","","",53,null],[18,"ASN1_CONTEXT_SPECIFIC","","",53,null],[18,"ASN1_APPLICATION","","",53,null],[18,"ASN1_PRIVATE","","",53,null],[11,"GetType","","`text /** * \"type\" will be equal to one of the defined object identifiers. */`",53,null],[11,"SetType","","`text /** * \"type\" will be equal to one of the defined object identifiers. */`",53,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetTag","","`text /** * This contains a tag as explained in ASN.1 standards documents. */`",53,null],[11,"SetTag","","`text /** * This contains a tag as explained in ASN.1 standards documents. */`",53,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDisplayName","","`text /** * \"displayName\" contains a human readable explanatory label. */`",53,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDisplayName","","`text /** * \"displayName\" contains a human readable explanatory label. */`",53,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayValue","","`text /** * \"displayValue\" contains the human readable value. */`",53,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDisplayValue","","`text /** * \"displayValue\" contains the human readable value. */`",53,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",54,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMutationEvent` to one of its base interfaces.",54,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",54,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MODIFICATION","","",54,null],[18,"ADDITION","","",54,null],[18,"REMOVAL","","",54,null],[18,"SMIL","","",54,null],[11,"GetRelatedNode","","`readonly attribute nsIDOMNode relatedNode;`",54,null],[11,"GetPrevValue","","`readonly attribute DOMString prevValue;`",54,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNewValue","","`readonly attribute DOMString newValue;`",54,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAttrName","","`readonly attribute DOMString attrName;`",54,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAttrChange","","`readonly attribute unsigned short attrChange;`",54,null],[11,"InitMutationEvent","","`void initMutationEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in nsIDOMNode relatedNodeArg, in DOMString prevValueArg, in DOMString newValueArg, in DOMString attrNameArg, in unsigned short attrChangeArg);`",54,null],[11,"addref","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",55,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileURL` to one of its base interfaces.",55,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",55,{"inputs":[{"name":"self"}],"output":{"name":"nsiurl"}}],[11,"GetFile","","`text /** * Get/Set nsIFile corresponding to this URL. * * - Getter returns a reference to an immutable object. Callers must clone * before attempting to modify the returned nsIFile object. NOTE: this * constraint might not be enforced at runtime, so beware!! * * - Setter clones the nsIFile object (allowing the caller to safely modify * the nsIFile object after setting it on this interface). */`",55,null],[11,"SetFile","","`text /** * Get/Set nsIFile corresponding to this URL. * * - Getter returns a reference to an immutable object. Callers must clone * before attempting to modify the returned nsIFile object. NOTE: this * constraint might not be enforced at runtime, so beware!! * * - Setter clones the nsIFile object (allowing the caller to safely modify * the nsIFile object after setting it on this interface). */`",55,null],[11,"addref","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",56,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistURIMap` to one of its base interfaces.",56,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",56,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNumMappedURIs","","`text /** * The number of URI mappings. */`",56,null],[11,"GetURIMapping","","`text /** * Obtain the URI mapping at the given index, which must be less than * numMappedURIs, as a pair of URI spec strings. */`",56,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTargetBaseURI","","`text /** * The spec of the base URI that the document will have after it is * serialized. */`",56,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",57,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistDocument` to one of its base interfaces.",57,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",57,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsPrivate","","`readonly attribute boolean isPrivate;`",57,null],[11,"GetDocumentURI","","`readonly attribute AUTF8String documentURI;`",57,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBaseURI","","`readonly attribute AUTF8String baseURI;`",57,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetContentType","","`readonly attribute ACString contentType;`",57,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCharacterSet","","`readonly attribute ACString characterSet;`",57,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`readonly attribute AString title;`",57,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReferrer","","`readonly attribute AString referrer;`",57,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetContentDisposition","","`readonly attribute AString contentDisposition;`",57,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPostData","","`readonly attribute nsIInputStream postData;`",57,null],[11,"GetCacheKey","","`text /** * The cache key. Unlike in nsISHEntry, where it's wrapped in an * nsISupportsPRUint32, this is just the integer. */`",57,null],[11,"GetPersistFlags","","`text /** * This attribute is set by nsIWebBrowserPersist implementations to * propagate persist flags that apply to the DOM traversal and * serialization (rather than to managing file I/O). */`",57,null],[11,"SetPersistFlags","","`text /** * This attribute is set by nsIWebBrowserPersist implementations to * propagate persist flags that apply to the DOM traversal and * serialization (rather than to managing file I/O). */`",57,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ReadResources","","`text /** * Walk the DOM searching for external resources needed to render it. * The visitor callbacks may be called either before or after * readResources returns. * * @see nsIWebBrowserPersistResourceVisitor */`",57,null],[11,"WriteContent","","`text /** * Serialize the document's DOM. * * @param aStream The output stream to write the document to. * * @param aURIMap Optional; specifies URI rewriting to perform on * external references (as read by readResources). * If given, also causes relative hyperlinks to be * converted to absolute in the written text. * * @param aRequestedContentType * The desired MIME type to save the document as; * optional and defaults to the document's type. * (If no encoder exists for that type, \"text/html\" * is used instead.) * * @param aEncoderFlags Flags to pass to the encoder. * * @param aWrapColumn Desired text width, ignored if wrapping is not * specified by the encoding flags, or if 0. * * @param aCompletion Callback invoked when writing is complete. * It may be called either before or after writeContent * returns. * * @see nsIDocumentEncoder */`",57,null],[11,"addref","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",58,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistResourceVisitor` to one of its base interfaces.",58,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",58,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VisitResource","","`text /** * Asynchronous visitor that receives external resources linked by an * nsIWebBrowserPersistDocument and which are needed to render the * document. */ /** * Indicates a resource that is not a document; e.g., an image, script, * or stylesheet. * * @param aDocument The document containing the reference. * @param aURI The absolute URI spec for the referenced resource. */`",58,null],[11,"VisitDocument","","`text /** * Indicates a subdocument resource; e.g., a frame or iframe. * * @param aDocument The document containing the reference. * @param aSubDocument The referenced document. */`",58,null],[11,"EndVisit","","`text /** * Indicates that the document traversal is complete. * * @param aDocument The document that was being traversed. * @param aStatus Indicates whether the traversal encountered an error. */`",58,null],[11,"addref","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",59,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistWriteCompletion` to one of its base interfaces.",59,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",59,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnFinish","","`text /** * Asynchronous callback for when nsIWebBrowserPersistDocument is finished * serializing the document's DOM. */ /** * Indicates that serialization is finished. * * @param aDocument The document that was being serialized. * * @param aStream The stream that was being written to. If it * needs to be closed, the callback must do that; * the serialization process leaves it open. * * @param aContentType The content type with which the document was * actually serialized; this may be useful to set * metadata on the result, or if uploading it. * * @param aStatus Indicates whether serialization encountered an error. */`",59,null],[11,"addref","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",60,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistDocumentReceiver` to one of its base interfaces.",60,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",60,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDocumentReady","","`void onDocumentReady (in nsIWebBrowserPersistDocument aDocument);`",60,null],[11,"OnError","","`void onError (in nsresult aFailure);`",60,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",61,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentProcessInfo` to one of its base interfaces.",61,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",61,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsAlive","","`text /** * Is this content process alive? */`",61,null],[11,"GetProcessId","","`text /** * The content process's PID. * Throws if the process is not alive. */`",61,null],[11,"GetOpener","","`text /** * This content process's opener. */`",61,null],[11,"GetTabCount","","`text /** * Number of opened tabs living in this content process. */`",61,null],[11,"GetMessageManager","","`text /** * The process manager for this ContentParent (so a process message manager * as opposed to a frame message manager. */`",61,null],[11,"addref","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",62,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentProcessProvider` to one of its base interfaces.",62,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",62,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NEW_PROCESS","","`text /** * Return this from provideProcess to create a new process. */`",62,null],[11,"ProvideProcess","","`text /** * Given aAliveProcesses (with an opener aOpener), choose which process of * aType to use. Return nsIContentProcessProvider.NEW_PROCESS to ask the * caller to create a new content process. */`",62,null],[11,"addref","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",63,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMRange` to one of its base interfaces.",63,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",63,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"START_TO_START","","",63,null],[18,"START_TO_END","","",63,null],[18,"END_TO_END","","",63,null],[18,"END_TO_START","","",63,null],[11,"GetStartContainer","","`text /** * The nsIDOMRange interface is an interface to a DOM range object. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ */`",63,null],[11,"GetStartOffset","","`readonly attribute unsigned long startOffset;`",63,null],[11,"GetEndContainer","","`readonly attribute nsIDOMNode endContainer;`",63,null],[11,"GetEndOffset","","`readonly attribute unsigned long endOffset;`",63,null],[11,"GetCollapsed","","`readonly attribute boolean collapsed;`",63,null],[11,"GetCommonAncestorContainer","","`readonly attribute nsIDOMNode commonAncestorContainer;`",63,null],[11,"SetStart","","`void setStart (in nsIDOMNode refNode, in unsigned long offset);`",63,null],[11,"SetEnd","","`void setEnd (in nsIDOMNode refNode, in unsigned long offset);`",63,null],[11,"SetStartBefore","","`void setStartBefore (in nsIDOMNode refNode);`",63,null],[11,"SetStartAfter","","`void setStartAfter (in nsIDOMNode refNode);`",63,null],[11,"SetEndBefore","","`void setEndBefore (in nsIDOMNode refNode);`",63,null],[11,"SetEndAfter","","`void setEndAfter (in nsIDOMNode refNode);`",63,null],[11,"Collapse","","`void collapse (in boolean toStart);`",63,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SelectNode","","`void selectNode (in nsIDOMNode refNode);`",63,null],[11,"SelectNodeContents","","`void selectNodeContents (in nsIDOMNode refNode);`",63,null],[11,"CompareBoundaryPoints","","`short compareBoundaryPoints (in unsigned short how, in nsIDOMRange sourceRange);`",63,null],[11,"DeleteContents","","`void deleteContents ();`",63,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ExtractContents","","`nsIDOMDocumentFragment extractContents ();`",63,null],[11,"CloneContents","","`nsIDOMDocumentFragment cloneContents ();`",63,null],[11,"InsertNode","","`void insertNode (in nsIDOMNode newNode);`",63,null],[11,"SurroundContents","","`void surroundContents (in nsIDOMNode newParent);`",63,null],[11,"CloneRange","","`nsIDOMRange cloneRange ();`",63,null],[11,"ToString","","`DOMString toString ();`",63,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Detach","","`void detach ();`",63,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CreateContextualFragment","","`nsIDOMDocumentFragment createContextualFragment (in DOMString fragment);`",63,null],[11,"IsPointInRange","","`boolean isPointInRange (in nsIDOMNode parent, in unsigned long offset);`",63,null],[11,"ComparePoint","","`short comparePoint (in nsIDOMNode parent, in unsigned long offset);`",63,null],[11,"IntersectsNode","","`text /** * Returns whether the range intersects node. */`",63,null],[11,"GetClientRects","","`nsIDOMClientRectList getClientRects ();`",63,null],[11,"GetBoundingClientRect","","`nsIDOMClientRect getBoundingClientRect ();`",63,null],[11,"addref","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",64,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConverterInputStream` to one of its base interfaces.",64,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",64,{"inputs":[{"name":"self"}],"output":{"name":"nsiunicharinputstream"}}],[18,"DEFAULT_REPLACEMENT_CHARACTER","","`text /** * Default replacement char value, U+FFFD REPLACEMENT CHARACTER. */`",64,null],[11,"Init","","`text /** * Initialize this stream. * @param aStream * The underlying stream to read from. * @param aCharset * The character encoding to use for converting the bytes of the * stream. A null charset will be interpreted as UTF-8. * @param aBufferSize * How many bytes to buffer. * @param aReplacementChar * The character to replace unknown byte sequences in the stream * with. The standard replacement character is U+FFFD. * A value of 0x0000 will cause an exception to be thrown if unknown * byte sequences are encountered in the stream. */`",64,null],[11,"addref","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",65,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleEvent` to one of its base interfaces.",65,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",65,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EVENT_SHOW","","`text /** * An object has been created. */`",65,null],[18,"EVENT_HIDE","","`text /** * An object has been destroyed. */`",65,null],[18,"EVENT_REORDER","","`text /** * An object's children have changed */`",65,null],[18,"EVENT_ACTIVE_DECENDENT_CHANGED","","`text /** * The active descendant of a component has changed. The active descendant * is used in objects with transient children. */`",65,null],[18,"EVENT_FOCUS","","`text /** * An object has received the keyboard focus. */`",65,null],[18,"EVENT_STATE_CHANGE","","`text /** * An object's state has changed. */`",65,null],[18,"EVENT_LOCATION_CHANGE","","`text /** * An object has changed location, shape, or size. */`",65,null],[18,"EVENT_NAME_CHANGE","","`text /** * An object's Name property has changed. */`",65,null],[18,"EVENT_DESCRIPTION_CHANGE","","`text /** * An object's Description property has changed. */`",65,null],[18,"EVENT_VALUE_CHANGE","","`text /** * An object's numeric Value has changed. */`",65,null],[18,"EVENT_HELP_CHANGE","","`text /** * An object's help has changed. */`",65,null],[18,"EVENT_DEFACTION_CHANGE","","`text /** * An object's default action has changed. */`",65,null],[18,"EVENT_ACTION_CHANGE","","`text /** * An object's action has changed. */`",65,null],[18,"EVENT_ACCELERATOR_CHANGE","","`text /** * An object's keyboard shortcut has changed. */`",65,null],[18,"EVENT_SELECTION","","`text /** * The selection within a container object has changed. */`",65,null],[18,"EVENT_SELECTION_ADD","","`text /** * An item within a container object has been added to the selection. */`",65,null],[18,"EVENT_SELECTION_REMOVE","","`text /** * An item within a container object has been removed from the selection. */`",65,null],[18,"EVENT_SELECTION_WITHIN","","`text /** * Numerous selection changes have occurred within a container object. */`",65,null],[18,"EVENT_ALERT","","`text /** * An alert has been generated. Server applications send this event when a * user needs to know that a user interface element has changed. */`",65,null],[18,"EVENT_FOREGROUND","","`text /** * The foreground window has changed. */`",65,null],[18,"EVENT_MENU_START","","`text /** * A menu item on the menu bar has been selected. */`",65,null],[18,"EVENT_MENU_END","","`text /** * A menu from the menu bar has been closed. */`",65,null],[18,"EVENT_MENUPOPUP_START","","`text /** * A pop-up menu has been displayed. */`",65,null],[18,"EVENT_MENUPOPUP_END","","`text /** * A pop-up menu has been closed. */`",65,null],[18,"EVENT_CAPTURE_START","","`text /** * A window has received mouse capture. */`",65,null],[18,"EVENT_CAPTURE_END","","`text /** * A window has lost mouse capture. */`",65,null],[18,"EVENT_MOVESIZE_START","","`text /** * A window is being moved or resized. */`",65,null],[18,"EVENT_MOVESIZE_END","","`text /** * The movement or resizing of a window has finished */`",65,null],[18,"EVENT_CONTEXTHELP_START","","`text /** * A window has entered context-sensitive Help mode */`",65,null],[18,"EVENT_CONTEXTHELP_END","","`text /** * A window has exited context-sensitive Help mode */`",65,null],[18,"EVENT_DRAGDROP_START","","`text /** * An application is about to enter drag-and-drop mode */`",65,null],[18,"EVENT_DRAGDROP_END","","`text /** * An application is about to exit drag-and-drop mode */`",65,null],[18,"EVENT_DIALOG_START","","`text /** * A dialog box has been displayed */`",65,null],[18,"EVENT_DIALOG_END","","`text /** * A dialog box has been closed */`",65,null],[18,"EVENT_SCROLLING_START","","`text /** * Scrolling has started on a scroll bar */`",65,null],[18,"EVENT_SCROLLING_END","","`text /** * Scrolling has ended on a scroll bar */`",65,null],[18,"EVENT_MINIMIZE_START","","`text /** * A window object is about to be minimized or maximized */`",65,null],[18,"EVENT_MINIMIZE_END","","`text /** * A window object has been minimized or maximized */`",65,null],[18,"EVENT_DOCUMENT_LOAD_COMPLETE","","`text /** * The loading of the document has completed. */`",65,null],[18,"EVENT_DOCUMENT_RELOAD","","`text /** * The document contents are being reloaded. */`",65,null],[18,"EVENT_DOCUMENT_LOAD_STOPPED","","`text /** * The loading of the document was interrupted. */`",65,null],[18,"EVENT_DOCUMENT_ATTRIBUTES_CHANGED","","`text /** * The document wide attributes of the document object have changed. */`",65,null],[18,"EVENT_DOCUMENT_CONTENT_CHANGED","","`text /** * The contents of the document have changed. */`",65,null],[18,"EVENT_PROPERTY_CHANGED","","",65,null],[18,"EVENT_PAGE_CHANGED","","`text /** * A slide changed in a presentation document or a page boundary was * crossed in a word processing document. */`",65,null],[18,"EVENT_TEXT_ATTRIBUTE_CHANGED","","`text /** * A text object's attributes changed. * Also see EVENT_OBJECT_ATTRIBUTE_CHANGED. */`",65,null],[18,"EVENT_TEXT_CARET_MOVED","","`text /** * The caret has moved to a new position. */`",65,null],[18,"EVENT_TEXT_CHANGED","","`text /** * This event indicates general text changes, i.e. changes to text that is * exposed through the IAccessibleText and IAccessibleEditableText interfaces. */`",65,null],[18,"EVENT_TEXT_INSERTED","","`text /** * Text was inserted. */`",65,null],[18,"EVENT_TEXT_REMOVED","","`text /** * Text was removed. */`",65,null],[18,"EVENT_TEXT_UPDATED","","`text /** * Text was updated. */`",65,null],[18,"EVENT_TEXT_SELECTION_CHANGED","","`text /** * The text selection changed. */`",65,null],[18,"EVENT_VISIBLE_DATA_CHANGED","","`text /** * A visibile data event indicates the change of the visual appearance * of an accessible object. This includes for example most of the * attributes available via the IAccessibleComponent interface. */`",65,null],[18,"EVENT_TEXT_COLUMN_CHANGED","","`text /** * The caret moved from one column to the next. */`",65,null],[18,"EVENT_SECTION_CHANGED","","`text /** * The caret moved from one section to the next. */`",65,null],[18,"EVENT_TABLE_CAPTION_CHANGED","","`text /** * A table caption changed. */`",65,null],[18,"EVENT_TABLE_MODEL_CHANGED","","`text /** * A table's data changed. */`",65,null],[18,"EVENT_TABLE_SUMMARY_CHANGED","","`text /** * A table's summary changed. */`",65,null],[18,"EVENT_TABLE_ROW_DESCRIPTION_CHANGED","","`text /** * A table's row description changed. */`",65,null],[18,"EVENT_TABLE_ROW_HEADER_CHANGED","","`text /** * A table's row header changed. */`",65,null],[18,"EVENT_TABLE_ROW_INSERT","","",65,null],[18,"EVENT_TABLE_ROW_DELETE","","",65,null],[18,"EVENT_TABLE_ROW_REORDER","","",65,null],[18,"EVENT_TABLE_COLUMN_DESCRIPTION_CHANGED","","`text /** * A table's column description changed. */`",65,null],[18,"EVENT_TABLE_COLUMN_HEADER_CHANGED","","`text /** * A table's column header changed. */`",65,null],[18,"EVENT_TABLE_COLUMN_INSERT","","",65,null],[18,"EVENT_TABLE_COLUMN_DELETE","","",65,null],[18,"EVENT_TABLE_COLUMN_REORDER","","",65,null],[18,"EVENT_WINDOW_ACTIVATE","","",65,null],[18,"EVENT_WINDOW_CREATE","","",65,null],[18,"EVENT_WINDOW_DEACTIVATE","","",65,null],[18,"EVENT_WINDOW_DESTROY","","",65,null],[18,"EVENT_WINDOW_MAXIMIZE","","",65,null],[18,"EVENT_WINDOW_MINIMIZE","","",65,null],[18,"EVENT_WINDOW_RESIZE","","",65,null],[18,"EVENT_WINDOW_RESTORE","","",65,null],[18,"EVENT_HYPERLINK_END_INDEX_CHANGED","","`text /** * The ending index of this link within the containing string has changed. */`",65,null],[18,"EVENT_HYPERLINK_NUMBER_OF_ANCHORS_CHANGED","","`text /** * The number of anchors assoicated with this hyperlink object has changed. */`",65,null],[18,"EVENT_HYPERLINK_SELECTED_LINK_CHANGED","","`text /** * The hyperlink selected state changed from selected to unselected or * from unselected to selected. */`",65,null],[18,"EVENT_HYPERTEXT_LINK_ACTIVATED","","`text /** * One of the links associated with the hypertext object has been activated. */`",65,null],[18,"EVENT_HYPERTEXT_LINK_SELECTED","","`text /** * One of the links associated with the hypertext object has been selected. */`",65,null],[18,"EVENT_HYPERLINK_START_INDEX_CHANGED","","`text /** * The starting index of this link within the containing string has changed. */`",65,null],[18,"EVENT_HYPERTEXT_CHANGED","","`text /** * Focus has changed from one hypertext object to another, or focus moved * from a non-hypertext object to a hypertext object, or focus moved from a * hypertext object to a non-hypertext object. */`",65,null],[18,"EVENT_HYPERTEXT_NLINKS_CHANGED","","`text /** * The number of hyperlinks associated with a hypertext object changed. */`",65,null],[18,"EVENT_OBJECT_ATTRIBUTE_CHANGED","","`text /** * An object's attributes changed. Also see EVENT_TEXT_ATTRIBUTE_CHANGED. */`",65,null],[18,"EVENT_VIRTUALCURSOR_CHANGED","","`text /** * A cursorable's virtual cursor has changed. */`",65,null],[18,"EVENT_TEXT_VALUE_CHANGE","","`text /** * An object's text Value has changed. */`",65,null],[18,"EVENT_LAST_ENTRY","","`text /** * Help make sure event map does not get out-of-line. */`",65,null],[11,"GetEventType","","`text /** * The type of event, based on the enumerated event values * defined in this interface. */`",65,null],[11,"GetAccessible","","`text /** * The nsIAccessible associated with the event. * May return null if no accessible is available */`",65,null],[11,"GetAccessibleDocument","","`text /** * The nsIAccessibleDocument that the event target nsIAccessible * resides in. This can be used to get the DOM window, * the DOM document and the window handler, among other things. */`",65,null],[11,"GetDOMNode","","`text /** * The nsIDOMNode associated with the event * May return null if accessible for event has been shut down */`",65,null],[11,"GetIsFromUserInput","","`text /** * Returns true if the event was caused by explicit user input, * as opposed to purely originating from a timer or mouse movement */`",65,null],[11,"addref","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",66,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIReadConfig` to one of its base interfaces.",66,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",66,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",67,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDragService` to one of its base interfaces.",67,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",67,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DRAGDROP_ACTION_NONE","","",67,null],[18,"DRAGDROP_ACTION_COPY","","",67,null],[18,"DRAGDROP_ACTION_MOVE","","",67,null],[18,"DRAGDROP_ACTION_LINK","","",67,null],[18,"DRAGDROP_ACTION_UNINITIALIZED","","",67,null],[11,"InvokeDragSession","","`text /** * Starts a modal drag session with an array of transaferables. * * Note: This method is deprecated for non-native code. * * @param aTransferables - an array of transferables to be dragged * @param aRegion - a region containing rectangles for cursor feedback, * in window coordinates. * @param aActionType - specified which of copy/move/link are allowed * @param aContentPolicyType - the contentPolicyType that will be * passed to the loadInfo when creating a new channel * (defaults to TYPE_OTHER) */`",67,null],[11,"InvokeDragSessionWithImage","","`text /** * Starts a modal drag session using an image. The first four arguments are * the same as invokeDragSession. * * Note: This method is deprecated for non-native code. * * A custom image may be specified using the aImage argument. If this is * supplied, the aImageX and aImageY arguments specify the offset within * the image where the cursor would be positioned. That is, when the image * is drawn, it is offset up and left the amount so that the cursor appears * at that location within the image. * * If aImage is null, aImageX and aImageY are not used and the image is instead * determined from the source node aDOMNode, and the offset calculated so that * the initial location for the image appears in the same screen position as * where the element is located. The node must be within a document. * * Currently, supported images are all DOM nodes. If this is an HTML <image> or * <canvas>, the drag image is taken from the image data. If the element is in * a document, it will be rendered at its displayed size, othewise, it will be * rendered at its real size. For other types of elements, the element is * rendered into an offscreen buffer in the same manner as it is currently * displayed. The document selection is hidden while drawing. * * The aDragEvent must be supplied as the current screen coordinates of the * event are needed to calculate the image location. */`",67,null],[11,"InvokeDragSessionWithSelection","","`text /** * Start a modal drag session using the selection as the drag image. * The aDragEvent must be supplied as the current screen coordinates of the * event are needed to calculate the image location. * * Note: This method is deprecated for non-native code. */`",67,null],[11,"GetCurrentSession","","`text /** * Returns the current Drag Session */`",67,null],[11,"StartDragSession","","`text /** * Tells the Drag Service to start a drag session. This is called when * an external drag occurs */`",67,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndDragSession","","`text /** * Tells the Drag Service to end a drag session. This is called when * an external drag occurs * * If aDoneDrag is true, the drag has finished, otherwise the drag has * just left the window. */`",67,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Suppress","","`text /** * Increase/decrease dragging suppress level by one. * If level is greater than one, dragging is disabled. */`",67,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Unsuppress","","`void unsuppress ();`",67,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DragMoved","","`text /** * aX and aY are in LayoutDevice pixels. */`",67,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",68,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncVerifyRedirectCallback` to one of its base interfaces.",68,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",68,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnRedirectVerifyCallback","","`text /** * Complement to nsIChannelEventSink asynchronous callback. The result of * the redirect decision is passed through this callback. * * @param result * Result of the redirect veto decision. If FAILED the redirect has been * vetoed. If SUCCEEDED the redirect has been allowed by all consumers. */`",68,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",69,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadManagerResult` to one of its base interfaces.",69,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",69,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleResult","","`text /** * Process an asynchronous result from getDownloadByGUID. * * @param aStatus The result code of the operation: * * NS_OK: an item was found. No other success values are returned. * * NS_ERROR_NOT_AVAILABLE: no such item was found. * * Other error values are possible, but less well-defined. */`",69,null],[11,"addref","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",70,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadManager` to one of its base interfaces.",70,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",70,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DOWNLOAD_TYPE_DOWNLOAD","","`text /** * Download type for generic file download. */`",70,null],[18,"DOWNLOAD_NOTSTARTED","","`text /** * Download state for uninitialized download object. */`",70,null],[18,"DOWNLOAD_DOWNLOADING","","`text /** * Download is currently transferring data. */`",70,null],[18,"DOWNLOAD_FINISHED","","`text /** * Download completed including any processing of the target * file. (completed) */`",70,null],[18,"DOWNLOAD_FAILED","","`text /** * Transfer failed due to error. (completed) */`",70,null],[18,"DOWNLOAD_CANCELED","","`text /** * Download was canceled by the user. (completed) */`",70,null],[18,"DOWNLOAD_PAUSED","","`text /** * Transfer was paused by the user. */`",70,null],[18,"DOWNLOAD_QUEUED","","`text /** * Download is active but data has not yet been received. */`",70,null],[18,"DOWNLOAD_BLOCKED_PARENTAL","","`text /** * Transfer request was blocked by parental controls proxies. (completed) */`",70,null],[18,"DOWNLOAD_SCANNING","","`text /** * Transferred download is being scanned by virus scanners. */`",70,null],[18,"DOWNLOAD_DIRTY","","`text /** * A virus was detected in the download. The target will most likely * no longer exist. (completed) */`",70,null],[18,"DOWNLOAD_BLOCKED_POLICY","","`text /** * Win specific: Request was blocked by zone policy settings. * (see bug #416683) (completed) */`",70,null],[11,"AddDownload","","`text /** * Creates an nsIDownload and adds it to be managed by the download manager. * * @param aSource The source URI of the transfer. Must not be null. * * @param aTarget The target URI of the transfer. Must not be null. * * @param aDisplayName The user-readable description of the transfer. * Can be empty. * * @param aMIMEInfo The MIME info associated with the target, * including MIME type and helper app when appropriate. * This parameter is optional. * * @param startTime Time when the download started * * @param aTempFile The location of a temporary file; i.e. a file in which * the received data will be stored, but which is not * equal to the target file. (will be moved to the real * target by the DownloadManager, when the download is * finished). This will be null for all callers except for * nsExternalHelperAppHandler. Addons should generally pass * null for aTempFile. This will be moved to the real target * by the download manager when the download is finished, * and the action indicated by aMIMEInfo will be executed. * * @param aCancelable An object that can be used to abort the download. * Must not be null. * * @param aIsPrivate Used to determine the privacy status of the new download. * If true, the download is stored in a manner that leaves * no permanent trace outside of the current private session. * * @return The newly created download item with the passed-in properties. * * @note This does not actually start a download. If you want to add and * start a download, you need to create an nsIWebBrowserPersist, pass it * as the aCancelable object, call this method, set the progressListener * as the returned download object, then call saveURI. */`",70,null],[11,"GetDownload","","`text /** * Retrieves a download managed by the download manager. This can be one that * is in progress, or one that has completed in the past and is stored in the * database. * * @param aID The unique ID of the download. * @return The download with the specified ID. * @throws NS_ERROR_NOT_AVAILABLE if the download is not in the database. */`",70,null],[11,"GetDownloadByGUID","","`text /** * Retrieves a download managed by the download manager. This can be one that * is in progress, or one that has completed in the past and is stored in the * database. The result of this method is returned via an asynchronous callback, * the parameter of which will be an nsIDownload object, or null if none exists * with the provided GUID. * * @param aGUID The unique GUID of the download. * @param aCallback The callback to invoke with the result of the search. */`",70,null],[11,"CancelDownload","","`text /** * Cancels the download with the specified ID if it's currently in-progress. * This calls cancel(NS_BINDING_ABORTED) on the nsICancelable provided by the * download. * * @param aID The unique ID of the download. * @throws NS_ERROR_FAILURE if the download is not in-progress. */`",70,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"RemoveDownload","","`text /** * Removes the download with the specified id if it's not currently * in-progress. Whereas cancelDownload simply cancels the transfer, but * retains information about it, removeDownload removes all knowledge of it. * * Also notifies observers of the \"download-manager-remove-download-guid\" * topic with the download guid as the subject to allow any DM consumers to * react to the removal. * * Also may notify observers of the \"download-manager-remove-download\" topic * with the download id as the subject, if the download removed is public * or if global private browsing mode is in use. This notification is deprecated; * the guid notification should be relied upon instead. * * @param aID The unique ID of the download. * @throws NS_ERROR_FAILURE if the download is active. */`",70,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"RemoveDownloadsByTimeframe","","`text /** * Removes all inactive downloads that were started inclusively within the * specified time frame. * * @param aBeginTime * The start time to remove downloads by in microseconds. * @param aEndTime * The end time to remove downloads by in microseconds. */`",70,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"PauseDownload","","`text /** * Pause the specified download. * * @param aID The unique ID of the download. * @throws NS_ERROR_FAILURE if the download is not in-progress. */`",70,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ResumeDownload","","`text /** * Resume the specified download. * * @param aID The unique ID of the download. * @throws NS_ERROR_FAILURE if the download is not in-progress. */`",70,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"RetryDownload","","`text /** * Retries a failed download. * * @param aID The unique ID of the download. * @throws NS_ERROR_NOT_AVAILALE if the download id is not known. * @throws NS_ERROR_FAILURE if the download is not in the following states: * nsIDownloadManager::DOWNLOAD_CANCELED * nsIDownloadManager::DOWNLOAD_FAILED */`",70,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDBConnection","","`text /** * The database connection to the downloads database. */`",70,null],[11,"GetPrivateDBConnection","","`readonly attribute mozIStorageConnection privateDBConnection;`",70,null],[11,"GetCanCleanUp","","`text /** * Whether or not there are downloads that can be cleaned up (removed) * i.e. downloads that have completed, have failed or have been canceled. * In global private browsing mode, this reports the status of the relevant * private or public downloads. In per-window mode, it only reports for * public ones. */`",70,null],[11,"GetCanCleanUpPrivate","","`text /** * Whether or not there are private downloads that can be cleaned up (removed) * i.e. downloads that have completed, have failed or have been canceled. */`",70,null],[11,"CleanUp","","`text /** * Removes completed, failed, and canceled downloads from the list. * In global private browsing mode, this operates on the relevant * private or public downloads. In per-window mode, it only operates * on public ones. * * Also notifies observers of the \"download-manager-remove-download-gui\" * and \"download-manager-remove-download\" topics with a null subject to * allow any DM consumers to react to the removals. */`",70,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CleanUpPrivate","","`text /** * Removes completed, failed, and canceled downloads from the list * of private downloads. * * Also notifies observers of the \"download-manager-remove-download-gui\" * and \"download-manager-remove-download\" topics with a null subject to * allow any DM consumers to react to the removals. */`",70,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetActiveDownloadCount","","`text /** * The number of files currently being downloaded. * * In global private browsing mode, this reports the status of the relevant * private or public downloads. In per-window mode, it only reports public * ones. */`",70,null],[11,"GetActivePrivateDownloadCount","","`text /** * The number of private files currently being downloaded. */`",70,null],[11,"GetActiveDownloads","","`text /** * An enumeration of active nsIDownloads * * In global private browsing mode, this reports the status of the relevant * private or public downloads. In per-window mode, it only reports public * ones. */`",70,null],[11,"GetActivePrivateDownloads","","`text /** * An enumeration of active private nsIDownloads */`",70,null],[11,"AddListener","","`text /** * Adds a listener to the download manager. It is expected that this * listener will only access downloads via their deprecated integer id attribute, * and when global private browsing compatibility mode is disabled, this listener * will receive no notifications for downloads marked private. */`",70,null],[11,"AddPrivacyAwareListener","","`text /** * Adds a listener to the download manager. This listener must be able to * understand and use the guid attribute of downloads for all interactions * with the download manager. */`",70,null],[11,"RemoveListener","","`text /** * Removes a listener from the download manager. */`",70,null],[11,"GetDefaultDownloadsDirectory","","`text /** * Returns the platform default downloads directory. */`",70,null],[11,"GetUserDownloadsDirectory","","`text /** * Returns the user configured downloads directory. * The path is dependent on two user configurable prefs * set in preferences: * * browser.download.folderList * Indicates the location users wish to save downloaded * files too. * Values: * 0 - The desktop is the default download location. * 1 - The system's downloads folder is the default download location. * 2 - The default download location is elsewhere as specified in * browser.download.dir. If invalid, userDownloadsDirectory * will fallback on defaultDownloadsDirectory. * * browser.download.dir - * A local path the user may have selected at some point * where downloaded files are saved. The use of which is * enabled when folderList equals 2. */`",70,null],[11,"addref","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",71,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMScrollAreaEvent` to one of its base interfaces.",71,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",71,{"inputs":[{"name":"self"}],"output":{"name":"nsidomuievent"}}],[11,"addref","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",72,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSValue` to one of its base interfaces.",72,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",72,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"CSS_INHERIT","","`text /** * The nsIDOMCSSValue interface is a datatype for a CSS value in the * Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",72,null],[18,"CSS_PRIMITIVE_VALUE","","",72,null],[18,"CSS_VALUE_LIST","","",72,null],[18,"CSS_CUSTOM","","",72,null],[11,"GetCssText","","`attribute DOMString cssText;`",72,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCssText","","`attribute DOMString cssText;`",72,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCssValueType","","`readonly attribute unsigned short cssValueType;`",72,null],[11,"addref","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",73,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISAXXMLReader` to one of its base interfaces.",73,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",73,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"GetBaseURI","","`text /** * The base URI. */`",73,null],[11,"SetBaseURI","","`text /** * The base URI. */`",73,null],[11,"GetContentHandler","","`text /** * If the application does not register a content handler, all * content events reported by the SAX parser will be silently * ignored. * * Applications may register a new or different handler in the * middle of a parse, and the SAX parser must begin using the new * handler immediately. */`",73,null],[11,"SetContentHandler","","`text /** * If the application does not register a content handler, all * content events reported by the SAX parser will be silently * ignored. * * Applications may register a new or different handler in the * middle of a parse, and the SAX parser must begin using the new * handler immediately. */`",73,null],[11,"GetErrorHandler","","`text /** * If the application does not register an error handler, all * error events reported by the SAX parser will be silently ignored; * however, normal processing may not continue. It is highly * recommended that all SAX applications implement an error handler * to avoid unexpected bugs. * * Applications may register a new or different handler in the * middle of a parse, and the SAX parser must begin using the new * handler immediately. */`",73,null],[11,"SetErrorHandler","","`text /** * If the application does not register an error handler, all * error events reported by the SAX parser will be silently ignored; * however, normal processing may not continue. It is highly * recommended that all SAX applications implement an error handler * to avoid unexpected bugs. * * Applications may register a new or different handler in the * middle of a parse, and the SAX parser must begin using the new * handler immediately. */`",73,null],[11,"ParseFromString","","`text /** * @param str The UTF16 string to be parsed * @param contentType The content type of the string (see parseFromStream) */`",73,null],[11,"ParseFromStream","","`text /** * @param stream The byte stream whose contents are parsed * @param charset The character set that was used to encode the byte * stream. NULL if not specified. * @param contentType The content type of the string - either text/xml, * application/xml, or application/xhtml+xml. * Must not be NULL. */`",73,null],[11,"ParseAsync","","`text /** * Begin an asynchronous parse. This method initializes the parser, * and must be called before any nsIStreamListener methods. It is * then the caller's duty to call nsIStreamListener methods to drive * the parser. Once this method is called, the caller must not call * one of the other parse methods. * * @param observer The nsIRequestObserver to notify upon start or stop. * Can be NULL. */`",73,null],[11,"addref","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",74,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPermission` to one of its base interfaces.",74,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",74,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrincipal","","`text /** * The principal for which this permission applies. */`",74,null],[11,"GetType","","`text /** * a case-sensitive ASCII string, indicating the type of permission * (e.g., \"cookie\", \"image\", etc). * This string is specified by the consumer when adding a permission * via nsIPermissionManager. * @see nsIPermissionManager */`",74,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCapability","","`text /** * The permission (see nsIPermissionManager.idl for allowed values) */`",74,null],[11,"GetExpireType","","`text /** * The expiration type of the permission (session, time-based or none). * Constants are EXPIRE_*, defined in nsIPermissionManager. * @see nsIPermissionManager */`",74,null],[11,"GetExpireTime","","`text /** * The expiration time of the permission (milliseconds since Jan 1 1970 * 0:00:00). */`",74,null],[11,"Matches","","`text /** * Test whether a principal would be affected by this permission. * * @param principal the principal to test * @param exactHost If true, only the specific host will be matched, * @see nsIPermissionManager::testExactPermission. * If false, subdomains will also be searched, * @see nsIPermissionManager::testPermission. */`",74,null],[11,"MatchesURI","","`text /** * Test whether a URI would be affected by this permission. * NOTE: This performs matches with default origin attribute values. * * @param uri the uri to test * @param exactHost If true, only the specific host will be matched, * @see nsIPermissionManager::testExactPermission. * If false, subdomains will also be searched, * @see nsIPermissionManager::testPermission. */`",74,null],[11,"addref","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",75,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSGroupingRule` to one of its base interfaces.",75,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",75,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCssRules","","`readonly attribute nsIDOMCSSRuleList cssRules;`",75,null],[11,"InsertRule","","`unsigned long insertRule (in DOMString rule, in unsigned long index) raises (DOMException);`",75,null],[11,"DeleteRule","","`void deleteRule (in unsigned long index) raises (DOMException);`",75,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",76,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowser` to one of its base interfaces.",76,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",76,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SWAP_DEFAULT","","`text /** * Flags for controlling the behavior of swapBrowsers */ /** * The default options. This is used for swapping browsers between windows */`",76,null],[18,"SWAP_KEEP_PERMANENT_KEY","","`text /** * If this bit is set, swapping the browsers will not swap the permanentKey of * the browsers. This is used when performing cross process loads by swapping * browsers. */`",76,null],[11,"GetSameProcessAsFrameLoader","","`text /** * Gets an optional frame loader that is \"related\" to this browser. * If this exists, then we should attempt to use the same content parent as * this frame loader for any new tab parents. For example, view source * browsers set this to the frame loader for the original content to ensure * they are loaded in the same process as the content. */`",76,null],[11,"DropLinks","","`void dropLinks (in unsigned long linksCount, [array, size_is (linksCount)] in wstring links, in nsIPrincipal aTriggeringPrincipal);`",76,null],[11,"SwapBrowsers","","`text /** * Swapping of frameloaders are usually initiated from a frameloader owner * or other components operating on frameloader owners. This is done by calling * swapFrameLoaders at MozFrameLoaderOwner webidl interface. * * This function aimed to provide the other way around - * if the swapping is initiated from frameloader itself or other platform level * components, it uses this interface to delegate the swapping request to * frameloader owners and ask them to re-initiate frameloader swapping, so that * frameloader owners such as <xul:browser> can setup their properties and / * or listeners properly on swapping. */`",76,null],[11,"CloseBrowser","","`text /** * Close the browser (usually means to remove a tab). */`",76,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",77,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheService` to one of its base interfaces.",77,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",77,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateSession","","`text /** * @throws NS_ERROR_NOT_IMPLEMENTED when the cache v2 is prefered to use. * * Create a cache session * * A cache session represents a client's access into the cache. The cache * session is not \"owned\" by the cache service. Hence, it is possible to * create duplicate cache sessions. Entries created by a cache session * are invisible to other cache sessions, unless the cache sessions are * equivalent. * * @param clientID - Specifies the name of the client using the cache. * @param storagePolicy - Limits the storage policy for all entries * accessed via the returned session. As a result, devices excluded * by the storage policy will not be searched when opening entries * from the returned session. * @param streamBased - Indicates whether or not the data being cached * can be represented as a stream. The storagePolicy must be * consistent with the value of this field. For example, a non-stream- * based cache entry can only have a storage policy of STORE_IN_MEMORY. * @return new cache session. */`",77,null],[11,"VisitEntries","","`text /** * @throws NS_ERROR_NOT_IMPLEMENTED when the cache v2 is prefered to use. * * Visit entries stored in the cache. Used to implement about:cache. */`",77,null],[11,"EvictEntries","","`text /** * @throws NS_ERROR_NOT_IMPLEMENTED when the cache v2 is prefered to use. * * Evicts all entries in all devices implied by the storage policy. * * @note This function may evict some items but will throw if it fails to evict * everything. */`",77,{"inputs":[{"name":"self"},{"name":"nscachestoragepolicy"}],"output":{"name":"nsresult"}}],[11,"GetCacheIOTarget","","`text /** * Event target which is used for I/O operations */`",77,null],[11,"addref","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",78,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheServiceInternal` to one of its base interfaces.",78,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",78,{"inputs":[{"name":"self"}],"output":{"name":"nsicacheservice"}}],[11,"GetLockHeldTime","","`text /** * This is an internal interface. It changes so frequently that it probably * went away while you were reading this. */ /** * Milliseconds for which the service lock has been held. 0 if unlocked. */`",78,null],[11,"addref","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",79,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITCPSocketCallback` to one of its base interfaces.",79,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",79,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"BUFFER_SIZE","","",79,null],[11,"FireErrorEvent","","`void fireErrorEvent (in AString name, in AString type);`",79,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FireDataStringEvent","","`void fireDataStringEvent (in DOMString type, in ACString data);`",79,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"FireEvent","","`void fireEvent (in DOMString type);`",79,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UpdateReadyState","","`void updateReadyState (in unsigned long readystate);`",79,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"UpdateBufferedAmount","","`void updateBufferedAmount (in uint32_t bufferedAmount, in uint32_t trackingNumber);`",79,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",80,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",80,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJARURI` to one of its base interfaces.",80,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",80,{"inputs":[{"name":"self"}],"output":{"name":"nsiurl"}}],[11,"GetJARFile","","`text /** * Returns the root URI (the one for the actual JAR file) for this JAR * (e.g., http://www.big.com/blue.jar). */`",80,null],[11,"GetJAREntry","","`text /** * Returns the entry specified for this JAR URI (e.g., \"ocean.html\"). This * value may contain %-escaped byte sequences. */`",80,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetJAREntry","","`text /** * Returns the entry specified for this JAR URI (e.g., \"ocean.html\"). This * value may contain %-escaped byte sequences. */`",80,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"CloneWithJARFile","","`text /** * Create a clone of the JAR URI with a new root URI (the URI for the * actual JAR file). */`",80,null],[11,"addref","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",81,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `amIAddonPathService` to one of its base interfaces.",81,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",81,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FindAddonId","","`text /** * Given a path to a file, return the ID of the add-on that the file belongs * to. Returns an empty string if there is no add-on there. Note that if an * add-on is located at /a/b/c, then looking up the path /a/b/c/d will return * that add-on. */`",81,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InsertPath","","`text /** * Call this function to inform the service that the given file system path is * associated with the given add-on ID. */`",81,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"MapURIToAddonId","","`text /** * Given a URI to a file, return the ID of the add-on that the file belongs * to. Returns an empty string if there is no add-on there. */`",81,null],[11,"addref","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",82,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleHyperText` to one of its base interfaces.",82,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",82,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLinkCount","","`text /** * Return the number of links contained within this hypertext object. */`",82,null],[11,"GetLinkAt","","`text /** * Return link accessible at the given index. * * @param index [in] 0-based index of the link that is to be retrieved * * @return link accessible or null if there is no link at that index */`",82,null],[11,"GetLinkIndex","","`text /** * Return index of the given link. * * @param link [in] link accessible the index is requested for * * @return index of the given link or null if there's no link within * hypertext accessible */`",82,null],[11,"GetLinkIndexAtOffset","","`long getLinkIndexAtOffset (in long offset);`",82,null],[11,"addref","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",83,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMRect` to one of its base interfaces.",83,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",83,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTop","","`readonly attribute nsIDOMCSSPrimitiveValue top;`",83,null],[11,"GetRight","","`readonly attribute nsIDOMCSSPrimitiveValue right;`",83,null],[11,"GetBottom","","`readonly attribute nsIDOMCSSPrimitiveValue bottom;`",83,null],[11,"GetLeft","","`readonly attribute nsIDOMCSSPrimitiveValue left;`",83,null],[11,"addref","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",84,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormFillController` to one of its base interfaces.",84,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",84,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFocusedInput","","`readonly attribute nsIDOMHTMLInputElement focusedInput;`",84,null],[11,"AttachToBrowser","","`void attachToBrowser (in nsIDocShell docShell, in nsIAutoCompletePopup popup);`",84,null],[11,"DetachFromBrowser","","`void detachFromBrowser (in nsIDocShell docShell);`",84,null],[11,"MarkAsLoginManagerField","","`void markAsLoginManagerField (in nsIDOMHTMLInputElement aInput);`",84,null],[11,"MarkAsAutofillField","","`void markAsAutofillField (in nsIDOMHTMLInputElement aInput);`",84,null],[11,"ShowPopup","","`void showPopup ();`",84,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",85,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamBufferAccess` to one of its base interfaces.",85,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",85,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBuffer","","`text /** * Get access to a contiguous, aligned run of bytes in the stream's buffer. * Exactly one successful getBuffer call must occur before a putBuffer call * taking the non-null pointer returned by the successful getBuffer. * * The run of bytes are the next bytes (modulo alignment padding) to read * for an input stream, and the next bytes (modulo alignment padding) to * store before (eventually) writing buffered data to an output stream. * There can be space beyond this run of bytes in the buffer for further * accesses before the fill or flush point is reached. * * @param aLength * Count of contiguous bytes requested at the address A that satisfies * (A & aAlignMask) == 0 in the buffer, starting from the current stream * position, mapped to a buffer address B. The stream implementation * must pad from B to A by skipping bytes (if input stream) or storing * zero bytes (if output stream). * * @param aAlignMask * Bit-mask computed by subtracting 1 from the power-of-two alignment * modulus (e.g., 3 or sizeof(uint32_t)-1 for uint32_t alignment). * * @return * The aligned pointer to aLength bytes in the buffer, or null if the * buffer has no room for aLength bytes starting at the next address A * after the current position that satisfies (A & aAlignMask) == 0. */`",85,null],[11,"PutBuffer","","`text /** * Relinquish access to the stream's buffer, filling if at end of an input * buffer, flushing if completing an output buffer. After a getBuffer call * that returns non-null, putBuffer must be called. * * @param aBuffer * A non-null pointer returned by getBuffer on the same stream buffer * access object. * * @param aLength * The same count of contiguous bytes passed to the getBuffer call that * returned aBuffer. */`",85,null],[11,"DisableBuffering","","`text /** * Disable and enable buffering on the stream implementing this interface. * DisableBuffering flushes an output stream's buffer, and invalidates an * input stream's buffer. */`",85,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnableBuffering","","`void enableBuffering ();`",85,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetUnbufferedStream","","`text /** * The underlying, unbuffered input or output stream. */`",85,null],[11,"addref","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",86,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURLFormatter` to one of its base interfaces.",86,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",86,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FormatURL","","`text /** * formatURL - Formats a string URL * * The set of known variables is predefined. * If a variable is unknown, it is left unchanged and a non-fatal error is reported. * * @param aFormat string Unformatted URL. * * @return The formatted URL. */`",86,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FormatURLPref","","`text /** * formatURLPref - Formats a string URL stored in a preference * * If the preference value cannot be retrieved, a fatal error is reported * and the \"about:blank\" URL is returned. * * @param aPref string Preference name. * * @return The formatted URL returned by formatURL(), or \"about:blank\". */`",86,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"TrimSensitiveURLs","","`text /** * Remove all of the sensitive query parameter strings from URLs in |aMsg|. */`",86,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",87,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITabParent` to one of its base interfaces.",87,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",87,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetChildProcessOffset","","`void getChildProcessOffset (out int32_t aCssX, out int32_t aCssY);`",87,null],[11,"GetUseAsyncPanZoom","","`readonly attribute boolean useAsyncPanZoom;`",87,null],[11,"GetDocShellIsActive","","`text /** * Manages the docshell active state of the remote browser. */`",87,null],[11,"SetDocShellIsActive","","`text /** * Manages the docshell active state of the remote browser. */`",87,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsPrerendered","","`text /** * Whether this tabParent is in prerender mode. */`",87,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"PreserveLayers","","`text /** * As an optimisation, setting the docshell's active state to * inactive also triggers a layer invalidation to free up some * potentially unhelpful memory usage. Calling preserveLayers * will cause the layers to be preserved even for inactive * docshells. */`",87,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SuppressDisplayport","","`text /** * During interactions where painting performance * is more important than scrolling, we may temporarily * suppress the displayport. Each enable called must be matched * with a disable call. */`",87,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTabId","","`readonly attribute uint64_t tabId;`",87,null],[11,"GetOsPid","","`text /** * The OS level process Id of the related child process. */`",87,null],[11,"NavigateByKey","","`text /** * Navigate by key. If aForDocumentNavigation is true, navigate by document. * If aForDocumentNavigation is false, navigate by element. * * If aForward is true, navigate to the first focusable element or document. * If aForward is false, navigate to the last focusable element or document. */`",87,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetHasContentOpener","","`readonly attribute boolean hasContentOpener;`",87,null],[11,"GetHasPresented","","`text /** * True if we've previously received layers for this tab when switching to * it. */`",87,null],[11,"TransmitPermissionsForPrincipal","","`text /** * Ensures that the content process which has this tab parent has all of the * permissions required to load a document with the given principal. */`",87,null],[11,"GetHasBeforeUnload","","`text /** * True if any of the frames loaded in the TabChild have registered * an onbeforeunload event handler. */`",87,null],[11,"StartApzAutoscroll","","`text /** * Notify APZ to start autoscrolling. * (aAnchorX, aAnchorY) are the coordinates of the autoscroll anchor, * in CSS coordinates relative to the screen. aScrollId and * aPresShellId identify the scroll frame that content chose to scroll. * Returns whether we were successfully able to notify APZ. * If this function returns true, APZ (which may live in another process) * may still reject the autoscroll, but it's then APZ's reponsibility * to notify content via an \"autoscroll-rejected-by-apz\" message. */`",87,null],[11,"StopApzAutoscroll","","`text /** * Notify APZ to stop autoscrolling. * aScrollId and aPresShellId identify the scroll frame that is being * autoscrolled. */`",87,{"inputs":[{"name":"self"},{"name":"nsviewid"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",88,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJSInspector` to one of its base interfaces.",88,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",88,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ExitNestedEventLoop","","`text /** * Stop the youngest running enterNestedEventLoop call, asking it to return * once it has finished processing the current event. * * The name 'exitNestedEventLoop' may be misleading if read too literally. * The affected event loop does not return immediately when this method is * called. Rather, this method simply returns to its caller; the affected * loop's current event handler is allowed to run to completion; and then * that loop returns without processing any more events. * * This method ignores loops that have already been stopped, and operates on * the youngest loop that is still running. Each call to this method stops * another running loop. * * @return depth The number of running enterNestedEventLoop calls * remaining, now that one has been stopped. * * @throws NS_ERROR_FAILURE if there are no running enterNestedEventLoop calls. */`",88,null],[11,"GetEventLoopNestLevel","","`text /** * The number of running enterNestedEventLoop calls on the stack. * This count does not include stopped enterNestedEventLoop calls. */`",88,null],[11,"addref","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",89,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpAuthenticator` to one of its base interfaces.",89,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",89,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"USING_INTERNAL_IDENTITY","","`text /** * Generate flags */ /** * Indicates that the authenticator has used an out-of-band or internal * source of identity and tells the consumer that it must not cache * the returned identity because it might not be valid and would overwrite * the cached identity. See bug 542318 comment 32. */`",89,null],[18,"REQUEST_BASED","","`text /** * A request based authentication scheme only authenticates an individual * request (or a set of requests under the same authentication domain as * defined by RFC 2617). BASIC and DIGEST are request based authentication * schemes. */`",89,null],[18,"CONNECTION_BASED","","`text /** * A connection based authentication scheme authenticates an individual * connection. Multiple requests may be issued over the connection without * repeating the authentication steps. Connection based authentication * schemes can associate state with the connection being authenticated via * the aContinuationState parameter (see generateCredentials). */`",89,null],[18,"REUSABLE_CREDENTIALS","","`text /** * The credentials returned from generateCredentials may be reused with any * other URLs within \"the protection space\" as defined by RFC 2617 section * 1.2. If this flag is not set, then generateCredentials must be called * for each request within the protection space. REUSABLE_CREDENTIALS * implies REUSABLE_CHALLENGE. */`",89,null],[18,"REUSABLE_CHALLENGE","","`text /** * A challenge may be reused to later generate credentials in anticipation * of a duplicate server challenge for URLs within \"the protection space\" * as defined by RFC 2617 section 1.2. */`",89,null],[18,"IDENTITY_IGNORED","","`text /** * This flag indicates that the identity of the user is not required by * this authentication scheme. */`",89,null],[18,"IDENTITY_INCLUDES_DOMAIN","","`text /** * This flag indicates that the identity of the user includes a domain * attribute that the user must supply. */`",89,null],[18,"IDENTITY_ENCRYPTED","","`text /** * This flag indicates that the identity will be sent encrypted. It does * not make sense to combine this flag with IDENTITY_IGNORED. */`",89,null],[11,"ChallengeReceived","","`text /** * Upon receipt of a server challenge, this function is called to determine * whether or not the current user identity has been rejected. If true, * then the user will be prompted by the channel to enter (or revise) their * identity. Following this, generateCredentials will be called. * * If the IDENTITY_IGNORED auth flag is set, then the aInvalidateIdentity * return value will be ignored, and user prompting will be suppressed. * * @param aChannel * the http channel that received the challenge. * @param aChallenge * the challenge from the WWW-Authenticate/Proxy-Authenticate * server response header. (possibly from the auth cache.) * @param aProxyAuth * flag indicating whether or not aChallenge is from a proxy. * @param aSessionState * see description below for generateCredentials. * @param aContinuationState * see description below for generateCredentials. * @param aInvalidateIdentity * return value indicating whether or not to prompt the user for a * revised identity. */`",89,null],[11,"GenerateCredentialsAsync","","`text /** * Called to generate the authentication credentials for a particular * server/proxy challenge asynchronously. Credentials will be sent back * to the server via an Authorization/Proxy-Authorization header. * * @param aChannel * the http channel requesting credentials * @param aCallback * callback function to be called when credentials are available * @param aChallenge * the challenge from the WWW-Authenticate/Proxy-Authenticate * server response header. (possibly from the auth cache.) * @param aProxyAuth * flag indicating whether or not aChallenge is from a proxy. * @param aDomain * string containing the domain name (if appropriate) * @param aUser * string containing the user name * @param aPassword * string containing the password * @param aSessionState * state stored along side the user's identity in the auth cache * for the lifetime of the browser session. if a new auth cache * entry is created for this challenge, then this parameter will * be null. on return, the result will be stored in the new auth * cache entry. this parameter is non-null when an auth cache entry * is being reused. currently modification of session state is not * communicated to caller, thus caching credentials obtained by * asynchronous way is not supported. * @param aContinuationState * state held by the channel between consecutive calls to * generateCredentials, assuming multiple calls are required * to authenticate. this state is held for at most the lifetime of * the channel. * @pram aCancel * returns cancellable runnable object which caller can use to cancel * calling aCallback when finished. */`",89,null],[11,"GenerateCredentials","","`text /** * Called to generate the authentication credentials for a particular * server/proxy challenge. This is the value that will be sent back * to the server via an Authorization/Proxy-Authorization header. * * This function may be called using a cached challenge provided the * authenticator sets the REUSABLE_CHALLENGE flag. * * @param aChannel * the http channel requesting credentials * @param aChallenge * the challenge from the WWW-Authenticate/Proxy-Authenticate * server response header. (possibly from the auth cache.) * @param aProxyAuth * flag indicating whether or not aChallenge is from a proxy. * @param aDomain * string containing the domain name (if appropriate) * @param aUser * string containing the user name * @param aPassword * string containing the password * @param aSessionState * state stored along side the user's identity in the auth cache * for the lifetime of the browser session. if a new auth cache * entry is created for this challenge, then this parameter will * be null. on return, the result will be stored in the new auth * cache entry. this parameter is non-null when an auth cache entry * is being reused. * @param aContinuationState * state held by the channel between consecutive calls to * generateCredentials, assuming multiple calls are required * to authenticate. this state is held for at most the lifetime of * the channel. * @param aFlags * authenticator may return one of the generate flags bellow. */`",89,null],[11,"GetAuthFlags","","`text /** * Flags defining various properties of the authenticator. */`",89,null],[11,"addref","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",90,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrefBranch` to one of its base interfaces.",90,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",90,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PREF_INVALID","","`text /** * Values describing the basic preference types. * * @see getPrefType */`",90,null],[18,"PREF_STRING","","",90,null],[18,"PREF_INT","","",90,null],[18,"PREF_BOOL","","",90,null],[11,"GetRoot","","`text /** * Called to get the root on which this branch is based, such as * \"browser.startup.\" */`",90,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPrefType","","`text /** * Called to determine the type of a specific preference. * * @param aPrefName The preference to get the type of. * * @return long A value representing the type of the preference. This * value will be PREF_STRING, PREF_INT, or PREF_BOOL. */`",90,null],[11,"GetBoolPref","","`[binaryname(GetBoolPref),noscript] boolean getBoolPrefXPCOM (in string aPrefName);`",90,null],[11,"SetBoolPref","","`text /** * Called to set the state of an individual boolean preference. * * @param aPrefName The boolean preference to set the state of. * @param aValue The boolean value to set the preference to. * * @throws Error if setting failed or the preference has a default value of a type other than boolean. * * @see getBoolPref */`",90,null],[11,"GetFloatPref","","`[binaryname(GetFloatPref),noscript] float getFloatPrefXPCOM (in string aPrefName);`",90,null],[11,"GetCharPref","","`[binaryname(GetCharPref),noscript] ACString getCharPrefXPCOM (in string aPrefName);`",90,null],[11,"SetCharPref","","`text /** * Called to set the state of an individual ascii string preference. * * @param aPrefName The string preference to set. * @param aValue The string value to set the preference to. * * @throws Error if setting failed or the preference has a default value of a type other than string. * * @see getCharPref */`",90,null],[11,"SetStringPref","","`text /** * Called to set the state of an individual unicode string preference. * * @param aPrefName The string preference to set. * @param aValue The string value to set the preference to. * * @throws Error if setting failed or the preference has a default value of a type other than string. * * @see getStringPref */`",90,null],[11,"GetIntPref","","`[binaryname(GetIntPref),noscript] long getIntPrefXPCOM (in string aPrefName);`",90,null],[11,"SetIntPref","","`text /** * Called to set the state of an individual integer preference. * * @param aPrefName The integer preference to set the value of. * @param aValue The integer value to set the preference to. * * @throws Error if setting failed or the preference has a default value of a type other than integer. * * @see getIntPref */`",90,null],[11,"GetComplexValue","","`text /** * Called to get the state of an individual complex preference. A complex * preference is a preference which represents an XPCOM object that can not * be easily represented using a standard boolean, integer or string value. * * @param aPrefName The complex preference to get the value of. * @param aType The XPCOM interface that this complex preference * represents. Interfaces currently supported are: * - nsIFile * - nsIPrefLocalizedString (Localized UniChar) * @param aValue The XPCOM object into which to the complex preference * value should be retrieved. * * @throws Error The value does not exist or is the wrong type. * * @see setComplexValue */`",90,null],[11,"SetComplexValue","","`text /** * Called to set the state of an individual complex preference. A complex * preference is a preference which represents an XPCOM object that can not * be easily represented using a standard boolean, integer or string value. * * @param aPrefName The complex preference to set the value of. * @param aType The XPCOM interface that this complex preference * represents. Interfaces currently supported are: * - nsIFile * - nsISupportsString (UniChar) * (deprecated; see setStringPref) * - nsIPrefLocalizedString (Localized UniChar) * @param aValue The XPCOM object from which to set the complex preference * value. * * @throws Error if setting failed or the value is the wrong type. * * @see getComplexValue */`",90,null],[11,"ClearUserPref","","`text /** * Called to clear a user set value from a specific preference. This will, in * effect, reset the value to the default value. If no default value exists * the preference will cease to exist. * * @param aPrefName The preference to be cleared. * * @note * This method does nothing if this object is a default branch. */`",90,null],[11,"LockPref","","`text /** * Called to lock a specific preference. Locking a preference will cause the * preference service to always return the default value regardless of * whether there is a user set value or not. * * @param aPrefName The preference to be locked. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on the default branch. * * @throws Error The preference does not exist or an error occurred. * * @see unlockPref */`",90,null],[11,"PrefHasUserValue","","`text /** * Called to check if a specific preference has a user value associated to * it. * * @param aPrefName The preference to be tested. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on the user branch. * * @note * If a preference was manually set to a value that equals the default value, * then the preference no longer has a user set value, i.e. it is * considered reset to its default value. * In particular, this method will return false for such a preference and * the preference will not be saved to a file by nsIPrefService.savePrefFile. * * @return boolean true The preference has a user set value. * false The preference only has a default value. */`",90,null],[11,"PrefIsLocked","","`text /** * Called to check if a specific preference is locked. If a preference is * locked calling its Get method will always return the default value. * * @param aPrefName The preference to be tested. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on the default branch. * * @return boolean true The preference is locked. * false The preference is not locked. * * @see lockPref * @see unlockPref */`",90,null],[11,"UnlockPref","","`text /** * Called to unlock a specific preference. Unlocking a previously locked * preference allows the preference service to once again return the user set * value of the preference. * * @param aPrefName The preference to be unlocked. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on the default branch. * * @throws Error The preference does not exist or an error occurred. * * @see lockPref */`",90,null],[11,"DeleteBranch","","`text /** * Called to remove all of the preferences referenced by this branch. * * @param aStartingAt The point on the branch at which to start the deleting * preferences. Pass in \"\" to remove all preferences * referenced by this branch. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on both. * * @throws Error The preference(s) do not exist or an error occurred. */`",90,null],[11,"GetChildList","","`text /** * Returns an array of strings representing the child preferences of the * root of this branch. * * @param aStartingAt The point on the branch at which to start enumerating * the child preferences. Pass in \"\" to enumerate all * preferences referenced by this branch. * @param aCount Receives the number of elements in the array. * @param aChildArray Receives the array of child preferences. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on both. * * @throws Error The preference(s) do not exist or an error occurred. */`",90,null],[11,"ResetBranch","","`text /** * Called to reset all of the preferences referenced by this branch to their * default values. * * @param aStartingAt The point on the branch at which to start the resetting * preferences to their default values. Pass in \"\" to * reset all preferences referenced by this branch. * * @note * This method can be called on either a default or user branch but, in * effect, always operates on the user branch. * * @throws Error The preference(s) do not exist or an error occurred. */`",90,null],[11,"AddObserver","","`text /** * Add a preference change observer. On preference changes, the following * arguments will be passed to the nsIObserver.observe() method: * aSubject - The nsIPrefBranch object (this) * aTopic - The string defined by NS_PREFBRANCH_PREFCHANGE_TOPIC_ID * aData - The name of the preference which has changed, relative to * the |root| of the aSubject branch. * * aSubject.get*Pref(aData) will get the new value of the modified * preference. For example, if your observer is registered with * addObserver(\"bar.\", ...) on a branch with root \"foo.\", modifying * the preference \"foo.bar.baz\" will trigger the observer, and aData * parameter will be \"bar.baz\". * * @param aDomain The preference on which to listen for changes. This can * be the name of an entire branch to observe. * e.g. Holding the \"root\" prefbranch and calling * addObserver(\"foo.bar.\", ...) will observe changes to * foo.bar.baz and foo.bar.bzip * @param aObserver The object to be notified if the preference changes. * @param aHoldWeak true Hold a weak reference to |aObserver|. The object * must implement the nsISupportsWeakReference * interface or this will fail. * false Hold a strong reference to |aObserver|. * * @note * Registering as a preference observer can open an object to potential * cyclical references which will cause memory leaks. These cycles generally * occur because an object both registers itself as an observer (causing the * branch to hold a reference to the observer) and holds a reference to the * branch object for the purpose of getting/setting preference values. There * are 3 approaches which have been implemented in an attempt to avoid these * situations. * 1) The nsPrefBranch object supports nsISupportsWeakReference. Any consumer * may hold a weak reference to it instead of a strong one. * 2) The nsPrefBranch object listens for xpcom-shutdown and frees all of the * objects currently in its observer list. This ensures that long lived * objects (services for example) will be freed correctly. * 3) The observer can request to be held as a weak reference when it is * registered. This insures that shorter lived objects (say one tied to an * open window) will not fall into the cyclical reference trap. * * @note * The list of registered observers may be changed during the dispatch of * nsPref:changed notification. However, the observers are not guaranteed * to be notified in any particular order, so you can't be sure whether the * added/removed observer will be called during the notification when it * is added/removed. * * @note * It is possible to change preferences during the notification. * * @note * It is not safe to change observers during this callback in Gecko * releases before 1.9. If you want a safe way to remove a pref observer, * please use an nsITimer. * * @see nsIObserver * @see removeObserver */`",90,null],[11,"RemoveObserver","","`text /** * Remove a preference change observer. * * @param aDomain The preference which is being observed for changes. * @param aObserver An observer previously registered with addObserver(). * * @note * Note that you must call removeObserver() on the same nsIPrefBranch * instance on which you called addObserver() in order to remove aObserver; * otherwise, the observer will not be removed. * * @see nsIObserver * @see addObserver */`",90,null],[11,"addref","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",91,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThread` to one of its base interfaces.",91,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",91,{"inputs":[{"name":"self"}],"output":{"name":"nsiserialeventtarget"}}],[11,"GetCanInvokeJS","","`text /** * @returns * Whether or not this thread may call into JS. Used in the profiler * to avoid some unnecessary locking. */`",91,null],[11,"SetCanInvokeJS","","`text /** * @returns * Whether or not this thread may call into JS. Used in the profiler * to avoid some unnecessary locking. */`",91,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Shutdown","","`text /** * Shutdown the thread. This method prevents further dispatch of events to * the thread, and it causes any pending events to run to completion before * the thread joins (see PR_JoinThread) with the current thread. During this * method call, events for the current thread may be processed. * * This method MAY NOT be executed from the thread itself. Instead, it is * meant to be executed from another thread (usually the thread that created * this thread or the main application thread). When this function returns, * the thread will be shutdown, and it will no longer be possible to dispatch * events to the thread. * * @throws NS_ERROR_UNEXPECTED * Indicates that this method was erroneously called when this thread was * the current thread, that this thread was not created with a call to * nsIThreadManager::NewThread, or if this method was called more than once * on the thread object. */`",91,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HasPendingEvents","","`text /** * This method may be called to determine if there are any events ready to be * processed. It may only be called when this thread is the current thread. * * Because events may be added to this thread by another thread, a \"false\" * result does not mean that this thread has no pending events. It only * means that there were no pending events when this method was called. * * @returns * A boolean value that if \"true\" indicates that this thread has one or * more pending events. * * @throws NS_ERROR_UNEXPECTED * Indicates that this method was erroneously called when this thread was * not the current thread. */`",91,null],[11,"ProcessNextEvent","","`text /** * Process the next event. If there are no pending events, then this method * may wait -- depending on the value of the mayWait parameter -- until an * event is dispatched to this thread. This method is re-entrant but may * only be called if this thread is the current thread. * * @param mayWait * A boolean parameter that if \"true\" indicates that the method may block * the calling thread to wait for a pending event. * * @returns * A boolean value that if \"true\" indicates that an event was processed. * * @throws NS_ERROR_UNEXPECTED * Indicates that this method was erroneously called when this thread was * not the current thread. */`",91,null],[11,"AsyncShutdown","","`text /** * Shutdown the thread asynchronously. This method immediately prevents * further dispatch of events to the thread, and it causes any pending events * to run to completion before this thread joins with the current thread. * * UNLIKE shutdown() this does not process events on the current thread. * Instead it merely ensures that the current thread continues running until * this thread has shut down. * * This method MAY NOT be executed from the thread itself. Instead, it is * meant to be executed from another thread (usually the thread that created * this thread or the main application thread). When this function returns, * the thread will continue running until it exhausts its event queue. * * @throws NS_ERROR_UNEXPECTED * Indicates that this method was erroneously called when this thread was * the current thread, that this thread was not created with a call to * nsIThreadManager::NewThread, or if this method was called more than once * on the thread object. */`",91,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEventTarget","","`text /** * Use this attribute to dispatch runnables to the thread. Eventually, the * eventTarget attribute will be the only way to dispatch events to a * thread--nsIThread will no longer inherit from nsIEventTarget. */`",91,null],[11,"addref","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",92,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMChromeWindow` to one of its base interfaces.",92,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",92,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBrowserDOMWindow","","`text /** * browserDOMWindow provides access to yet another layer of * utility functions implemented by chrome script. It will be null * for DOMWindows not corresponding to browsers. */`",92,null],[11,"GetMessageManager","","`[noscript] readonly attribute nsIMessageBroadcaster messageManager;`",92,null],[11,"GetGroupMessageManager","","`text /** * Returns the message manager identified by the given group name that * manages all frame loaders belonging to that group. */`",92,null],[11,"addref","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",93,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFTPChannel` to one of its base interfaces.",93,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",93,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLastModifiedTime","","`attribute PRTime lastModifiedTime;`",93,null],[11,"SetLastModifiedTime","","`attribute PRTime lastModifiedTime;`",93,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"addref","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",94,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFTPEventSink` to one of its base interfaces.",94,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",94,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnFTPControlLog","","`text /** * XXX document this method! (see bug 328915) */`",94,null],[11,"addref","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",95,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompletePopup` to one of its base interfaces.",95,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",95,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"INVALIDATE_REASON_NEW_RESULT","","",95,null],[18,"INVALIDATE_REASON_DELETE","","",95,null],[11,"GetInput","","`readonly attribute nsIAutoCompleteInput input;`",95,null],[11,"GetOverrideValue","","`readonly attribute AString overrideValue;`",95,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSelectedIndex","","`attribute long selectedIndex;`",95,null],[11,"SetSelectedIndex","","`attribute long selectedIndex;`",95,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetPopupOpen","","`readonly attribute boolean popupOpen;`",95,null],[11,"OpenAutocompletePopup","","`void openAutocompletePopup (in nsIAutoCompleteInput input, in nsIDOMElement element);`",95,null],[11,"ClosePopup","","`void closePopup ();`",95,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Invalidate","","`void invalidate (in unsigned short reason);`",95,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"SelectBy","","`void selectBy (in boolean reverse, in boolean page);`",95,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",96,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginInfo` to one of its base interfaces.",96,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",96,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetHostname","","`text /** * The hostname the login applies to. * * The hostname should be formatted as an URL. For example, * \"https://site.com\", \"http://site.com:1234\", \"ftp://ftp.site.com\". */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetHostname","","`text /** * The hostname the login applies to. * * The hostname should be formatted as an URL. For example, * \"https://site.com\", \"http://site.com:1234\", \"ftp://ftp.site.com\". */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFormSubmitURL","","`text /** * The URL a form-based login was submitted to. * * For logins obtained from HTML forms, this field is the |action| * attribute from the |form| element, with the path removed. For * example \"http://www.site.com\". [Forms with no |action| attribute * default to submitting to their origin URL, so we store that.] * * For logins obtained from a HTTP or FTP protocol authentication, * this field is NULL. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFormSubmitURL","","`text /** * The URL a form-based login was submitted to. * * For logins obtained from HTML forms, this field is the |action| * attribute from the |form| element, with the path removed. For * example \"http://www.site.com\". [Forms with no |action| attribute * default to submitting to their origin URL, so we store that.] * * For logins obtained from a HTTP or FTP protocol authentication, * this field is NULL. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHttpRealm","","`text /** * The HTTP Realm a login was requested for. * * When an HTTP server sends a 401 result, the WWW-Authenticate * header includes a realm to identify the \"protection space.\" See * RFC2617. If the response sent has a missing or blank realm, the * hostname is used instead. * * For logins obtained from HTML forms, this field is NULL. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetHttpRealm","","`text /** * The HTTP Realm a login was requested for. * * When an HTTP server sends a 401 result, the WWW-Authenticate * header includes a realm to identify the \"protection space.\" See * RFC2617. If the response sent has a missing or blank realm, the * hostname is used instead. * * For logins obtained from HTML forms, this field is NULL. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUsername","","`text /** * The username for the login. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetUsername","","`text /** * The username for the login. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUsernameField","","`text /** * The |name| attribute for the username input field. * * For logins obtained from a HTTP or FTP protocol authentication, * this field is an empty string. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetUsernameField","","`text /** * The |name| attribute for the username input field. * * For logins obtained from a HTTP or FTP protocol authentication, * this field is an empty string. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPassword","","`text /** * The password for the login. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPassword","","`text /** * The password for the login. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPasswordField","","`text /** * The |name| attribute for the password input field. * * For logins obtained from a HTTP or FTP protocol authentication, * this field is an empty string. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPasswordField","","`text /** * The |name| attribute for the password input field. * * For logins obtained from a HTTP or FTP protocol authentication, * this field is an empty string. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * Initialize a newly created nsLoginInfo object. * * The arguments are the fields for the new object. */`",96,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Equals","","`text /** * Test for strict equality with another nsILoginInfo object. * * @param aLoginInfo * The other object to test. */`",96,null],[11,"Matches","","`text /** * Test for loose equivalency with another nsILoginInfo object. The * passwordField and usernameField values are ignored, and the password * values may be optionally ignored. If one login's formSubmitURL is an * empty string (but not null), it will be treated as a wildcard. [The * blank value indicates the login was stored before bug 360493 was fixed.] * * @param aLoginInfo * The other object to test. * @param ignorePassword * If true, ignore the password when checking for match. */`",96,null],[11,"Clone","","`text /** * Create an identical copy of the login, duplicating all of the login's * nsILoginInfo and nsILoginMetaInfo properties. * * This allows code to be forwards-compatible, when additional properties * are added to nsILoginMetaInfo (or nsILoginInfo) in the future. */`",96,null],[11,"addref","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",97,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMPaintRequest` to one of its base interfaces.",97,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",97,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClientRect","","`text /** * The client rect where invalidation was triggered. */`",97,null],[11,"GetXPCOMReason","","`text /** * The reason for the request, as a string. If an empty string, then we don't know * the reason (this is common). Reasons include \"scroll repaint\", meaning that we * needed to repaint the rectangle due to scrolling, and \"scroll copy\", meaning * that we updated the rectangle due to scrolling but instead of painting * manually, we were able to do a copy from another area of the screen. */`",97,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",98,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStyleSheetService` to one of its base interfaces.",98,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",98,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"AGENT_SHEET","","",98,null],[18,"USER_SHEET","","",98,null],[18,"AUTHOR_SHEET","","",98,null],[11,"LoadAndRegisterSheet","","`text /** * Synchronously loads a style sheet from |sheetURI| and adds it to the list * of user or agent style sheets. * * A user sheet loaded via this API will come before userContent.css and * userChrome.css in the cascade (so the rules in it will have lower * precedence than rules in those sheets). * * An agent sheet loaded via this API will come after ua.css in the cascade * (so the rules in it will have higher precedence than rules in ua.css). * * The relative ordering of two user or two agent sheets loaded via * this API is undefined. * * Sheets added via this API take effect on all documents, including * already-loaded ones, immediately. */`",98,null],[11,"SheetRegistered","","`text /** * Returns true if a style sheet at |sheetURI| has previously been * added to the list of style sheets specified by |type|. */`",98,null],[11,"PreloadSheet","","`text /** * Synchronously loads a style sheet from |sheetURI| and returns the * new style sheet object. Can be used with nsIDOMWindowUtils.addSheet. */`",98,null],[11,"UnregisterSheet","","`text /** * Remove the style sheet at |sheetURI| from the list of style sheets * specified by |type|. The removal takes effect immediately, even for * already-loaded documents. */`",98,null],[11,"addref","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",99,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpChannelChild` to one of its base interfaces.",99,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",99,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddCookiesToRequest","","`[must_use] void addCookiesToRequest ();`",99,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ForceIntercepted","","`[must_use] void forceIntercepted (in boolean postRedirectChannelShouldIntercept, in boolean postRedirectChannelShouldUpgrade);`",99,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveCorsPreflightCacheEntry","","`[must_use] void removeCorsPreflightCacheEntry (in nsIURI aURI, in nsIPrincipal aRequestingPrincipal);`",99,null],[11,"addref","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",100,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocShellTreeOwner` to one of its base interfaces.",100,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",100,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ContentShellAdded","","`text /** * Called when a content shell is added to the docshell tree. This is * _only_ called for \"root\" content shells (that is, ones whose parent is a * chrome shell). * * @param aContentShell the shell being added. * @param aPrimary whether the shell is primary. */`",100,null],[11,"ContentShellRemoved","","`text /** * Called when a content shell is removed from the docshell tree. This is * _only_ called for \"root\" content shells (that is, ones whose parent is a * chrome shell). Note that if aContentShell was never added, * contentShellRemoved should just do nothing. * * @param aContentShell the shell being removed. */`",100,null],[11,"GetPrimaryContentShell","","`readonly attribute nsIDocShellTreeItem primaryContentShell;`",100,null],[11,"TabParentAdded","","`void tabParentAdded (in nsITabParent aTab, in boolean aPrimary);`",100,null],[11,"TabParentRemoved","","`void tabParentRemoved (in nsITabParent aTab);`",100,null],[11,"GetPrimaryTabParent","","`readonly attribute nsITabParent primaryTabParent;`",100,null],[11,"SizeShellTo","","`void sizeShellTo (in nsIDocShellTreeItem shell, in long cx, in long cy);`",100,null],[11,"GetPrimaryContentSize","","`void getPrimaryContentSize (out long width, out long height);`",100,null],[11,"SetPrimaryContentSize","","`void setPrimaryContentSize (in long width, in long height);`",100,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetRootShellSize","","`void getRootShellSize (out long width, out long height);`",100,null],[11,"SetRootShellSize","","`void setRootShellSize (in long width, in long height);`",100,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetPersistence","","`void setPersistence (in boolean aPersistPosition, in boolean aPersistSize, in boolean aPersistSizeMode);`",100,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPersistence","","`void getPersistence (out boolean aPersistPosition, out boolean aPersistSize, out boolean aPersistSizeMode);`",100,null],[11,"GetTabCount","","`readonly attribute unsigned long tabCount;`",100,null],[11,"GetHasPrimaryContent","","`readonly attribute bool hasPrimaryContent;`",100,null],[11,"addref","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",101,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocCharset` to one of its base interfaces.",101,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",101,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",102,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIncrementalDownload` to one of its base interfaces.",102,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",102,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[11,"Init","","`text /** * Initialize the incremental download object. If the destination file * already exists, then only the remaining portion of the file will be * fetched. * * NOTE: The downloader will create the destination file if it does not * already exist. It will create the file with the permissions 0600 if * needed. To affect the permissions of the file, consumers of this * interface may create an empty file at the specified destination prior to * starting the incremental download. * * NOTE: Since this class may create a temporary file at the specified * destination, it is advisable for the consumer of this interface to specify * a file name for the destination that would not tempt the user into * double-clicking it. For example, it might be wise to append a file * extension like \".part\" to the end of the destination to protect users from * accidentally running \"blah.exe\" before it is a complete file. * * @param uri * The URI to fetch. * @param destination * The location where the file is to be stored. * @param chunkSize * The size of the chunks to fetch. A non-positive value results in * the default chunk size being used. * @param intervalInSeconds * The amount of time to wait between fetching chunks. Pass a * negative to use the default interval, or 0 to fetch the remaining * part of the file in one chunk. */`",102,null],[11,"GetURI","","`text /** * The URI being fetched. */`",102,null],[11,"GetFinalURI","","`text /** * The URI being fetched after any redirects have been followed. This * attribute is set just prior to calling OnStartRequest on the observer * passed to the start method. */`",102,null],[11,"GetDestination","","`text /** * The file where the download is being written. */`",102,null],[11,"GetTotalSize","","`text /** * The total number of bytes for the requested file. This attribute is set * just prior to calling OnStartRequest on the observer passed to the start * method. * * This attribute has a value of -1 if the total size is unknown. */`",102,null],[11,"GetCurrentSize","","`text /** * The current number of bytes downloaded so far. This attribute is set just * prior to calling OnStartRequest on the observer passed to the start * method. * * This attribute has a value of -1 if the current size is unknown. */`",102,null],[11,"Start","","`text /** * Start the incremental download. * * @param observer * An observer to be notified of various events. OnStartRequest is * called when finalURI and totalSize have been determined or when an * error occurs. OnStopRequest is called when the file is completely * downloaded or when an error occurs. If this object implements * nsIProgressEventSink, then its OnProgress method will be called as * data is written to the destination file. If this object implements * nsIInterfaceRequestor, then it will be assigned as the underlying * channel's notification callbacks, which allows it to provide a * nsIAuthPrompt implementation if needed by the channel, for example. * @param ctxt * User defined object forwarded to the observer's methods. */`",102,null],[11,"addref","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",103,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIAsyncFavicons` to one of its base interfaces.",103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",103,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetAndFetchFaviconForPage","","`text /** * Declares that a given page uses a favicon with the given URI and * attempts to fetch and save the icon data by loading the favicon URI * through an async network request. * * If the icon data already exists, we won't try to reload the icon unless * aForceReload is true. Similarly, if the icon is in the failed favicon * cache we won't do anything unless aForceReload is true, in which case * we'll try to reload the favicon. * * This function will only save favicons for pages that are already stored in * the database, like visited pages or bookmarks. For any other URIs, it * will succeed but do nothing. This function will also ignore the error * page favicon URI (see FAVICON_ERRORPAGE_URL below). * * Icons that fail to load will automatically be added to the failed favicon * cache, and this function will not save favicons for non-bookmarked URIs * when history is disabled. * * @note This function is identical to * nsIFaviconService::setAndLoadFaviconForPage. * * @param aPageURI * URI of the page whose favicon is being set. * @param aFaviconURI * URI of the favicon to associate with the page. * @param aForceReload * If aForceReload is false, we try to reload the favicon only if we * don't have it or it has expired from the cache. Setting * aForceReload to true causes us to reload the favicon even if we * have a usable copy. * @param aFaviconLoadType * Set to FAVICON_LOAD_PRIVATE if the favicon is loaded from a private * browsing window. Set to FAVICON_LOAD_NON_PRIVATE otherwise. * @param [optional] aCallback * Once we're done setting and/or fetching the favicon, we invoke this * callback. * @param [optional] aLoadingPrincipal * Principal of the page whose favicon is being set. If this argument * is omitted, the loadingPrincipal defaults to the nullPrincipal. * @param [optional] aRequestContextID * used to inform Necko of how to link the * favicon request with other requests in the same tab. * * @see nsIFaviconDataCallback in nsIFaviconService.idl. */`",103,null],[11,"ReplaceFaviconData","","`text /** * Sets the data for a given favicon URI either by replacing existing data in * the database or taking the place of otherwise fetched icon data when * calling setAndFetchFaviconForPage later. * * Favicon data for favicon URIs that are not associated with a page URI via * setAndFetchFaviconForPage will be stored in memory, but may be expired at * any time, so you should make an effort to associate favicon URIs with page * URIs as soon as possible. * * It's better to not use this function for chrome: icon URIs since you can * reference the chrome image yourself. getFaviconLinkForIcon/Page will ignore * any associated data if the favicon URI is \"chrome:\" and just return the * same chrome URI. * * This function does NOT send out notifications that the data has changed. * Pages using this favicons that are visible in history or bookmarks views * will keep the old icon until they have been refreshed by other means. * * This function tries to optimize the favicon size, if it is bigger * than a defined limit we will try to convert it to a 16x16 png image. * If the conversion fails and favicon is still bigger than our max accepted * size it won't be saved. * * @param aFaviconURI * URI of the favicon whose data is being set. * @param aData * Binary contents of the favicon to save * @param aDataLength * Length of binary data * @param aMimeType * MIME type of the data to store. This is important so that we know * what to report when the favicon is used. You should always set this * param unless you are clearing an icon. * @param [optional] aExpiration * Time in microseconds since the epoch when this favicon expires. * Until this time, we won't try to load it again. * @throws NS_ERROR_FAILURE * Thrown if the favicon is overbloated and won't be saved to the db. */`",103,null],[11,"ReplaceFaviconDataFromDataURL","","`text /** * Same as replaceFaviconData but the data is provided by a string * containing a data URL. * * @see replaceFaviconData * * @param aFaviconURI * URI of the favicon whose data is being set. * @param aDataURL * string containing a data URL that represents the contents of * the favicon to save * @param [optional] aExpiration * Time in microseconds since the epoch when this favicon expires. * Until this time, we won't try to load it again. * @param [optional] aLoadingPrincipal * Principal of the page whose favicon is being set. If this argument * is omitted, the loadingPrincipal defaults to the nullPrincipal. * @throws NS_ERROR_FAILURE * Thrown if the favicon is overbloated and won't be saved to the db. */`",103,null],[11,"GetFaviconURLForPage","","`text /** * Retrieves the favicon URI associated to the given page, if any. * * @param aPageURI * URI of the page whose favicon URI we're looking up. * @param aCallback * This callback is always invoked to notify the result of the lookup. * The aURI parameter will be the favicon URI, or null when no favicon * is associated with the page or an error occurred while fetching it. * aDataLen will be always 0, aData will be an empty array, and * aMimeType will be an empty string, regardless of whether a favicon * was found. * @param [optional] aPreferredWidth * The preferred icon width, 0 for the biggest available. * * @note If a favicon specific to this page cannot be found, this will try to * fallback to the /favicon.ico for the root domain. * * @see nsIFaviconDataCallback in nsIFaviconService.idl. */`",103,null],[11,"GetFaviconDataForPage","","`text /** * Retrieves the favicon URI and data associated to the given page, if any. * If the page icon is not available, it will try to return the root domain * icon data, when it's known. * * @param aPageURI * URI of the page whose favicon URI and data we're looking up. * @param aCallback * This callback is always invoked to notify the result of the lookup. The aURI * parameter will be the favicon URI, or null when no favicon is * associated with the page or an error occurred while fetching it. If * aURI is not null, the other parameters may contain the favicon data. * However, if no favicon data is currently associated with the favicon * URI, aDataLen will be 0, aData will be an empty array, and aMimeType * will be an empty string. * @param [optional] aPreferredWidth * The preferred icon width, 0 for the biggest available. * @note If a favicon specific to this page cannot be found, this will try to * fallback to the /favicon.ico for the root domain. * * @see nsIFaviconDataCallback in nsIFaviconService.idl. */`",103,null],[11,"CopyFavicons","","`text /** * Copies cached favicons from a page to another one. * * @param aFromPageURI * URI of the originating page. * @param aToPageURI * URI of the destination page. * @param aFaviconLoadType * Set to FAVICON_LOAD_PRIVATE if the copy is started from a private * browsing window. Set to FAVICON_LOAD_NON_PRIVATE otherwise. * @param [optional] aCallback * Once we're done copying the favicon, we invoke this callback. * If a copy has been done, the callback will report one of the * favicons uri as aFaviconURI, otherwise all the params will be null. */`",103,null],[11,"addref","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",104,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAboutModule` to one of its base interfaces.",104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",104,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"URI_SAFE_FOR_UNTRUSTED_CONTENT","","`text /** * A flag that indicates whether a URI should be run with content * privileges. If it is, the about: protocol handler will enforce that * the principal of channels created for it be based on their * originalURI or URI (depending on the channel flags), by setting * their \"owner\" to null. * If content needs to be able to link to this URI, specify * URI_CONTENT_LINKABLE as well. */`",104,null],[18,"ALLOW_SCRIPT","","`text /** * A flag that indicates whether script should be enabled for the * given about: URI even if it's disabled in general. */`",104,null],[18,"HIDE_FROM_ABOUTABOUT","","`text /** * A flag that indicates whether this about: URI doesn't want to be listed * in about:about, especially if it's not useful without a query string. */`",104,null],[18,"ENABLE_INDEXED_DB","","`text /** * A flag that indicates whether this about: URI wants Indexed DB enabled. */`",104,null],[18,"URI_CAN_LOAD_IN_CHILD","","`text /** * A flag that indicates that this URI can be loaded in a child process */`",104,null],[18,"URI_MUST_LOAD_IN_CHILD","","`text /** * A flag that indicates that this URI must be loaded in a child process */`",104,null],[18,"MAKE_UNLINKABLE","","`text /** * Obsolete. This flag no longer has any effect and will be removed in future. */`",104,null],[18,"MAKE_LINKABLE","","`text /** * A flag that indicates that this URI should be linkable from content. * Ignored unless URI_SAFE_FOR_UNTRUSTED_CONTENT is also specified. */`",104,null],[11,"NewChannel","","`text /** * Constructs a new channel for the about protocol module. * * @param aURI the uri of the new channel * @param aLoadInfo the loadinfo of the new channel */`",104,null],[11,"GetURIFlags","","`text /** * A method to get the flags that apply to a given about: URI. The URI * passed in is guaranteed to be one of the URIs that this module * registered to deal with. */`",104,null],[11,"addref","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",105,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWifiListener` to one of its base interfaces.",105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",105,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnChange","","`void onChange ([array, size_is (aLen)] in nsIWifiAccessPoint accessPoints, in unsigned long aLen);`",105,null],[11,"OnError","","`void onError (in nsresult error);`",105,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",106,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHangDetails` to one of its base interfaces.",106,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",106,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDuration","","`text /** * The detected duration of the hang. */`",106,null],[11,"GetThread","","`text /** * The name of the thread which hung. */`",106,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRunnableName","","`text /** * The name of the runnable which hung if it hung on the main thread. */`",106,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProcess","","`text /** * The type of process which produced the hang. This should be either: * \"default\", \"content\", or \"gpu\". */`",106,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRemoteType","","`text /** * The remote type of the content process which produced the hang. */`",106,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",107,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookiePermission` to one of its base interfaces.",107,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",107,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ACCESS_DEFAULT","","`text /** * nsCookieAccess values */`",107,null],[18,"ACCESS_ALLOW","","",107,null],[18,"ACCESS_DENY","","",107,null],[18,"ACCESS_SESSION","","`text /** * additional values for nsCookieAccess which may not match * nsIPermissionManager. Keep 3-7 available to allow nsIPermissionManager to * add values without colliding. ACCESS_SESSION is not directly returned by * any methods on this interface. */`",107,null],[18,"ACCESS_ALLOW_FIRST_PARTY_ONLY","","",107,null],[18,"ACCESS_LIMIT_THIRD_PARTY","","",107,null],[11,"SetAccess","","`text /** * setAccess * * this method is called to block cookie access for the given URI. this * may result in other URIs being blocked as well (e.g., URIs which share * the same host name). * * @param aURI * the URI to block * @param aAccess * the new cookie access for the URI. */`",107,null],[11,"CanAccess","","`text /** * canAccess * * this method is called to test whether or not the given URI/channel may * access the cookie database, either to set or get cookies. * * @param aPrincipal * the principal trying to access cookies. * * @return one of the following nsCookieAccess values: * ACCESS_DEFAULT, ACCESS_ALLOW, ACCESS_DENY, or * ACCESS_ALLOW_FIRST_PARTY_ONLY */`",107,null],[11,"CanSetCookie","","`text /** * canSetCookie * * this method is called to test whether or not the given URI/channel may * set a specific cookie. this method is always preceded by a call to * canAccess. it may modify the isSession and expiry attributes of the * cookie via the aIsSession and aExpiry parameters, in order to limit * or extend the lifetime of the cookie. this is useful, for instance, to * downgrade a cookie to session-only if it fails to meet certain criteria. * * @param aURI * the URI trying to set the cookie * @param aChannel * the channel corresponding to aURI * @param aCookie * the cookie being added to the cookie database * @param aIsSession * when canSetCookie is invoked, this is the current isSession attribute * of the cookie. canSetCookie may leave this value unchanged to * preserve this attribute of the cookie. * @param aExpiry * when canSetCookie is invoked, this is the current expiry time of * the cookie. canSetCookie may leave this value unchanged to * preserve this attribute of the cookie. * * @return true if the cookie can be set. */`",107,null],[11,"addref","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",108,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntry` to one of its base interfaces.",108,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",108,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_EXPIRATION_TIME","","`text /** * Placeholder for the initial value of expiration time. */`",108,null],[11,"GetKey","","`text /** * Get the key identifying the cache entry. */`",108,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCacheEntryId","","`text /** * The unique ID for every nsICacheEntry instance, which can be used to check * whether two pieces of information are from the same nsICacheEntry instance. */`",108,null],[11,"GetPersistent","","`text /** * Whether the entry is memory/only or persisted to disk. * Note: private browsing entries are reported as persistent for consistency * while are not actually persisted to disk. */`",108,null],[11,"GetFetchCount","","`text /** * Get the number of times the cache entry has been opened. */`",108,null],[11,"GetLastFetched","","`text /** * Get the last time the cache entry was opened (in seconds since the Epoch). */`",108,null],[11,"GetLastModified","","`text /** * Get the last time the cache entry was modified (in seconds since the Epoch). */`",108,null],[11,"GetExpirationTime","","`text /** * Get the expiration time of the cache entry (in seconds since the Epoch). */`",108,null],[11,"SetExpirationTime","","`text /** * Set the time at which the cache entry should be considered invalid (in * seconds since the Epoch). */`",108,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetOnStartTime","","`text /** * Get the last network response times for onStartReqeust/onStopRequest (in ms). * @throws * - NS_ERROR_NOT_AVAILABLE if onStartTime/onStopTime does not exist. */`",108,null],[11,"GetOnStopTime","","`readonly attribute uint64_t onStopTime;`",108,null],[11,"SetNetworkTimes","","`text /** * Set the network response times for onStartReqeust/onStopRequest (in ms). */`",108,{"inputs":[{"name":"self"},{"name":"uint64_t"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"ForceValidFor","","`text /** * This method is intended to override the per-spec cache validation * decisions for a duration specified in seconds. The current state can * be examined with isForcedValid (see below). This value is not persisted, * so it will not survive session restart. Cache entries that are forced valid * will not be evicted from the cache for the duration of forced validity. * This means that there is a potential problem if the number of forced valid * entries grows to take up more space than the cache size allows. * * NOTE: entries that have been forced valid will STILL be ignored by HTTP * channels if they have expired AND the resource in question requires * validation after expiring. This is to avoid using known-stale content. * * @param aSecondsToTheFuture * the number of seconds the default cache validation behavior will be * overridden before it returns to normal */`",108,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsForcedValid","","`text /** * The state variable for whether this entry is currently forced valid. * Defaults to false for normal cache validation behavior, and will return * true if the number of seconds set by forceValidFor() has yet to be reached. */`",108,null],[11,"OpenInputStream","","`text /** * Open blocking input stream to cache data. Use the stream transport * service to asynchronously read this stream on a background thread. * The returned stream MAY implement nsISeekableStream. * * @param offset * read starting from this offset into the cached data. an offset * beyond the end of the stream has undefined consequences. * * @return non-blocking, buffered input stream. */`",108,null],[11,"OpenOutputStream","","`text /** * Open non-blocking output stream to cache data. The returned stream * MAY implement nsISeekableStream. * * If opening an output stream to existing cached data, the data will be * truncated to the specified offset. * * @param offset * write starting from this offset into the cached data. an offset * beyond the end of the stream has undefined consequences. * * @return blocking, buffered output stream. */`",108,null],[11,"GetPredictedDataSize","","`text /** * Stores the Content-Length specified in the HTTP header for this * entry. Checked before we write to the cache entry, to prevent ever * taking up space in the cache for an entry that we know up front * is going to have to be evicted anyway. See bug 588507. */`",108,null],[11,"SetPredictedDataSize","","`text /** * Stores the Content-Length specified in the HTTP header for this * entry. Checked before we write to the cache entry, to prevent ever * taking up space in the cache for an entry that we know up front * is going to have to be evicted anyway. See bug 588507. */`",108,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetSecurityInfo","","`text /** * Get/set security info on the cache entry for this descriptor. */`",108,null],[11,"SetSecurityInfo","","`text /** * Get/set security info on the cache entry for this descriptor. */`",108,null],[11,"GetStorageDataSize","","`text /** * Get the size of the cache entry data, as stored. This may differ * from the entry's dataSize, if the entry is compressed. */`",108,null],[11,"AsyncDoom","","`text /** * Asynchronously doom an entry. Listener will be notified about the status * of the operation. Null may be passed if caller doesn't care about the * result. */`",108,null],[11,"GetMetaDataElement","","`text /** * Methods for accessing meta data. Meta data is a table of key/value * string pairs. The strings do not have to conform to any particular * charset, but they must be null terminated. */`",108,null],[11,"SetMetaDataElement","","`void setMetaDataElement (in string key, in string value);`",108,null],[11,"VisitMetaData","","`text /** * Obtain the list of metadata keys this entry keeps. * * NOTE: The callback is invoked under the CacheFile's lock. It means * there should not be made any calls to the entry from the visitor and * if the values need to be processed somehow, it's better to cache them * and process outside the callback. */`",108,null],[11,"MetaDataReady","","`text /** * Claims that all metadata on this entry are up-to-date and this entry * now can be delivered to other waiting consumers. * * We need such method since metadata must be delivered synchronously. */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetValid","","`text /** * Called by consumer upon 304/206 response from the server. This marks * the entry content as positively revalidated. * Consumer uses this method after the consumer has returned ENTRY_NEEDS_REVALIDATION * result from onCacheEntryCheck and after successfull revalidation with the server. */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Dismiss","","`text /** * Explicitly tell the cache backend this consumer is no longer going to modify * this cache entry data or metadata. In case the consumer was responsible to * either of writing the cache entry or revalidating it, calling this method * reverts the state to initial (as never written) or as not-validated and * immediately notifies the next consumer in line waiting for this entry. * This is the way to prevent deadlocks when someone else than the responsible * channel references the cache entry being in a non-written or revalidating * state. */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDiskStorageSizeInKB","","`text /** * Returns the size in kilobytes used to store the cache entry on disk. */`",108,null],[11,"Recreate","","`text /** * Doom this entry and open a new, empty, entry for write. Consumer has * to exchange the entry this method is called on for the newly created. * Used on 200 responses to conditional requests. * * @param aMemoryOnly * - whether the entry is to be created as memory/only regardless how * the entry being recreated persistence is set * @returns * - an entry that can be used to write to * @throws * - NS_ERROR_NOT_AVAILABLE when the entry cannot be from some reason * recreated for write */`",108,null],[11,"GetDataSize","","`text /** * Returns the length of data this entry holds. * @throws * NS_ERROR_IN_PROGRESS when the write is still in progress. */`",108,null],[11,"GetAltDataSize","","`text /** * Returns the length of data this entry holds. * @throws * - NS_ERROR_IN_PROGRESS when a write is still in progress (either real content or alt data). * - NS_ERROR_NOT_AVAILABLE if alt data does not exist. */`",108,null],[11,"OpenAlternativeOutputStream","","`text /** * Opens and returns an output stream that a consumer may use to save an * alternate representation of the data. * @throws * - NS_ERROR_NOT_AVAILABLE if the real data hasn't been written. * - NS_ERROR_IN_PROGRESS when the writing regular content or alt-data to * the cache entry is still in progress. * * If there is alt-data already saved, it will be overwritten. */`",108,null],[11,"OpenAlternativeInputStream","","`text /** * Opens and returns an input stream that can be used to read the alternative * representation previously saved in the cache. * If this call is made while writing alt-data is still in progress, it is * still possible to read content from the input stream as it's being written. * @throws * - NS_ERROR_NOT_AVAILABLE if the alt-data representation doesn't exist at * all or if alt-data of the given type doesn't exist. */`",108,null],[11,"GetLoadContextInfo","","`text /** * Get the nsILoadContextInfo of the cache entry */`",108,null],[11,"Close","","`text /**************************************************************************** * The following methods might be added to some nsICacheEntryInternal * interface since we want to remove them as soon as the old cache backend is * completely removed. */ /** * @deprecated * FOR BACKWARD COMPATIBILITY ONLY * When the old cache backend is eventually removed, this method * can be removed too. * * In the new backend: this method is no-op * In the old backend: this method delegates to nsICacheEntryDescriptor.close() */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MarkValid","","`text /** * @deprecated * FOR BACKWARD COMPATIBILITY ONLY * Marks the entry as valid so that others can use it and get only readonly * access when the entry is held by the 1st writer. */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MaybeMarkValid","","`text /** * @deprecated * FOR BACKWARD COMPATIBILITY ONLY * Marks the entry as valid when write access is acquired. */`",108,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HasWriteAccess","","`text /** * @deprecated * FOR BACKWARD COMPATIBILITY ONLY / KINDA HACK * @param aWriteAllowed * Consumer indicates whether write to the entry is allowed for it. * Depends on implementation how the flag is handled. * @returns * true when write access is acquired for this entry, * false otherwise */`",108,null],[11,"addref","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",109,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntryMetaDataVisitor` to one of its base interfaces.",109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",109,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnMetaDataElement","","`text /** * Argument for nsICacheEntry.visitMetaData, provides access to all metadata * keys and values stored on the entry. */ /** * Called over each key / value pair. */`",109,null],[11,"addref","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",110,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGeolocationUpdate` to one of its base interfaces.",110,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",110,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Update","","`text /** * Notify the geolocation service that a new geolocation * has been discovered. * This must be called on the main thread */`",110,null],[11,"NotifyError","","`text /** * Notify the geolocation service of an error. * This must be called on the main thread. * The parameter refers to one of the constants in the * nsIDOMGeoPositionError interface. * Use this to report spurious errors coming from the * provider; for errors occurring inside the methods in * the nsIGeolocationProvider interface, just use the return * value. */`",110,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",111,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",111,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGeolocationProvider` to one of its base interfaces.",111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",111,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Startup","","`text /** * Start up the provider. This is called before any other * method. may be called multiple times. */`",111,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Watch","","`text /** * watch * When a location change is observed, notify the callback. */`",111,null],[11,"Shutdown","","`text /** * shutdown * Shuts down the location device. */`",111,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetHighAccuracy","","`text /** * hint to provide to use any amount of power to provide a better result */`",111,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",112,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationCacheService` to one of its base interfaces.",112,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",112,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"BuildGroupIDForInfo","","`text /** * Create group string identifying cache group according the manifest * URL and the given principal. */`",112,null],[11,"BuildGroupIDForSuffix","","`ACString buildGroupIDForSuffix (in nsIURI aManifestURL, in ACString aOriginSuffix);`",112,null],[11,"CreateApplicationCache","","`text /** * Create a new, empty application cache for the given cache * group. */`",112,null],[11,"CreateCustomApplicationCache","","`text /** * Create a new, empty application cache for the given cache * group residing in a custom directory with a custom quota. * * @param group * URL of the manifest * @param directory * Actually a reference to a profile directory where to * create the OfflineCache sub-dir. * @param quota * Optional override of the default quota. */`",112,null],[11,"GetApplicationCache","","`text /** * Get an application cache object for the given client ID. */`",112,null],[11,"GetActiveCache","","`text /** * Get the currently active cache object for a cache group. */`",112,null],[11,"DeactivateGroup","","`text /** * Deactivate the currently-active cache object for a cache group. */`",112,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Evict","","`text /** * Evict offline cache entries, either all of them or those belonging * to the given origin. */`",112,null],[11,"EvictMatchingOriginAttributes","","`text /** * Delete caches whom origin attributes matches the given pattern. */`",112,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ChooseApplicationCache","","`text /** * Try to find the best application cache to serve a resource. */`",112,null],[11,"CacheOpportunistically","","`text /** * Flags the key as being opportunistically cached. * * This method should also propagate the entry to other * application caches with the same opportunistic namespace, but * this is not currently implemented. * * @param cache * The cache in which the entry is cached now. * @param key * The cache entry key. */`",112,null],[11,"GetGroups","","`text /** * Get the list of application cache groups. */`",112,null],[11,"GetGroupsTimeOrdered","","`text /** * Get the list of application cache groups in the order of * activating time. */`",112,null],[11,"addref","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",113,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditActionListener` to one of its base interfaces.",113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",113,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"WillCreateNode","","`text /** * Called before the editor creates a node. * @param aTag The tag name of the DOM Node to create. * @param aNextSiblingOfNewNode The node which will be next sibling of * new node. If the new node will be appended, * this is null. */`",113,null],[11,"DidCreateNode","","`text /** * Called after the editor creates a node. * @param aTag The tag name of the DOM Node to create. * @param aNewNode The DOM Node that was created. * @param aResult The result of the create node operation. */`",113,null],[11,"WillInsertNode","","`text /** * Called before the editor inserts a node. * @param aNode The DOM Node to insert. * @param aNextSiblingOfNewNode The node which will be next sibling of * new node. If the new node will be appended, * this is null. */`",113,null],[11,"DidInsertNode","","`text /** * Called after the editor inserts a node. * @param aNode The DOM Node to insert. * @param aResult The result of the insert node operation. */`",113,null],[11,"WillDeleteNode","","`text /** * Called before the editor deletes a node. * @param aChild The node to delete */`",113,null],[11,"DidDeleteNode","","`text /** * Called after the editor deletes a node. * @param aChild The node to delete * @param aResult The result of the delete node operation. */`",113,null],[11,"WillSplitNode","","`text /** * Called before the editor splits a node. * @param aExistingRightNode the node to split. It will become the new node's next sibling. * @param aOffset the offset of aExistingRightNode's content|children to do the split at * @param aNewLeftNode [OUT] the new node resulting from the split, becomes aExistingRightNode's previous sibling. */`",113,null],[11,"DidSplitNode","","`text /** * Called after the editor splits a node. * @param aExistingRightNode The node which was split. It will become the * next sibling of the new left node. * @param aNewLeftNode The new node resulting from the split, becomes * the previous sibling of aExistingRightNode. */`",113,null],[11,"WillJoinNodes","","`text /** * Called before the editor joins 2 nodes. * @param aLeftNode This node will be merged into the right node * @param aRightNode The node that will be merged into. * There is no requirement that the two nodes be of * the same type. * @param aParent The parent of aRightNode */`",113,null],[11,"DidJoinNodes","","`text /** * Called after the editor joins 2 nodes. * @param aLeftNode This node will be merged into the right node * @param aRightNode The node that will be merged into. * There is no requirement that the two nodes be of * the same type. * @param aParent The parent of aRightNode * @param aResult The result of the join operation. */`",113,null],[11,"WillInsertText","","`text /** * Called before the editor inserts text. * @param aTextNode This node getting inserted text * @param aOffset The offset in aTextNode to insert at. * @param aString The string that gets inserted. */`",113,null],[11,"DidInsertText","","`text /** * Called after the editor inserts text. * @param aTextNode This node getting inserted text * @param aOffset The offset in aTextNode to insert at. * @param aString The string that gets inserted. * @param aResult The result of the insert text operation. */`",113,null],[11,"WillDeleteText","","`text /** * Called before the editor deletes text. * @param aTextNode This node getting text deleted * @param aOffset The offset in aTextNode to delete at. * @param aLength The amount of text to delete. */`",113,null],[11,"DidDeleteText","","`text /** * Called before the editor deletes text. * @param aTextNode This node getting text deleted * @param aOffset The offset in aTextNode to delete at. * @param aLength The amount of text to delete. * @param aResult The result of the delete text operation. */`",113,null],[11,"WillDeleteSelection","","`text /** * Called before the editor deletes the selection. * @param aSelection The selection to be deleted */`",113,null],[11,"DidDeleteSelection","","`text /** * Called after the editor deletes the selection. * @param aSelection The selection, after deletion */`",113,null],[11,"addref","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",114,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeSelection` to one of its base interfaces.",114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",114,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTree","","`text /** * The tree widget for this selection. */`",114,null],[11,"SetTree","","`text /** * The tree widget for this selection. */`",114,null],[11,"GetSingle","","`text /** * This attribute is a boolean indicating single selection. */`",114,null],[11,"GetCount","","`text /** * The number of rows currently selected in this tree. */`",114,null],[11,"IsSelected","","`text /** * Indicates whether or not the row at the specified index is * part of the selection. */`",114,null],[11,"Select","","`text /** * Deselect all rows and select the row at the specified index. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"TimedSelect","","`text /** * Perform a timed select. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ToggleSelect","","`text /** * Toggle the selection state of the row at the specified index. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"RangedSelect","","`text /** * Select the range specified by the indices. If augment is true, * then we add the range to the selection without clearing out anything * else. If augment is false, everything is cleared except for the specified range. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ClearRange","","`text /** * Clears the range. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ClearSelection","","`text /** * Clears the selection. */`",114,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InvertSelection","","`text /** * Inverts the selection. */`",114,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectAll","","`text /** * Selects all rows. */`",114,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRangeCount","","`text /** * Iterate the selection using these methods. */`",114,null],[11,"GetRangeAt","","`void getRangeAt (in long i, out long min, out long max);`",114,null],[11,"InvalidateSelection","","`text /** * Can be used to invalidate the selection. */`",114,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AdjustSelection","","`text /** * Called when the row count changes to adjust selection indices. */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectEventsSuppressed","","`text /** * This attribute is a boolean indicating whether or not the * \"select\" event should fire when the selection is changed using * one of our methods. A view can use this to temporarily suppress * the selection while manipulating all of the indices, e.g., on * a sort. * Note: setting this attribute to false will fire a select event. */`",114,null],[11,"SetSelectEventsSuppressed","","`text /** * This attribute is a boolean indicating whether or not the * \"select\" event should fire when the selection is changed using * one of our methods. A view can use this to temporarily suppress * the selection while manipulating all of the indices, e.g., on * a sort. * Note: setting this attribute to false will fire a select event. */`",114,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCurrentIndex","","`text /** * The current item (the one that gets a focus rect in addition to being * selected). */`",114,null],[11,"SetCurrentIndex","","`text /** * The current item (the one that gets a focus rect in addition to being * selected). */`",114,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetCurrentColumn","","`text /** * The current column. */`",114,null],[11,"SetCurrentColumn","","`text /** * The current column. */`",114,null],[11,"GetShiftSelectPivot","","`text /** * The selection \"pivot\". This is the first item the user selected as * part of a ranged select. */`",114,null],[11,"addref","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",115,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeTreeSelection` to one of its base interfaces.",115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",115,{"inputs":[{"name":"self"}],"output":{"name":"nsitreeselection"}}],[11,"EnsureNative","","`[noscript] void ensureNative ();`",115,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",116,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",116,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputStream` to one of its base interfaces.",116,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",116,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Close","","`text /** * nsIInputStream * * An interface describing a readable stream of data. An input stream may be * \"blocking\" or \"non-blocking\" (see the IsNonBlocking method). A blocking * input stream may suspend the calling thread in order to satisfy a call to * Close, Available, Read, or ReadSegments. A non-blocking input stream, on * the other hand, must not block the calling thread of execution. * * NOTE: blocking input streams are often read on a background thread to avoid * locking up the main application thread. For this reason, it is generally * the case that a blocking input stream should be implemented using thread- * safe AddRef and Release. */ /** * Close the stream. This method causes subsequent calls to Read and * ReadSegments to return 0 bytes read to indicate end-of-file. Any * subsequent calls to Available should throw NS_BASE_STREAM_CLOSED. */`",116,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Available","","`text /** * Determine number of bytes available in the stream. A non-blocking * stream that does not yet have any data to read should return 0 bytes * from this method (i.e., it must not throw the NS_BASE_STREAM_WOULD_BLOCK * exception). * * In addition to the number of bytes available in the stream, this method * also informs the caller of the current status of the stream. A stream * that is closed will throw an exception when this method is called. That * enables the caller to know the condition of the stream before attempting * to read from it. If a stream is at end-of-file, but not closed, then * this method returns 0 bytes available. (Note: some nsIInputStream * implementations automatically close when eof is reached; some do not). * * @return number of bytes currently available in the stream. * * @throws NS_BASE_STREAM_CLOSED if the stream is closed normally. * @throws <other-error> if the stream is closed due to some error * condition */`",116,null],[11,"Read","","`text /** * Read data from the stream. * * @param aBuf the buffer into which the data is to be read * @param aCount the maximum number of bytes to be read * * @return number of bytes read (may be less than aCount). * @return 0 if reached end-of-file * * @throws NS_BASE_STREAM_WOULD_BLOCK if reading from the input stream would * block the calling thread (non-blocking mode only) * @throws <other-error> on failure * * NOTE: this method should not throw NS_BASE_STREAM_CLOSED. */`",116,null],[11,"IsNonBlocking","","`text /** * @return true if stream is non-blocking * * NOTE: reading from a blocking input stream will block the calling thread * until at least one byte of data can be extracted from the stream. * * NOTE: a non-blocking input stream may implement nsIAsyncInputStream to * provide consumers with a way to wait for the stream to have more data * once its read method is unable to return any data without blocking. */`",116,null],[11,"addref","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",117,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIObserverService` to one of its base interfaces.",117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",117,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddObserver","","`text /** * AddObserver * * Registers a given listener for a notifications regarding the specified * topic. * * @param anObserve : The interface pointer which will receive notifications. * @param aTopic : The notification topic or subject. * @param ownsWeak : If set to false, the nsIObserverService will hold a * strong reference to |anObserver|. If set to true and * |anObserver| supports the nsIWeakReference interface, * a weak reference will be held. Otherwise an error will be * returned. */`",117,null],[11,"RemoveObserver","","`text /** * removeObserver * * Unregisters a given listener from notifications regarding the specified * topic. * * @param anObserver : The interface pointer which will stop recieving * notifications. * @param aTopic : The notification topic or subject. */`",117,null],[11,"NotifyObservers","","`text /** * notifyObservers * * Notifies all registered listeners of the given topic. * * @param aSubject : Notification specific interface pointer. * @param aTopic : The notification topic or subject. * @param someData : Notification specific wide string. */`",117,null],[11,"EnumerateObservers","","`text /** * enumerateObservers * * Returns an enumeration of all registered listeners. * * @param aTopic : The notification topic or subject. */`",117,null],[11,"addref","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",118,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMouseScrollEvent` to one of its base interfaces.",118,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",118,{"inputs":[{"name":"self"}],"output":{"name":"nsidommouseevent"}}],[18,"HORIZONTAL_AXIS","","",118,null],[18,"VERTICAL_AXIS","","",118,null],[11,"addref","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",119,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISelection` to one of its base interfaces.",119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",119,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAnchorNode","","`text /** * Returns the node in which the selection begins. */`",119,null],[11,"GetAnchorOffset","","`text /** * The offset within the (text) node where the selection begins. */`",119,null],[11,"GetFocusNode","","`text /** * Returns the node in which the selection ends. */`",119,null],[11,"GetFocusOffset","","`text /** * The offset within the (text) node where the selection ends. */`",119,null],[11,"GetIsCollapsed","","`text /** * Indicates if the selection is collapsed or not. */`",119,null],[11,"GetRangeCount","","`text /** * Returns the number of ranges in the selection. */`",119,null],[11,"GetRangeAt","","`text /** * Returns the range at the specified index. */`",119,null],[11,"Collapse","","`text /** * Collapses the selection to a single point, at the specified offset * in the given DOM node. When the selection is collapsed, and the content * is focused and editable, the caret will blink there. * @param parentNode The given dom node where the selection will be set * @param offset Where in given dom node to place the selection (the offset into the given node) */`",119,null],[11,"CollapseNative","","`[noscript] void collapseNative (in nsINode parentNode, in long offset);`",119,null],[11,"Extend","","`text /** * Extends the selection by moving the selection end to the specified node and offset, * preserving the selection begin position. The new selection end result will always * be from the anchorNode to the new focusNode, regardless of direction. * @param parentNode The node where the selection will be extended to * @param offset Where in node to place the offset in the new selection end */`",119,null],[11,"ExtendNative","","`[noscript] void extendNative (in nsINode parentNode, in long offset);`",119,null],[11,"CollapseToStart","","`text /** * Collapses the whole selection to a single point at the start * of the current selection (irrespective of direction). If content * is focused and editable, the caret will blink there. */`",119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CollapseToEnd","","`text /** * Collapses the whole selection to a single point at the end * of the current selection (irrespective of direction). If content * is focused and editable, the caret will blink there. */`",119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ContainsNode","","`text /** * Indicates whether the node is part of the selection. If partlyContained * is set to PR_TRUE, the function returns true when some part of the node * is part of the selection. If partlyContained is set to PR_FALSE, the * function only returns true when the entire node is part of the selection. */`",119,null],[11,"SelectAllChildren","","`text /** * Adds all children of the specified node to the selection. * @param parentNode the parent of the children to be added to the selection. */`",119,null],[11,"AddRange","","`text /** * Adds a range to the current selection. */`",119,null],[11,"RemoveRange","","`text /** * Removes a range from the current selection. */`",119,null],[11,"RemoveAllRanges","","`text /** * Removes all ranges from the current selection. */`",119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DeleteFromDocument","","`text /** * Deletes this selection from document the nodes belong to. */`",119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ToString","","`text /** * Returns the whole selection into a plain text string. */`",119,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Modify","","`text /** * Modifies the selection. Note that the parameters are case-insensitive. * * @param alter can be one of { \"move\", \"extend\" } * - \"move\" collapses the selection to the end of the selection and * applies the movement direction/granularity to the collapsed * selection. * - \"extend\" leaves the start of the selection unchanged, and applies * movement direction/granularity to the end of the selection. * @param direction can be one of { \"forward\", \"backward\", \"left\", \"right\" } * @param granularity can be one of { \"character\", \"word\", * \"line\", \"lineboundary\" } * * @returns NS_ERROR_NOT_IMPLEMENTED if the granularity is \"sentence\", * \"sentenceboundary\", \"paragraph\", \"paragraphboundary\", or * \"documentboundary\". Returns NS_ERROR_INVALID_ARG if alter, direction, * or granularity has an unrecognized value. */`",119,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",120,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITokenPasswordDialogs` to one of its base interfaces.",120,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",120,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetPassword","","`text /** * Brings up a dialog to set the password on a token. * * @param ctx A user interface context. * @param tokenName Name of the token. * @return true if the user canceled the dialog, false otherwise. */`",120,null],[11,"addref","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",121,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPrint` to one of its base interfaces.",121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",121,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PRINTPREVIEW_GOTO_PAGENUM","","`text /** * PrintPreview Navigation Constants */`",121,null],[18,"PRINTPREVIEW_PREV_PAGE","","",121,null],[18,"PRINTPREVIEW_NEXT_PAGE","","",121,null],[18,"PRINTPREVIEW_HOME","","",121,null],[18,"PRINTPREVIEW_END","","",121,null],[11,"GetGlobalPrintSettings","","`text /** * Returns a \"global\" PrintSettings object * Creates a new the first time, if one doesn't exist. * * Then returns the same object each time after that. * * Initializes the globalPrintSettings from the default printer */`",121,null],[11,"GetCurrentPrintSettings","","`text /** * Returns a pointer to the PrintSettings object that * that was passed into either \"print\" or \"print preview\" * * This enables any consumers of the interface to have access * to the \"current\" PrintSetting at later points in the execution */`",121,null],[11,"GetCurrentChildDOMWindow","","`text /** * Returns a pointer to the current child DOMWindow * that is being print previewed. (FrameSet Frames) * * Returns null if parent document is not a frameset or the entire FrameSet * document is being print previewed * * This enables any consumers of the interface to have access * to the \"current\" child DOMWindow at later points in the execution */`",121,null],[11,"GetDoingPrint","","`text /** * Returns whether it is in Print mode */`",121,null],[11,"GetDoingPrintPreview","","`text /** * Returns whether it is in Print Preview mode */`",121,null],[11,"GetIsFramesetDocument","","`text /** * This returns whether the current document is a frameset document */`",121,null],[11,"GetIsFramesetFrameSelected","","`text /** * This returns whether the current document is a frameset document */`",121,null],[11,"GetIsIFrameSelected","","`text /** * This returns whether there is an IFrame selected */`",121,null],[11,"GetIsRangeSelection","","`text /** * This returns whether there is a \"range\" selection */`",121,null],[11,"GetPrintPreviewNumPages","","`text /** * This returns the total number of pages for the Print Preview */`",121,null],[11,"Print","","`text /** * Print the specified DOM window * * @param aThePrintSettings - Printer Settings for the print job, if aThePrintSettings is null * then the global PS will be used. * @param aWPListener - is updated during the print * @return void */`",121,null],[11,"PrintPreview","","`text /** * Print Preview the specified DOM window * * @param aThePrintSettings - Printer Settings for the print preview, if aThePrintSettings is null * then the global PS will be used. * @param aChildDOMWin - DOM Window to be print previewed. * @param aWPListener - is updated during the printpreview * @return void */`",121,null],[11,"PrintPreviewNavigate","","`text /** * Print Preview - Navigates within the window * * @param aNavType - navigation enum * @param aPageNum - page num to navigate to when aNavType = ePrintPreviewGoToPageNum * @return void */`",121,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Cancel","","`text /** * Cancels the current print * @return void */`",121,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnumerateDocumentNames","","`text /** * Returns an array of the names of all documents names (Title or URL) * and sub-documents. This will return a single item if the attr \"isFramesetDocument\" is false * and may return any number of items is \"isFramesetDocument\" is true * * @param aCount - returns number of printers returned * @param aResult - returns array of names * @return void */`",121,null],[11,"ExitPrintPreview","","`text /** * This exists PrintPreview mode and returns browser window to galley mode * @return void */`",121,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",122,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTTPIndex` to one of its base interfaces.",122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",122,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBaseURL","","`text /** * The base URL of the HTTP index */`",122,null],[11,"GetDataSource","","`text /** * The RDF datasource that contains the HTTP index information. */`",122,null],[11,"GetEncoding","","`text /** * The charset to use for decoding FTP filenames */`",122,null],[11,"SetEncoding","","`text /** * The charset to use for decoding FTP filenames */`",122,null],[11,"addref","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",123,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDeprecationWarner` to one of its base interfaces.",123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",123,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IssueWarning","","`text /** * Issue a deprecation warning. * * @param aWarning a warning code as declared in nsDeprecatedOperationList.h. * @param aAsError optional boolean flag indicating whether the warning * should be treated as an error. */`",123,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",124,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISensitiveInfoHiddenURI` to one of its base interfaces.",124,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",124,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSensitiveInfoHiddenSpec","","`text /** * Returns the spec attribute with sensitive information hidden. This will * only affect uri with password. The password part of uri will be * transformed into \"****\". */`",124,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",125,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPlatformInfo` to one of its base interfaces.",125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",125,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPlatformVersion","","`text /** * The version of the XULRunner platform. */`",125,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPlatformBuildID","","`text /** * The build ID/date of gecko and the XULRunner platform. */`",125,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",126,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierPositiveCacheEntry` to one of its base interfaces.",126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",126,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFullhash","","`text /** * Fullhash for the positive cache entry. */`",126,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetExpiry","","`text /** * Positive cache expiry. */`",126,null],[11,"addref","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",127,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierCacheEntry` to one of its base interfaces.",127,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",127,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrefix","","`text /** * Prefix for this cache entry. */`",127,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetExpiry","","`text /** * Negative cache expiry. */`",127,null],[11,"GetMatches","","`text /** * An array of nsIUrlClassifierPositiveCacheEntry, each item represents * a positive cache entry with its fullhash and expiry. */`",127,null],[11,"addref","","",128,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",128,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierCacheInfo` to one of its base interfaces.",128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",128,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTable","","`text /** * Table name. */`",128,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetEntries","","`readonly attribute nsIArray entries;`",128,null],[11,"addref","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",129,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierGetCacheCallback` to one of its base interfaces.",129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",129,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnGetCacheComplete","","`void onGetCacheComplete (in nsIUrlClassifierCacheInfo info);`",129,null],[11,"addref","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",130,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierInfo` to one of its base interfaces.",130,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",130,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCacheInfo","","`text /** * An asynchronous call to return cache information for the table. */`",130,null],[11,"addref","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",131,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIResumableChannel` to one of its base interfaces.",131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",131,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ResumeAt","","`text /** * Prepare this channel for resuming. The request will not start until * asyncOpen or open is called. Calling resumeAt after open or asyncOpen * has been called has undefined behaviour. * * @param startPos the starting offset, in bytes, to use to download * @param entityID information about the file, to match before obtaining * the file. Pass an empty string to use anything. * * During OnStartRequest, this channel will have a status of * NS_ERROR_NOT_RESUMABLE if the file cannot be resumed, eg because the * server doesn't support this. This error may occur even if startPos * is 0, so that the front end can warn the user. * Similarly, the status of this channel during OnStartRequest may be * NS_ERROR_ENTITY_CHANGED, which indicates that the entity has changed, * as indicated by a changed entityID. * In both of these cases, no OnDataAvailable will be called, and * OnStopRequest will immediately follow with the same status code. */`",131,{"inputs":[{"name":"self"},{"name":"uint64_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetEntityID","","`text /** * The entity id for this URI. Available after OnStartRequest. * @throw NS_ERROR_NOT_RESUMABLE if this load is not resumable. */`",131,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",132,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExpatSink` to one of its base interfaces.",132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",132,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleStartElement","","`text /** * Called to handle the opening tag of an element. * @param aName the fully qualified tagname of the element * @param aAtts the array of attribute names and values. There are * aAttsCount/2 names and aAttsCount/2 values, so the total number of * elements in the array is aAttsCount. The names and values * alternate. Thus, if we number attributes starting with 0, * aAtts[2*k] is the name of the k-th attribute and aAtts[2*k+1] is * the value of that attribute Both explicitly specified attributes * and attributes that are defined to have default values in a DTD are * present in aAtts. * @param aAttsCount the number of elements in aAtts. * @param aLineNumber the line number of the start tag in the data stream. */`",132,null],[11,"HandleEndElement","","`text /** * Called to handle the closing tag of an element. * @param aName the fully qualified tagname of the element */`",132,null],[11,"HandleComment","","`text /** * Called to handle a comment * @param aCommentText the text of the comment (not including the * \"<!--\" and \"-->\") */`",132,null],[11,"HandleCDataSection","","`text /** * Called to handle a CDATA section * @param aData the text in the CDATA section. This is null-terminated. * @param aLength the length of the aData string */`",132,null],[11,"HandleDoctypeDecl","","`text /** * Called to handle the doctype declaration */`",132,null],[11,"HandleCharacterData","","`text /** * Called to handle character data. Note that this does NOT get * called for the contents of CDATA sections. * @param aData the data to handle. aData is NOT NULL-TERMINATED. * @param aLength the length of the aData string */`",132,null],[11,"HandleProcessingInstruction","","`text /** * Called to handle a processing instruction * @param aTarget the PI target (e.g. xml-stylesheet) * @param aData all the rest of the data in the PI */`",132,null],[11,"HandleXMLDeclaration","","`text /** * Handle the XML Declaration. * * @param aVersion The version string, can be null if not specified. * @param aEncoding The encoding string, can be null if not specified. * @param aStandalone -1, 0, or 1 indicating respectively that there was no * standalone parameter in the declaration, that it was * given as no, or that it was given as yes. */`",132,null],[11,"ReportError","","`text /** * Ask the content sink if the expat driver should log an error to the console. * * @param aErrorText Error message to pass to content sink. * @param aSourceText Source text of the document we're parsing. * @param aError Script error object with line number & column number * * @retval True if the expat driver should report the error. */`",132,null],[11,"addref","","",133,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",133,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrivateBrowsingChannel` to one of its base interfaces.",133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",133,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetPrivate","","`text /** * Determine whether the channel is tied to a private browsing window. * * This value can be set only before the channel is opened. Setting it * after that does not have any effect. This value overrides the privacy * state of the channel, which means that if you call this method, then * the loadGroup and load context will no longer be consulted when we * need to know the private mode status for a channel. * * Note that this value is only meant to be used when the channel's privacy * status cannot be obtained from the loadGroup or load context (for * example, when the channel is not associated with any loadGroup or load * context.) Setting this value directly should be avoided if possible. * * Implementations must enforce the ordering semantics of this function by * raising errors if setPrivate is called on a channel which has a loadGroup * and/or callbacks that implement nsILoadContext, or if the loadGroup * or notificationCallbacks are set after setPrivate has been called. * * @param aPrivate whether the channel should be opened in private mode. */`",133,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsChannelPrivate","","`text /** * States whether the channel is in private browsing mode. This may either * happen because the channel is opened from a private mode context or * when the mode is explicitly set with ::setPrivate(). * * This attribute is equivalent to NS_UsePrivateBrowsing(), but scriptable. */`",133,null],[11,"IsPrivateModeOverriden","","`[noscript] boolean isPrivateModeOverriden (out boolean aValue);`",133,null],[11,"addref","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",134,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWifiMonitor` to one of its base interfaces.",134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",134,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartWatching","","`void startWatching (in nsIWifiListener aListener);`",134,null],[11,"StopWatching","","`void stopWatching (in nsIWifiListener aListener);`",134,null],[11,"addref","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",135,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGIOMimeApp` to one of its base interfaces.",135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",135,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[18,"EXPECTS_URIS","","",135,null],[18,"EXPECTS_PATHS","","",135,null],[18,"EXPECTS_URIS_FOR_NON_FILES","","",135,null],[11,"GetId","","`readonly attribute AUTF8String id;`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCommand","","`readonly attribute AUTF8String command;`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetExpectsURIs","","`readonly attribute long expectsURIs;`",135,null],[11,"GetSupportedURISchemes","","`readonly attribute nsIUTF8StringEnumerator supportedURISchemes;`",135,null],[11,"Launch","","`void launch (in AUTF8String uri);`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAsDefaultForMimeType","","`void setAsDefaultForMimeType (in AUTF8String mimeType);`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAsDefaultForFileExtensions","","`void setAsDefaultForFileExtensions (in AUTF8String extensions);`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAsDefaultForURIScheme","","`void setAsDefaultForURIScheme (in AUTF8String uriScheme);`",135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",136,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGIOService` to one of its base interfaces.",136,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",136,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMimeTypeFromExtension","","`text /*** MIME registry methods ***/`",136,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppForURIScheme","","`nsIGIOMimeApp getAppForURIScheme (in AUTF8String aURIScheme);`",136,null],[11,"GetAppsForURIScheme","","`nsIMutableArray getAppsForURIScheme (in AUTF8String aURIScheme);`",136,null],[11,"GetAppForMimeType","","`nsIGIOMimeApp getAppForMimeType (in AUTF8String mimeType);`",136,null],[11,"CreateAppFromCommand","","`nsIGIOMimeApp createAppFromCommand (in AUTF8String cmd, in AUTF8String appName);`",136,null],[11,"FindAppFromCommand","","`nsIGIOMimeApp findAppFromCommand (in AUTF8String cmd);`",136,null],[11,"GetDescriptionForMimeType","","`AUTF8String getDescriptionForMimeType (in AUTF8String mimeType);`",136,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ShowURI","","`text /*** Misc. methods ***/`",136,null],[11,"ShowURIForInput","","`[noscript] void showURIForInput (in ACString uri);`",136,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OrgFreedesktopFileManager1ShowItems","","`[noscript] void orgFreedesktopFileManager1ShowItems (in ACString path);`",136,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",137,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadGroupChild` to one of its base interfaces.",137,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",137,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetParentLoadGroup","","`text /** * The parent of this load group. It is stored with * a nsIWeakReference/nsWeakPtr so there is no requirement for the * parentLoadGroup to out live the child, nor will the child keep a * reference count on the parent. */`",137,null],[11,"SetParentLoadGroup","","`text /** * The parent of this load group. It is stored with * a nsIWeakReference/nsWeakPtr so there is no requirement for the * parentLoadGroup to out live the child, nor will the child keep a * reference count on the parent. */`",137,null],[11,"GetChildLoadGroup","","`text /** * The nsILoadGroup associated with this nsILoadGroupChild */`",137,null],[11,"GetRootLoadGroup","","`text /** * The rootLoadGroup is the recursive parent of this * load group where parent is defined as parentlLoadGroup if set * or childLoadGroup.loadGroup as a backup. (i.e. parentLoadGroup takes * precedence.) The nsILoadGroup child is the root if neither parent * nor loadgroup attribute is specified. */`",137,null],[11,"addref","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",138,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPluginTag` to one of its base interfaces.",138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",138,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_DISABLED","","",138,null],[18,"STATE_CLICKTOPLAY","","",138,null],[18,"STATE_ENABLED","","",138,null],[11,"GetDescription","","`readonly attribute AUTF8String description;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFilename","","`readonly attribute AUTF8String filename;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFullpath","","`readonly attribute AUTF8String fullpath;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetVersion","","`readonly attribute AUTF8String version;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`readonly attribute AUTF8String name;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetNiceName","","`readonly attribute AUTF8String niceName;`",138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBlocklisted","","`text /** * true only if this plugin is \"hardblocked\" and cannot be enabled. */`",138,null],[11,"GetIsEnabledStateLocked","","`text /** * true if the state is non-default and locked, false otherwise. */`",138,null],[11,"GetActive","","`readonly attribute boolean active;`",138,null],[11,"GetBlocklistState","","`readonly attribute unsigned long blocklistState;`",138,null],[11,"GetDisabled","","`readonly attribute boolean disabled;`",138,null],[11,"GetClicktoplay","","`readonly attribute boolean clicktoplay;`",138,null],[11,"GetLoaded","","`readonly attribute boolean loaded;`",138,null],[11,"GetEnabledState","","`attribute unsigned long enabledState;`",138,null],[11,"SetEnabledState","","`attribute unsigned long enabledState;`",138,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetLastModifiedTime","","`readonly attribute PRTime lastModifiedTime;`",138,null],[11,"GetMimeTypes","","`void getMimeTypes ([optional] out unsigned long aCount, [array, size_is (aCount), retval] out wstring aResults);`",138,null],[11,"GetMimeDescriptions","","`void getMimeDescriptions ([optional] out unsigned long aCount, [array, size_is (aCount), retval] out wstring aResults);`",138,null],[11,"GetExtensions","","`void getExtensions ([optional] out unsigned long aCount, [array, size_is (aCount), retval] out wstring aResults);`",138,null],[11,"addref","","",139,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",139,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFakePluginTag` to one of its base interfaces.",139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",139,{"inputs":[{"name":"self"}],"output":{"name":"nsiplugintag"}}],[11,"GetHandlerURI","","`text /** * The URI that should be loaded into the tag (as a frame) to handle the * plugin. Note that the original data/src value for the plugin is not loaded * and will need to be requested by the handler via XHR or similar if desired. */`",139,null],[11,"GetSandboxScript","","`text /** * Optional script to run in a sandbox when instantiating a plugin. If this * value is an empty string then no such script will be run. * The script runs in a sandbox with system principal in the process that * contains the element that instantiates the plugin (ie the EMBED or OBJECT * element). The sandbox global has a 'pluginElement' property that the script * can use to access the element that instantiates the plugin. */`",139,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetId","","`text /** * A unique id for this JS-implemented plugin. 0 is a valid id. */`",139,null],[11,"addref","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",140,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditor` to one of its base interfaces.",140,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",140,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eNone","","",140,null],[18,"eNext","","",140,null],[18,"ePrevious","","",140,null],[18,"eNextWord","","",140,null],[18,"ePreviousWord","","",140,null],[18,"eToBeginningOfLine","","",140,null],[18,"eToEndOfLine","","",140,null],[18,"eStrip","","",140,null],[18,"eNoStrip","","",140,null],[11,"GetSelection","","`readonly attribute nsISelection selection;`",140,null],[11,"FinalizeSelection","","`text /** * Finalizes selection and caret for the editor. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * Init is to tell the implementation of nsIEditor to begin its services * @param aDoc The dom document interface being observed * @param aRoot This is the root of the editable section of this * document. If it is null then we get root * from document body. * @param aSelCon this should be used to get the selection location * (will be null for HTML editors) * @param aFlags A bitmask of flags for specifying the behavior * of the editor. */`",140,null],[11,"SetAttributeOrEquivalent","","`void setAttributeOrEquivalent (in nsIDOMElement element, in AString sourceAttrName, in AString sourceAttrValue, in boolean aSuppressTransaction);`",140,null],[11,"RemoveAttributeOrEquivalent","","`void removeAttributeOrEquivalent (in nsIDOMElement element, in DOMString sourceAttrName, in boolean aSuppressTransaction);`",140,null],[11,"PostCreate","","`text /** * postCreate should be called after Init, and is the time that the editor * tells its documentStateObservers that the document has been created. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PreDestroy","","`text /** * preDestroy is called before the editor goes away, and gives the editor a * chance to tell its documentStateObservers that the document is going away. * @param aDestroyingFrames set to true when the frames being edited * are being destroyed (so there is no need to modify any nsISelections, * nor is it safe to do so) */`",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetFlags","","`text /** edit flags for this editor. May be set at any time. */`",140,null],[11,"SetFlags","","`text /** edit flags for this editor. May be set at any time. */`",140,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetContentsMIMEType","","`text /** * the MimeType of the document */`",140,null],[11,"SetContentsMIMEType","","`text /** * the MimeType of the document */`",140,null],[11,"GetIsDocumentEditable","","`text /** Returns true if we have a document that is not marked read-only */`",140,null],[11,"GetIsSelectionEditable","","`text /** Returns true if the current selection anchor is editable */`",140,null],[11,"GetDocument","","`text /** * the DOM Document this editor is associated with, refcounted. */`",140,null],[11,"GetRootElement","","`text /** the body element, i.e. the root of the editable document. */`",140,null],[11,"GetSelectionController","","`text /** * the selection controller for the current presentation, refcounted. */`",140,null],[11,"DeleteSelection","","`text /** * DeleteSelection removes all nodes in the current selection. * @param aDir if eNext, delete to the right (for example, the DEL key) * if ePrevious, delete to the left (for example, the BACKSPACE key) * @param stripWrappers If eStrip, strip any empty inline elements left * behind after the deletion; if eNoStrip, don't. If in * doubt, pass eStrip -- eNoStrip is only for if you're * about to insert text or similar right after. */`",140,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetDocumentIsEmpty","","`text /** Returns true if the document has no *meaningful* content */`",140,null],[11,"GetDocumentModified","","`text /** Returns true if the document is modifed and needs saving */`",140,null],[11,"GetDocumentCharacterSet","","`text /** Sets the current 'Save' document character set */`",140,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDocumentCharacterSet","","`text /** Sets the current 'Save' document character set */`",140,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ResetModificationCount","","`text /** to be used ONLY when we need to override the doc's modification * state (such as when it's saved). */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetModificationCount","","`text /** Gets the modification count of the document we are editing. * @return the modification count of the document being edited. * Zero means unchanged. */`",140,null],[11,"IncrementModificationCount","","`text /** called each time we modify the document. * Increments the modification count of the document. * @param aModCount the number of modifications by which * to increase or decrease the count */`",140,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetTransactionManager","","`text /** transactionManager Get the transaction manager the editor is using. */`",140,null],[11,"DoTransaction","","`text /** doTransaction() fires a transaction. * It is provided here so clients can create their own transactions. * If a transaction manager is present, it is used. * Otherwise, the transaction is just executed directly. * * @param aTxn the transaction to execute */`",140,null],[11,"EnableUndo","","`text /** turn the undo system on or off * @param aEnable if PR_TRUE, the undo system is turned on if available * if PR_FALSE the undo system is turned off if it * was previously on * @return if aEnable is PR_TRUE, returns NS_OK if * the undo system could be initialized properly * if aEnable is PR_FALSE, returns NS_OK. */`",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetNumberOfUndoItems","","`text /** * The number of items on the undo stack. */`",140,null],[11,"GetNumberOfRedoItems","","`text /** * The number of items on the redo stack. */`",140,null],[11,"Undo","","`text /** undo reverses the effects of the last Do operation, * if Undo is enabled in the editor. * It is provided here so clients need no knowledge of whether * the editor has a transaction manager or not. * If a transaction manager is present, it is told to undo, * and the result of that undo is returned. * Otherwise, the Undo request is ignored and an * error NS_ERROR_NOT_AVAILABLE is returned. * */`",140,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"CanUndo","","`text /** returns state information about the undo system. * @param aIsEnabled [OUT] PR_TRUE if undo is enabled * @param aCanUndo [OUT] PR_TRUE if at least one transaction is * currently ready to be undone. */`",140,null],[11,"Redo","","`text /** redo reverses the effects of the last Undo operation * It is provided here so clients need no knowledge of whether * the editor has a transaction manager or not. * If a transaction manager is present, it is told to redo and the * result of the previously undone transaction is reapplied to the document. * If no transaction is available for Redo, or if the document * has no transaction manager, the Redo request is ignored and an * error NS_ERROR_NOT_AVAILABLE is returned. * */`",140,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"CanRedo","","`text /** returns state information about the redo system. * @param aIsEnabled [OUT] PR_TRUE if redo is enabled * @param aCanRedo [OUT] PR_TRUE if at least one transaction is currently ready to be redone. */`",140,null],[11,"BeginTransaction","","`text /** beginTransaction is a signal from the caller to the editor that * the caller will execute multiple updates to the content tree * that should be treated as a single logical operation, * in the most efficient way possible.<br> * All transactions executed between a call to beginTransaction and * endTransaction will be undoable as an atomic action.<br> * endTransaction must be called after beginTransaction.<br> * Calls to beginTransaction can be nested, as long as endTransaction * is called once per beginUpdate. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndTransaction","","`text /** endTransaction is a signal to the editor that the caller is * finished updating the content model.<br> * beginUpdate must be called before endTransaction is called.<br> * Calls to beginTransaction can be nested, as long as endTransaction * is called once per beginTransaction. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ShouldTxnSetSelection","","`boolean shouldTxnSetSelection ();`",140,null],[11,"SetShouldTxnSetSelection","","`text /** Set the flag that prevents insertElementTxn from changing the selection * @param should Set false to suppress changing the selection; * i.e., before using InsertElement() to insert * under <head> element * WARNING: You must be very careful to reset back to PR_TRUE after * setting PR_FALSE, else selection/caret is trashed * for further editing. */`",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInlineSpellChecker","","`text /** Returns the inline spell checker associated with this object. The spell * checker is lazily created, so this function may create the object for * you during this call. * @param autoCreate If true, this will create a spell checker object * if one does not exist yet for this editor. If false * and the object has not been created, this function * WILL RETURN NULL. */`",140,null],[11,"SyncRealTimeSpell","","`text /** Resyncs spellchecking state (enabled/disabled). This should be called * when anything that affects spellchecking state changes, such as the * spellcheck attribute value. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetSpellcheckUserOverride","","`text /** Called when the user manually overrides the spellchecking state for this * editor. * @param enable The new state of spellchecking in this editor, as * requested by the user. */`",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Cut","","`text /** cut the currently selected text, putting it into the OS clipboard * What if no text is selected? * What about mixed selections? * What are the clipboard formats? */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CanCut","","`text /** Can we cut? True if the doc is modifiable, and we have a non- * collapsed selection. */`",140,null],[11,"Copy","","`text /** copy the currently selected text, putting it into the OS clipboard * What if no text is selected? * What about mixed selections? * What are the clipboard formats? */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CanCopy","","`text /** Can we copy? True if we have a non-collapsed selection. */`",140,null],[11,"CanDelete","","`text /** Can we delete? True if we have a non-collapsed selection. */`",140,null],[11,"Paste","","`text /** paste the text in the OS clipboard at the cursor position, replacing * the selected text (if any) */`",140,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"PasteTransferable","","`text /** Paste the text in |aTransferable| at the cursor position, replacing the * selected text (if any). */`",140,null],[11,"CanPaste","","`text /** Can we paste? True if the doc is modifiable, and we have * pasteable data in the clipboard. */`",140,null],[11,"CanPasteTransferable","","`text /** Can we paste |aTransferable| or, if |aTransferable| is null, will a call * to pasteTransferable later possibly succeed if given an instance of * nsITransferable then? True if the doc is modifiable, and, if * |aTransfeable| is non-null, we have pasteable data in |aTransfeable|. */`",140,null],[11,"SelectAll","","`text /** sets the document selection to the entire contents of the document */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginningOfDocument","","`text /** sets the document selection to the beginning of the document */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndOfDocument","","`text /** sets the document selection to the end of the document */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetAttribute","","`text /** * setAttribute() sets the attribute of aElement. * No checking is done to see if aAttribute is a legal attribute of the node, * or if aValue is a legal value of aAttribute. * * @param aElement the content element to operate on * @param aAttribute the string representation of the attribute to set * @param aValue the value to set aAttribute to */`",140,null],[11,"GetAttributeValue","","`text /** * getAttributeValue() retrieves the attribute's value for aElement. * * @param aElement the content element to operate on * @param aAttribute the string representation of the attribute to get * @param aResultValue [OUT] the value of aAttribute. * Only valid if aResultIsSet is PR_TRUE * @return PR_TRUE if aAttribute is set on the current node, * PR_FALSE if it is not. */`",140,null],[11,"RemoveAttribute","","`text /** * removeAttribute() deletes aAttribute from the attribute list of aElement. * If aAttribute is not an attribute of aElement, nothing is done. * * @param aElement the content element to operate on * @param aAttribute the string representation of the attribute to get */`",140,null],[11,"CloneAttribute","","`text /** * cloneAttribute() copies the attribute from the source node to * the destination node and delete those not in the source. * * The supplied nodes MUST BE ELEMENTS (most callers are working with nodes) * @param aAttribute the name of the attribute to copy * @param aDestNode the destination element to operate on * @param aSourceNode the source element to copy attributes from * @exception NS_ERROR_NULL_POINTER at least one of the nodes is null * @exception NS_ERROR_NO_INTERFACE at least one of the nodes is not an * element */`",140,null],[11,"CloneAttributes","","`text /** * cloneAttributes() is similar to nsIDOMNode::cloneNode(), * it assures the attribute nodes of the destination are identical * with the source node by copying all existing attributes from the * source and deleting those not in the source. * This is used when the destination node (element) already exists * * The supplied nodes MUST BE ELEMENTS (most callers are working with nodes) * @param aDestNode the destination element to operate on * @param aSourceNode the source element to copy attributes from */`",140,null],[11,"InsertNode","","`text /** * insertNode inserts aNode into aParent at aPosition. * No checking is done to verify the legality of the insertion. * That is the responsibility of the caller. * @param aNode The DOM Node to insert. * @param aParent The node to insert the new object into * @param aPosition The place in aParent to insert the new node * 0=first child, 1=second child, etc. * any number > number of current children = last child */`",140,null],[11,"SplitNode","","`text /** * splitNode() creates a new node identical to an existing node, * and split the contents between the two nodes * @param aExistingRightNode the node to split. * It will become the new node's next sibling. * @param aOffset the offset of aExistingRightNode's * content|children to do the split at * @param aNewLeftNode [OUT] the new node resulting from the split, * becomes aExistingRightNode's previous sibling. */`",140,null],[11,"JoinNodes","","`text /** * joinNodes() takes 2 nodes and merge their content|children. * @param aLeftNode The left node. It will be deleted. * @param aRightNode The right node. It will remain after the join. * @param aParent The parent of aExistingRightNode * * There is no requirement that the two nodes be * of the same type. However, a text node can be * merged only with another text node. */`",140,null],[11,"DeleteNode","","`text /** * deleteNode removes aChild from aParent. * @param aChild The node to delete */`",140,null],[11,"OutputsMozDirty","","`text /** * Returns true if markNodeDirty() has any effect. Returns false if * markNodeDirty() is a no-op. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"MarkNodeDirty","","`text /** * markNodeDirty() sets a special dirty attribute on the node. * Usually this will be called immediately after creating a new node. * @param aNode The node for which to insert formatting. */`",140,null],[11,"SwitchTextDirection","","`text /** * Switches the editor element direction; from \"Left-to-Right\" to * \"Right-to-Left\", and vice versa. */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OutputToString","","`text /** * Output methods: * aFormatType is a mime type, like text/plain. */`",140,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"OutputToStream","","`void outputToStream (in nsIOutputStream aStream, in AString formatType, in ACString charsetOverride, in unsigned long flags);`",140,null],[11,"AddEditorObserver","","`text /** add an EditorObserver to the editors list of observers. */`",140,null],[11,"RemoveEditorObserver","","`text /** Remove an EditorObserver from the editor's list of observers. */`",140,null],[11,"AddEditActionListener","","`text /** add an EditActionListener to the editors list of listeners. */`",140,null],[11,"RemoveEditActionListener","","`text /** Remove an EditActionListener from the editor's list of listeners. */`",140,null],[11,"AddDocumentStateListener","","`text /** Add a DocumentStateListener to the editors list of doc state listeners. */`",140,null],[11,"RemoveDocumentStateListener","","`text /** Remove a DocumentStateListener to the editors list of doc state listeners. */`",140,null],[11,"DumpContentTree","","`text /** * And a debug method -- show us what the tree looks like right now */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DebugDumpContent","","`text /** Dumps a text representation of the content tree to standard out */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DebugUnitTests","","`void debugUnitTests (out long outNumTests, out long outNumTestsFailed);`",140,null],[11,"IsModifiableNode","","`[notxpcom] boolean isModifiableNode (in nsIDOMNode aNode);`",140,null],[11,"GetSuppressDispatchingInputEvent","","`attribute boolean suppressDispatchingInputEvent;`",140,null],[11,"SetSuppressDispatchingInputEvent","","`attribute boolean suppressDispatchingInputEvent;`",140,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsInEditAction","","`text /** * True if an edit action is being handled (in other words, between calls of * nsIEditorObserver::BeforeEditAction() and nsIEditorObserver::EditAction() * or nsIEditorObserver::CancelEditAction(). Otherwise, false. */`",140,null],[11,"ForceCompositionEnd","","`text /** * forceCompositionEnd() force the composition end */`",140,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetComposing","","`text /** * whether this editor has active IME transaction */`",140,null],[11,"addref","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",141,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIObserver` to one of its base interfaces.",141,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",141,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Observe","","`text /** * Observe will be called when there is a notification for the * topic |aTopic|. This assumes that the object implementing * this interface has been registered with an observer service * such as the nsIObserverService. * * If you expect multiple topics/subjects, the impl is * responsible for filtering. * * You should not modify, add, remove, or enumerate * notifications in the implemention of observe. * * @param aSubject : Notification specific interface pointer. * @param aTopic : The notification topic or subject. * @param aData : Notification specific wide string. * subject event. */`",141,null],[11,"addref","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",142,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestBug809674` to one of its base interfaces.",142,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",142,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",143,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMFileList` to one of its base interfaces.",143,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",143,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",143,null],[11,"Item","","`nsISupports item (in unsigned long index);`",143,null],[11,"addref","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",144,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICycleCollectorHandler` to one of its base interfaces.",144,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",144,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NoteRefCountedObject","","`void noteRefCountedObject (in ACString aAddress, in unsigned long aRefCount, in ACString aObjectDescription);`",144,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"NoteGCedObject","","`void noteGCedObject (in ACString aAddress, in boolean aMarked, in ACString aObjectDescription, in ACString aCompartmentAddress);`",144,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"NoteEdge","","`void noteEdge (in ACString aFromAddress, in ACString aToAddress, in ACString aEdgeName);`",144,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"DescribeRoot","","`void describeRoot (in ACString aAddress, in unsigned long aKnownEdges);`",144,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DescribeGarbage","","`void describeGarbage (in ACString aAddress);`",144,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",145,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",145,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICycleCollectorLogSink` to one of its base interfaces.",145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",145,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CloseGCLog","","`void closeGCLog ();`",145,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CloseCCLog","","`void closeCCLog ();`",145,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetFilenameIdentifier","","`attribute AString filenameIdentifier;`",145,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFilenameIdentifier","","`attribute AString filenameIdentifier;`",145,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetProcessIdentifier","","`attribute int32_t processIdentifier;`",145,null],[11,"SetProcessIdentifier","","`attribute int32_t processIdentifier;`",145,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetGcLog","","`readonly attribute nsIFile gcLog;`",145,null],[11,"GetCcLog","","`readonly attribute nsIFile ccLog;`",145,null],[11,"addref","","",146,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",146,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICycleCollectorListener` to one of its base interfaces.",146,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",146,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AllTraces","","`nsICycleCollectorListener allTraces ();`",146,null],[11,"GetWantAllTraces","","`readonly attribute boolean wantAllTraces;`",146,null],[11,"GetDisableLog","","`attribute boolean disableLog;`",146,null],[11,"SetDisableLog","","`attribute boolean disableLog;`",146,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLogSink","","`attribute nsICycleCollectorLogSink logSink;`",146,null],[11,"SetLogSink","","`attribute nsICycleCollectorLogSink logSink;`",146,null],[11,"GetWantAfterProcessing","","`attribute boolean wantAfterProcessing;`",146,null],[11,"SetWantAfterProcessing","","`attribute boolean wantAfterProcessing;`",146,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ProcessNext","","`boolean processNext (in nsICycleCollectorHandler aHandler);`",146,null],[11,"addref","","",147,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",147,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDivertableChannel` to one of its base interfaces.",147,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",147,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"UnknownDecoderInvolvedKeepData","","`text /** * nsUnknownDecoder delays calling OnStartRequest until it gets enough data * to decide about the content type (until OnDataAvaiable is called). In a * OnStartRequest DivertToParent can be called but some OnDataAvailables are * already called and therefore can not be diverted to parent. * * nsUnknownDecoder will call UnknownDecoderInvolvedKeepData in its * OnStartRequest function and when it calls OnStartRequest of the next * listener it will call UnknownDecoderInvolvedOnStartRequestCalled. In this * function Child process will decide to discarge data if it is not diverting * to parent or keep them if it is diverting to parent. */`",147,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UnknownDecoderInvolvedOnStartRequestCalled","","`void unknownDecoderInvolvedOnStartRequestCalled ();`",147,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDivertingToParent","","`readonly attribute bool divertingToParent;`",147,null],[11,"addref","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",148,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDOMException` to one of its base interfaces.",148,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",148,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"INDEX_SIZE_ERR","","",148,null],[18,"DOMSTRING_SIZE_ERR","","",148,null],[18,"HIERARCHY_REQUEST_ERR","","",148,null],[18,"WRONG_DOCUMENT_ERR","","",148,null],[18,"INVALID_CHARACTER_ERR","","",148,null],[18,"NO_DATA_ALLOWED_ERR","","",148,null],[18,"NO_MODIFICATION_ALLOWED_ERR","","",148,null],[18,"NOT_FOUND_ERR","","",148,null],[18,"NOT_SUPPORTED_ERR","","",148,null],[18,"INUSE_ATTRIBUTE_ERR","","",148,null],[18,"INVALID_STATE_ERR","","",148,null],[18,"SYNTAX_ERR","","",148,null],[18,"INVALID_MODIFICATION_ERR","","",148,null],[18,"NAMESPACE_ERR","","",148,null],[18,"INVALID_ACCESS_ERR","","",148,null],[18,"VALIDATION_ERR","","",148,null],[18,"TYPE_MISMATCH_ERR","","",148,null],[18,"SECURITY_ERR","","",148,null],[18,"NETWORK_ERR","","",148,null],[18,"ABORT_ERR","","",148,null],[18,"URL_MISMATCH_ERR","","",148,null],[18,"QUOTA_EXCEEDED_ERR","","",148,null],[18,"TIMEOUT_ERR","","",148,null],[18,"INVALID_NODE_TYPE_ERR","","",148,null],[18,"DATA_CLONE_ERR","","",148,null],[18,"INVALID_POINTER_ERR","","",148,null],[11,"GetCode","","`readonly attribute unsigned short code;`",148,null],[11,"addref","","",149,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",149,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecurityUITelemetry` to one of its base interfaces.",149,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",149,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"WARNING_ADDON_ASKING_PREVENTED","","",149,null],[18,"WARNING_ADDON_ASKING_PREVENTED_CLICK_THROUGH","","",149,null],[18,"WARNING_CONFIRM_ADDON_INSTALL","","",149,null],[18,"WARNING_CONFIRM_ADDON_INSTALL_CLICK_THROUGH","","",149,null],[18,"WARNING_CONFIRM_POST_TO_INSECURE_FROM_SECURE","","",149,null],[18,"WARNING_CONFIRM_POST_TO_INSECURE_FROM_SECURE_CLICK_THROUGH","","",149,null],[18,"WARNING_BAD_CERT_ADD_EXCEPTION_BASE","","",149,null],[18,"WARNING_BAD_CERT_ADD_EXCEPTION_FLAG_UNTRUSTED","","",149,null],[18,"WARNING_BAD_CERT_ADD_EXCEPTION_FLAG_DOMAIN","","",149,null],[18,"WARNING_BAD_CERT_ADD_EXCEPTION_FLAG_TIME","","",149,null],[18,"WARNING_BAD_CERT_CONFIRM_ADD_EXCEPTION_BASE","","",149,null],[18,"WARNING_BAD_CERT_CONFIRM_ADD_EXCEPTION_FLAG_UNTRUSTED","","",149,null],[18,"WARNING_BAD_CERT_CONFIRM_ADD_EXCEPTION_FLAG_DOMAIN","","",149,null],[18,"WARNING_BAD_CERT_CONFIRM_ADD_EXCEPTION_FLAG_TIME","","",149,null],[18,"WARNING_GEOLOCATION_REQUEST","","",149,null],[18,"WARNING_GEOLOCATION_REQUEST_SHARE_LOCATION","","",149,null],[18,"WARNING_GEOLOCATION_REQUEST_ALWAYS_SHARE","","",149,null],[18,"WARNING_GEOLOCATION_REQUEST_NEVER_SHARE","","",149,null],[18,"WARNING_BAD_CERT_TOP","","",149,null],[18,"WARNING_BAD_CERT_TOP_STS","","",149,null],[18,"WARNING_BAD_CERT_TOP_CLICK_ADD_EXCEPTION","","",149,null],[18,"WARNING_BAD_CERT_TOP_CLICK_VIEW_CERT","","",149,null],[18,"WARNING_BAD_CERT_TOP_DONT_REMEMBER_EXCEPTION","","",149,null],[18,"WARNING_BAD_CERT_TOP_GET_ME_OUT_OF_HERE","","",149,null],[18,"WARNING_BAD_CERT_TOP_UNDERSTAND_RISKS","","",149,null],[18,"WARNING_BAD_CERT_TOP_ADD_EXCEPTION_BASE","","",149,null],[18,"WARNING_BAD_CERT_TOP_ADD_EXCEPTION_FLAG_UNTRUSTED","","",149,null],[18,"WARNING_BAD_CERT_TOP_ADD_EXCEPTION_FLAG_DOMAIN","","",149,null],[18,"WARNING_BAD_CERT_TOP_ADD_EXCEPTION_FLAG_TIME","","",149,null],[18,"WARNING_BAD_CERT_TOP_CONFIRM_ADD_EXCEPTION_BASE","","",149,null],[18,"WARNING_BAD_CERT_TOP_CONFIRM_ADD_EXCEPTION_FLAG_UNTRUSTED","","",149,null],[18,"WARNING_BAD_CERT_TOP_CONFIRM_ADD_EXCEPTION_FLAG_DOMAIN","","",149,null],[18,"WARNING_BAD_CERT_TOP_CONFIRM_ADD_EXCEPTION_FLAG_TIME","","",149,null],[11,"addref","","",150,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",150,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWifiAccessPoint` to one of its base interfaces.",150,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",150,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMac","","`readonly attribute ACString mac;`",150,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSsid","","`readonly attribute AString ssid;`",150,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRawSSID","","`readonly attribute ACString rawSSID;`",150,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSignal","","`readonly attribute long signal;`",150,null],[11,"addref","","",151,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",151,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDroppedLinkItem` to one of its base interfaces.",151,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",151,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetUrl","","`text /** * Returns the URL of the link. */`",151,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`text /** * Returns the link name. */`",151,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`text /** * Returns the MIME-Type. */`",151,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",152,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",152,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDroppedLinkHandler` to one of its base interfaces.",152,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",152,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CanDropLink","","`text /** * Determines if a link being dragged can be dropped and returns true if so. * aEvent should be a dragenter or dragover event. * * If aAllowSameDocument is false, drops are only allowed if the document * of the source of the drag is different from the destination. This check * includes any parent, sibling and child frames in the same content tree. * If true, the source is not checked. */`",152,null],[11,"DropLink","","`text /** * Given a drop event aEvent, determines the link being dragged and returns * it. If a uri is returned the caller can, for instance, load it. If null * is returned, there is no valid link to be dropped. * * A NS_ERROR_DOM_SECURITY_ERR error will be thrown and the event cancelled if * the receiving target should not load the uri for security reasons. This * will occur if any of the following conditions are true: * - the source of the drag initiated a link for dragging that * it itself cannot access. This prevents a source document from tricking * the user into a dragging a chrome url, for example. * - aDisallowInherit is true, and the URI being dropped would inherit the * current document's security context (URI_INHERITS_SECURITY_CONTEXT). * * aName is filled in with the link title if it exists, or an empty string * otherwise. */`",152,null],[11,"DropLinks","","`text /** * Given a drop event aEvent, determines links being dragged and returns * them. If links are returned the caller can, for instance, load them. If * the count of links is 0, there is no valid link to be dropped. * * A NS_ERROR_DOM_SECURITY_ERR error will be thrown and the event cancelled if * the receiving target should not load the uri for security reasons. This * will occur if any of the following conditions are true: * - the source of the drag initiated a link for dragging that * it itself cannot access. This prevents a source document from tricking * the user into a dragging a chrome url, for example. * - aDisallowInherit is true, and the URI being dropped would inherit the * current document's security context (URI_INHERITS_SECURITY_CONTEXT). */`",152,null],[11,"QueryLinks","","`text /** * Given a dataTransfer, allows caller to determine and verify links being * dragged. Since drag/drop performs a roundtrip of parent, child, parent, * it allows the parent to verify that the child did not modify links * being dropped. */`",152,null],[11,"GetTriggeringPrincipal","","`text /** * Given a drop event aEvent, determines the triggering principal for the * event and returns it. */`",152,null],[11,"addref","","",153,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",153,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `amIAddonManager` to one of its base interfaces.",153,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",153,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"MapURIToAddonID","","`text /** * Synchronously map a URI to the corresponding Addon ID. * * Mappable URIs are limited to in-application resources belonging to the * add-on, such as Javascript compartments, XUL windows, XBL bindings, etc. * but do not include URIs from meta data, such as the add-on homepage. * * @param aURI * The nsIURI to map * @return * true if the URI has been mapped successfully to an Addon ID */`",153,null],[11,"addref","","",154,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",154,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleSelectable` to one of its base interfaces.",154,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",154,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSelectedItems","","`text /** * Return an nsIArray of selected items within the widget. */`",154,null],[11,"GetSelectedItemCount","","`text /** * Return the number of currently selected items. */`",154,null],[11,"GetSelectedItemAt","","`text /** * Return a nth selected item within the widget. */`",154,null],[11,"IsItemSelected","","`text /** * Return true if the given item is selected. */`",154,null],[11,"AddItemToSelection","","`text /** * Adds the specified item to the widget's selection. */`",154,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"RemoveItemFromSelection","","`text /** * Removes the specified item from the widget's selection. */`",154,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SelectAll","","`text /** * Select all items. * * @return false if the object does not accept multiple selection, * otherwise true. */`",154,null],[11,"UnselectAll","","`text /** * Unselect all items. */`",154,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",155,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",155,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClientAuthDialogs` to one of its base interfaces.",155,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",155,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ChooseCertificate","","`text /** * Called when a user is asked to choose a certificate for client auth. * * @param ctx Context that allows at least nsIClientAuthUserDecision to be * queried. * @param hostname Hostname of the server. * @param port Port of the server. * @param organization Organization field of the server cert. * @param issuerOrg Organization field of the issuer cert of the server cert. * @param certList List of certificates the user can choose from. * @param selectedIndex Index of the cert in |certList| that the user chose. * Ignored if the return value is false. * @return true if a certificate was chosen. false if the user canceled. */`",155,null],[11,"addref","","",156,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",156,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClientAuthUserDecision` to one of its base interfaces.",156,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",156,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRememberClientAuthCertificate","","`attribute boolean rememberClientAuthCertificate;`",156,null],[11,"SetRememberClientAuthCertificate","","`attribute boolean rememberClientAuthCertificate;`",156,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",157,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",157,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkPredictor` to one of its base interfaces.",157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",157,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PREDICT_LINK","","`text /** * Prediction reasons * * PREDICT_LINK - we are being asked to take predictive action because * the user is hovering over a link. * * PREDICT_LOAD - we are being asked to take predictive action because * the user has initiated a pageload. * * PREDICT_STARTUP - we are being asked to take predictive action * because the browser is starting up. */`",157,null],[18,"PREDICT_LOAD","","",157,null],[18,"PREDICT_STARTUP","","",157,null],[18,"LEARN_LOAD_TOPLEVEL","","",157,null],[18,"LEARN_LOAD_SUBRESOURCE","","",157,null],[18,"LEARN_LOAD_REDIRECT","","",157,null],[18,"LEARN_STARTUP","","",157,null],[11,"Reset","","`text /** * Clear out all our learned knowledge * * This removes everything from our database so that any predictions begun * after this completes will start from a blank slate. */`",157,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",158,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",158,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIVersionComparator` to one of its base interfaces.",158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",158,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Compare","","`text /** * Compare two version strings * @param A The first version * @param B The second version * @returns < 0 if A < B * = 0 if A == B * > 0 if A > B */`",158,null],[11,"addref","","",159,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",159,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgICache` to one of its base interfaces.",159,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",159,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ClearCache","","`text /** * Evict images from the cache. * * @param chrome If TRUE, evict only chrome images. * If FALSE, evict everything except chrome images. */`",159,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveEntry","","`text /** * Evict images from the cache. * * @param uri The URI to remove. * @param doc The document to remove the cache entry for. * @throws NS_ERROR_NOT_AVAILABLE if \\a uri was unable to be removed from * the cache. */`",159,null],[11,"FindEntryProperties","","`text /** * Find Properties * Used to get properties such as 'type' and 'content-disposition' * 'type' is a nsISupportsCString containing the images' mime type such as * 'image/png' * 'content-disposition' will be a nsISupportsCString containing the header * If you call this before any data has been loaded from a URI, it will * succeed, but come back empty. * * Hopefully this will be removed with bug 805119 * * @param uri The URI to look up. * @param doc Optional pointer to the document that the cache entry belongs to. * @returns NULL if the URL was not found in the cache */`",159,null],[11,"RespectPrivacyNotifications","","`text /** * Make this cache instance respect private browsing notifications. This * entails clearing the chrome and content caches whenever the * last-pb-context-exited notification is observed. */`",159,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearCacheForControlledDocument","","`text /** * Clear the image cache for a document. Controlled documents are responsible * for doing this manually when they get destroyed. */`",159,null],[11,"addref","","",160,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",160,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIReflowObserver` to one of its base interfaces.",160,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",160,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Reflow","","`text /** * Called when an uninterruptible reflow has occurred. * * @param start timestamp when reflow ended, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) * @param end timestamp when reflow ended, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) */`",160,{"inputs":[{"name":"self"},{"name":"domhighrestimestamp"},{"name":"domhighrestimestamp"}],"output":{"name":"nsresult"}}],[11,"ReflowInterruptible","","`text /** * Called when an interruptible reflow has occurred. * * @param start timestamp when reflow ended, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) * @param end timestamp when reflow ended, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) */`",160,{"inputs":[{"name":"self"},{"name":"domhighrestimestamp"},{"name":"domhighrestimestamp"}],"output":{"name":"nsresult"}}],[11,"addref","","",161,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",161,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFetchTelemetryDataCallback` to one of its base interfaces.",161,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",161,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`void complete ();`",161,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",162,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",162,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITelemetry` to one of its base interfaces.",162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",162,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"HISTOGRAM_EXPONENTIAL","","`text /** * Histogram types: * HISTOGRAM_EXPONENTIAL - buckets increase exponentially * HISTOGRAM_LINEAR - buckets increase linearly * HISTOGRAM_BOOLEAN - For storing 0/1 values * HISTOGRAM_FLAG - For storing a single value; its count is always == 1. * HISTOGRAM_COUNT - For storing counter values without bucketing. * HISTOGRAM_CATEGORICAL - For storing enumerated values by label. */`",162,null],[18,"HISTOGRAM_LINEAR","","",162,null],[18,"HISTOGRAM_BOOLEAN","","",162,null],[18,"HISTOGRAM_FLAG","","",162,null],[18,"HISTOGRAM_COUNT","","",162,null],[18,"HISTOGRAM_CATEGORICAL","","",162,null],[18,"SCALAR_TYPE_COUNT","","`text /** * Scalar types: * SCALAR_TYPE_COUNT - for storing a numeric value * SCALAR_TYPE_STRING - for storing a string value * SCALAR_TYPE_BOOLEAN - for storing a boolean value */`",162,null],[18,"SCALAR_TYPE_STRING","","",162,null],[18,"SCALAR_TYPE_BOOLEAN","","",162,null],[18,"DATASET_RELEASE_CHANNEL_OPTOUT","","`text /** * Dataset types: * DATASET_RELEASE_CHANNEL_OPTOUT - the basic dataset that is on-by-default on all channels * DATASET_RELEASE_CHANNEL_OPTIN - the extended dataset that is opt-in on release, * opt-out on pre-release channels. */`",162,null],[18,"DATASET_RELEASE_CHANNEL_OPTIN","","",162,null],[11,"GetLastShutdownDuration","","`text /** * The amount of time, in milliseconds, that the last session took * to shutdown. Reads as 0 to indicate failure. */`",162,null],[11,"GetFailedProfileLockCount","","`text /** * The number of failed profile lock attempts that have occurred prior to * successfully locking the profile */`",162,null],[11,"GetMaximalNumberOfConcurrentThreads","","`text /** * A number representing the highest number of concurrent threads * reached during this session. */`",162,null],[11,"CaptureStack","","`void captureStack (in ACString name);`",162,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCanRecordBase","","`text /** * A flag indicating if Telemetry can record base data (FHR data). This is true if the * FHR data reporting service or self-support are enabled. * * In the unlikely event that adding a new base probe is needed, please check the data * collection wiki at https://wiki.mozilla.org/Firefox/Data_Collection and talk to the * Telemetry team. */`",162,null],[11,"SetCanRecordBase","","`text /** * A flag indicating if Telemetry can record base data (FHR data). This is true if the * FHR data reporting service or self-support are enabled. * * In the unlikely event that adding a new base probe is needed, please check the data * collection wiki at https://wiki.mozilla.org/Firefox/Data_Collection and talk to the * Telemetry team. */`",162,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCanRecordExtended","","`text /** * A flag indicating if Telemetry is allowed to record extended data. Returns false if * the user hasn't opted into \"extended Telemetry\" on the Release channel, when the * user has explicitly opted out of Telemetry on Nightly/Aurora/Beta or if manually * set to false during tests. * * Set this to false in tests to disable gathering of extended telemetry statistics. */`",162,null],[11,"SetCanRecordExtended","","`text /** * A flag indicating if Telemetry is allowed to record extended data. Returns false if * the user hasn't opted into \"extended Telemetry\" on the Release channel, when the * user has explicitly opted out of Telemetry on Nightly/Aurora/Beta or if manually * set to false during tests. * * Set this to false in tests to disable gathering of extended telemetry statistics. */`",162,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCanRecordReleaseData","","`text /** * A flag indicating whether Telemetry is recording release data, which is a * smallish subset of our usage data that we're prepared to handle from our * largish release population. * * This is true most of the time. * * This does not indicate whether Telemetry will send any data. That is * governed by user preference and other mechanisms. * * You may use this to determine if it's okay to record your data. */`",162,null],[11,"GetCanRecordPrereleaseData","","`text /** * A flag indicating whether Telemetry is recording prerelease data, which is * a largish amount of usage data that we're prepared to handle from our * smallish pre-release population. * * This is true on pre-release branches of Firefox. * * This does not indicate whether Telemetry will send any data. That is * governed by user preference and other mechanisms. * * You may use this to determine if it's okay to record your data. */`",162,null],[11,"GetIsOfficialTelemetry","","`text /** * A flag indicating whether Telemetry can submit official results (for base or extended * data). This is true on official, non-debug builds with built in support for Mozilla * Telemetry reporting. */`",162,null],[11,"SetHistogramRecordingEnabled","","`text /** * Enable/disable recording for this histogram at runtime. * Recording is enabled by default, unless listed at kRecordingInitiallyDisabledIDs[]. * Name must be a valid Histogram identifier, otherwise an assertion will be triggered. * * @param id - unique identifier from histograms.json * @param enabled - whether or not to enable recording from now on. */`",162,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AsyncFetchTelemetryData","","`text /** * Read data from the previous run. After the callback is called, the last * shutdown time is available in lastShutdownDuration and any late * writes in lateWrites. */`",162,null],[11,"MsSinceProcessStart","","`text /** * Return the number of milliseconds since process start using monotonic * timestamps (unaffected by system clock changes). * @throws NS_ERROR_NOT_AVAILABLE if TimeStamp doesn't have the data. */`",162,null],[11,"MsSystemNow","","`text /** * Time since the system wide epoch. This is not a monotonic timer but * can be used across process boundaries. */`",162,null],[11,"ClearScalars","","`text /** * Resets all the stored scalars. This is intended to be only used in tests. */`",162,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"FlushBatchedChildTelemetry","","`text /** * Immediately sends any Telemetry batched on this process to the parent * process. This is intended only to be used on process shutdown. */`",162,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetEventRecordingEnabled","","`text /** * Enable recording of events in a category. * Events default to recording disabled. This allows to toggle recording for all events * in the specified category. * * @param aCategory The category name. * @param aEnabled Whether recording is enabled for events in that category. */`",162,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ClearEvents","","`text /** * Resets all the stored events. This is intended to be only used in tests. */`",162,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",163,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageLoop` to one of its base interfaces.",163,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",163,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PostIdleTask","","`text /** * Posts a task to be run when this thread's message loop is idle, or after * ensureRunsAfterMS milliseconds have elapsed. (That is, the task is * guaranteed to run /eventually/.) * * Note that if the event loop is busy, we will hold a reference to the task * until ensureRunsAfterMS milliseconds have elapsed. Be careful when * specifying long timeouts and tasks which hold references to windows or * other large objects, because you can leak memory in a difficult-to-detect * way! */`",163,null],[11,"addref","","",164,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",164,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULLabelElement` to one of its base interfaces.",164,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",164,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxuldescriptionelement"}}],[11,"GetAccessKey","","`attribute DOMString accessKey;`",164,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAccessKey","","`attribute DOMString accessKey;`",164,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetControl","","`attribute DOMString control;`",164,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetControl","","`attribute DOMString control;`",164,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",165,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",165,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionRequest` to one of its base interfaces.",165,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",165,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDevice","","`readonly attribute nsIPresentationDevice device;`",165,null],[11,"GetUrl","","`readonly attribute DOMString url;`",165,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPresentationId","","`readonly attribute DOMString presentationId;`",165,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetControlChannel","","`readonly attribute nsIPresentationControlChannel controlChannel;`",165,null],[11,"addref","","",166,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",166,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheSession` to one of its base interfaces.",166,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",166,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDoomEntriesIfExpired","","`text /** * Expired entries will be doomed or evicted if this attribute is set to * true. If false, expired entries will be returned (useful for offline- * mode and clients, such as HTTP, that can update the valid lifetime of * cached content). This attribute defaults to true. */`",166,null],[11,"SetDoomEntriesIfExpired","","`text /** * Expired entries will be doomed or evicted if this attribute is set to * true. If false, expired entries will be returned (useful for offline- * mode and clients, such as HTTP, that can update the valid lifetime of * cached content). This attribute defaults to true. */`",166,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetProfileDirectory","","`text /** * When set, entries created with this session will be placed to a cache * based at this directory. Use when storing entries to a different * profile than the active profile of the the current running application * process. */`",166,null],[11,"SetProfileDirectory","","`text /** * When set, entries created with this session will be placed to a cache * based at this directory. Use when storing entries to a different * profile than the active profile of the the current running application * process. */`",166,null],[11,"OpenCacheEntry","","`text /** * A cache session can only give out one descriptor with WRITE access * to a given cache entry at a time. Until the client calls MarkValid on * its descriptor, other attempts to open the same cache entry will block. */ /** * Synchronous cache access. This method fails if it is called on the main * thread. Use asyncOpenCacheEntry() instead. This returns a unique * descriptor each time it is called, even if the same key is specified. * When called by multiple threads for write access, only one writable * descriptor will be granted. If 'blockingMode' is set to false, it will * return NS_ERROR_CACHE_WAIT_FOR_VALIDATION rather than block when another * descriptor has been given WRITE access but hasn't validated the entry yet. */`",166,null],[11,"AsyncOpenCacheEntry","","`text /** * Asynchronous cache access. Does not block the calling thread. Instead, * the listener will be notified when the descriptor is available. If * 'noWait' is set to true, the listener will be notified immediately with * status NS_ERROR_CACHE_WAIT_FOR_VALIDATION rather than queuing the request * when another descriptor has been given WRITE access but hasn't validated * the entry yet. */`",166,null],[11,"EvictEntries","","`text /** * Evict all entries for this session's clientID according to its storagePolicy. */`",166,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsStorageEnabled","","`text /** * Return whether any of the cache devices implied by the session storage policy * are currently enabled for instantiation if they don't already exist. */`",166,null],[11,"DoomEntry","","`text /** * Asynchronously doom an entry specified by the key. Listener will be * notified about the status of the operation. Null may be passed if caller * doesn't care about the result. */`",166,null],[11,"GetIsPrivate","","`text /** * Private entries will be doomed when the last private browsing session * finishes. */`",166,null],[11,"SetIsPrivate","","`text /** * Private entries will be doomed when the last private browsing session * finishes. */`",166,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",167,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",167,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrefService` to one of its base interfaces.",167,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",167,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ResetPrefs","","`text /** * Called to completely flush and re-initialize the preferences system. * * @throws Error The preference service failed to restart correctly. */`",167,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResetUserPrefs","","`text /** * Called to reset all preferences with user set values back to the * application default values. */`",167,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SavePrefFile","","`text /** * Called to write current preferences state to a file. * * @param aFile The file to be written. * * @note * If nullptr is passed in for the aFile parameter the preference data is * written out to the current preferences file (usually prefs.js.) * * @throws Error File failed to write. * * @see readUserPrefs * @see nsIFile */`",167,null],[11,"GetBranch","","`text /** * Call to get a Preferences \"Branch\" which accesses user preference data. * Using a Set method on this object will always create or set a user * preference value. When using a Get method a user set value will be * returned if one exists, otherwise a default value will be returned. * * @param aPrefRoot The preference \"root\" on which to base this \"branch\". * For example, if the root \"browser.startup.\" is used, the * branch will be able to easily access the preferences * \"browser.startup.page\", \"browser.startup.homepage\", or * \"browser.startup.homepage_override\" by simply requesting * \"page\", \"homepage\", or \"homepage_override\". nullptr or \"\" * may be used to access to the entire preference \"tree\". * * @return nsIPrefBranch The object representing the requested branch. * * @see getDefaultBranch */`",167,null],[11,"GetDefaultBranch","","`text /** * Call to get a Preferences \"Branch\" which accesses only the default * preference data. Using a Set method on this object will always create or * set a default preference value. When using a Get method a default value * will always be returned. * * @param aPrefRoot The preference \"root\" on which to base this \"branch\". * For example, if the root \"browser.startup.\" is used, the * branch will be able to easily access the preferences * \"browser.startup.page\", \"browser.startup.homepage\", or * \"browser.startup.homepage_override\" by simply requesting * \"page\", \"homepage\", or \"homepage_override\". nullptr or \"\" * may be used to access to the entire preference \"tree\". * * @note * Few consumers will want to create default branch objects. Many of the * branch methods do nothing on a default branch because the operations only * make sense when applied to user set preferences. * * @return nsIPrefBranch The object representing the requested default branch. * * @see getBranch */`",167,null],[11,"GetDirty","","`text /** * The preference service is 'dirty' if there are changes to user preferences * that have not been written to disk */`",167,null],[11,"ReadUserPrefsFromFile","","`text /** * Read in the preferences specified in a user preference file. This method * does not clear user preferences that were already set. * * @param aFile The file to be read. * * @throws Error File failed to read or contained invalid data. * @note This method is intended for internal unit testing only! */`",167,null],[11,"addref","","",168,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",168,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBlocklistService` to one of its base interfaces.",168,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",168,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_NOT_BLOCKED","","",168,null],[18,"STATE_SOFTBLOCKED","","",168,null],[18,"STATE_BLOCKED","","",168,null],[18,"STATE_OUTDATED","","",168,null],[18,"STATE_VULNERABLE_UPDATE_AVAILABLE","","",168,null],[18,"STATE_VULNERABLE_NO_UPDATE","","",168,null],[11,"GetPluginBlocklistState","","`text /** * Determine the blocklist state of a plugin * @param plugin * The plugin to get the state for * @param appVersion * The version of the application we are checking in the blocklist. * If this parameter is null, the version of the running application * is used. * @param toolkitVersion * The version of the toolkit we are checking in the blocklist. * If this parameter is null, the version of the running toolkit * is used. * @returns The STATE constant. */`",168,null],[11,"GetPluginBlocklistURL","","`text /** * Determine the blocklist web page of a plugin. * @param plugin * The blocked plugin that we are determining the web page for. * @returns The URL of the description page. */`",168,null],[11,"GetPluginInfoURL","","`text /** * Determine the blocklist infoURL of a plugin. * @param plugin * The blocked plugin that we are determining the infoURL for. * @returns The preferred URL to present the user, or |null| if * it is not available. */`",168,null],[11,"addref","","",169,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",169,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBlocklistPrompt` to one of its base interfaces.",169,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",169,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Prompt","","`text /** * Prompt the user about newly blocked addons. The prompt is then resposible * for soft-blocking any addons that need to be afterwards * * @param aAddons * An array of addons and plugins that are blocked. These are javascript * objects with properties: * name - the plugin or extension name, * version - the version of the extension or plugin, * icon - the plugin or extension icon, * disable - can be used by the nsIBlocklistPrompt to allows users to decide * whether a soft-blocked add-on should be disabled, * blocked - true if the item is hard-blocked, false otherwise, * item - the nsIPluginTag or Addon object * @param aCount * The number of addons */`",169,null],[11,"addref","","",170,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",170,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFilePickerShownCallback` to one of its base interfaces.",170,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",170,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Done","","`text /** * Callback which is called when a filepicker is shown and a result * is returned. * * @param aResult One of returnOK, returnCancel, or returnReplace */`",170,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",171,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",171,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFilePicker` to one of its base interfaces.",171,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",171,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"modeOpen","","",171,null],[18,"modeSave","","",171,null],[18,"modeGetFolder","","",171,null],[18,"modeOpenMultiple","","",171,null],[18,"returnOK","","",171,null],[18,"returnCancel","","",171,null],[18,"returnReplace","","",171,null],[18,"filterAll","","",171,null],[18,"filterHTML","","",171,null],[18,"filterText","","",171,null],[18,"filterImages","","",171,null],[18,"filterXML","","",171,null],[18,"filterXUL","","",171,null],[18,"filterApps","","",171,null],[18,"filterAllowURLs","","",171,null],[18,"filterAudio","","",171,null],[18,"filterVideo","","",171,null],[11,"Init","","`text /** * Initialize the file picker widget. The file picker is not valid until this * method is called. * * @param parent mozIDOMWindow parent. This dialog will be dependent * on this parent. parent must be non-null. * @param title The title for the file widget * @param mode load, save, or get folder * */`",171,null],[11,"AppendFilters","","`text /** * Append to the filter list with things from the predefined list * * @param filters mask of filters i.e. (filterAll | filterHTML) * */`",171,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"AppendFilter","","`text /** * Add a filter * * @param title name of the filter * @param filter extensions to filter -- semicolon and space separated * */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultString","","`text /** * The filename that should be suggested to the user as a default. This should * include the extension. * * @throws NS_ERROR_FAILURE on attempts to get */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDefaultString","","`text /** * The filename that should be suggested to the user as a default. This should * include the extension. * * @throws NS_ERROR_FAILURE on attempts to get */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultExtension","","`text /** * The extension that should be associated with files of the type we * want to work with. On some platforms, this extension will be * automatically appended to filenames the user enters, if needed. */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDefaultExtension","","`text /** * The extension that should be associated with files of the type we * want to work with. On some platforms, this extension will be * automatically appended to filenames the user enters, if needed. */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFilterIndex","","`text /** * The filter which is currently selected in the File Picker dialog * * @return Returns the index (0 based) of the selected filter in the filter list. */`",171,null],[11,"SetFilterIndex","","`text /** * The filter which is currently selected in the File Picker dialog * * @return Returns the index (0 based) of the selected filter in the filter list. */`",171,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetDisplayDirectory","","`text /** * Set the directory that the file open/save dialog initially displays * Note that, if displaySpecialDirectory has been already set, this value will * be ignored. * * @param displayDirectory the name of the directory * */`",171,null],[11,"SetDisplayDirectory","","`text /** * Set the directory that the file open/save dialog initially displays * Note that, if displaySpecialDirectory has been already set, this value will * be ignored. * * @param displayDirectory the name of the directory * */`",171,null],[11,"GetDisplaySpecialDirectory","","`text /** * Set the directory that the file open/save dialog initially displays using * one of the special name as such as 'Desk', 'TmpD', and so on. * Note that, if displayDirectory has been already set, this value will be * ignored. * * @param displaySpecialDirectory the name of the special directory * */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDisplaySpecialDirectory","","`text /** * Set the directory that the file open/save dialog initially displays using * one of the special name as such as 'Desk', 'TmpD', and so on. * Note that, if displayDirectory has been already set, this value will be * ignored. * * @param displaySpecialDirectory the name of the special directory * */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFile","","`text /** * Get the nsIFile for the file or directory. * * @return Returns the file currently selected */`",171,null],[11,"GetFileURL","","`text /** * Get the nsIURI for the file or directory. * * @return Returns the file currently selected */`",171,null],[11,"GetFiles","","`text /** * Get the enumerator for the selected files * only works in the modeOpenMultiple mode * * @return Returns the files currently selected */`",171,null],[11,"GetDomFileOrDirectory","","`text /** * Get the DOM File or the DOM Directory * * @return Returns the file or directory currently selected DOM object. */`",171,null],[11,"GetDomFileOrDirectoryEnumerator","","`text /** * Get the enumerator for the selected files or directories * only works in the modeOpenMultiple mode * * @return Returns the files/directories currently selected as DOM object. */`",171,null],[11,"GetAddToRecentDocs","","`text /** * Controls whether the chosen file(s) should be added to the system's recent * documents list. This attribute will be ignored if the system has no \"Recent * Docs\" concept, or if the application is in private browsing mode (in which * case the file will not be added). Defaults to true. */`",171,null],[11,"SetAddToRecentDocs","","`text /** * Controls whether the chosen file(s) should be added to the system's recent * documents list. This attribute will be ignored if the system has no \"Recent * Docs\" concept, or if the application is in private browsing mode (in which * case the file will not be added). Defaults to true. */`",171,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Open","","`text /** * Opens the file dialog asynchrounously. * The passed in object's done method will be called upon completion. */`",171,null],[11,"GetMode","","`text /** * The picker's mode, as set by the 'mode' argument passed to init() * (one of the modeOpen et. al. constants specified above). */`",171,null],[11,"GetOkButtonLabel","","`text /** * If set to non-empty string, the nsIFilePicker implementation * may use okButtonLabel as the label for the button the user uses to accept * file selection. */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetOkButtonLabel","","`text /** * If set to non-empty string, the nsIFilePicker implementation * may use okButtonLabel as the label for the button the user uses to accept * file selection. */`",171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",172,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",172,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierStreamUpdater` to one of its base interfaces.",172,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",172,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DownloadUpdates","","`text /** * Try to download updates from updateUrl. If an update is already in * progress, queues the requested update. This is used in nsIUrlListManager * as well as in testing. * @param aRequestTables Comma-separated list of tables included in this * update. * @param aRequestPayload The payload for the request. * @param aIsPostRequest Whether the request should be sent by POST method. * Should be 'true' for v2 usage. * @param aUpdateUrl The plaintext url from which to request updates. * @param aSuccessCallback Called after a successful update. * @param aUpdateErrorCallback Called for problems applying the update * @param aDownloadErrorCallback Called if we get an http error or a * connection refused error. */`",172,null],[11,"addref","","",173,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",173,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSKeyframesRule` to one of its base interfaces.",173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",173,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`attribute DOMString name;`",173,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`attribute DOMString name;`",173,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCssRules","","`readonly attribute nsIDOMCSSRuleList cssRules;`",173,null],[11,"AppendRule","","`void appendRule (in DOMString rule);`",173,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"DeleteRule","","`void deleteRule (in DOMString key);`",173,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FindRule","","`nsIDOMCSSKeyframeRule findRule (in DOMString key);`",173,null],[11,"addref","","",174,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",174,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIGeckoMediaPluginChromeService` to one of its base interfaces.",174,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",174,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddPluginDirectory","","`text /** * Add a directory to scan for gecko media plugins. * @note Main-thread API. */`",174,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemovePluginDirectory","","`text /** * Remove a directory for gecko media plugins. * @note Main-thread API. */`",174,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveAndDeletePluginDirectory","","`text /** * Remove a directory for gecko media plugins and delete it from disk. * If |defer| is true, wait until the plugin is unused before removing. * @note Main-thread API. */`",174,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ForgetThisSite","","`text /** * Clears storage data associated with the site and the originAttributes * pattern in JSON format. */`",174,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IsPersistentStorageAllowed","","`text /** * Returns true if the given node id is allowed to store things * persistently on disk. Private Browsing and local content are not * allowed to store persistent data. */`",174,null],[11,"GetStorageDir","","`text /** * Returns the directory to use as the base for storing data about GMPs. */`",174,null],[11,"addref","","",175,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",175,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBadCertListener2` to one of its base interfaces.",175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",175,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyCertProblem","","`text /** * @param socketInfo A network communication context that can be used to obtain more information * about the active connection. * @param status The SSL status object that describes the problem(s). * @param targetSite The Site name that was used to open the current connection. * * @return The consumer shall return true if it wants to suppress the error message * related to the bad cert (the connection will still get canceled). */`",175,null],[11,"addref","","",176,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",176,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServerTiming` to one of its base interfaces.",176,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",176,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`[must_use] readonly attribute ACString name;`",176,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDuration","","`[must_use] readonly attribute double duration;`",176,null],[11,"GetDescription","","`[must_use] readonly attribute ACString description;`",176,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",177,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",177,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITimedChannel` to one of its base interfaces.",177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",177,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTimingEnabled","","`attribute boolean timingEnabled;`",177,null],[11,"SetTimingEnabled","","`attribute boolean timingEnabled;`",177,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetRedirectCount","","`attribute uint8_t redirectCount;`",177,null],[11,"SetRedirectCount","","`attribute uint8_t redirectCount;`",177,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"GetInternalRedirectCount","","`attribute uint8_t internalRedirectCount;`",177,null],[11,"SetInternalRedirectCount","","`attribute uint8_t internalRedirectCount;`",177,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"GetInitiatorType","","`[noscript] attribute AString initiatorType;`",177,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetInitiatorType","","`[noscript] attribute AString initiatorType;`",177,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAllRedirectsSameOrigin","","`[noscript] attribute boolean allRedirectsSameOrigin;`",177,null],[11,"SetAllRedirectsSameOrigin","","`[noscript] attribute boolean allRedirectsSameOrigin;`",177,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllRedirectsPassTimingAllowCheck","","`[noscript] attribute boolean allRedirectsPassTimingAllowCheck;`",177,null],[11,"SetAllRedirectsPassTimingAllowCheck","","`[noscript] attribute boolean allRedirectsPassTimingAllowCheck;`",177,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"TimingAllowCheck","","`[noscript] boolean timingAllowCheck (in nsIPrincipal origin);`",177,null],[11,"GetChannelCreationTime","","`readonly attribute PRTime channelCreationTime;`",177,null],[11,"GetAsyncOpenTime","","`readonly attribute PRTime asyncOpenTime;`",177,null],[11,"GetLaunchServiceWorkerStartTime","","`readonly attribute PRTime launchServiceWorkerStartTime;`",177,null],[11,"GetLaunchServiceWorkerEndTime","","`readonly attribute PRTime launchServiceWorkerEndTime;`",177,null],[11,"GetDispatchFetchEventStartTime","","`readonly attribute PRTime dispatchFetchEventStartTime;`",177,null],[11,"GetDispatchFetchEventEndTime","","`readonly attribute PRTime dispatchFetchEventEndTime;`",177,null],[11,"GetHandleFetchEventStartTime","","`readonly attribute PRTime handleFetchEventStartTime;`",177,null],[11,"GetHandleFetchEventEndTime","","`readonly attribute PRTime handleFetchEventEndTime;`",177,null],[11,"GetDomainLookupStartTime","","`readonly attribute PRTime domainLookupStartTime;`",177,null],[11,"GetDomainLookupEndTime","","`readonly attribute PRTime domainLookupEndTime;`",177,null],[11,"GetConnectStartTime","","`readonly attribute PRTime connectStartTime;`",177,null],[11,"GetTcpConnectEndTime","","`readonly attribute PRTime tcpConnectEndTime;`",177,null],[11,"GetSecureConnectionStartTime","","`readonly attribute PRTime secureConnectionStartTime;`",177,null],[11,"GetConnectEndTime","","`readonly attribute PRTime connectEndTime;`",177,null],[11,"GetRequestStartTime","","`readonly attribute PRTime requestStartTime;`",177,null],[11,"GetResponseStartTime","","`readonly attribute PRTime responseStartTime;`",177,null],[11,"GetResponseEndTime","","`readonly attribute PRTime responseEndTime;`",177,null],[11,"GetCacheReadStartTime","","`readonly attribute PRTime cacheReadStartTime;`",177,null],[11,"GetCacheReadEndTime","","`readonly attribute PRTime cacheReadEndTime;`",177,null],[11,"GetRedirectStartTime","","`readonly attribute PRTime redirectStartTime;`",177,null],[11,"GetRedirectEndTime","","`readonly attribute PRTime redirectEndTime;`",177,null],[11,"GetReportResourceTiming","","`[noscript] attribute boolean reportResourceTiming;`",177,null],[11,"SetReportResourceTiming","","`[noscript] attribute boolean reportResourceTiming;`",177,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetServerTiming","","`readonly attribute nsIArray serverTiming;`",177,null],[11,"addref","","",178,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",178,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUploadChannel` to one of its base interfaces.",178,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",178,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetUploadStream","","`text /** * Sets a stream to be uploaded by this channel. * * Most implementations of this interface require that the stream: * (1) implement threadsafe addRef and release * (2) implement nsIInputStream::readSegments * (3) implement nsISeekableStream::seek * * History here is that we need to support both streams that already have * headers (e.g., Content-Type and Content-Length) information prepended to * the stream (by plugins) as well as clients (composer, uploading * application) that want to upload data streams without any knowledge of * protocol specifications. For this reason, we have a special meaning * for the aContentType parameter (see below). * * @param aStream * The stream to be uploaded by this channel. * @param aContentType * If aContentType is empty, the protocol will assume that no * content headers are to be added to the uploaded stream and that * any required headers are already encoded in the stream. In the * case of HTTP, if this parameter is non-empty, then its value will * replace any existing Content-Type header on the HTTP request. * In the case of FTP and FILE, this parameter is ignored. * @param aContentLength * A value of -1 indicates that the length of the stream should be * determined by calling the stream's |available| method. */`",178,null],[11,"GetUploadStream","","`text /** * Get the stream (to be) uploaded by this channel. */`",178,null],[11,"addref","","",179,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",179,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentSecurityPolicy` to one of its base interfaces.",179,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",179,{"inputs":[{"name":"self"}],"output":{"name":"nsiserializable"}}],[18,"NO_DIRECTIVE","","`text /** * Directives supported by Content Security Policy. These are enums for * the CSPDirective type. * The NO_DIRECTIVE entry is used for checking default permissions and * returning failure when asking CSP which directive to check. * * NOTE: When implementing a new directive, you will need to add it here but also * add it to the CSPStrDirectives array in nsCSPUtils.h. */`",179,null],[18,"DEFAULT_SRC_DIRECTIVE","","",179,null],[18,"SCRIPT_SRC_DIRECTIVE","","",179,null],[18,"OBJECT_SRC_DIRECTIVE","","",179,null],[18,"STYLE_SRC_DIRECTIVE","","",179,null],[18,"IMG_SRC_DIRECTIVE","","",179,null],[18,"MEDIA_SRC_DIRECTIVE","","",179,null],[18,"FRAME_SRC_DIRECTIVE","","",179,null],[18,"FONT_SRC_DIRECTIVE","","",179,null],[18,"CONNECT_SRC_DIRECTIVE","","",179,null],[18,"REPORT_URI_DIRECTIVE","","",179,null],[18,"FRAME_ANCESTORS_DIRECTIVE","","",179,null],[18,"REFLECTED_XSS_DIRECTIVE","","",179,null],[18,"BASE_URI_DIRECTIVE","","",179,null],[18,"FORM_ACTION_DIRECTIVE","","",179,null],[18,"REFERRER_DIRECTIVE","","",179,null],[18,"WEB_MANIFEST_SRC_DIRECTIVE","","",179,null],[18,"UPGRADE_IF_INSECURE_DIRECTIVE","","",179,null],[18,"CHILD_SRC_DIRECTIVE","","",179,null],[18,"BLOCK_ALL_MIXED_CONTENT","","",179,null],[18,"REQUIRE_SRI_FOR","","",179,null],[18,"SANDBOX_DIRECTIVE","","",179,null],[18,"WORKER_SRC_DIRECTIVE","","",179,null],[18,"VIOLATION_TYPE_INLINE_SCRIPT","","",179,null],[18,"VIOLATION_TYPE_EVAL","","",179,null],[18,"VIOLATION_TYPE_INLINE_STYLE","","",179,null],[18,"VIOLATION_TYPE_NONCE_SCRIPT","","",179,null],[18,"VIOLATION_TYPE_NONCE_STYLE","","",179,null],[18,"VIOLATION_TYPE_HASH_SCRIPT","","",179,null],[18,"VIOLATION_TYPE_HASH_STYLE","","",179,null],[18,"VIOLATION_TYPE_REQUIRE_SRI_FOR_STYLE","","",179,null],[18,"VIOLATION_TYPE_REQUIRE_SRI_FOR_SCRIPT","","",179,null],[11,"GetPolicyString","","`text /** * Accessor method for a read-only string version of the policy at a given * index. */`",179,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPolicyCount","","`text /** * Returns the number of policies attached to this CSP instance. Useful with * getPolicy(). */`",179,null],[11,"GetUpgradeInsecureRequests","","`text /** * Returns whether this policy uses the directive upgrade-insecure-requests. * Please note that upgrade-insecure-reqeusts also applies if the parent or * including document (context) makes use of the directive. */`",179,null],[11,"GetBlockAllMixedContent","","`text /** * Returns whether this policy uses the directive block-all-mixed-content. * Please note that block-all-mixed-content takes presedence in case the * directive upgrade-insecure-requests is defined in the same policy and * will therefore block all mixed content without even trying to perform * an upgrade. */`",179,null],[11,"GetEnforcesFrameAncestors","","`text /** * Returns whether this policy enforces the frame-ancestors directive. */`",179,null],[11,"GetReferrerPolicy","","`text /** * Obtains the referrer policy (as integer) for this browsing context as * specified in CSP. If there are multiple policies and... * - only one sets a referrer policy: that policy is returned * - more than one sets different referrer policies: no-referrer is returned * - more than one set equivalent policies: that policy is returned * For the enumeration of policies see ReferrerPolicy.h and nsIHttpChannel. * * @param aPolicy * The referrer policy to use for the protected resource. * @return * true if a referrer policy is specified, false if it's unspecified. */`",179,null],[11,"AppendPolicy","","`text /** * Parse and install a CSP policy. * @param aPolicy * String representation of the policy * (e.g., header value, meta content) * @param reportOnly * Should this policy affect content, script and style processing or * just send reports if it is violated? * @param deliveredViaMetaTag * Indicates whether the policy was delivered via the meta tag. */`",179,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowsInline","","`boolean getAllowsInline (in nsContentPolicyType aContentPolicyType, in AString aNonce, in boolean aParserCreated, in nsISupports aElementOrContent, in unsigned long aLineNumber);`",179,null],[11,"GetAllowsEval","","`text /** * whether this policy allows eval and eval-like functions * such as setTimeout(\"code string\", time). * @param shouldReportViolations * Whether or not the use of eval should be reported. * This function returns \"true\" when violating report-only policies, but * when any policy (report-only or otherwise) is violated, * shouldReportViolations is true as well. * @return * Whether or not the effects of the eval call should be allowed * (block the call if false). */`",179,null],[11,"GetCSPSandboxFlags","","`text /** * Delegate method called by the service when the protected document is loaded. * Returns the union of all the sandbox flags contained in CSP policies. This is the most * restrictive interpretation of flags set in multiple policies. * See nsSandboxFlags.h for the possible flags. * * @return * sandbox flags or SANDBOXED_NONE if no sandbox directive exists */`",179,null],[11,"LogViolationDetails","","`text /** * For each violated policy (of type violationType), log policy violation on * the Error Console and send a report to report-uris present in the violated * policies. * * @param violationType * one of the VIOLATION_TYPE_* constants, e.g. inline-script or eval * @param sourceFile * name of the source file containing the violation (if available) * @param contentSample * sample of the violating content (to aid debugging) * @param lineNum * source line number of the violation (if available) * @param aNonce * (optional) If this is a nonce violation, include the nonce so we can * recheck to determine which policies were violated and send the * appropriate reports. * @param aContent * (optional) If this is a hash violation, include contents of the inline * resource in the question so we can recheck the hash in order to * determine which policies were violated and send the appropriate * reports. */`",179,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"nsastring"},{"name":"nsastring"},{"name":"int32_t"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetRequestContext","","`text /** * Called after the CSP object is created to fill in appropriate request * context. Either use * * aDocument (preferred), or if no document is available, then provide * * aPrincipal */`",179,null],[11,"EnsureEventTarget","","`text /** * Ensure we have a nsIEventTarget to use to label CSPReportSenderRunnable */`",179,null],[11,"RequireSRIForType","","`bool requireSRIForType (in nsContentPolicyType aContentType);`",179,null],[11,"PermitsAncestry","","`text /** * Verifies ancestry as permitted by the policy. * * NOTE: Calls to this may trigger violation reports when queried, so this * value should not be cached. * * @param docShell * containing the protected resource * @return * true if the frame's ancestors are all allowed by policy (except for * report-only policies, which will send reports and then return true * here when violated). */`",179,null],[11,"Permits","","`text /** * Checks if a specific directive permits loading of a URI. * * NOTE: Calls to this may trigger violation reports when queried, so the * return value should not be cached. * * @param aURI * The URI about to be loaded or used. * @param aDir * The CSPDirective to query (see above constants *_DIRECTIVE). * @param aSpecific * If \"true\" and the directive is specified to fall back to \"default-src\" * when it's not explicitly provided, directivePermits will NOT try * default-src when the specific directive is not used. Setting this to * \"false\" allows CSP to fall back to default-src. This function * behaves the same for both values of canUseDefault when querying * directives that don't fall-back. * @return * Whether or not the provided URI is allowed by CSP under the given * directive. (block the pending operation if false). */`",179,null],[11,"ShouldLoad","","`text /** * Delegate method called by the service when sub-elements of the protected * document are being loaded. Given a bit of information about the request, * decides whether or not the policy is satisfied. * * Calls to this may trigger violation reports when queried, so * this value should not be cached. */`",179,null],[11,"ToJSON","","`text /** * Returns the CSP in JSON notation. */`",179,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",180,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",180,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISelectionListener` to one of its base interfaces.",180,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",180,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_REASON","","",180,null],[18,"DRAG_REASON","","",180,null],[18,"MOUSEDOWN_REASON","","",180,null],[18,"MOUSEUP_REASON","","",180,null],[18,"KEYPRESS_REASON","","",180,null],[18,"SELECTALL_REASON","","",180,null],[18,"COLLAPSETOSTART_REASON","","",180,null],[18,"COLLAPSETOEND_REASON","","",180,null],[18,"IME_REASON","","",180,null],[11,"NotifySelectionChanged","","`void notifySelectionChanged (in nsIDOMDocument doc, in nsISelection sel, in short reason);`",180,null],[11,"addref","","",181,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",181,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFResource` to one of its base interfaces.",181,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",181,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfnode"}}],[11,"GetValue","","`text /** * The single-byte string value of the resource. * @note THIS IS OBSOLETE. C++ should use GetValueConst and script * should use .valueUTF8 */`",181,null],[11,"GetValueUTF8","","`text /** * The UTF-8 URI of the resource. */`",181,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetValueConst","","`text /** * An unscriptable version used to avoid a string copy. Meant * for use as a performance optimization. The string is encoded * in UTF-8. */`",181,null],[11,"Init","","`text /** * This method is called by the nsIRDFService after constructing * a resource object to initialize its URI. You would not normally * call this method directly */`",181,null],[11,"EqualsString","","`text /** * Determine if the resource has the given URI. */`",181,null],[11,"GetDelegate","","`text /** * Retrieve the \"delegate\" object for this resource. A resource * may have several delegate objects, each of whose lifetimes is * bound to the life of the resource object. * * This method will return the delegate for the given key after * QueryInterface()-ing it to the requested IID. * * If no delegate exists for the specified key, this method will * attempt to create one using the component manager. Specifically, * it will combine aKey with the resource's URI scheme to produce * a ContractID as follows: * * component:/rdf/delegate-factory/[key]/[scheme] * * This ContractID will be used to locate a factory using the * FindFactory() method of nsIComponentManager. If the nsIFactory * exists, it will be used to create a \"delegate factory\"; that * is, an object that supports nsIRDFDelegateFactory. The delegate * factory will be used to construct the delegate object. */`",181,null],[11,"ReleaseDelegate","","`text /** * Force a delegate to be \"unbound\" from the resource. * * Normally, a delegate object's lifetime will be identical to * that of the resource to which it is bound; this method allows a * delegate to unlink itself from an RDF resource prematurely. */`",181,null],[11,"addref","","",182,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",182,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRefreshURI` to one of its base interfaces.",182,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",182,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RefreshURI","","`text /** * Load a uri after waiting for aMillis milliseconds. If the docshell * is busy loading a page currently, the refresh request will be * queued and executed when the current load finishes. * * @param aUri The uri to refresh. * @param aPrincipal The triggeringPrincipal for the refresh load * May be null, in which case a principal will be built based on the * referrer URI of the previous docshell load, or will use the system * principal when there is no referrer. * @param aMillis The number of milliseconds to wait. * @param aRepeat Flag to indicate if the uri is to be * repeatedly refreshed every aMillis milliseconds. * @param aMetaRefresh Flag to indicate if this is a Meta refresh. */`",182,null],[11,"ForceRefreshURI","","`text /** * Loads a URI immediately as if it were a refresh. * * @param aURI The URI to refresh. * @param aPrincipal The triggeringPrincipal for the refresh load * May be null, in which case a principal will be built based on the * referrer URI of the previous docshell load, or will use the system * principal when there is no referrer. * @param aMillis The number of milliseconds by which this refresh would * be delayed if it were not being forced. * @param aMetaRefresh Flag to indicate if this is a meta refresh. */`",182,null],[11,"SetupRefreshURI","","`text /** * Checks the passed in channel to see if there is a refresh header, * if there is, will setup a timer to refresh the uri found * in the header. If docshell is busy loading a page currently, the * request will be queued and executed when the current page * finishes loading. * * Returns the NS_REFRESHURI_HEADER_FOUND success code if a refresh * header was found and successfully setup. * * @param aChannel The channel to be parsed. */`",182,null],[11,"SetupRefreshURIFromHeader","","`text /** * Parses the passed in header string and sets up a refreshURI if * a \"refresh\" header is found. If docshell is busy loading a page * currently, the request will be queued and executed when * the current page finishes loading. * * @param aBaseURI base URI to resolve refresh uri with. * @param aPrincipal The triggeringPrincipal for the refresh load * May be null, in which case a principal will be built based on the * referrer URI of the previous docshell load, or will use the system * principal when there is no referrer. * @param aHeader The meta refresh header string. */`",182,null],[11,"CancelRefreshURITimers","","`text /** * Cancels all timer loads. */`",182,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRefreshPending","","`text /** * True when there are pending refreshes, false otherwise. */`",182,null],[11,"addref","","",183,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",183,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpPushListener` to one of its base interfaces.",183,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",183,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPush","","`text /** * When provided as a notificationCallback to an httpChannel, this.onPush() * will be invoked when there is a >= Http2 push to that * channel. The push may be in progress. * * The consumer must start the new channel in the usual way by calling * pushChannel.AsyncOpen with a nsIStreamListener object that * will receive the normal sequence of OnStartRequest(), * 0 to N OnDataAvailable(), and onStopRequest(). * * The new channel can be canceled after the AsyncOpen if it is not wanted. * * @param associatedChannel * the monitor channel that was recieved on * @param pushChannel * a channel to the resource which is being pushed */`",183,null],[11,"addref","","",184,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",184,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileView` to one of its base interfaces.",184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",184,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"sortName","","",184,null],[18,"sortSize","","",184,null],[18,"sortDate","","",184,null],[11,"GetShowHiddenFiles","","`attribute boolean showHiddenFiles;`",184,null],[11,"SetShowHiddenFiles","","`attribute boolean showHiddenFiles;`",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowOnlyDirectories","","`attribute boolean showOnlyDirectories;`",184,null],[11,"SetShowOnlyDirectories","","`attribute boolean showOnlyDirectories;`",184,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSortType","","`readonly attribute short sortType;`",184,null],[11,"GetReverseSort","","`readonly attribute boolean reverseSort;`",184,null],[11,"Sort","","`void sort (in short sortType, in boolean reverseSort);`",184,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetDirectory","","`void setDirectory (in nsIFile directory);`",184,null],[11,"SetFilter","","`void setFilter (in AString filterString);`",184,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSelectedFiles","","`readonly attribute nsIArray selectedFiles;`",184,null],[11,"addref","","",185,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",185,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleApplication` to one of its base interfaces.",185,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",185,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAppName","","`text /** * Returns the application name. */`",185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAppVersion","","`text /** * Returns the application version. */`",185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPlatformName","","`text /** * Returns the platform name. */`",185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPlatformVersion","","`text /** * Returns the platform version. */`",185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",186,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",186,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoPosition` to one of its base interfaces.",186,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",186,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTimestamp","","`readonly attribute DOMTimeStamp timestamp;`",186,null],[11,"GetCoords","","`readonly attribute nsIDOMGeoPositionCoords coords;`",186,null],[11,"addref","","",187,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",187,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginManagerStorage` to one of its base interfaces.",187,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",187,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddLogin","","`text /** * Store a new login in the storage module. * * @param aLogin * The login to be added. * @return a clone of the login info with the guid set (even if it was not provided). * * Default values for the login's nsILoginMetaInfo properties will be * created. However, if the caller specifies non-default values, they will * be used instead. */`",187,null],[11,"RemoveLogin","","`text /** * Remove a login from the storage module. * * @param aLogin * The login to be removed. * * The specified login must exactly match a stored login. However, the * values of any nsILoginMetaInfo properties are ignored. */`",187,null],[11,"ModifyLogin","","`text /** * Modify an existing login in the storage module. * * @param oldLogin * The login to be modified. * @param newLoginData * The new login values (either a nsILoginInfo or nsIProperyBag) * * If newLoginData is a nsILoginInfo, all of the old login's nsILoginInfo * properties are changed to the values from newLoginData (but the old * login's nsILoginMetaInfo properties are unmodified). * * If newLoginData is a nsIPropertyBag, only the specified properties * will be changed. The nsILoginMetaInfo properties of oldLogin can be * changed in this manner. * * If the propertybag contains an item named \"timesUsedIncrement\", the * login's timesUsed property will be incremented by the item's value. */`",187,null],[11,"RemoveAllLogins","","`text /** * Remove all stored logins. * * The browser sanitization feature allows the user to clear any stored * passwords. This interface allows that to be done without getting each * login first (which might require knowing the master password). * */`",187,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAllLogins","","`text /** * Fetch all logins in the login manager. An array is always returned; * if there are no logins the array is empty. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property and omit this param. * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.getAllLogins(); * (|logins| is an array). */`",187,null],[11,"SearchLogins","","`text /** * Search for logins in the login manager. An array is always returned; * if there are no logins the array is empty. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property, and supply an dummy object for * this out param. For example: |searchLogins({}, matchData)| * @param matchData * The data used to search. This does not follow the same * requirements as findLogins for those fields. Wildcard matches are * simply not specified. * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.searchLogins({}, matchData); * (|logins| is an array). */`",187,null],[11,"FindLogins","","`text /** * Search for logins matching the specified criteria. Called when looking * for logins that might be applicable to a form or authentication request. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property, and supply an dummy object for * this out param. For example: |findLogins({}, hostname, ...)| * @param aHostname * The hostname to restrict searches to, in URL format. For * example: \"http://www.site.com\". * @param aActionURL * For form logins, this argument should be the URL to which the * form will be submitted. For protocol logins, specify null. * @param aHttpRealm * For protocol logins, this argument should be the HTTP Realm * for which the login applies. This is obtained from the * WWW-Authenticate header. See RFC2617. For form logins, * specify null. * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.findLogins({}, hostname, ...); * */`",187,null],[11,"CountLogins","","`text /** * Search for logins matching the specified criteria, as with * findLogins(). This interface only returns the number of matching * logins (and not the logins themselves), which allows a caller to * check for logins without causing the user to be prompted for a master * password to decrypt the logins. * * @param aHostname * The hostname to restrict searches to. Specify an empty string * to match all hosts. A null value will not match any logins, and * will thus always return a count of 0. * @param aActionURL * The URL to which a form login will be submitted. To match any * form login, specify an empty string. To not match any form * login, specify null. * @param aHttpRealm * The HTTP Realm for which the login applies. To match logins for * any realm, specify an empty string. To not match logins for any * realm, specify null. */`",187,null],[11,"GetUiBusy","","`text /** * True when a master password prompt is being shown. */`",187,null],[11,"GetIsLoggedIn","","`text /** * True when the master password has already been entered, and so a caller * can ask for decrypted logins without triggering a prompt. */`",187,null],[11,"addref","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",188,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoPositionCoords` to one of its base interfaces.",188,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",188,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLatitude","","`readonly attribute double latitude;`",188,null],[11,"GetLongitude","","`readonly attribute double longitude;`",188,null],[11,"GetAltitude","","`readonly attribute double altitude;`",188,null],[11,"GetAccuracy","","`readonly attribute double accuracy;`",188,null],[11,"GetAltitudeAccuracy","","`readonly attribute double altitudeAccuracy;`",188,null],[11,"GetHeading","","`readonly attribute double heading;`",188,null],[11,"GetSpeed","","`readonly attribute double speed;`",188,null],[11,"addref","","",189,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",189,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHTMLFormElement` to one of its base interfaces.",189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",189,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAcceptCharset","","`text /** * The nsIDOMHTMLFormElement interface is the interface to a [X]HTML * form element. * * This interface is trying to follow the DOM Level 2 HTML specification: * http://www.w3.org/TR/DOM-Level-2-HTML/ * * with changes from the work-in-progress WHATWG HTML specification: * http://www.whatwg.org/specs/web-apps/current-work/ */`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAcceptCharset","","`text /** * The nsIDOMHTMLFormElement interface is the interface to a [X]HTML * form element. * * This interface is trying to follow the DOM Level 2 HTML specification: * http://www.w3.org/TR/DOM-Level-2-HTML/ * * with changes from the work-in-progress WHATWG HTML specification: * http://www.whatwg.org/specs/web-apps/current-work/ */`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAction","","`attribute DOMString action;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAction","","`attribute DOMString action;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAutocomplete","","`attribute DOMString autocomplete;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAutocomplete","","`attribute DOMString autocomplete;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetEnctype","","`attribute DOMString enctype;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetEnctype","","`attribute DOMString enctype;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetEncoding","","`attribute DOMString encoding;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetEncoding","","`attribute DOMString encoding;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMethod","","`attribute DOMString method;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetMethod","","`attribute DOMString method;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`attribute DOMString name;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`attribute DOMString name;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNoValidate","","`attribute boolean noValidate;`",189,null],[11,"SetNoValidate","","`attribute boolean noValidate;`",189,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTarget","","`attribute DOMString target;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTarget","","`attribute DOMString target;`",189,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLength","","`readonly attribute long length;`",189,null],[11,"Submit","","`void submit ();`",189,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Reset","","`void reset ();`",189,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CheckValidity","","`boolean checkValidity ();`",189,null],[11,"addref","","",190,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",190,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDataType` to one of its base interfaces.",190,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",190,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"VTYPE_INT8","","",190,null],[18,"VTYPE_INT16","","",190,null],[18,"VTYPE_INT32","","",190,null],[18,"VTYPE_INT64","","",190,null],[18,"VTYPE_UINT8","","",190,null],[18,"VTYPE_UINT16","","",190,null],[18,"VTYPE_UINT32","","",190,null],[18,"VTYPE_UINT64","","",190,null],[18,"VTYPE_FLOAT","","",190,null],[18,"VTYPE_DOUBLE","","",190,null],[18,"VTYPE_BOOL","","",190,null],[18,"VTYPE_CHAR","","",190,null],[18,"VTYPE_WCHAR","","",190,null],[18,"VTYPE_VOID","","",190,null],[18,"VTYPE_ID","","",190,null],[18,"VTYPE_DOMSTRING","","",190,null],[18,"VTYPE_CHAR_STR","","",190,null],[18,"VTYPE_WCHAR_STR","","",190,null],[18,"VTYPE_INTERFACE","","",190,null],[18,"VTYPE_INTERFACE_IS","","",190,null],[18,"VTYPE_ARRAY","","",190,null],[18,"VTYPE_STRING_SIZE_IS","","",190,null],[18,"VTYPE_WSTRING_SIZE_IS","","",190,null],[18,"VTYPE_UTF8STRING","","",190,null],[18,"VTYPE_CSTRING","","",190,null],[18,"VTYPE_ASTRING","","",190,null],[18,"VTYPE_EMPTY_ARRAY","","",190,null],[18,"VTYPE_EMPTY","","",190,null],[11,"addref","","",191,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",191,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIVariant` to one of its base interfaces.",191,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",191,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDataType","","`[noscript] readonly attribute uint16_t dataType;`",191,null],[11,"GetAsInt8","","`[noscript] uint8_t getAsInt8 ();`",191,null],[11,"GetAsInt16","","`[noscript] int16_t getAsInt16 ();`",191,null],[11,"GetAsInt32","","`[noscript] int32_t getAsInt32 ();`",191,null],[11,"GetAsInt64","","`[noscript] int64_t getAsInt64 ();`",191,null],[11,"GetAsUint8","","`[noscript] uint8_t getAsUint8 ();`",191,null],[11,"GetAsUint16","","`[noscript] uint16_t getAsUint16 ();`",191,null],[11,"GetAsUint32","","`[noscript] uint32_t getAsUint32 ();`",191,null],[11,"GetAsUint64","","`[noscript] uint64_t getAsUint64 ();`",191,null],[11,"GetAsFloat","","`[noscript] float getAsFloat ();`",191,null],[11,"GetAsDouble","","`[noscript] double getAsDouble ();`",191,null],[11,"GetAsBool","","`[noscript] boolean getAsBool ();`",191,null],[11,"GetAsChar","","`[noscript] char getAsChar ();`",191,null],[11,"GetAsWChar","","`[noscript] wchar getAsWChar ();`",191,null],[11,"GetAsID","","`[notxpcom] nsresult getAsID (out nsID retval);`",191,null],[11,"GetAsAString","","`[noscript] AString getAsAString ();`",191,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAsDOMString","","`[noscript] DOMString getAsDOMString ();`",191,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAsACString","","`[noscript] ACString getAsACString ();`",191,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAsAUTF8String","","`[noscript] AUTF8String getAsAUTF8String ();`",191,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAsString","","`[noscript] string getAsString ();`",191,null],[11,"GetAsWString","","`[noscript] wstring getAsWString ();`",191,null],[11,"GetAsISupports","","`[noscript] nsISupports getAsISupports ();`",191,null],[11,"GetAsInterface","","`[noscript] void getAsInterface (out nsIIDPtr iid, [iid_is (iid), retval] out nsQIResult iface);`",191,null],[11,"GetAsArray","","`[notxpcom] nsresult getAsArray (out uint16_t type, out nsIID iid, out uint32_t count, out voidPtr ptr);`",191,null],[11,"GetAsStringWithSize","","`[noscript] void getAsStringWithSize (out uint32_t size, [size_is (size), retval] out string str);`",191,null],[11,"GetAsWStringWithSize","","`[noscript] void getAsWStringWithSize (out uint32_t size, [size_is (size), retval] out wstring str);`",191,null],[11,"addref","","",192,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",192,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWritableVariant` to one of its base interfaces.",192,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",192,{"inputs":[{"name":"self"}],"output":{"name":"nsivariant"}}],[11,"GetWritable","","`attribute boolean writable;`",192,null],[11,"SetWritable","","`attribute boolean writable;`",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetAsInt8","","`void setAsInt8 (in uint8_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"SetAsInt16","","`void setAsInt16 (in int16_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"SetAsInt32","","`void setAsInt32 (in int32_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetAsInt64","","`void setAsInt64 (in int64_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"SetAsUint8","","`void setAsUint8 (in uint8_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"SetAsUint16","","`void setAsUint16 (in uint16_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"SetAsUint32","","`void setAsUint32 (in uint32_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetAsUint64","","`void setAsUint64 (in uint64_t aValue);`",192,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"SetAsFloat","","`void setAsFloat (in float aValue);`",192,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"SetAsDouble","","`void setAsDouble (in double aValue);`",192,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"SetAsBool","","`void setAsBool (in boolean aValue);`",192,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetAsChar","","`void setAsChar (in char aValue);`",192,{"inputs":[{"name":"self"},{"name":"c_char"}],"output":{"name":"nsresult"}}],[11,"SetAsWChar","","`void setAsWChar (in wchar aValue);`",192,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"SetAsID","","`void setAsID (in nsIDRef aValue);`",192,{"inputs":[{"name":"self"},{"name":"nsid"}],"output":{"name":"nsresult"}}],[11,"SetAsAString","","`void setAsAString (in AString aValue);`",192,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAsDOMString","","`void setAsDOMString (in DOMString aValue);`",192,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAsACString","","`void setAsACString (in ACString aValue);`",192,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAsAUTF8String","","`void setAsAUTF8String (in AUTF8String aValue);`",192,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAsString","","`void setAsString (in string aValue);`",192,null],[11,"SetAsWString","","`void setAsWString (in wstring aValue);`",192,null],[11,"SetAsISupports","","`void setAsISupports (in nsISupports aValue);`",192,null],[11,"SetAsInterface","","`void setAsInterface (in nsIIDRef iid, [iid_is (iid)] in nsQIResult iface);`",192,null],[11,"SetAsArray","","`[noscript] void setAsArray (in uint16_t type, in nsIIDPtr iid, in uint32_t count, in voidPtr ptr);`",192,null],[11,"SetAsStringWithSize","","`void setAsStringWithSize (in uint32_t size, [size_is (size)] in string str);`",192,null],[11,"SetAsWStringWithSize","","`void setAsWStringWithSize (in uint32_t size, [size_is (size)] in wstring str);`",192,null],[11,"SetAsVoid","","`void setAsVoid ();`",192,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetAsEmpty","","`void setAsEmpty ();`",192,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetAsEmptyArray","","`void setAsEmptyArray ();`",192,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetFromVariant","","`void setFromVariant (in nsIVariant aValue);`",192,null],[11,"addref","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",193,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageAsyncConnection` to one of its base interfaces.",193,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",193,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AsyncClose","","`text /** * Close this database connection, allowing all pending statements * to complete first. * * @param aCallback [optional] * A callback that will be notified when the close is completed, * with the following arguments: * - status: the status of the call * - value: |null| * * @throws NS_ERROR_NOT_SAME_THREAD * If called on a thread other than the one that opened it. The * callback will not be dispatched. * @throws NS_ERROR_NOT_INITIALIZED * If called on a connection that has already been closed or was * never properly opened. The callback will still be dispatched * to the main thread despite the returned error. * @note If this call should fail, the callback won't be invoked. */`",193,null],[11,"SpinningSynchronousClose","","`text /** * Forcibly closes a database connection synchronously. * This should only be used when it's required to close and replace the * database synchronously to return control to the consumer, for example in * case of a detected corruption on database opening. * Since this spins the events loop, it should be used only in very particular * and rare situations, or it may cause unexpected consequences (crashes). * * @throws NS_ERROR_NOT_SAME_THREAD * If called on a thread other than the one that opened it. */`",193,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AsyncClone","","`text /** * Clone a database and make the clone read only if needed. * SQL Functions and attached on-disk databases are applied to the new clone. * * @param aReadOnly * If true, the returned database should be put into read-only mode. * * @param aCallback * A callback that will be notified when the operation is complete, * with the following arguments: * - status: the status of the operation * - value: in case of success, an intance of * mozIStorageAsyncConnection cloned from this one. * * @throws NS_ERROR_NOT_SAME_THREAD * If is called on a thread other than the one that opened it. * @throws NS_ERROR_UNEXPECTED * If this connection is a memory database. * * @note If your connection is already read-only, you will get a read-only * clone. * @note The resulting connection will NOT implement mozIStorageConnection, * it will only implement mozIStorageAsyncConnection. * @note Due to a bug in SQLite, if you use the shared cache * (see mozIStorageService), you end up with the same privileges as the * first connection opened regardless of what is specified in aReadOnly. * @note The following pragmas are copied over to a read-only clone: * - cache_size * - temp_store * The following pragmas are copied over to a writeable clone: * - cache_size * - temp_store * - foreign_keys * - journal_size_limit * - synchronous * - wal_autocheckpoint * All SQL functions are copied over to read-only and writeable clones. * Additionally, all temporary tables, triggers, and views, as well as * any indexes on temporary tables, are copied over to writeable clones. * For temporary tables, only the schemas are copied, not their * contents. */`",193,null],[11,"GetDatabaseFile","","`text /** * The current database nsIFile. Null if the database * connection refers to an in-memory database. */`",193,null],[11,"Interrupt","","`text /** * Causes any pending database operation to abort and return at the first * opportunity. * This can only be used on read-only connections that don't implement * the mozIStorageConnection interface. * @note operations that are nearly complete may still be able to complete. * @throws if used on an unsupported connection type, or a closed connection. */`",193,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CreateAsyncStatement","","`text /** * Create an asynchronous statement for the given SQL. An * asynchronous statement can only be used to dispatch asynchronous * requests to the asynchronous execution thread and cannot be used * to take any synchronous actions on the database. * * The expression may use ? to indicate sequential numbered arguments, * ?1, ?2 etc. to indicate specific numbered arguments or :name and * $var to indicate named arguments. * * @param aSQLStatement * The SQL statement to execute. * @return a new mozIStorageAsyncStatement * @note The statement is created lazily on first execution. */`",193,null],[11,"ExecuteAsync","","`text /** * Execute an array of statements created with this connection using * any currently bound parameters. When the array contains multiple * statements, the execution is wrapped in a single * transaction. These statements can be reused immediately, and * reset does not need to be called. * * @param aStatements * The array of statements to execute asynchronously, in the order they * are given in the array. * @param aNumStatements * The number of statements in aStatements. * @param aCallback [optional] * The callback object that will be notified of progress, errors, and * completion. * @return an object that can be used to cancel the statements execution. * * @note If you have any custom defined functions, they must be * re-entrant since they can be called on multiple threads. */`",193,null],[11,"ExecuteSimpleSQLAsync","","`text /** * Execute asynchronously an SQL expression, expecting no arguments. * * @param aSQLStatement * The SQL statement to execute * @param aCallback [optional] * The callback object that will be notified of progress, errors, and * completion. * @return an object that can be used to cancel the statement execution. */`",193,null],[11,"CreateFunction","","`text /** * Create a new SQL function. If you use your connection on multiple threads, * your function needs to be threadsafe, or it should only be called on one * thread. * * @param aFunctionName * The name of function to create, as seen in SQL. * @param aNumArguments * The number of arguments the function takes. Pass -1 for * variable-argument functions. * @param aFunction * The instance of mozIStorageFunction, which implements the function * in question. */`",193,null],[11,"CreateAggregateFunction","","`text /** * Create a new SQL aggregate function. If you use your connection on * multiple threads, your function needs to be threadsafe, or it should only * be called on one thread. * * @param aFunctionName * The name of aggregate function to create, as seen in SQL. * @param aNumArguments * The number of arguments the function takes. Pass -1 for * variable-argument functions. * @param aFunction * The instance of mozIStorageAggreagteFunction, which implements the * function in question. */`",193,null],[11,"RemoveFunction","","`text /** * Delete custom SQL function (simple or aggregate one). * * @param aFunctionName * The name of function to remove. */`",193,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetProgressHandler","","`text /** * Sets a progress handler. Only one handler can be registered at a time. * If you need more than one, you need to chain them yourself. This progress * handler should be threadsafe if you use this connection object on more than * one thread. * * @param aGranularity * The number of SQL virtual machine steps between progress handler * callbacks. * @param aHandler * The instance of mozIStorageProgressHandler. * @return previous registered handler. */`",193,null],[11,"RemoveProgressHandler","","`text /** * Remove a progress handler. * * @return previous registered handler. */`",193,null],[11,"addref","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",194,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFInMemoryDataSource` to one of its base interfaces.",194,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",194,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EnsureFastContainment","","`void EnsureFastContainment (in nsIRDFResource aSource);`",194,null],[11,"addref","","",195,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",195,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthPromptAdapterFactory` to one of its base interfaces.",195,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",195,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateAdapter","","`text /** * Wrap an object implementing nsIAuthPrompt so that it's usable via * nsIAuthPrompt2. */`",195,null],[11,"addref","","",196,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",196,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inICSSValueSearch` to one of its base interfaces.",196,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",196,{"inputs":[{"name":"self"}],"output":{"name":"inisearchprocess"}}],[11,"GetDocument","","`attribute nsIDOMDocument document;`",196,null],[11,"SetDocument","","`attribute nsIDOMDocument document;`",196,null],[11,"GetBaseURL","","`attribute wstring baseURL;`",196,null],[11,"SetBaseURL","","`attribute wstring baseURL;`",196,null],[11,"GetReturnRelativeURLs","","`attribute boolean returnRelativeURLs;`",196,null],[11,"SetReturnRelativeURLs","","`attribute boolean returnRelativeURLs;`",196,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetNormalizeChromeURLs","","`attribute boolean normalizeChromeURLs;`",196,null],[11,"SetNormalizeChromeURLs","","`attribute boolean normalizeChromeURLs;`",196,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddPropertyCriteria","","`void addPropertyCriteria (in wstring aPropName);`",196,null],[11,"GetTextCriteria","","`attribute wstring textCriteria;`",196,null],[11,"SetTextCriteria","","`attribute wstring textCriteria;`",196,null],[11,"addref","","",197,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",197,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpServer` to one of its base interfaces.",197,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",197,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Start","","`text /** * An interface which represents an HTTP server. */ /** * Starts up this server, listening upon the given port. * * @param port * the port upon which listening should happen, or -1 if no specific port is * desired * @throws NS_ERROR_ALREADY_INITIALIZED * if this server is already started * @throws NS_ERROR_NOT_AVAILABLE * if the server is not started and cannot be started on the desired port * (perhaps because the port is already in use or because the process does * not have privileges to do so) * @note * Behavior is undefined if this method is called after stop() has been * called on this but before the provided callback function has been * called. */`",197,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Stop","","`text /** * Shuts down this server if it is running (including the period of time after * stop() has been called but before the provided callback has been called). * * @param callback * an asynchronous callback used to notify the user when this server is * stopped and all pending requests have been fully served * @throws NS_ERROR_NULL_POINTER * if callback is null * @throws NS_ERROR_UNEXPECTED * if this server is not running */`",197,null],[11,"RegisterFile","","`text /** * Associates the local file represented by the string file with all requests * which match request. * * @param path * the path which is to be mapped to the given file; must begin with \"/\" and * be a valid URI path (i.e., no query string, hash reference, etc.) * @param file * the file to serve for the given path, or null to remove any mapping that * might exist; this file must exist for the lifetime of the server */`",197,null],[11,"RegisterPathHandler","","`text /** * Registers a custom path handler. * * @param path * the path on the server (beginning with a \"/\") which is to be handled by * handler; this path must not include a query string or hash component; it * also should usually be canonicalized, since most browsers will do so * before sending otherwise-matching requests * @param handler * an object which will handle any requests for the given path, or null to * remove any existing handler; if while the server is running the handler * throws an exception while responding to a request, an HTTP 500 response * will be returned * @throws NS_ERROR_INVALID_ARG * if path does not begin with a \"/\" */`",197,null],[11,"RegisterPrefixHandler","","`text /** * Registers a custom prefix handler. * * @param prefix * the path on the server (beginning and ending with \"/\") which is to be * handled by handler; this path must not include a query string or hash * component. All requests that start with this prefix will be directed to * the given handler. * @param handler * an object which will handle any requests for the given path, or null to * remove any existing handler; if while the server is running the handler * throws an exception while responding to a request, an HTTP 500 response * will be returned * @throws NS_ERROR_INVALID_ARG * if path does not begin with a \"/\" or does not end with a \"/\" */`",197,null],[11,"RegisterErrorHandler","","`text /** * Registers a custom error page handler. * * @param code * the error code which is to be handled by handler * @param handler * an object which will handle any requests which generate the given status * code, or null to remove any existing handler. If the handler throws an * exception during server operation, fallback is to the genericized error * handler (the x00 version), then to 500, using a user-defined error * handler if one exists or the server default handler otherwise. Fallback * will never occur from a user-provided handler that throws to the same * handler as provided by the server, e.g. a throwing user 404 falls back to * 400, not a server-provided 404 that might not throw. * @note * If the error handler handles HTTP 500 and throws, behavior is undefined. */`",197,null],[11,"RegisterDirectory","","`text /** * Maps all requests to paths beneath path to the corresponding file beneath * dir. * * @param path * the absolute path on the server against which requests will be served * from dir (e.g., \"/\", \"/foo/\", etc.); must begin and end with a forward * slash * @param dir * the directory to be used to serve all requests for paths underneath path * (except those further overridden by another, deeper path registered with * another directory); if null, any current mapping for the given path is * removed * @throws NS_ERROR_INVALID_ARG * if dir is non-null and does not exist or is not a directory, or if path * does not begin with and end with a forward slash */`",197,null],[11,"RegisterContentType","","`text /** * Associates files with the given extension with the given Content-Type when * served by this server, in the absence of any file-specific information * about the desired Content-Type. If type is empty, removes any extant * mapping, if one is present. * * @throws NS_ERROR_INVALID_ARG * if the given type is not a valid header field value, i.e. if it doesn't * match the field-value production in RFC 2616 * @note * No syntax checking is done of the given type, beyond ensuring that it is * a valid header field value. Behavior when not given a string matching * the media-type production in RFC 2616 section 3.7 is undefined. * Implementations may choose to define specific behavior for types which do * not match the production, such as for CGI functionality. * @note * Implementations MAY treat type as a trusted argument; users who fail to * generate this string from trusted data risk security vulnerabilities. */`",197,null],[11,"SetIndexHandler","","`text /** * Sets the handler used to display the contents of a directory if * the directory contains no index page. * * @param handler * an object which will handle any requests for directories which * do not contain index pages, or null to reset to the default * index handler; if while the server is running the handler * throws an exception while responding to a request, an HTTP 500 * response will be returned. An nsIFile corresponding to the * directory is available from the metadata object passed to the * handler, under the key \"directory\". */`",197,null],[11,"GetIdentity","","`text /** Represents the locations at which this server is reachable. */`",197,null],[11,"GetState","","`text /** * Retrieves the string associated with the given key in this, for the given * path's saved state. All keys are initially associated with the empty * string. */`",197,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetState","","`text /** * Sets the string associated with the given key in this, for the given path's * saved state. */`",197,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSharedState","","`text /** * Retrieves the string associated with the given key in this, in * entire-server saved state. All keys are initially associated with the * empty string. */`",197,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSharedState","","`text /** * Sets the string associated with the given key in this, in entire-server * saved state. */`",197,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetObjectState","","`text /** * Retrieves the object associated with the given key in this in * object-valued saved state. All keys are initially associated with null. */`",197,null],[11,"SetObjectState","","`text /** * Sets the object associated with the given key in this in object-valued * saved state. The value may be null. */`",197,null],[11,"addref","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",198,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpServerStoppedCallback` to one of its base interfaces.",198,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",198,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStopped","","`text /** * An interface through which a notification of the complete stopping (socket * closure, in-flight requests all fully served and responded to) of an HTTP * server may be received. */ /** Called when the corresponding server has been fully stopped. */`",198,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",199,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",199,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpServerIdentity` to one of its base interfaces.",199,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",199,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrimaryScheme","","`text /** * Represents a set of names for a server, one of which is the primary name for * the server and the rest of which are secondary. By default every server will * contain (\"http\", \"localhost\", port) and (\"http\", \"127.0.0.1\", port) as names, * where port is what was provided to the corresponding server when started; * however, except for their being removed when the corresponding server stops * they have no special importance. */ /** * The primary scheme at which the corresponding server is located, defaulting * to 'http'. This name will be the value of nsIHttpRequest.scheme for * HTTP/1.0 requests. * * This value is always set when the corresponding server is running. If the * server is not running, this value is set only if it has been set to a * non-default name using setPrimary. In this case reading this value will * throw NS_ERROR_NOT_INITIALIZED. */`",199,null],[11,"GetPrimaryHost","","`text /** * The primary name by which the corresponding server is known, defaulting to * 'localhost'. This name will be the value of nsIHttpRequest.host for * HTTP/1.0 requests. * * This value is always set when the corresponding server is running. If the * server is not running, this value is set only if it has been set to a * non-default name using setPrimary. In this case reading this value will * throw NS_ERROR_NOT_INITIALIZED. */`",199,null],[11,"GetPrimaryPort","","`text /** * The primary port on which the corresponding server runs, defaulting to the * associated server's port. This name will be the value of * nsIHttpRequest.port for HTTP/1.0 requests. * * This value is always set when the corresponding server is running. If the * server is not running, this value is set only if it has been set to a * non-default name using setPrimary. In this case reading this value will * throw NS_ERROR_NOT_INITIALIZED. */`",199,null],[11,"Add","","`text /** * Adds a location at which this server may be accessed. * * @throws NS_ERROR_ILLEGAL_VALUE * if scheme or host do not match the scheme or host productions imported * into RFC 2616 from RFC 2396, or if port is not a valid port number */`",199,null],[11,"Remove","","`text /** * Removes this name from the list of names by which the corresponding server * is known. If name is also the primary name for the server, the primary * name reverts to 'http://127.0.0.1' with the associated server's port. * * @throws NS_ERROR_ILLEGAL_VALUE * if scheme or host do not match the scheme or host productions imported * into RFC 2616 from RFC 2396, or if port is not a valid port number * @returns * true if the given name was a name for this server, false otherwise */`",199,null],[11,"Has","","`text /** * Returns true if the given name is in this, false otherwise. * * @throws NS_ERROR_ILLEGAL_VALUE * if scheme or host do not match the scheme or host productions imported * into RFC 2616 from RFC 2396, or if port is not a valid port number */`",199,null],[11,"GetScheme","","`text /** * Returns the scheme for the name with the given host and port, if one is * present; otherwise returns the empty string. * * @throws NS_ERROR_ILLEGAL_VALUE * if host does not match the host production imported into RFC 2616 from * RFC 2396, or if port is not a valid port number */`",199,null],[11,"SetPrimary","","`text /** * Designates the given name as the primary name in this and adds it to this * if it is not already present. * * @throws NS_ERROR_ILLEGAL_VALUE * if scheme or host do not match the scheme or host productions imported * into RFC 2616 from RFC 2396, or if port is not a valid port number */`",199,null],[11,"addref","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",200,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpRequestHandler` to one of its base interfaces.",200,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",200,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Handle","","`text /** * A representation of a handler for HTTP requests. The handler is used by * calling its .handle method with data for an incoming request; it is the * handler's job to use that data as it sees fit to make the desired response. * * @note * This interface uses the [function] attribute, so you can pass a * script-defined function with the functionality of handle() to any * method which has a nsIHttpRequestHandler parameter, instead of wrapping * it in an otherwise empty object. */ /** * Processes an HTTP request and initializes the passed-in response to reflect * the correct HTTP response. * * If this method throws an exception, externally observable behavior depends * upon whether is being processed asynchronously. If such is the case, the * output is some prefix (perhaps all, perhaps none, perhaps only some) of the * data which would have been sent if, instead, the response had been finished * at that point. If no data has been written, the response has not had * seizePower() called on it, and it is not being asynchronously created, an * error handler will be invoked (usually 500 unless otherwise specified). * * Some uses of nsIHttpRequestHandler may require this method to never throw * an exception; in the general case, however, this method may throw an * exception (causing an HTTP 500 response to occur, if the above conditions * are met). * * @param request * data representing an HTTP request * @param response * an initially-empty response which must be modified to reflect the data * which should be sent as the response to the request described by metadata */`",200,null],[11,"addref","","",201,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",201,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpRequest` to one of its base interfaces.",201,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",201,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMethod","","`text /** * A representation of the data included in an HTTP request. */ /** * The request type for this request (see RFC 2616, section 5.1.1). */`",201,null],[11,"GetScheme","","`text /** * The scheme of the requested path, usually 'http' but might possibly be * 'https' if some form of SSL tunneling is in use. Note that this value * cannot be accurately determined unless the incoming request used the * absolute-path form of the request line; it defaults to 'http', so only * if it is something else can you be entirely certain it's correct. */`",201,null],[11,"GetHost","","`text /** * The host of the data being requested (e.g. \"localhost\" for the * http://localhost:8080/file resource). Note that the relevant port on the * host is specified in this.port. This value is in the ASCII character * encoding. */`",201,null],[11,"GetPort","","`text /** * The port on the server on which the request was received. */`",201,null],[11,"GetPath","","`text /** * The requested path, without any query string (e.g. \"/dir/file.txt\"). It is * guaranteed to begin with a \"/\". The individual components in this string * are URL-encoded. */`",201,null],[11,"GetQueryString","","`text /** * The URL-encoded query string associated with this request, not including * the initial \"?\", or \"\" if no query string was present. */`",201,null],[11,"GetHttpVersion","","`text /** * A string containing the HTTP version of the request (i.e., \"1.1\"). Leading * zeros for either component of the version will be omitted. (In other * words, if the request contains the version \"1.01\", this attribute will be * \"1.1\"; see RFC 2616, section 3.1.) */`",201,null],[11,"GetHeader","","`text /** * Returns the value for the header in this request specified by fieldName. * * @param fieldName * the name of the field whose value is to be gotten; note that since HTTP * header field names are case-insensitive, this method produces equivalent * results for \"HeAdER\" and \"hEADer\" as fieldName * @returns * The result is a string containing the individual values of the header, * usually separated with a comma. The headers WWW-Authenticate, * Proxy-Authenticate, and Set-Cookie violate the HTTP specification, * however, and for these headers only the separator string is '\\n'. * * @throws NS_ERROR_INVALID_ARG * if fieldName does not constitute a valid header field name * @throws NS_ERROR_NOT_AVAILABLE * if the given header does not exist in this */`",201,null],[11,"HasHeader","","`text /** * Returns true if a header with the given field name exists in this, false * otherwise. * * @param fieldName * the field name whose existence is to be determined in this; note that * since HTTP header field names are case-insensitive, this method produces * equivalent results for \"HeAdER\" and \"hEADer\" as fieldName * @throws NS_ERROR_INVALID_ARG * if fieldName does not constitute a valid header field name */`",201,null],[11,"GetHeaders","","`text /** * An nsISimpleEnumerator of nsISupportsStrings over the names of the headers * in this request. The header field names in the enumerator may not * necessarily have the same case as they do in the request itself. */`",201,null],[11,"GetBodyInputStream","","`text /** * A stream from which data appearing in the body of this request can be read. */`",201,null],[11,"addref","","",202,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",202,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpResponse` to one of its base interfaces.",202,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",202,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetStatusLine","","`text /** * Represents an HTTP response, as described in RFC 2616, section 6. */ /** * Sets the status line for this. If this method is never called on this, the * status line defaults to \"HTTP/\", followed by the server's default HTTP * version (e.g. \"1.1\"), followed by \" 200 OK\". * * @param httpVersion * the HTTP version of this, as a string (e.g. \"1.1\"); if null, the server * default is used * @param code * the numeric HTTP status code for this * @param description * a human-readable description of code; may be null if no description is * desired * @throws NS_ERROR_INVALID_ARG * if httpVersion is not a valid HTTP version string, statusCode is greater * than 999, or description contains invalid characters * @throws NS_ERROR_NOT_AVAILABLE * if this response is being processed asynchronously and data has been * written to this response's body, or if seizePower() has been called on * this */`",202,null],[11,"SetHeader","","`text /** * Sets the specified header in this. * * @param name * the name of the header; must match the field-name production per RFC 2616 * @param value * the value of the header; must match the field-value production per RFC * 2616 * @param merge * when true, if the given header already exists in this, the values passed * to this function will be merged into the existing header, per RFC 2616 * header semantics (except for the Set-Cookie, WWW-Authenticate, and * Proxy-Authenticate headers, which will treat each such merged header as * an additional instance of the header, for real-world compatibility * reasons); when false, replaces any existing header of the given name (if * any exists) with a new header with the specified value * @throws NS_ERROR_INVALID_ARG * if name or value is not a valid header component * @throws NS_ERROR_NOT_AVAILABLE * if this response is being processed asynchronously and data has been * written to this response's body, or if seizePower() has been called on * this */`",202,null],[11,"SetHeaderNoCheck","","`text /** * This is used for testing our header handling, so header will be sent out * without transformation. There can be multiple headers. */`",202,null],[11,"GetBodyOutputStream","","`text /** * A stream to which data appearing in the body of this response (or in the * totality of the response if seizePower() is called) should be written. * After this response has been designated as being processed asynchronously, * or after seizePower() has been called on this, subsequent writes will no * longer be buffered and will be written to the underlying transport without * delaying until the entire response is constructed. Write-through may or * may not be synchronous in the implementation, and in any case particular * behavior may not be observable to the HTTP client as intermediate buffers * both in the server socket and in the client may delay written data; be * prepared for delays at any time. * * @throws NS_ERROR_NOT_AVAILABLE * if accessed after this response is fully constructed */`",202,null],[11,"Write","","`text /** * Writes a string to the response's output stream. This method is merely a * convenient shorthand for writing the same data to bodyOutputStream * directly. * * @note * This method is only guaranteed to work with ASCII data. * @throws NS_ERROR_NOT_AVAILABLE * if called after this response has been fully constructed */`",202,null],[11,"ProcessAsync","","`text /** * Signals that this response is being constructed asynchronously. Requests * are typically completely constructed during nsIHttpRequestHandler.handle; * however, responses which require significant resources (time, memory, * processing) to construct can be created and sent incrementally by calling * this method during the call to nsIHttpRequestHandler.handle. This method * only has this effect when called during nsIHttpRequestHandler.handle; * behavior is undefined if it is called at a later time. It may be called * multiple times with no ill effect, so long as each call occurs before * finish() is called. * * @throws NS_ERROR_UNEXPECTED * if not initially called within a nsIHttpRequestHandler.handle call or if * called after this response has been finished * @throws NS_ERROR_NOT_AVAILABLE * if seizePower() has been called on this */`",202,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SeizePower","","`text /** * Seizes complete control of this response (and its connection) from the * server, allowing raw and unfettered access to data being sent in the HTTP * response. Once this method has been called the only property which may be * accessed without an exception being thrown is bodyOutputStream, and the * only methods which may be accessed without an exception being thrown are * write(), finish(), and seizePower() (which may be called multiple times * without ill effect so long as all calls are otherwise allowed). * * After a successful call, all data subsequently written to the body of this * response is written directly to the corresponding connection. (Previously- * written data is silently discarded.) No status line or headers are sent * before doing so; if the response handler wishes to write such data, it must * do so manually. Data generation completes only when finish() is called; it * is not enough to simply call close() on bodyOutputStream. * * @throws NS_ERROR_NOT_AVAILABLE * if processAsync() has been called on this * @throws NS_ERROR_UNEXPECTED * if finish() has been called on this */`",202,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Finish","","`text /** * Signals that construction of this response is complete and that it may be * sent over the network to the client, or if seizePower() has been called * signals that all data has been written and that the underlying connection * may be closed. This method may only be called after processAsync() or * seizePower() has been called. This method is idempotent. * * @throws NS_ERROR_UNEXPECTED * if processAsync() or seizePower() has not already been properly called */`",202,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",203,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",203,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlListManager` to one of its base interfaces.",203,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",203,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetGethashUrl","","`text /** * Get the gethash url for this table */`",203,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUpdateUrl","","`text /** * Get the update url for this table */`",203,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"RegisterTable","","`text /** * Add a table to the list of tables we are managing. The name is a * string of the format provider_name-semantic_type-table_type. For * @param tableName A string of the format * provider_name-semantic_type-table_type. For example, * goog-white-enchash or goog-black-url. * @param providerName The name of the entity providing the list. * @param updateUrl The URL from which to fetch updates. * @param gethashUrl The URL from which to fetch hash completions. */`",203,null],[11,"UnregisterTable","","`text /** * Unregister table from the list */`",203,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EnableUpdate","","`text /** * Turn on update checking for a table. I.e., during the next server * check, download updates for this table. */`",203,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"DisableUpdate","","`text /** * Turn off update checking for a table. */`",203,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"MaybeToggleUpdateChecking","","`text /** * Toggle update checking, if necessary. */`",203,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CheckForUpdates","","`text /** * This is currently used by about:url-classifier to force an update * for the update url. Update may still fail because of backoff algorithm. */`",203,null],[11,"ForceUpdates","","`text /** * Force updates for the given tables, updates are still restricted to * backoff algorithm. * @param tables A string lists all the tables that we want to trigger updates. * table names are separated with ','. */`",203,null],[11,"GetBackOffTime","","`text /** * This is currently used by about:url-classifier to get back-off time * (in millisecond since epoch) for the given provider. Return 0 if we * are not in back-off mode. */`",203,null],[11,"addref","","",204,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",204,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginMetaInfo` to one of its base interfaces.",204,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",204,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetGuid","","`text /** * The GUID to uniquely identify the login. This can be any arbitrary * string, but a format as created by nsIUUIDGenerator is recommended. * For example, \"{d4e1a1f6-5ea0-40ee-bff5-da57982f21cf}\" * * addLogin will generate a random value unless a value is provided. * * addLogin and modifyLogin will throw if the GUID already exists. */`",204,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetGuid","","`text /** * The GUID to uniquely identify the login. This can be any arbitrary * string, but a format as created by nsIUUIDGenerator is recommended. * For example, \"{d4e1a1f6-5ea0-40ee-bff5-da57982f21cf}\" * * addLogin will generate a random value unless a value is provided. * * addLogin and modifyLogin will throw if the GUID already exists. */`",204,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTimeCreated","","`text /** * The time, in Unix Epoch milliseconds, when the login was first created. */`",204,null],[11,"SetTimeCreated","","`text /** * The time, in Unix Epoch milliseconds, when the login was first created. */`",204,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetTimeLastUsed","","`text /** * The time, in Unix Epoch milliseconds, when the login was last submitted * in a form or used to begin an HTTP auth session. */`",204,null],[11,"SetTimeLastUsed","","`text /** * The time, in Unix Epoch milliseconds, when the login was last submitted * in a form or used to begin an HTTP auth session. */`",204,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetTimePasswordChanged","","`text /** * The time, in Unix Epoch milliseconds, when the login was last modified. * * Contrary to what the name may suggest, this attribute takes into account * not only the password but also the username attribute. */`",204,null],[11,"SetTimePasswordChanged","","`text /** * The time, in Unix Epoch milliseconds, when the login was last modified. * * Contrary to what the name may suggest, this attribute takes into account * not only the password but also the username attribute. */`",204,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetTimesUsed","","`text /** * The number of times the login was submitted in a form or used to begin * an HTTP auth session. */`",204,null],[11,"SetTimesUsed","","`text /** * The number of times the login was submitted in a form or used to begin * an HTTP auth session. */`",204,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",205,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",205,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHistory` to one of its base interfaces.",205,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",205,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",206,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",206,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintSession` to one of its base interfaces.",206,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",206,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",207,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentSecurityManager` to one of its base interfaces.",207,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",207,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PerformSecurityCheck","","`text /** * Checks whether a channel is allowed to access the given URI and * whether the channel should be openend or should be blocked consulting * internal security checks like Same Origin Policy, Content Security * Policy, Mixed Content Blocker, etc. * * If security checks within performSecurityCheck fail, the function * throws an exception. * * @param aChannel * The channel about to be openend * @param aStreamListener * The Streamlistener of the channel potentially wrapped * into CORSListenerProxy. * @return * The StreamListener of the channel wrapped into CORSListenerProxy. * * @throws NS_ERROR_DOM_BAD_URI * If accessing the URI is not allowed (e.g. prohibted by SOP) * @throws NS_ERROR_CONTENT_BLOCKED * If any of the security policies (CSP, Mixed content) is violated */`",207,null],[11,"IsOriginPotentiallyTrustworthy","","`text /** * Implementation of * https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy * * The value returned by this method feeds into the the Secure Context * algorithm that determins the value of Window.isSecureContext and * WorkerGlobalScope.isSecureContext. * * This method returns false instead of throwing upon errors. */`",207,null],[11,"addref","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",208,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSSupportsRule` to one of its base interfaces.",208,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",208,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssconditionrule"}}],[11,"addref","","",209,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",209,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPKCS11ModuleDB` to one of its base interfaces.",209,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",209,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DeleteModule","","`[must_use] void deleteModule (in AString moduleName);`",209,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddModule","","`[must_use] void addModule (in AString moduleName, in AString libraryFullPath, in long cryptoMechanismFlags, in long cipherFlags);`",209,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"FindModuleByName","","`[must_use] nsIPKCS11Module findModuleByName (in AUTF8String name);`",209,null],[11,"ListModules","","`[must_use] nsISimpleEnumerator listModules ();`",209,null],[11,"GetCanToggleFIPS","","`[must_use] readonly attribute boolean canToggleFIPS;`",209,null],[11,"ToggleFIPSMode","","`[must_use] void toggleFIPSMode ();`",209,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsFIPSEnabled","","`[must_use] readonly attribute boolean isFIPSEnabled;`",209,null],[11,"addref","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",210,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnicharOutputStream` to one of its base interfaces.",210,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",210,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Write","","`text /** * Write a single character to the stream. When writing many characters, * prefer the string-taking write method. * * @retval true The character was written successfully * @retval false Not all bytes of the character could be written. */`",210,null],[11,"WriteString","","`text /** * Write a string to the stream. * * @retval true The string was written successfully * @retval false Not all bytes of the string could be written. */`",210,null],[11,"Flush","","`text /** * Flush the stream. This finishes the conversion and writes any bytes that * finish the current byte sequence. * * It does NOT flush the underlying stream. */`",210,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Close","","`text /** * Close the stream and free associated resources. This also closes the * underlying stream. */`",210,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",211,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentRequestService` to one of its base interfaces.",211,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",211,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPaymentRequestById","","`text /** * Get the nsIPaymentRequest through the given payment request identifier. * @param aRequestId - the payment request identifier. * This is an internal id generated by Gecko. * @return - the requested payment request. null if there is no * coressponding nsIPaymentRequest for aRequestId. */`",211,null],[11,"Enumerate","","`text /** * Get the enumerator for all managed nsIPaymentRequests. * @return - an enumerator for all managed nsIPaymentRequests. */`",211,null],[11,"RespondPayment","","`text /** * Send the user's response to the merchant. * @param aResponse - the user's response. */`",211,null],[11,"ChangeShippingAddress","","`text /** * Inform the merchant the shipping addres has changed. * @param requestId - the request identifier of the payment request. * @param aAddress - the new payment address. */`",211,null],[11,"ChangeShippingOption","","`text /** * Inform the merchant the shipping option has changed. * @param requestId - the request identifier of the payment request. * @param option - the shipping option ID string. */`",211,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Cleanup","","`text /** * Following APIs are for testing or platform code only. UI implementation * should not use them. */ /** * Clean up the all managed payment requests. * This API is for testing only. */`",211,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetTestingUIService","","`text /** * Setup the customized nsIPaymentUIService. * This API is for testing only. */`",211,null],[11,"RequestPayment","","`text /** * Request a specified action on the specified PaymentRequest. * @param aRequest - the requested action. */`",211,null],[11,"RemoveActionCallback","","`text /** * This is a cleanup function to break the association between * nsIPaymentRequestService and nsIPaymentActionCallback. * nsIPaymentActionCallback is an interface that registered to * nsIPaymentRequestService when the merchant asks to perform actions, and it * will be called when user's response send back to nsIPaymentRequestService. * @param aCallback - the specified nsIPaymentActionCallback. */`",211,null],[11,"addref","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",212,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnicharLineInputStream` to one of its base interfaces.",212,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",212,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReadLine","","`text /** * Read a single line from the stream, where a line is a * possibly zero length sequence of characters terminated by a * CR, LF, CRLF, LFCR, or eof. * The line terminator is not returned. * @retval false * End of file. This line is the last line of the file * (aLine is valid). * @retval true * The file contains further lines. * @note Do not mix readLine with other read functions. * Doing so can cause various problems and is not supported. */`",212,null],[11,"addref","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",213,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFContainerUtils` to one of its base interfaces.",213,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",213,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsOrdinalProperty","","`text /** * Returns 'true' if the property is an RDF ordinal property. */`",213,null],[11,"IndexToOrdinalResource","","`text /** * Convert the specified index to an ordinal property. */`",213,null],[11,"OrdinalResourceToIndex","","`text /** * Convert the specified ordinal property into an index */`",213,null],[11,"IsContainer","","`text /** * Return 'true' if the specified resource is a container */`",213,null],[11,"IsEmpty","","`text /** * Return 'true' if the specified resource is a container and it is empty */`",213,null],[11,"IsBag","","`text /** * Return 'true' if the specified resource is a bag */`",213,null],[11,"IsSeq","","`text /** * Return 'true' if the specified resource is a sequence */`",213,null],[11,"IsAlt","","`text /** * Return 'true' if the specified resource is an alternation */`",213,null],[11,"MakeBag","","`text /** * Decorates the specified resource appropriately to make it * usable as an empty bag in the specified data source. */`",213,null],[11,"MakeSeq","","`text /** * Decorates the specified resource appropriately to make it * usable as an empty sequence in the specified data source. */`",213,null],[11,"MakeAlt","","`text /** * Decorates the specified resource appropriately to make it * usable as an empty alternation in the specified data source. */`",213,null],[11,"IndexOf","","`text /** * Retrieve the index of element in the container. Returns -1 if * the element is not in the container. */`",213,null],[11,"addref","","",214,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",214,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIOService` to one of its base interfaces.",214,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",214,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetProtocolHandler","","`text /** * Returns a protocol handler for a given URI scheme. * * @param aScheme the URI scheme * @return reference to corresponding nsIProtocolHandler */`",214,null],[11,"GetProtocolFlags","","`text /** * Returns the protocol flags for a given scheme. * * @param aScheme the URI scheme * @return value of corresponding nsIProtocolHandler::protocolFlags */`",214,null],[11,"NewURI","","`text /** * This method constructs a new URI by determining the scheme of the * URI spec, and then delegating the construction of the URI to the * protocol handler for that scheme. QueryInterface can be used on * the resulting URI object to obtain a more specific type of URI. * * @see nsIProtocolHandler::newURI */`",214,null],[11,"NewFileURI","","`text /** * This method constructs a new URI from a nsIFile. * * @param aFile specifies the file path * @return reference to a new nsIURI object * * Note: in the future, for perf reasons we should allow * callers to specify whether this is a file or directory by * splitting this into newDirURI() and newActualFileURI(). */`",214,null],[11,"NewChannelFromURI2","","`text /** * Creates a channel for a given URI. * * @param aURI * nsIURI from which to make a channel * @param aLoadingNode * @param aLoadingPrincipal * @param aTriggeringPrincipal * @param aSecurityFlags * @param aContentPolicyType * These will be used as values for the nsILoadInfo object on the * created channel. For details, see nsILoadInfo in nsILoadInfo.idl * @return reference to the new nsIChannel object * * Please note, if you provide both a loadingNode and a loadingPrincipal, * then loadingPrincipal must be equal to loadingNode->NodePrincipal(). * But less error prone is to just supply a loadingNode. * * Keep in mind that URIs coming from a webpage should *never* use the * systemPrincipal as the loadingPrincipal. */`",214,null],[11,"NewChannelFromURIWithLoadInfo","","`text /** * Equivalent to newChannelFromURI2(aURI, aLoadingNode, ...) */`",214,null],[11,"NewChannel2","","`text /** * Equivalent to newChannelFromURI2(newURI(...)) */`",214,null],[11,"NewChannelFromURI","","`text /** * ***** DEPRECATED ***** * Please use NewChannelFromURI2() * * Creates a channel for a given URI. * * @param aURI nsIURI from which to make a channel * @return reference to the new nsIChannel object */`",214,null],[11,"NewChannel","","`text /** * ***** DEPRECATED ***** * Please use newChannel2(). * * Equivalent to newChannelFromURI(newURI(...)) */`",214,null],[11,"GetOffline","","`text /** * Returns true if networking is in \"offline\" mode. When in offline mode, * attempts to access the network will fail (although this does not * necessarily correlate with whether there is actually a network * available -- that's hard to detect without causing the dialer to * come up). * * Changing this fires observer notifications ... see below. */`",214,null],[11,"SetOffline","","`text /** * Returns true if networking is in \"offline\" mode. When in offline mode, * attempts to access the network will fail (although this does not * necessarily correlate with whether there is actually a network * available -- that's hard to detect without causing the dialer to * come up). * * Changing this fires observer notifications ... see below. */`",214,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetConnectivity","","`text /** * Returns false if there are no interfaces for a network request */`",214,null],[11,"AllowPort","","`text /** * Checks if a port number is banned. This involves consulting a list of * unsafe ports, corresponding to network services that may be easily * exploitable. If the given port is considered unsafe, then the protocol * handler (corresponding to aScheme) will be asked whether it wishes to * override the IO service's decision to block the port. This gives the * protocol handler ultimate control over its own security policy while * ensuring reasonable, default protection. * * @see nsIProtocolHandler::allowPort */`",214,null],[11,"ExtractScheme","","`text /** * Utility to extract the scheme from a URL string, consistently and * according to spec (see RFC 2396). * * NOTE: Most URL parsing is done via nsIURI, and in fact the scheme * can also be extracted from a URL string via nsIURI. This method * is provided purely as an optimization. * * @param aSpec the URL string to parse * @return URL scheme * * @throws NS_ERROR_MALFORMED_URI if URL string is not of the right form. */`",214,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"HostnameIsLocalIPAddress","","`text /** * Checks if a URI host is a local IPv4 or IPv6 address literal. * * @param nsIURI the URI that contains the hostname to check * @return true if the URI hostname is a local IP address */`",214,null],[11,"GetManageOfflineStatus","","`text /** * While this is set, IOService will monitor an nsINetworkLinkService * (if available) and set its offline status to \"true\" whenever * isLinkUp is false. * * Applications that want to control changes to the IOService's offline * status should set this to false, watch for network:link-status-changed * broadcasts, and change nsIIOService::offline as they see fit. Note * that this means during application startup, IOService may be offline * if there is no link, until application code runs and can turn off * this management. */`",214,null],[11,"SetManageOfflineStatus","","`text /** * While this is set, IOService will monitor an nsINetworkLinkService * (if available) and set its offline status to \"true\" whenever * isLinkUp is false. * * Applications that want to control changes to the IOService's offline * status should set this to false, watch for network:link-status-changed * broadcasts, and change nsIIOService::offline as they see fit. Note * that this means during application startup, IOService may be offline * if there is no link, until application code runs and can turn off * this management. */`",214,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"NewChannelFromURIWithProxyFlags2","","`text /** * Creates a channel for a given URI. * * @param aURI * nsIURI from which to make a channel * @param aProxyURI * nsIURI to use for proxy resolution. Can be null in which * case aURI is used * @param aProxyFlags flags from nsIProtocolProxyService to use * when resolving proxies for this new channel * @param aLoadingNode * @param aLoadingPrincipal * @param aTriggeringPrincipal * @param aSecurityFlags * @param aContentPolicyType * These will be used as values for the nsILoadInfo object on the * created channel. For details, see nsILoadInfo in nsILoadInfo.idl * @return reference to the new nsIChannel object * * Please note, if you provide both a loadingNode and a loadingPrincipal, * then loadingPrincipal must be equal to loadingNode->NodePrincipal(). * But less error prone is to just supply a loadingNode. */`",214,null],[11,"addref","","",215,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",215,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIOServiceInternal` to one of its base interfaces.",215,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",215,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetConnectivity","","`text /** * This is an internal method that should only be called from ContentChild * in order to pass the connectivity state from the chrome process to the * content process. It throws if called outside the content process. */`",215,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"NotifyWakeup","","`text /** * An internal method to asynchronously run our notifications that happen * when we wake from sleep */`",215,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",216,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",216,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIByteRangeRequest` to one of its base interfaces.",216,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",216,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsByteRangeRequest","","`text /** * Returns true IFF this request is a byte range request, otherwise it * returns false (This is effectively the same as checking to see if * |startRequest| is zero and |endRange| is the content length.) */`",216,null],[11,"GetStartRange","","`text /** * Absolute start position in remote file for this request. */`",216,null],[11,"GetEndRange","","`text /** * Absolute end postion in remote file for this request */`",216,null],[11,"addref","","",217,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",217,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRemoteBrowser` to one of its base interfaces.",217,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",217,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EnableDisableCommands","","`void enableDisableCommands (in AString action, in unsigned long enabledLength, [array, size_is (enabledLength)] in string enabledCommands, in unsigned long disabledLength, [array, size_is (disabledLength)] in string disabledCommands);`",217,null],[11,"GetContentPrincipal","","`readonly attribute nsIPrincipal contentPrincipal;`",217,null],[11,"addref","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",218,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationCacheContainer` to one of its base interfaces.",218,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",218,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetApplicationCache","","`attribute nsIApplicationCache applicationCache;`",218,null],[11,"SetApplicationCache","","`attribute nsIApplicationCache applicationCache;`",218,null],[11,"addref","","",219,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",219,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertificateDialogs` to one of its base interfaces.",219,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",219,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConfirmDownloadCACert","","`text /** * UI shown when a user is asked to download a new CA cert. * Provides user with ability to choose trust settings for the cert. * Asks the user to grant permission to import the certificate. * * @param ctx A user interface context. * @param cert The certificate that is about to get installed. * @param trust A bit mask of trust flags. * See nsIX509CertDB for possible values. * * @return true if the user allows to import the certificate. */`",219,null],[11,"SetPKCS12FilePassword","","`text /** * UI shown when a user's personal certificate is going to be * exported to a backup file. * The implementation of this dialog should make sure to prompt the user to * type the password twice in order to confirm correct input. * The wording in the dialog should also motivate the user to enter a strong * password. * * @param ctx A user interface context. * @param password The password provided by the user. * * @return false if the user requests to cancel. */`",219,null],[11,"GetPKCS12FilePassword","","`text /** * UI shown when a user is about to restore a personal * certificate from a backup file. * The user is requested to enter the password * that was used in the past to protect that backup file. * * @param ctx A user interface context. * @param password The password provided by the user. * * @return false if the user requests to cancel. */`",219,null],[11,"ViewCert","","`text /** * UI shown when a certificate needs to be shown to the user. * The implementation should try to display as many attributes * as possible. * * @param ctx A user interface context. * @param cert The certificate to be shown to the user. */`",219,null],[11,"addref","","",220,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",220,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboardDragDropHookList` to one of its base interfaces.",220,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",220,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddClipboardDragDropHooks","","`text /** * Add a hook to list. * @param aHooks implementation of hooks */`",220,null],[11,"RemoveClipboardDragDropHooks","","`text /** * Remove a hook from list (note if this implementation is not present * in the list then removal will be ignored). * @param aHooks implementation of hooks */`",220,null],[11,"GetHookEnumerator","","`text /** * Gets an enumerator for all hooks which have been added. * @return nsISimpleEnumerator for nsIClipboardDragDropHooks */`",220,null],[11,"addref","","",221,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",221,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISimpleEnumerator` to one of its base interfaces.",221,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",221,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HasMoreElements","","`text /** * Called to determine whether or not the enumerator has * any elements that can be returned via getNext(). This method * is generally used to determine whether or not to initiate or * continue iteration over the enumerator, though it can be * called without subsequent getNext() calls. Does not affect * internal state of enumerator. * * @see getNext() * @return true if there are remaining elements in the enumerator. * false if there are no more elements in the enumerator. */`",221,null],[11,"GetNext","","`text /** * Called to retrieve the next element in the enumerator. The \"next\" * element is the first element upon the first call. Must be * pre-ceeded by a call to hasMoreElements() which returns PR_TRUE. * This method is generally called within a loop to iterate over * the elements in the enumerator. * * @see hasMoreElements() * @throws NS_ERROR_FAILURE if there are no more elements * to enumerate. * @return the next element in the enumeration. */`",221,null],[11,"addref","","",222,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",222,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFaviconService` to one of its base interfaces.",222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",222,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FAVICON_LOAD_PRIVATE","","",222,null],[18,"FAVICON_LOAD_NON_PRIVATE","","",222,null],[18,"MAX_FAVICON_BUFFER_SIZE","","`text /** * The limit in bytes of the size of favicons in memory and passed via the * favicon protocol. */`",222,null],[11,"GetFaviconLinkForIcon","","`text /** * For a given icon URI, this will return a URI that will result in the image. * In most cases, this is an annotation URI. For chrome URIs, this will do * nothing but returning the input URI. * * No validity checking is done. If you pass an icon URI that we've never * seen, you'll get back a URI that references an invalid icon. The moz-anno * protocol handler's special case for \"favicon\" annotations will resolve * invalid icons to the default icon, although without caching. * For invalid chrome URIs, you'll get a broken image. * * @param aFaviconURI * The URI of an icon in the favicon service. * @return A URI that will give you the icon image. This is NOT the URI of * the icon as set on the page, but a URI that will give you the * data out of the favicon service. For a normal page with a * favicon we've stored, this will be an annotation URI which will * then cause the corresponding favicon data to be loaded async from * this service. For pages where we don't have a favicon, this will * be a chrome URI of the default icon. For chrome URIs, the * output will be the same as the input. */`",222,null],[11,"ExpireAllFavicons","","`text /** * Expire all known favicons from the database. * * @note This is an async method. * On successful completion a \"places-favicons-expired\" notification is * dispatched through observer's service. */`",222,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetDefaultIconURIPreferredSize","","`text /** * Sets the default size returned by preferredSizeFromURI when the uri doesn't * specify a size ref. If this is not invoked first, or 0 is passed to it, * preferredSizeFromURI() will return UINT16_MAX, that matches the biggest * icon available. */`",222,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"PreferredSizeFromURI","","`text /** * Tries to extract the preferred size from an icon uri ref fragment. * * @param aURI * The URI to parse. * @return The preferred size, or a default size set through * setDefaultIconURIPreferredSize, or UINT16_MAX if neither are set. */`",222,null],[11,"AddFailedFavicon","","`text /** * Adds a given favicon's URI to the failed favicon cache. * * The lifespan of the favicon cache is up to the caching system. This cache * will also be written when setAndLoadFaviconForPage hits an error while * fetching an icon. * * @param aFaviconURI * The URI of an icon in the favicon service. */`",222,null],[11,"RemoveFailedFavicon","","`text /** * Removes the given favicon from the failed favicon cache. If the icon is * not in the cache, it will silently succeed. * * @param aFaviconURI * The URI of an icon in the favicon service. */`",222,null],[11,"IsFailedFavicon","","`text /** * Checks to see if a favicon is in the failed favicon cache. * A positive return value means the icon is in the failed cache and you * probably shouldn't try to load it. A false return value means that it's * worth trying to load it. * This allows you to avoid trying to load \"foo.com/favicon.ico\" for every * page on a site that doesn't have a favicon. * * @param aFaviconURI * The URI of an icon in the favicon service. */`",222,null],[11,"GetDefaultFavicon","","`text /** * The default favicon URI */`",222,null],[11,"GetDefaultFaviconMimeType","","`text /** * The default favicon mimeType */`",222,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",223,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",223,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFaviconDataCallback` to one of its base interfaces.",223,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",223,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnComplete","","`text /** * Called when the required favicon's information is available. * * It's up to the invoking method to state if the callback is always invoked, * or called on success only. Check the method documentation to ensure that. * * The caller will receive the most information we can gather on the icon, * but it's not guaranteed that all of them will be set. For some method * we could not know the favicon's data (it could just be too expensive to * get it, or the method does not require we actually have any data). * It's up to the caller to check aDataLen > 0 before using any data-related * information like mime-type or data itself. * * @param aFaviconURI * Receives the \"favicon URI\" (not the \"favicon link URI\") associated * to the requested page. This can be null if there is no associated * favicon URI, or the callback is notifying a failure. * @param aDataLen * Size of the icon data in bytes. Notice that a value of 0 does not * necessarily mean that we don't have an icon. * @param aData * Icon data, or an empty array if aDataLen is 0. * @param aMimeType * Mime type of the icon, or an empty string if aDataLen is 0. * @param aWidth * Width of the icon. 0 if the width is unknown or if the icon is * vectorial. * * @note If you want to open a network channel to access the favicon, it's * recommended that you call the getFaviconLinkForIcon method to convert * the \"favicon URI\" into a \"favicon link URI\". */`",223,null],[11,"addref","","",224,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",224,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINSSVersion` to one of its base interfaces.",224,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",224,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNSPR_MinVersion","","`[must_use] readonly attribute AString NSPR_MinVersion;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSS_MinVersion","","`[must_use] readonly attribute AString NSS_MinVersion;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSUTIL_MinVersion","","`[must_use] readonly attribute AString NSSUTIL_MinVersion;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSSSL_MinVersion","","`[must_use] readonly attribute AString NSSSSL_MinVersion;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSSMIME_MinVersion","","`[must_use] readonly attribute AString NSSSMIME_MinVersion;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSPR_Version","","`[must_use] readonly attribute AString NSPR_Version;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSS_Version","","`[must_use] readonly attribute AString NSS_Version;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSUTIL_Version","","`[must_use] readonly attribute AString NSSUTIL_Version;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSSSL_Version","","`[must_use] readonly attribute AString NSSSSL_Version;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNSSSMIME_Version","","`[must_use] readonly attribute AString NSSSMIME_Version;`",224,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",225,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",225,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITokenDialogs` to one of its base interfaces.",225,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",225,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ChooseToken","","`[must_use] void ChooseToken (in nsIInterfaceRequestor ctx, [array, size_is (count)] in wstring tokenNameList, in unsigned long count, out AString tokenName, out boolean canceled);`",225,null],[11,"DisplayProtectedAuth","","`text /** * Displays notification dialog to the user that they are expected to * authenticate to the token using its \"protected authentication path\" feature. */`",225,null],[11,"addref","","",226,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",226,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISSLStatus` to one of its base interfaces.",226,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",226,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SSL_VERSION_3","","",226,null],[18,"TLS_VERSION_1","","",226,null],[18,"TLS_VERSION_1_1","","",226,null],[18,"TLS_VERSION_1_2","","",226,null],[18,"TLS_VERSION_1_3","","",226,null],[18,"CERTIFICATE_TRANSPARENCY_NOT_APPLICABLE","","",226,null],[18,"CERTIFICATE_TRANSPARENCY_POLICY_COMPLIANT","","",226,null],[18,"CERTIFICATE_TRANSPARENCY_POLICY_NOT_ENOUGH_SCTS","","",226,null],[18,"CERTIFICATE_TRANSPARENCY_POLICY_NOT_DIVERSE_SCTS","","",226,null],[11,"GetServerCert","","`readonly attribute nsIX509Cert serverCert;`",226,null],[11,"GetFailedCertChain","","`readonly attribute nsIX509CertList failedCertChain;`",226,null],[11,"GetSucceededCertChain","","`readonly attribute nsIX509CertList succeededCertChain;`",226,null],[11,"GetCipherName","","`[must_use] readonly attribute ACString cipherName;`",226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetKeyLength","","`[must_use] readonly attribute unsigned long keyLength;`",226,null],[11,"GetSecretKeyLength","","`[must_use] readonly attribute unsigned long secretKeyLength;`",226,null],[11,"GetKeaGroupName","","`[must_use] readonly attribute ACString keaGroupName;`",226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSignatureSchemeName","","`[must_use] readonly attribute ACString signatureSchemeName;`",226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProtocolVersion","","`[must_use] readonly attribute unsigned short protocolVersion;`",226,null],[11,"GetCertificateTransparencyStatus","","`[must_use] readonly attribute unsigned short certificateTransparencyStatus;`",226,null],[11,"GetIsDomainMismatch","","`[must_use] readonly attribute boolean isDomainMismatch;`",226,null],[11,"GetIsNotValidAtThisTime","","`[must_use] readonly attribute boolean isNotValidAtThisTime;`",226,null],[11,"GetIsUntrusted","","`[must_use] readonly attribute boolean isUntrusted;`",226,null],[11,"GetIsExtendedValidation","","`text /** * True only if (and after) serverCert was successfully validated as * Extended Validation (EV). */`",226,null],[11,"addref","","",227,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",227,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCommandEvent` to one of its base interfaces.",227,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",227,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCommand","","`readonly attribute DOMString command;`",227,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitCommandEvent","","`void initCommandEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean canCancelArg, in DOMString command);`",227,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"bool"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",228,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",228,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISelectionDisplay` to one of its base interfaces.",228,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",228,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DISPLAY_TEXT","","",228,null],[18,"DISPLAY_IMAGES","","",228,null],[18,"DISPLAY_FRAMES","","",228,null],[18,"DISPLAY_ALL","","",228,null],[11,"SetSelectionFlags","","`void setSelectionFlags (in short toggle);`",228,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectionFlags","","`short getSelectionFlags ();`",228,null],[11,"addref","","",229,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",229,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMemory` to one of its base interfaces.",229,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",229,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HeapMinimize","","`text /** * Attempts to shrink the heap. * @param immediate - if true, heap minimization will occur * immediately if the call was made on the main thread. If * false, the flush will be scheduled to happen when the app is * idle. * @throws NS_ERROR_FAILURE if 'immediate' is set an the call * was not on the application's main thread. */`",229,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"IsLowMemoryPlatform","","`text /** * This predicate can be used to determine if the platform is a \"low-memory\" * platform. Callers may use this to dynamically tune their behaviour * to favour reduced memory usage at the expense of performance. The value * returned by this function will not change over the lifetime of the process. */`",229,null],[11,"addref","","",230,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",230,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIClassifierCallback` to one of its base interfaces.",230,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",230,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnClassifyComplete","","`text /** * Called by the URI classifier service when it is done checking a URI. * * Clients are responsible for associating callback objects with classify() * calls. * * @param aErrorCode * The error code with which the channel should be cancelled, or * NS_OK if the load should continue normally. * @param aList * Name of the list that matched * @param aProvider * Name of provider that matched * @param aFullHash * Full hash of URL that matched */`",230,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",231,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",231,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIClassifier` to one of its base interfaces.",231,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",231,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Classify","","`text /** * Classify a Principal using its URI. * * @param aPrincipal * The principal that should be checked by the URI classifier. * * @param nsIEventTarget * Event target for constructing actor in content process. * The event target should be tied to Docgroup/Tabgroup by * using EventTargetFor * * @param aTrackingProtectionEnabled * Whether or not to classify the given URI against tracking * protection lists * * @param aCallback * The URI classifier will call this callback when the URI has been * classified. * * @return <code>false</code> if classification is not necessary. The * callback will not be called. * <code>true</code> if classification will be performed. The * callback will be called. */`",231,null],[11,"AsyncClassifyLocalWithTables","","`text /** * Asynchronously classify a URI with a comma-separated string * containing the given tables. This does not make network requests. * The callback does NOT totally follow nsIURIClassifierCallback's * semantics described above. Only |aList| will be meaningful, which * is a comma separated list of table names. (same as what classifyLocal * returns.) */`",231,null],[11,"ClassifyLocal","","`text /** * Same as above, but returns a comma separated list of table names. * This is an internal interface used only for testing purposes. */`",231,null],[11,"SendThreatHitReport","","`text /** * Report to the provider that a Safe Browsing warning was shown. * * @param aChannel * Channel for which the URL matched something on the threat list. * @param aProvider * Provider to notify. * @param aList * List where the full hash was found. * @param aFullHash * Full URL hash that triggered the warning. */`",231,null],[11,"addref","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",232,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMSerializer` to one of its base interfaces.",232,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",232,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SerializeToString","","`text /** * The subtree rooted by the specified element is serialized to * a string. * * @param root The root of the subtree to be serialized. This could * be any node, including a Document. * @returns The serialized subtree in the form of a Unicode string */`",232,null],[11,"SerializeToStream","","`text /** * The subtree rooted by the specified element is serialized to * a byte stream using the character set specified. * @param root The root of the subtree to be serialized. This could * be any node, including a Document. * @param stream The byte stream to which the subtree is serialized. * @param charset The name of the character set to use for the encoding * to a byte stream. If this string is empty and root is * a document, the document's character set will be used. */`",232,null],[11,"addref","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",233,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISerializationHelper` to one of its base interfaces.",233,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",233,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SerializeToString","","`text /** * Serialize the object to a base64 string. This string can be later passed * as an input to deserializeObject method. */`",233,null],[11,"DeserializeObject","","`text /** * Takes base64 encoded string that cointains serialization of a single * object. Most commonly, input is result of previous call to * serializeToString. */`",233,null],[11,"addref","","",234,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",234,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInterfaceInfo` to one of its base interfaces.",234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",234,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`readonly attribute string name;`",234,null],[11,"GetInterfaceIID","","`readonly attribute nsIIDPtr InterfaceIID;`",234,null],[11,"IsScriptable","","`boolean isScriptable ();`",234,null],[11,"IsBuiltinClass","","`boolean isBuiltinClass ();`",234,null],[11,"GetParent","","`readonly attribute nsIInterfaceInfo parent;`",234,null],[11,"GetMethodCount","","`text /** * These include counts for parent (and all ancestors). */`",234,null],[11,"GetConstantCount","","`readonly attribute uint16_t constantCount;`",234,null],[11,"IsIID","","`boolean isIID (in nsIIDPtr IID);`",234,null],[11,"GetNameShared","","`void getNameShared ([shared, retval] out string name);`",234,null],[11,"GetIIDShared","","`void getIIDShared ([shared, retval] out nsIIDPtrShared iid);`",234,null],[11,"IsFunction","","`boolean isFunction ();`",234,null],[11,"HasAncestor","","`boolean hasAncestor (in nsIIDPtr iid);`",234,null],[11,"IsMainProcessScriptableOnly","","`boolean isMainProcessScriptableOnly ();`",234,null],[11,"addref","","",235,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",235,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeculativeConnect` to one of its base interfaces.",235,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",235,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SpeculativeConnect","","`text /** * Called as a hint to indicate a new transaction for the URI is likely coming * soon. The implementer may use this information to start a TCP * and/or SSL level handshake for that resource immediately so that it is * ready and/or progressed when the transaction is actually submitted. * * No obligation is taken on by the implementer, nor is the submitter obligated * to actually open the new channel. * * @param aURI the URI of the hinted transaction * @param aPrincipal the principal that will be used for opening the * channel of the hinted transaction. * @param aCallbacks any security callbacks for use with SSL for interfaces * such as nsIBadCertListener. May be null. * */`",235,null],[11,"SpeculativeConnect2","","`void speculativeConnect2 (in nsIURI aURI, in nsIPrincipal aPrincipal, in nsIInterfaceRequestor aCallbacks);`",235,null],[11,"SpeculativeAnonymousConnect","","`void speculativeAnonymousConnect (in nsIURI aURI, in nsIInterfaceRequestor aCallbacks);`",235,null],[11,"SpeculativeAnonymousConnect2","","`void speculativeAnonymousConnect2 (in nsIURI aURI, in nsIPrincipal aPrincipal, in nsIInterfaceRequestor aCallbacks);`",235,null],[11,"addref","","",236,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",236,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeculativeConnectionOverrider` to one of its base interfaces.",236,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",236,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetParallelSpeculativeConnectLimit","","`text /** * Used to determine the maximum number of unused speculative connections * we will have open for a host at any one time */`",236,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetIgnoreIdle","","`text /** * Used to determine if we will ignore the existence of any currently idle * connections when we decide whether or not to make a speculative * connection. */`",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsFromPredictor","","`[infallible] readonly attribute boolean isFromPredictor;`",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetAllow1918","","`text /** * by default speculative connections are not made to RFC 1918 addresses */`",236,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",237,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",237,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIZipWriter` to one of its base interfaces.",237,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",237,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"COMPRESSION_NONE","","`text /** * Some predefined compression levels */`",237,null],[18,"COMPRESSION_FASTEST","","",237,null],[18,"COMPRESSION_DEFAULT","","",237,null],[18,"COMPRESSION_BEST","","",237,null],[11,"GetComment","","`text /** * Gets or sets the comment associated with the open zip file. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened */`",237,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetComment","","`text /** * Gets or sets the comment associated with the open zip file. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened */`",237,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetInQueue","","`text /** * Indicates that operations on the background queue are being performed. */`",237,null],[11,"GetFile","","`text /** * The file that the zipwriter is writing to. */`",237,null],[11,"Open","","`text /** * Opens a zip file. * * @param aFile the zip file to open * @param aIoFlags the open flags for the zip file from prio.h * * @throws NS_ERROR_ALREADY_INITIALIZED if a zip file is already open * @throws NS_ERROR_INVALID_ARG if aFile is null * @throws NS_ERROR_FILE_NOT_FOUND if aFile does not exist and flags did * not allow for creation * @throws NS_ERROR_FILE_CORRUPTED if the file does not contain zip markers * @throws <other-error> on failure to open zip file (most likely corrupt * or unsupported form) */`",237,null],[11,"GetEntry","","`text /** * Returns a nsIZipEntry describing a specified zip entry or null if there * is no such entry in the zip file * * @param aZipEntry the path of the entry */`",237,null],[11,"HasEntry","","`text /** * Checks whether the zipfile contains an entry specified by zipEntry. * * @param aZipEntry the path of the entry */`",237,null],[11,"AddEntryDirectory","","`text /** * Adds a new directory entry to the zip file. If aZipEntry does not end with * \"/\" then it will be added. * * @param aZipEntry the path of the directory entry * @param aModTime the modification time of the entry in microseconds * @param aQueue adds the operation to the background queue. Will be * performed when processQueue is called. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_FILE_ALREADY_EXISTS if the path already exists in the * file * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress */`",237,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"prtime"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddEntryFile","","`text /** * Adds a new file or directory to the zip file. If the specified file is * a directory then this will be equivalent to a call to * addEntryDirectory(aZipEntry, aFile.lastModifiedTime, aQueue) * * @param aZipEntry the path of the file entry * @param aCompression the compression level, 0 is no compression, 9 is best * @param aFile the file to get the data and modification time from * @param aQueue adds the operation to the background queue. Will be * performed when processQueue is called. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_FILE_ALREADY_EXISTS if the path already exists in the zip * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress * @throws NS_ERROR_FILE_NOT_FOUND if file does not exist */`",237,null],[11,"AddEntryChannel","","`text /** * Adds data from a channel to the zip file. If the operation is performed * on the queue then the channel will be opened asynchronously, otherwise * the channel must support being opened synchronously. * * @param aZipEntry the path of the file entry * @param aModTime the modification time of the entry in microseconds * @param aCompression the compression level, 0 is no compression, 9 is best * @param aChannel the channel to get the data from * @param aQueue adds the operation to the background queue. Will be * performed when processQueue is called. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_FILE_ALREADY_EXISTS if the path already exists in the zip * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress */`",237,null],[11,"AddEntryStream","","`text /** * Adds data from an input stream to the zip file. * * @param aZipEntry the path of the file entry * @param aModTime the modification time of the entry in microseconds * @param aCompression the compression level, 0 is no compression, 9 is best * @param aStream the input stream to get the data from * @param aQueue adds the operation to the background queue. Will be * performed when processQueue is called. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_FILE_ALREADY_EXISTS if the path already exists in the zip * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress */`",237,null],[11,"RemoveEntry","","`text /** * Removes an existing entry from the zip file. * * @param aZipEntry the path of the entry to be removed * @param aQueue adds the operation to the background queue. Will be * performed when processQueue is called. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress * @throws NS_ERROR_FILE_NOT_FOUND if no entry with the given path exists * @throws <other-error> on failure to update the zip file */`",237,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ProcessQueue","","`text /** * Processes all queued items until complete or some error occurs. The * observer will be notified when the first operation starts and when the * last operation completes. Any failures will be passed to the observer. * The zip writer will be busy until the queue is complete or some error * halted processing of the queue early. In the event of an early failure, * remaining items will stay in the queue and calling processQueue will * continue. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_IN_PROGRESS if the queue is already in progress */`",237,null],[11,"Close","","`text /** * Closes the zip file. * * @throws NS_ERROR_NOT_INITIALIZED if no zip file has been opened * @throws NS_ERROR_IN_PROGRESS if another operation is currently in progress * @throws <other-error> on failure to complete the zip file */`",237,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AlignStoredFiles","","`text /** * Make all stored(uncompressed) files align to given alignment size. * * @param aAlignSize is the alignment size, valid values from 2 to 32768, and must be power of 2. * * @throws NS_ERROR_INVALID_ARG if aAlignSize is invalid * @throws <other-error> on failure to update the zip file */`",237,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",238,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",238,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNotifyPaintEvent` to one of its base interfaces.",238,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",238,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",239,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",239,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIContainerDebug` to one of its base interfaces.",239,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",239,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFramesNotified","","`text /** * The # of frames this imgContainer has been notified about. * That is equal to the # of times the animation timer has * fired, and is usually equal to the # of frames actually * drawn (but actual drawing might be disabled). */`",239,null],[11,"addref","","",240,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",240,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkLinkService` to one of its base interfaces.",240,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",240,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LINK_TYPE_UNKNOWN","","",240,null],[18,"LINK_TYPE_ETHERNET","","",240,null],[18,"LINK_TYPE_USB","","",240,null],[18,"LINK_TYPE_WIFI","","",240,null],[18,"LINK_TYPE_WIMAX","","",240,null],[18,"LINK_TYPE_2G","","",240,null],[18,"LINK_TYPE_3G","","",240,null],[18,"LINK_TYPE_4G","","",240,null],[11,"GetIsLinkUp","","`text /** * This is set to true when the system is believed to have a usable * network connection. * * The link is only up when network connections can be established. For * example, the link is down during DHCP configuration (unless there * is another usable interface already configured). * * If the link status is not currently known, we generally assume that * it is up. */`",240,null],[11,"GetLinkStatusKnown","","`text /** * This is set to true when we believe that isLinkUp is accurate. */`",240,null],[11,"GetLinkType","","`text /** * The type of network connection. */`",240,null],[11,"addref","","",241,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",241,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConsoleMessage` to one of its base interfaces.",241,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",241,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"debug","","`text /** Log level constants. */`",241,null],[18,"info","","",241,null],[18,"warn","","",241,null],[18,"error","","",241,null],[11,"GetLogLevel","","`text /** * The log level of this message. */`",241,null],[11,"GetTimeStamp","","`text /** * The time (in milliseconds from the Epoch) that the message instance * was initialised. * The timestamp is initialized as JS_now/1000 so that it can be * compared to Date.now in Javascript. */`",241,null],[11,"GetMessageMoz","","`[binaryname(MessageMoz)] readonly attribute wstring message;`",241,null],[11,"ToString","","`AUTF8String toString ();`",241,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",242,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",242,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeColumn` to one of its base interfaces.",242,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",242,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_TEXT","","",242,null],[18,"TYPE_CHECKBOX","","",242,null],[18,"TYPE_PROGRESSMETER","","",242,null],[18,"TYPE_PASSWORD","","",242,null],[11,"GetElement","","`readonly attribute nsIDOMElement element;`",242,null],[11,"GetColumns","","`readonly attribute nsITreeColumns columns;`",242,null],[11,"GetX","","`readonly attribute long x;`",242,null],[11,"GetWidth","","`readonly attribute long width;`",242,null],[11,"GetId","","`readonly attribute AString id;`",242,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIdConst","","`[noscript] void getIdConst ([shared] out wstring idConst);`",242,null],[11,"GetIndex","","`readonly attribute long index;`",242,null],[11,"GetPrimary","","`readonly attribute boolean primary;`",242,null],[11,"GetCycler","","`readonly attribute boolean cycler;`",242,null],[11,"GetEditable","","`readonly attribute boolean editable;`",242,null],[11,"GetSelectable","","`readonly attribute boolean selectable;`",242,null],[11,"GetType","","`readonly attribute short type;`",242,null],[11,"GetNext","","`nsITreeColumn getNext ();`",242,null],[11,"GetPrevious","","`nsITreeColumn getPrevious ();`",242,null],[11,"Invalidate","","`void invalidate ();`",242,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",243,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",243,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeColumns` to one of its base interfaces.",243,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",243,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTree","","`text /** * The tree widget for these columns. */`",243,null],[11,"GetCount","","`text /** * The number of columns. */`",243,null],[11,"GetLength","","`text /** * An alias for count (for the benefit of scripts which treat this as an * array). */`",243,null],[11,"GetFirstColumn","","`text /** * Get the first/last column. */`",243,null],[11,"GetLastColumn","","`nsITreeColumn getLastColumn ();`",243,null],[11,"GetPrimaryColumn","","`text /** * Attribute based column getters. */`",243,null],[11,"GetSortedColumn","","`nsITreeColumn getSortedColumn ();`",243,null],[11,"GetKeyColumn","","`nsITreeColumn getKeyColumn ();`",243,null],[11,"GetColumnFor","","`text /** * Get the column for the given element. */`",243,null],[11,"GetNamedColumn","","`text /** * Parametric column getters. */`",243,null],[11,"GetColumnAt","","`nsITreeColumn getColumnAt (in long index);`",243,null],[11,"InvalidateColumns","","`text /** * This method is called whenever a treecol is added or removed and * the column cache needs to be rebuilt. */`",243,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RestoreNaturalOrder","","`void restoreNaturalOrder ();`",243,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",244,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",244,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryResultNode` to one of its base interfaces.",244,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",244,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"RESULT_TYPE_URI","","`text /** * Identifies the type of this node. This node can then be QI-ed to the * corresponding specialized result node interface. */`",244,null],[18,"RESULT_TYPE_QUERY","","",244,null],[18,"RESULT_TYPE_FOLDER","","",244,null],[18,"RESULT_TYPE_SEPARATOR","","",244,null],[18,"RESULT_TYPE_FOLDER_SHORTCUT","","",244,null],[11,"GetParent","","`text /** * Indentifies the parent result node in the result set. This is null for * top level nodes. */`",244,null],[11,"GetParentResult","","`text /** * The history-result to which this node belongs. */`",244,null],[11,"GetUri","","`text /** * URI of the resource in question. For visits and URLs, this is the URL of * the page. For folders and queries, this is the place: URI of the * corresponding folder or query. This may be empty for other types of * objects like host containers. */`",244,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`readonly attribute unsigned long type;`",244,null],[11,"GetTitle","","`text /** * Title of the web page, or of the node's query (day, host, folder, etc) */`",244,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAccessCount","","`text /** * Total number of times the URI has ever been accessed. For hosts, this * is the total of the children under it, NOT the total times the host has * been accessed (this would require an additional query, so is not given * by default when most of the time it is never needed). */`",244,null],[11,"GetTime","","`text /** * This is the time the user accessed the page. * * If this is a visit, it is the exact time that the page visit occurred. * * If this is a URI, it is the most recent time that the URI was visited. * Even if you ask for all URIs for a given date range long ago, this might * contain today's date if the URI was visited today. * * For hosts, or other node types with children, this is the most recent * access time for any of the children. * * For days queries this is the respective endTime - a maximum possible * visit time to fit in the day range. */`",244,null],[11,"GetIcon","","`text /** * This URI can be used as an image source URI and will give you the favicon * for the page. It is *not* the URI of the favicon, but rather something * that will resolve to the actual image. * * In most cases, this is an annotation URI that will query the favicon * service. If the entry has no favicon, this is the chrome URI of the * default favicon. If the favicon originally lived in chrome, this will * be the original chrome URI of the icon. */`",244,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIndentLevel","","`text /** * This is the number of levels between this node and the top of the * hierarchy. The members of result.children have indentLevel = 0, their * children have indentLevel = 1, etc. The indent level of the root node is * set to -1. */`",244,null],[11,"GetBookmarkIndex","","`text /** * When this item is in a bookmark folder (parent is of type folder), this is * the index into that folder of this node. These indices start at 0 and * increase in the order that they appear in the bookmark folder. For items * that are not in a bookmark folder, this value is -1. */`",244,null],[11,"GetItemId","","`text /** * If the node is an item (bookmark, folder or a separator) this value is the * row ID of that bookmark in the database. For other nodes, this value is * set to -1. */`",244,null],[11,"GetDateAdded","","`text /** * If the node is an item (bookmark, folder or a separator) this value is the * time that the item was created. For other nodes, this value is 0. */`",244,null],[11,"GetLastModified","","`text /** * If the node is an item (bookmark, folder or a separator) this value is the * time that the item was last modified. For other nodes, this value is 0. * * @note When an item is added lastModified is set to the same value as * dateAdded. */`",244,null],[11,"GetTags","","`text /** * For uri nodes, this is a sorted list of the tags, delimited with commans, * for the uri represented by this node. Otherwise this is an empty string. */`",244,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPageGuid","","`text /** * The unique ID associated with the page. It my return an empty string * if the result node is a non-URI node. */`",244,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBookmarkGuid","","`text /** * The unique ID associated with the bookmark. It returns an empty string * if the result node is not associated with a bookmark, a folder or a * separator. */`",244,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetVisitId","","`text /** * The unique ID associated with the history visit. For node types other than * history visit nodes, this value is -1. */`",244,null],[11,"GetFromVisitId","","`text /** * The unique ID associated with visit node which was the referrer of this * history visit. For node types other than history visit nodes, or visits * without any known referrer, this value is -1. */`",244,null],[11,"GetVisitType","","`text /** * The transition type associated with this visit. For node types other than * history visit nodes, this value is 0. */`",244,null],[11,"addref","","",245,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",245,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryContainerResultNode` to one of its base interfaces.",245,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",245,{"inputs":[{"name":"self"}],"output":{"name":"nsinavhistoryresultnode"}}],[18,"STATE_CLOSED","","",245,null],[18,"STATE_LOADING","","",245,null],[18,"STATE_OPENED","","",245,null],[11,"GetContainerOpen","","`text /** * Base class for container results. This includes all types of groupings. * Bookmark folders and places queries will be QueryResultNodes which extends * these items. */ /** * Set this to allow descent into the container. When closed, attempting * to call getChildren or childCount will result in an error. You should * set this to false when you are done reading. * * For HOST and DAY groupings, doing this is free since the children have * been precomputed. For queries and bookmark folders, being open means they * will keep themselves up-to-date by listening for updates and re-querying * as needed. */`",245,null],[11,"SetContainerOpen","","`text /** * Base class for container results. This includes all types of groupings. * Bookmark folders and places queries will be QueryResultNodes which extends * these items. */ /** * Set this to allow descent into the container. When closed, attempting * to call getChildren or childCount will result in an error. You should * set this to false when you are done reading. * * For HOST and DAY groupings, doing this is free since the children have * been precomputed. For queries and bookmark folders, being open means they * will keep themselves up-to-date by listening for updates and re-querying * as needed. */`",245,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetState","","`text /** * Indicates whether the container is closed, loading, or opened. Loading * implies that the container has been opened asynchronously and has not yet * fully opened. */`",245,null],[11,"GetHasChildren","","`text /** * This indicates whether this node \"may\" have children, and can be used * when the container is open or closed. When the container is closed, it * will give you an exact answer if the node can easily be populated (for * example, a bookmark folder). If not (for example, a complex history query), * it will return true. When the container is open, it will always be * accurate. It is intended to be used to see if we should draw the \"+\" next * to a tree item. */`",245,null],[11,"GetChildCount","","`text /** * This gives you the children of the nodes. It is preferrable to use this * interface over the array one, since it avoids creating an nsIArray object * and the interface is already the correct type. * * @throws NS_ERROR_NOT_AVAILABLE if containerOpen is false. */`",245,null],[11,"GetChild","","`nsINavHistoryResultNode getChild (in unsigned long aIndex);`",245,null],[11,"GetChildIndex","","`text /** * Get the index of a direct child in this container. * * @param aNode * a result node. * * @return aNode's index in this container. * @throws NS_ERROR_NOT_AVAILABLE if containerOpen is false. * @throws NS_ERROR_INVALID_ARG if aNode isn't a direct child of this * container. */`",245,null],[11,"addref","","",246,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",246,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryQueryResultNode` to one of its base interfaces.",246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",246,{"inputs":[{"name":"self"}],"output":{"name":"nsinavhistorycontainerresultnode"}}],[11,"GetQueries","","`text /** * Used for places queries and as a base for bookmark folders. * * Note that if you request places to *not* be expanded in the options that * generated this node, this item will report it has no children and never try * to populate itself. */ /** * Get the queries which build this node's children. * Only valid for RESULT_TYPE_QUERY nodes. */`",246,null],[11,"GetQueryOptions","","`text /** * Get the options which group this node's children. * Only valid for RESULT_TYPE_QUERY nodes. */`",246,null],[11,"GetFolderItemId","","`text /** * For both simple folder queries and folder shortcut queries, this is set to * the concrete itemId of the folder (i.e. for folder shortcuts it's the * target folder id). Otherwise, this is set to -1. */`",246,null],[11,"GetTargetFolderGuid","","`text /** * For both simple folder queries and folder shortcut queries, this is set to * the concrete guid of the folder (i.e. for folder shortcuts it's the target * folder guid). Otherwise, this is set to an empty string. */`",246,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",247,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",247,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryResultObserver` to one of its base interfaces.",247,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",247,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NodeInserted","","`text /** * Called when 'aItem' is inserted into 'aParent' at index 'aNewIndex'. * The item previously at index (if any) and everything below it will have * been shifted down by one. The item may be a container or a leaf. */`",247,null],[11,"NodeRemoved","","`text /** * Called whan 'aItem' is removed from 'aParent' at 'aOldIndex'. The item * may be a container or a leaf. This function will be called after the item * has been removed from its parent list, but before anything else (including * NULLing out the item's parent) has happened. */`",247,null],[11,"NodeMoved","","`text /** * Called whan 'aItem' is moved from 'aOldParent' at 'aOldIndex' to * aNewParent at aNewIndex. The item may be a container or a leaf. * * XXX: at the moment, this method is called only when an item is moved * within the same container. When an item is moved between containers, * a new node is created for the item, and the itemRemoved/itemAdded methods * are used. */`",247,null],[11,"NodeTitleChanged","","`text /** * Called right after aNode's title has changed. * * @param aNode * a result node * @param aNewTitle * the new title */`",247,null],[11,"NodeURIChanged","","`text /** * Called right after aNode's uri property has changed. * * @param aNode * a result node * @param aNewURI * the old uri */`",247,null],[11,"NodeIconChanged","","`text /** * Called right after aNode's icon property has changed. * * @param aNode * a result node * * @note: The new icon is accessible through aNode.icon. */`",247,null],[11,"NodeHistoryDetailsChanged","","`text /** * Called right after aNode's time property or accessCount property, or both, * have changed. * * @param aNode * a uri result node * @param aOldVisitDate * the old visit date * @param aOldAccessCount * the old access-count */`",247,null],[11,"NodeTagsChanged","","`text /** * Called when the tags set on the uri represented by aNode have changed. * * @param aNode * a uri result node * * @note: The new tags list is accessible through aNode.tags. */`",247,null],[11,"NodeKeywordChanged","","`text /** * Called right after the aNode's keyword property has changed. * * @param aNode * a uri result node * @param aNewKeyword * the new keyword */`",247,null],[11,"NodeAnnotationChanged","","`text /** * Called right after an annotation of aNode's has changed (set, altered, or * unset). * * @param aNode * a result node * @param aAnnoName * the name of the annotation that changed */`",247,null],[11,"NodeDateAddedChanged","","`text /** * Called right after aNode's dateAdded property has changed. * * @param aNode * a result node * @param aNewValue * the new value of the dateAdded property */`",247,null],[11,"NodeLastModifiedChanged","","`text /** * Called right after aNode's dateModified property has changed. * * @param aNode * a result node * @param aNewValue * the new value of the dateModified property */`",247,null],[11,"ContainerStateChanged","","`text /** * Called after a container changes state. * * @param aContainerNode * The container that has changed state. * @param aOldState * The state that aContainerNode has transitioned out of. * @param aNewState * The state that aContainerNode has transitioned into. */`",247,null],[11,"InvalidateContainer","","`text /** * Called when something significant has happened within the container. The * contents of the container should be re-built. * * @param aContainerNode * the container node to invalidate */`",247,null],[11,"SortingChanged","","`text /** * This is called to indicate to the UI that the sort has changed to the * given mode. For trees, for example, this would update the column headers * to reflect the sorting. For many other types of views, this won't be * applicable. * * @param sortingMode One of nsINavHistoryQueryOptions.SORT_BY_* that * indicates the new sorting mode. * * This only is expected to update the sorting UI. invalidateAll() will also * get called if the sorting changes to update everything. */`",247,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"Batching","","`text /** * This is called to indicate that a batch operation is about to start or end. * The observer could want to disable some events or updates during batches, * since multiple operations are packed in a short time. * For example treeviews could temporarily suppress select notifications. * * @param aToggleMode * true if a batch is starting, false if it's ending. */`",247,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetResult","","`text /** * Called by the result when this observer is added. */`",247,null],[11,"SetResult","","`text /** * Called by the result when this observer is added. */`",247,null],[11,"addref","","",248,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",248,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryResultTreeViewer` to one of its base interfaces.",248,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",248,{"inputs":[{"name":"self"}],"output":{"name":"nsinavhistoryresultobserver"}}],[18,"INDEX_INVISIBLE","","`text /** * Reverse of nodeForFlatIndex, returns the row index for a given result node. * Returns INDEX_INVISIBLE if the item is not visible (for example, its * parent is collapsed). This is only valid when a tree is attached. The * the result will always be INDEX_INVISIBLE if not. * * Note: This sounds sort of obvious, but it got me: aNode must be a node * retrieved from the same result that this viewer is for. If you * execute another query and get a node from a _different_ result, this * function will always return the index of that node in the tree that * is attached to that result. */`",248,null],[11,"NodeForTreeIndex","","`text /** * This allows you to get at the real node for a given row index. This is * only valid when a tree is attached. */`",248,null],[11,"TreeIndexForNode","","`unsigned long treeIndexForNode (in nsINavHistoryResultNode aNode);`",248,null],[11,"addref","","",249,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",249,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryResult` to one of its base interfaces.",249,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",249,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSortingMode","","`text /** * The result of a history/bookmark query. */ /** * Sorts all nodes recursively by the given parameter, one of * nsINavHistoryQueryOptions.SORT_BY_* This will update the corresponding * options for this result, so that re-using the current options/queries will * always give you the current view. */`",249,null],[11,"SetSortingMode","","`text /** * The result of a history/bookmark query. */ /** * Sorts all nodes recursively by the given parameter, one of * nsINavHistoryQueryOptions.SORT_BY_* This will update the corresponding * options for this result, so that re-using the current options/queries will * always give you the current view. */`",249,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetSortingAnnotation","","`text /** * The annotation to use in SORT_BY_ANNOTATION_* sorting modes, set this * before setting the sortingMode attribute. */`",249,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetSortingAnnotation","","`text /** * The annotation to use in SORT_BY_ANNOTATION_* sorting modes, set this * before setting the sortingMode attribute. */`",249,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSuppressNotifications","","`text /** * Whether or not notifications on result changes are suppressed. * Initially set to false. * * Use this to avoid flickering and to improve performance when you * do temporary changes to the result structure (e.g. when searching for a * node recursively). */`",249,null],[11,"SetSuppressNotifications","","`text /** * Whether or not notifications on result changes are suppressed. * Initially set to false. * * Use this to avoid flickering and to improve performance when you * do temporary changes to the result structure (e.g. when searching for a * node recursively). */`",249,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddObserver","","`text /** * Adds an observer for changes done in the result. * * @param aObserver * a result observer. * @param aOwnsWeak * If false, the result will keep an owning reference to the observer, * which must be removed using removeObserver. * If true, the result will keep a weak reference to the observer, which * must implement nsISupportsWeakReference. * * @see nsINavHistoryResultObserver */`",249,null],[11,"RemoveObserver","","`text /** * Removes an observer that was added by addObserver. * * @param aObserver * a result observer that was added by addObserver. */`",249,null],[11,"GetRoot","","`text /** * This is the root of the results. Remember that you need to open all * containers for their contents to be valid. * * When a result goes out of scope it will continue to observe changes till * it is cycle collected. While the result waits to be collected it will stay * in memory, and continue to update itself, potentially causing unwanted * additional work. When you close the root node the result will stop * observing changes, so it is good practice to close the root node when you * are done with a result, since that will avoid unwanted performance hits. */`",249,null],[11,"addref","","",250,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",250,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryObserver` to one of its base interfaces.",250,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",250,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_DELETED","","`text /** * Removed by the user. */`",250,null],[18,"REASON_EXPIRED","","`text /** * Removed by automatic expiration. */`",250,null],[18,"ATTRIBUTE_FAVICON","","`text /** * onPageChanged attribute indicating that favicon has been updated. * aNewValue parameter will be set to the new favicon URI string. */`",250,null],[11,"OnBeginUpdateBatch","","`text /** * Notifies you that a bunch of things are about to change, don't do any * heavy-duty processing until onEndUpdateBatch is called. */`",250,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnEndUpdateBatch","","`text /** * Notifies you that we are done doing a bunch of things and you should go * ahead and update UI, etc. */`",250,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnVisit","","`text /** * Called everytime a URI is visited. * * @note TRANSITION_EMBED visits (corresponding to images in a page, for * example) are not displayed in history results. Most observers can * ignore TRANSITION_EMBED visit notifications (which will comprise the * majority of visit notifications) to save work. * * @param aVisitId * Id of the visit that was just created. * @param aTime * Time of the visit. * @param aSessionId * No longer supported and always set to 0. * @param aReferrerVisitId * The id of the visit the user came from, defaults to 0 for no referrer. * @param aTransitionType * One of nsINavHistory.TRANSITION_* * @param aGuid * The unique id associated with the page. * @param aHidden * Whether the visited page is marked as hidden. * @param aVisitCount * Number of visits (included this one) for this URI. * @param aTyped * Whether the URI has been typed or not. * TODO (Bug 1271801): This will become a count, rather than a boolean. * For future compatibility, always compare it with \"> 0\". * @param aLastKnownTitle * The last known title of the page. Might not be from the current visit, * and might be null if it is not known. */`",250,null],[11,"OnTitleChanged","","`text /** * Called whenever either the \"real\" title or the custom title of the page * changed. BOTH TITLES ARE ALWAYS INCLUDED in this notification, even though * only one will change at a time. Often, consumers will want to display the * user title if it is available, and fall back to the page title (the one * specified in the <title> tag of the page). * * Note that there is a difference between an empty title and a NULL title. * An empty string means that somebody specifically set the title to be * nothing. NULL means nobody set it. From C++: use IsVoid() and SetIsVoid() * to see whether an empty string is \"null\" or not (it will always be an * empty string in either case). * * @param aURI * The URI of the page. * @param aPageTitle * The new title of the page. * @param aGUID * The unique ID associated with the page. */`",250,null],[11,"OnFrecencyChanged","","`text /** * Called when an individual page's frecency has changed. * * This is not called for pages whose frecencies change as the result of some * large operation where some large or unknown number of frecencies change at * once. Use onManyFrecenciesChanged to detect such changes. * * @param aURI * The page's URI. * @param aNewFrecency * The page's new frecency. * @param aGUID * The page's GUID. * @param aHidden * True if the page is marked as hidden. * @param aVisitDate * The page's last visit date. */`",250,null],[11,"OnManyFrecenciesChanged","","`text /** * Called when the frecencies of many pages have changed at once. * * onFrecencyChanged is not called for each of those pages. */`",250,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnDeleteURI","","`text /** * This page and all of its visits are being deleted. Note: the page may not * necessarily have actually existed for this function to be called. * * Delete notifications are only 99.99% accurate. Batch delete operations * must be done in two steps, so first come notifications, then a bulk * delete. If there is some error in the middle (for example, out of memory) * then you'll get a notification and it won't get deleted. There's no easy * way around this. * * @param aURI * The URI that was deleted. * @param aGUID * The unique ID associated with the page. * @param aReason * Indicates the reason for the removal. see REASON_* constants. */`",250,null],[11,"OnClearHistory","","`text /** * Notification that all of history is being deleted. */`",250,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnPageChanged","","`text /** * An attribute of this page changed. * * @param aURI * The URI of the page on which an attribute changed. * @param aChangedAttribute * The attribute whose value changed. See ATTRIBUTE_* constants. * @param aNewValue * The attribute's new value. * @param aGUID * The unique ID associated with the page. */`",250,null],[11,"OnDeleteVisits","","`text /** * Called when some visits of an history entry are expired. * * @param aURI * The page whose visits have been expired. * @param aVisitTime * The largest visit time in microseconds that has been expired. We * guarantee that we don't have any visit older than this date. * @param aGUID * The unique ID associated with the page. * * @note: when all visits for a page are expired and also the full page entry * is expired, you will only get an onDeleteURI notification. If a * page entry is removed, then you can be sure that we don't have * anymore visits for it. * @param aReason * Indicates the reason for the removal. see REASON_* constants. * @param aTransitionType * If it's a valid TRANSITION_* value, all visits of the specified type * have been removed. */`",250,null],[11,"addref","","",251,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",251,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryQuery` to one of its base interfaces.",251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",251,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TIME_RELATIVE_EPOCH","","`text /** * This object encapsulates all the query parameters you're likely to need * when building up history UI. All parameters are ANDed together. * * This is not intended to be a super-general query mechanism. This was designed * so that most queries can be done in only one SQL query. This is important * because, if the user has their profile on a networked drive, query latency * can be non-negligible. */ /** * Time range for results (INCLUSIVE). The *TimeReference is one of the * constants TIME_RELATIVE_* which indicates how to interpret the * corresponding time value. * TIME_RELATIVE_EPOCH (default): * The time is relative to Jan 1 1970 GMT, (this is a normal PRTime) * TIME_RELATIVE_TODAY: * The time is relative to this morning at midnight. Normally used for * queries relative to today. For example, a \"past week\" query would be * today-6 days -> today+1 day * TIME_RELATIVE_NOW: * The time is relative to right now. * * Note: PRTime is in MICROseconds since 1 Jan 1970. Javascript date objects * are expressed in MILLIseconds since 1 Jan 1970. * * As a special case, a 0 time relative to TIME_RELATIVE_EPOCH indicates that * the time is not part of the query. This is the default, so an empty query * will match any time. The has* functions return whether the corresponding * time is considered. * * You can read absolute*Time to get the time value that the currently loaded * reference points + offset resolve to. */`",251,null],[18,"TIME_RELATIVE_TODAY","","",251,null],[18,"TIME_RELATIVE_NOW","","",251,null],[11,"GetBeginTime","","`attribute PRTime beginTime;`",251,null],[11,"SetBeginTime","","`attribute PRTime beginTime;`",251,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"GetBeginTimeReference","","`attribute unsigned long beginTimeReference;`",251,null],[11,"SetBeginTimeReference","","`attribute unsigned long beginTimeReference;`",251,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetHasBeginTime","","`readonly attribute boolean hasBeginTime;`",251,null],[11,"GetAbsoluteBeginTime","","`readonly attribute PRTime absoluteBeginTime;`",251,null],[11,"GetEndTime","","`attribute PRTime endTime;`",251,null],[11,"SetEndTime","","`attribute PRTime endTime;`",251,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"GetEndTimeReference","","`attribute unsigned long endTimeReference;`",251,null],[11,"SetEndTimeReference","","`attribute unsigned long endTimeReference;`",251,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetHasEndTime","","`readonly attribute boolean hasEndTime;`",251,null],[11,"GetAbsoluteEndTime","","`readonly attribute PRTime absoluteEndTime;`",251,null],[11,"GetSearchTerms","","`text /** * Text search terms. */`",251,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSearchTerms","","`text /** * Text search terms. */`",251,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHasSearchTerms","","`readonly attribute boolean hasSearchTerms;`",251,null],[11,"GetMinVisits","","`text /** * Set lower or upper limits for how many times an item has been * visited. The default is -1, and in that case all items are * matched regardless of their visit count. */`",251,null],[11,"SetMinVisits","","`text /** * Set lower or upper limits for how many times an item has been * visited. The default is -1, and in that case all items are * matched regardless of their visit count. */`",251,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetMaxVisits","","`attribute long maxVisits;`",251,null],[11,"SetMaxVisits","","`attribute long maxVisits;`",251,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetTransitions","","`text /** * When the set of transitions is nonempty, results are limited to pages which * have at least one visit for each of the transition types. * @note: For searching on more than one transition this can be very slow. * * Limit results to the specified list of transition types. */`",251,null],[11,"GetTransitions","","`text /** * Get the transitions set for this query. */`",251,null],[11,"GetTransitionCount","","`text /** * Get the count of the set query transitions. */`",251,null],[11,"GetOnlyBookmarked","","`text /** * When set, returns only bookmarked items, when unset, returns anything. Setting this * is equivalent to listing all bookmark folders in the 'folders' parameter. */`",251,null],[11,"SetOnlyBookmarked","","`text /** * When set, returns only bookmarked items, when unset, returns anything. Setting this * is equivalent to listing all bookmark folders in the 'folders' parameter. */`",251,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDomainIsHost","","`text /** * This controls the meaning of 'domain', and whether it is an exact match * 'domainIsHost' = true, or hierarchical (= false). */`",251,null],[11,"SetDomainIsHost","","`text /** * This controls the meaning of 'domain', and whether it is an exact match * 'domainIsHost' = true, or hierarchical (= false). */`",251,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDomain","","`text /** * This is the host or domain name (controlled by domainIsHost). When * domainIsHost, domain only does exact matching on host names. Otherwise, * it will return anything whose host name ends in 'domain'. * * This one is a little different than most. Setting it to an empty string * is a real query and will match any URI that has no host name (local files * and such). Set this to NULL (in C++ use SetIsVoid) if you don't want * domain matching. */`",251,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDomain","","`text /** * This is the host or domain name (controlled by domainIsHost). When * domainIsHost, domain only does exact matching on host names. Otherwise, * it will return anything whose host name ends in 'domain'. * * This one is a little different than most. Setting it to an empty string * is a real query and will match any URI that has no host name (local files * and such). Set this to NULL (in C++ use SetIsVoid) if you don't want * domain matching. */`",251,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHasDomain","","`readonly attribute boolean hasDomain;`",251,null],[11,"GetUri","","`text /** * This is a URI to match, to, for example, find out every time you visited * a given URI. This is an exact match. */`",251,null],[11,"SetUri","","`text /** * This is a URI to match, to, for example, find out every time you visited * a given URI. This is an exact match. */`",251,null],[11,"GetHasUri","","`readonly attribute boolean hasUri;`",251,null],[11,"GetAnnotationIsNot","","`text /** * Test for existence or non-existence of a given annotation. We don't * currently support >1 annotation name per query. If 'annotationIsNot' is * true, we test for the non-existence of the specified annotation. * * Testing for not annotation will do the same thing as a normal query and * remove everything that doesn't have that annotation. Asking for things * that DO have a given annotation is a little different. It also includes * things that have never been visited. This allows place queries to be * returned as well as anything else that may have been tagged with an * annotation. This will only work for RESULTS_AS_URI since there will be * no visits for these items. */`",251,null],[11,"SetAnnotationIsNot","","`text /** * Test for existence or non-existence of a given annotation. We don't * currently support >1 annotation name per query. If 'annotationIsNot' is * true, we test for the non-existence of the specified annotation. * * Testing for not annotation will do the same thing as a normal query and * remove everything that doesn't have that annotation. Asking for things * that DO have a given annotation is a little different. It also includes * things that have never been visited. This allows place queries to be * returned as well as anything else that may have been tagged with an * annotation. This will only work for RESULTS_AS_URI since there will be * no visits for these items. */`",251,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAnnotation","","`attribute AUTF8String annotation;`",251,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAnnotation","","`attribute AUTF8String annotation;`",251,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHasAnnotation","","`readonly attribute boolean hasAnnotation;`",251,null],[11,"GetTags","","`text /** * Limit results to items that are tagged with all of the given tags. This * attribute must be set to an array of strings. When called as a getter it * will return an array of strings sorted ascending in lexicographical order. * The array may be empty in either case. Duplicate tags may be specified * when setting the attribute, but the getter returns only unique tags. * * To search for items that are tagged with any given tags rather than all, * multiple queries may be passed to nsINavHistoryService.executeQueries(). */`",251,null],[11,"SetTags","","`text /** * Limit results to items that are tagged with all of the given tags. This * attribute must be set to an array of strings. When called as a getter it * will return an array of strings sorted ascending in lexicographical order. * The array may be empty in either case. Duplicate tags may be specified * when setting the attribute, but the getter returns only unique tags. * * To search for items that are tagged with any given tags rather than all, * multiple queries may be passed to nsINavHistoryService.executeQueries(). */`",251,null],[11,"GetTagsAreNot","","`text /** * If 'tagsAreNot' is true, the results are instead limited to items that * are not tagged with any of the given tags. This attribute is used in * conjunction with the 'tags' attribute. */`",251,null],[11,"SetTagsAreNot","","`text /** * If 'tagsAreNot' is true, the results are instead limited to items that * are not tagged with any of the given tags. This attribute is used in * conjunction with the 'tags' attribute. */`",251,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetFolders","","`text /** * Limit results to items that are in all of the given folders. */`",251,null],[11,"GetFolderCount","","`readonly attribute unsigned long folderCount;`",251,null],[11,"SetFolders","","`text /** * For the special result type RESULTS_AS_TAG_CONTENTS we can define only * one folder that must be a tag folder. This is not recursive so results * will be returned from the first level of that folder. */`",251,null],[11,"Clone","","`text /** * Creates a new query item with the same parameters of this one. */`",251,null],[11,"addref","","",252,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",252,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryQueryOptions` to one of its base interfaces.",252,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",252,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SORT_BY_NONE","","`text /** * This object represents the global options for executing a query. */ /** * You can ask for the results to be pre-sorted. Since the DB has indices * of many items, it can produce sorted results almost for free. These should * be self-explanatory. * * Note: re-sorting is slower, as is sorting by title or when you have a * host name. * * For bookmark items, SORT_BY_NONE means sort by the natural bookmark order. */`",252,null],[18,"SORT_BY_TITLE_ASCENDING","","",252,null],[18,"SORT_BY_TITLE_DESCENDING","","",252,null],[18,"SORT_BY_DATE_ASCENDING","","",252,null],[18,"SORT_BY_DATE_DESCENDING","","",252,null],[18,"SORT_BY_URI_ASCENDING","","",252,null],[18,"SORT_BY_URI_DESCENDING","","",252,null],[18,"SORT_BY_VISITCOUNT_ASCENDING","","",252,null],[18,"SORT_BY_VISITCOUNT_DESCENDING","","",252,null],[18,"SORT_BY_KEYWORD_ASCENDING","","",252,null],[18,"SORT_BY_KEYWORD_DESCENDING","","",252,null],[18,"SORT_BY_DATEADDED_ASCENDING","","",252,null],[18,"SORT_BY_DATEADDED_DESCENDING","","",252,null],[18,"SORT_BY_LASTMODIFIED_ASCENDING","","",252,null],[18,"SORT_BY_LASTMODIFIED_DESCENDING","","",252,null],[18,"SORT_BY_TAGS_ASCENDING","","",252,null],[18,"SORT_BY_TAGS_DESCENDING","","",252,null],[18,"SORT_BY_ANNOTATION_ASCENDING","","",252,null],[18,"SORT_BY_ANNOTATION_DESCENDING","","",252,null],[18,"SORT_BY_FRECENCY_ASCENDING","","",252,null],[18,"SORT_BY_FRECENCY_DESCENDING","","",252,null],[18,"RESULTS_AS_URI","","`text /** * \"URI\" results, one for each URI visited in the range. Individual result * nodes will be of type \"URI\". */`",252,null],[18,"RESULTS_AS_VISIT","","`text /** * \"Visit\" results, with one for each time a page was visited (this will * often give you multiple results for one URI). Individual result nodes will * have type \"Visit\" * * @note This result type is only supported by QUERY_TYPE_HISTORY. */`",252,null],[18,"RESULTS_AS_DATE_QUERY","","`text /** * This returns query nodes for each predefined date range where we * had visits. The node contains information how to load its content: * - visits for the given date range will be loaded. * * @note This result type is only supported by QUERY_TYPE_HISTORY. */`",252,null],[18,"RESULTS_AS_SITE_QUERY","","`text /** * This returns nsINavHistoryQueryResultNode nodes for each site where we * have visits. The node contains information how to load its content: * - last visit for each url in the given host will be loaded. * * @note This result type is only supported by QUERY_TYPE_HISTORY. */`",252,null],[18,"RESULTS_AS_DATE_SITE_QUERY","","`text /** * This returns nsINavHistoryQueryResultNode nodes for each day where we * have visits. The node contains information how to load its content: * - list of hosts visited in the given period will be loaded. * * @note This result type is only supported by QUERY_TYPE_HISTORY. */`",252,null],[18,"RESULTS_AS_TAG_QUERY","","`text /** * This returns nsINavHistoryQueryResultNode nodes for each tag. * The node contains information how to load its content: * - list of bookmarks with the given tag will be loaded. * * @note Setting this resultType will force queryType to QUERY_TYPE_BOOKMARKS. */`",252,null],[18,"RESULTS_AS_TAG_CONTENTS","","`text /** * This is a container with an URI result type that contains the last * modified bookmarks for the given tag. * Tag folder id must be defined in the query. * * @note Setting this resultType will force queryType to QUERY_TYPE_BOOKMARKS. */`",252,null],[18,"QUERY_TYPE_HISTORY","","",252,null],[18,"QUERY_TYPE_BOOKMARKS","","",252,null],[18,"QUERY_TYPE_UNIFIED","","",252,null],[11,"GetSortingMode","","`text /** * The sorting mode to be used for this query. * mode is one of SORT_BY_* */`",252,null],[11,"SetSortingMode","","`text /** * The sorting mode to be used for this query. * mode is one of SORT_BY_* */`",252,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetSortingAnnotation","","`text /** * The annotation to use in SORT_BY_ANNOTATION_* sorting modes. */`",252,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetSortingAnnotation","","`text /** * The annotation to use in SORT_BY_ANNOTATION_* sorting modes. */`",252,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetResultType","","`text /** * Sets the result type. One of RESULT_TYPE_* which includes how URIs are * represented. */`",252,null],[11,"SetResultType","","`text /** * Sets the result type. One of RESULT_TYPE_* which includes how URIs are * represented. */`",252,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetExcludeItems","","`text /** * This option excludes all URIs and separators from a bookmarks query. * This would be used if you just wanted a list of bookmark folders and * queries (such as the left pane of the places page). * Defaults to false. */`",252,null],[11,"SetExcludeItems","","`text /** * This option excludes all URIs and separators from a bookmarks query. * This would be used if you just wanted a list of bookmark folders and * queries (such as the left pane of the places page). * Defaults to false. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetExcludeQueries","","`text /** * Set to true to exclude queries (\"place:\" URIs) from the query results. * Simple folder queries (bookmark folder symlinks) will still be included. * Defaults to false. */`",252,null],[11,"SetExcludeQueries","","`text /** * Set to true to exclude queries (\"place:\" URIs) from the query results. * Simple folder queries (bookmark folder symlinks) will still be included. * Defaults to false. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetExcludeReadOnlyFolders","","`text /** * DO NOT USE THIS API. IT'LL BE REMOVED IN BUG 1072833. * * Set to true to exclude live bookmarks from the query results. */`",252,null],[11,"SetExcludeReadOnlyFolders","","`text /** * DO NOT USE THIS API. IT'LL BE REMOVED IN BUG 1072833. * * Set to true to exclude live bookmarks from the query results. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetExpandQueries","","`text /** * When set, allows items with \"place:\" URIs to appear as containers, * with the container's contents filled in from the stored query. * If not set, these will appear as normal items. Doesn't do anything if * excludeQueries is set. Defaults to false. * * Note that this has no effect on folder links, which are place: URIs * returned by nsINavBookmarkService.GetFolderURI. These are always expanded * and will appear as bookmark folders. */`",252,null],[11,"SetExpandQueries","","`text /** * When set, allows items with \"place:\" URIs to appear as containers, * with the container's contents filled in from the stored query. * If not set, these will appear as normal items. Doesn't do anything if * excludeQueries is set. Defaults to false. * * Note that this has no effect on folder links, which are place: URIs * returned by nsINavBookmarkService.GetFolderURI. These are always expanded * and will appear as bookmark folders. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIncludeHidden","","`text /** * Some pages in history are marked \"hidden\" and thus don't appear by default * in queries. These include automatic framed visits and redirects. Setting * this attribute will return all pages, even hidden ones. Does nothing for * bookmark queries. Defaults to false. */`",252,null],[11,"SetIncludeHidden","","`text /** * Some pages in history are marked \"hidden\" and thus don't appear by default * in queries. These include automatic framed visits and redirects. Setting * this attribute will return all pages, even hidden ones. Does nothing for * bookmark queries. Defaults to false. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMaxResults","","`text /** * This is the maximum number of results that you want. The query is exeucted, * the results are sorted, and then the top 'maxResults' results are taken * and returned. Set to 0 (the default) to get all results. * * THIS DOES NOT WORK IN CONJUNCTION WITH SORTING BY TITLE. This is because * sorting by title requires us to sort after using locale-sensetive sorting * (as opposed to letting the database do it for us). * * Instead, we get the result ordered by date, pick the maxResult most recent * ones, and THEN sort by title. */`",252,null],[11,"SetMaxResults","","`text /** * This is the maximum number of results that you want. The query is exeucted, * the results are sorted, and then the top 'maxResults' results are taken * and returned. Set to 0 (the default) to get all results. * * THIS DOES NOT WORK IN CONJUNCTION WITH SORTING BY TITLE. This is because * sorting by title requires us to sort after using locale-sensetive sorting * (as opposed to letting the database do it for us). * * Instead, we get the result ordered by date, pick the maxResult most recent * ones, and THEN sort by title. */`",252,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetQueryType","","`text /** * The type of search to use when querying the DB; This attribute is only * honored by query nodes. It is silently ignored for simple folder queries. */`",252,null],[11,"SetQueryType","","`text /** * The type of search to use when querying the DB; This attribute is only * honored by query nodes. It is silently ignored for simple folder queries. */`",252,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetAsyncEnabled","","`text /** * When this is true, the root container node generated by these options and * its descendant containers will be opened asynchronously if they support it. * This is false by default. * * @note Currently only bookmark folder containers support being opened * asynchronously. */`",252,null],[11,"SetAsyncEnabled","","`text /** * When this is true, the root container node generated by these options and * its descendant containers will be opened asynchronously if they support it. * This is false by default. * * @note Currently only bookmark folder containers support being opened * asynchronously. */`",252,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Clone","","`text /** * Creates a new options item with the same parameters of this one. */`",252,null],[11,"addref","","",253,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",253,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryService` to one of its base interfaces.",253,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",253,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TRANSITION_LINK","","`text /** * System Notifications: * * places-init-complete - Sent once the History service is completely * initialized successfully. * places-database-locked - Sent if initialization of the History service * failed due to the inability to open the places.sqlite * for access reasons. */ /** * This transition type means the user followed a link and got a new toplevel * window. */`",253,null],[18,"TRANSITION_TYPED","","`text /** * This transition type means that the user typed the page's URL in the * URL bar or selected it from URL bar autocomplete results, clicked on * it from a history query (from the History sidebar, History menu, * or history query in the personal toolbar or Places organizer. */`",253,null],[18,"TRANSITION_BOOKMARK","","`text /** * This transition is set when the user followed a bookmark to get to the * page. */`",253,null],[18,"TRANSITION_EMBED","","`text /** * This transition type is set when some inner content is loaded. This is * true of all images on a page, and the contents of the iframe. It is also * true of any content in a frame if the user did not explicitly follow * a link to get there. */`",253,null],[18,"TRANSITION_REDIRECT_PERMANENT","","`text /** * Set when the transition was a permanent redirect. */`",253,null],[18,"TRANSITION_REDIRECT_TEMPORARY","","`text /** * Set when the transition was a temporary redirect. */`",253,null],[18,"TRANSITION_DOWNLOAD","","`text /** * Set when the transition is a download. */`",253,null],[18,"TRANSITION_FRAMED_LINK","","`text /** * This transition type means the user followed a link and got a visit in * a frame. */`",253,null],[18,"TRANSITION_RELOAD","","`text /** * This transition type means the page has been reloaded. */`",253,null],[18,"DATABASE_STATUS_OK","","`text /** * Set when database is coherent */`",253,null],[18,"DATABASE_STATUS_CREATE","","`text /** * Set when database did not exist and we created a new one. */`",253,null],[18,"DATABASE_STATUS_CORRUPT","","`text /** * Set when database was corrupt and we replaced it with a new one. */`",253,null],[18,"DATABASE_STATUS_UPGRADED","","`text /** * Set when database schema has been upgraded. */`",253,null],[18,"DATABASE_STATUS_LOCKED","","`text /** * Set when database couldn't be opened. */`",253,null],[11,"GetDatabaseStatus","","`text /** * Returns the current database status */`",253,null],[11,"GetHasHistoryEntries","","`text /** * True if there is any history. This can be used in UI to determine whether * the \"clear history\" button should be enabled or not. This is much better * than using BrowserHistory.count since that can be very slow if there is * a lot of history (it must enumerate each item). This is pretty fast. */`",253,null],[11,"GetPageTitle","","`text /** * Gets the original title of the page. * @deprecated use PlacesUtils.history.fetch instead. */`",253,null],[11,"MarkPageAsFollowedBookmark","","`text /** * This is just like markPageAsTyped (in nsIBrowserHistory, also implemented * by the history service), but for bookmarks. It declares that the given URI * is being opened as a result of following a bookmark. If this URI is loaded * soon after this message has been received, that transition will be marked * as following a bookmark. */`",253,null],[11,"MarkPageAsTyped","","`text /** * Designates the url as having been explicitly typed in by the user. * * @param aURI * URI of the page to be marked. */`",253,null],[11,"MarkPageAsFollowedLink","","`text /** * Designates the url as coming from a link explicitly followed by * the user (for example by clicking on it). * * @param aURI * URI of the page to be marked. */`",253,null],[11,"CanAddURI","","`text /** * Returns true if this URI would be added to the history. You don't have to * worry about calling this, adding a visit will always check before * actually adding the page. This function is public because some components * may want to check if this page would go in the history (i.e. for * annotations). */`",253,null],[11,"GetNewQuery","","`text /** * This returns a new query object that you can pass to executeQuer[y/ies]. * It will be initialized to all empty (so using it will give you all history). */`",253,null],[11,"GetNewQueryOptions","","`text /** * This returns a new options object that you can pass to executeQuer[y/ies] * after setting the desired options. */`",253,null],[11,"ExecuteQuery","","`text /** * Executes a single query. */`",253,null],[11,"ExecuteQueries","","`text /** * Executes an array of queries. All of the query objects are ORed * together. Within a query, all the terms are ANDed together as in * executeQuery. See executeQuery() */`",253,null],[11,"QueryStringToQueries","","`text /** * Converts a query URI-like string to an array of actual query objects for * use to executeQueries(). The output query array may be empty if there is * no information. However, there will always be an options structure returned * (if nothing is defined, it will just have the default values). */`",253,null],[11,"QueriesToQueryString","","`text /** * Converts a query into an equivalent string that can be persisted. Inverse * of queryStringToQueries() */`",253,null],[11,"AddObserver","","`text /** * Adds a history observer. If ownsWeak is false, the history service will * keep an owning reference to the observer. If ownsWeak is true, then * aObserver must implement nsISupportsWeakReference, and the history service * will keep a weak reference to the observer. */`",253,null],[11,"RemoveObserver","","`text /** * Removes a history observer. */`",253,null],[11,"GetObservers","","`text /** * Gets an array of registered nsINavHistoryObserver objects. */`",253,null],[11,"RunInBatchMode","","`text /** * Runs the passed callback in batch mode. Use this when a lot of things * are about to change. Calls can be nested, observers will only be * notified when all batches begin/end. * * @param aCallback * nsINavHistoryBatchCallback interface to call. * @param aUserData * Opaque parameter passed to nsINavBookmarksBatchCallback */`",253,null],[11,"GetHistoryDisabled","","`text /** * True if history is disabled. currently, * history is disabled if the places.history.enabled pref is false. */`",253,null],[11,"ClearEmbedVisits","","`text /** * Clear all TRANSITION_EMBED visits. */`",253,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MakeGuid","","`text /** * Generate a guid. * Guids can be used for any places purposes (history, bookmarks, etc.) * Returns null if the generation of the guid failed. */`",253,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"HashURL","","`text /** * Returns a 48-bit hash for a URI spec. * * @param aSpec * The URI spec to hash. * @param aMode * The hash mode: `\"\"` (default), `\"prefix_lo\"`, or `\"prefix_hi\"`. */`",253,null],[11,"addref","","",254,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",254,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavHistoryBatchCallback` to one of its base interfaces.",254,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",254,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RunBatched","","`text /** * @see runInBatchMode of nsINavHistoryService/nsINavBookmarksService */`",254,null],[11,"addref","","",255,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",255,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIASN1PrintableItem` to one of its base interfaces.",255,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",255,{"inputs":[{"name":"self"}],"output":{"name":"nsiasn1object"}}],[11,"SetData","","`[noscript] void setData (in charPtr data, in unsigned long len);`",255,null],[11,"GetData","","`[must_use,noscript] void getData (out charPtr data, out unsigned long len);`",255,null],[11,"addref","","",256,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",256,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMFontFaceList` to one of its base interfaces.",256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",256,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Item","","`nsIDOMFontFace item (in unsigned long index);`",256,null],[11,"GetLength","","`readonly attribute unsigned long length;`",256,null],[11,"addref","","",257,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",257,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDocument` to one of its base interfaces.",257,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",257,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"GetDoctype","","`text /** * The nsIDOMDocument interface represents the entire HTML or XML document. * Conceptually, it is the root of the document tree, and provides the * primary access to the document's data. * Since elements, text nodes, comments, processing instructions, etc. * cannot exist outside the context of a Document, the nsIDOMDocument * interface also contains the factory methods needed to create these * objects. * * For more information on this interface please see * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html */`",257,null],[11,"GetImplementation","","`readonly attribute nsIDOMDOMImplementation implementation;`",257,null],[11,"GetDocumentElement","","`readonly attribute nsIDOMElement documentElement;`",257,null],[11,"CreateElement","","`nsIDOMElement createElement ([Null (Stringify)] in DOMString tagName) raises (DOMException);`",257,null],[11,"CreateDocumentFragment","","`nsIDOMDocumentFragment createDocumentFragment ();`",257,null],[11,"CreateTextNode","","`nsIDOMText createTextNode (in DOMString data);`",257,null],[11,"CreateComment","","`nsIDOMComment createComment (in DOMString data);`",257,null],[11,"CreateCDATASection","","`nsIDOMCDATASection createCDATASection (in DOMString data) raises (DOMException);`",257,null],[11,"CreateProcessingInstruction","","`nsIDOMProcessingInstruction createProcessingInstruction (in DOMString target, in DOMString data) raises (DOMException);`",257,null],[11,"CreateAttribute","","`nsIDOMAttr createAttribute (in DOMString name) raises (DOMException);`",257,null],[11,"GetElementsByTagName","","`nsIDOMNodeList getElementsByTagName (in DOMString tagname);`",257,null],[11,"CreateElementNS","","`nsIDOMElement createElementNS (in DOMString namespaceURI, [Null (Stringify)] in DOMString qualifiedName) raises (DOMException);`",257,null],[11,"CreateAttributeNS","","`nsIDOMAttr createAttributeNS (in DOMString namespaceURI, in DOMString qualifiedName) raises (DOMException);`",257,null],[11,"GetElementsByTagNameNS","","`nsIDOMNodeList getElementsByTagNameNS (in DOMString namespaceURI, in DOMString localName);`",257,null],[11,"GetElementById","","`nsIDOMElement getElementById (in DOMString elementId);`",257,null],[11,"GetInputEncoding","","`readonly attribute DOMString inputEncoding;`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDocumentURI","","`readonly attribute DOMString documentURI;`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetURL","","`readonly attribute DOMString URL;`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CreateRange","","`text /** * Create a range * * @see http://html5.org/specs/dom-range.html#dom-document-createrange */`",257,null],[11,"CreateEvent","","`nsIDOMEvent createEvent (in DOMString eventType) raises (DOMException);`",257,null],[11,"GetDefaultView","","`text /** * The window associated with this document. * * @see <http://www.whatwg.org/html/#dom-document-defaultview> */`",257,null],[11,"GetCharacterSet","","`text /** * @see <http://www.whatwg.org/html/#dom-document-characterset> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDir","","`text /** * @see <http://www.whatwg.org/html/#dom-document-dir> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDir","","`text /** * @see <http://www.whatwg.org/html/#dom-document-dir> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** * @see <http://www.whatwg.org/html/#document.title> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTitle","","`text /** * @see <http://www.whatwg.org/html/#document.title> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReadyState","","`text /** * @see <http://www.whatwg.org/html/#dom-document-readystate> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLastModified","","`text /** * @see <http://www.whatwg.org/html/#dom-document-lastmodified> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReferrer","","`text /** * @see <http://www.whatwg.org/html/#dom-document-referrer> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"HasFocus","","`text /** * @see <http://www.whatwg.org/html/#dom-document-hasfocus> */`",257,null],[11,"GetActiveElement","","`text /** * @see <http://www.whatwg.org/html/#dom-document-activeelement> */`",257,null],[11,"GetElementsByClassName","","`text /** * Retrieve elements matching all classes listed in a * space-separated string. * * @see <http://www.whatwg.org/html/#dom-document-getelementsbyclassname> */`",257,null],[11,"GetStyleSheets","","`text /** * @see <http://dev.w3.org/csswg/cssom/#dom-document-stylesheets> */`",257,null],[11,"GetPreferredStyleSheetSet","","`text /** * This attribute must return the preferred style sheet set as set by the * author. It is determined from the order of style sheet declarations and * the Default-Style HTTP headers, as eventually defined elsewhere in the Web * Apps 1.0 specification. If there is no preferred style sheet set, this * attribute must return the empty string. The case of this attribute must * exactly match the case given by the author where the preferred style sheet * is specified or implied. This attribute must never return null. * * @see <http://dev.w3.org/csswg/cssom/#dom-document-preferredStyleSheetSet> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMozSelectedStyleSheetSet","","`text /** * This attribute indicates which style sheet set is in use. This attribute * is live; changing the disabled attribute on style sheets directly will * change the value of this attribute. * * If all the sheets that are enabled and have a title have the same title * (by case-sensitive comparisons) then the value of this attribute must be * exactly equal to the title of the first enabled style sheet with a title * in the styleSheets list. Otherwise, if style sheets from different sets * are enabled, then the return value must be null (there is no way to * determine what the currently selected style sheet set is in those * conditions). Otherwise, either all style sheets that have a title are * disabled, or there are no alternate style sheets, and * selectedStyleSheetSet must return the empty string. * * Setting this attribute to the null value must have no effect. * * Setting this attribute to a non-null value must call * enableStyleSheetsForSet() with that value as the function's argument, and * set lastStyleSheetSet to that value. * * From the DOM's perspective, all views have the same * selectedStyleSheetSet. If a UA supports multiple views with different * selected alternate style sheets, then this attribute (and the StyleSheet * interface's disabled attribute) must return and set the value for the * default view. * * @see <http://dev.w3.org/csswg/cssom/#dom-document-selectedStyleSheetSet> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetMozSelectedStyleSheetSet","","`text /** * This attribute indicates which style sheet set is in use. This attribute * is live; changing the disabled attribute on style sheets directly will * change the value of this attribute. * * If all the sheets that are enabled and have a title have the same title * (by case-sensitive comparisons) then the value of this attribute must be * exactly equal to the title of the first enabled style sheet with a title * in the styleSheets list. Otherwise, if style sheets from different sets * are enabled, then the return value must be null (there is no way to * determine what the currently selected style sheet set is in those * conditions). Otherwise, either all style sheets that have a title are * disabled, or there are no alternate style sheets, and * selectedStyleSheetSet must return the empty string. * * Setting this attribute to the null value must have no effect. * * Setting this attribute to a non-null value must call * enableStyleSheetsForSet() with that value as the function's argument, and * set lastStyleSheetSet to that value. * * From the DOM's perspective, all views have the same * selectedStyleSheetSet. If a UA supports multiple views with different * selected alternate style sheets, then this attribute (and the StyleSheet * interface's disabled attribute) must return and set the value for the * default view. * * @see <http://dev.w3.org/csswg/cssom/#dom-document-selectedStyleSheetSet> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLastStyleSheetSet","","`readonly attribute DOMString lastStyleSheetSet;`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStyleSheetSets","","`text /** * This must return the live list of the currently available style sheet * sets. This list is constructed by enumerating all the style sheets for * this document available to the implementation, in the order they are * listed in the styleSheets attribute, adding the title of each style sheet * with a title to the list, avoiding duplicates by dropping titles that * match (case-sensitively) titles that have already been added to the * list. * * @see <http://dev.w3.org/csswg/cssom/#dom-document-styleSheetSets> */`",257,null],[11,"MozEnableStyleSheetsForSet","","`text /** * Calling this method must change the disabled attribute on each StyleSheet * object with a title attribute with a length greater than 0 in the * styleSheets attribute, so that all those whose title matches the name * argument are enabled, and all others are disabled. Title matches must be * case-sensitive. Calling this method with the empty string disables all * alternate and preferred style sheets (but does not change the state of * persistent style sheets, that is those with no title attribute). * * Calling this method with a null value must have no effect. * * Style sheets that do not have a title are never affected by this * method. This method does not change the values of the lastStyleSheetSet or * preferredStyleSheetSet attributes. * * @see <http://dev.w3.org/csswg/cssom/#dom-document-enableStyleSheetsForSet> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ElementFromPoint","","`text /** * Returns the element from the caller's document at the given point, * relative to the upper-left-most point in the (possibly scrolled) * window or frame. * * If the element at the given point belongs to another document (such as * an iframe's subdocument), the element in the calling document's DOM * (e.g. the iframe) is returned. If the element at the given point is * anonymous or XBL generated content, such as a textbox's scrollbars, then * the first non-anonymous parent element (that is, the textbox) is returned. * * This method returns null if either coordinate is negative, or if the * specified point lies outside the visible bounds of the document. * * Callers from XUL documents should wait until the onload event has fired * before calling this method. * * @see <http://dev.w3.org/csswg/cssom-view/#dom-document-elementfrompoint> */`",257,null],[11,"GetContentType","","`text /** * @see <https://developer.mozilla.org/en/DOM/document.contentType> */`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMozSyntheticDocument","","`text /** * True if this document is synthetic : stand alone image, video, audio file, * etc. */`",257,null],[11,"GetCurrentScript","","`text /** * Returns the script element whose script is currently being processed. * * @see <https://developer.mozilla.org/en/DOM/document.currentScript> */`",257,null],[11,"MozSetImageElement","","`text /** * Use the given DOM element as the source image of target |-moz-element()|. * * This function introduces a new special ID (called \"image element ID\"), * which is only used by |-moz-element()|, and associates it with the given * DOM element. Image elements ID's have the higher precedence than general * HTML id's, so if |document.mozSetImageElement(<id>, <element>)| is called, * |-moz-element(#<id>)| uses |<element>| as the source image even if there * is another element with id attribute = |<id>|. To unregister an image * element ID |<id>|, call |document.mozSetImageElement(<id>, null)|. * * Example: * <script> * canvas = document.createElement(\"canvas\"); * canvas.setAttribute(\"width\", 100); * canvas.setAttribute(\"height\", 100); * // draw to canvas * document.mozSetImageElement(\"canvasbg\", canvas); * </script> * <div style=\"background-image: -moz-element(#canvasbg);\"></div> * * @param aImageElementId an image element ID to associate with * |aImageElement| * @param aImageElement a DOM element to be used as the source image of * |-moz-element(#aImageElementId)|. If this is null, the function will * unregister the image element ID |aImageElementId|. * * @see <https://developer.mozilla.org/en/DOM/document.mozSetImageElement> */`",257,null],[11,"CaretPositionFromPoint","","`text /** * Retrieve the location of the caret position (DOM node and character * offset within that node), given a point. * * @param x Horizontal point at which to determine the caret position, in * page coordinates. * @param y Vertical point at which to determine the caret position, in * page coordinates. */`",257,null],[11,"GetHidden","","`text /** * Visibility API implementation. */`",257,null],[11,"GetVisibilityState","","`readonly attribute DOMString visibilityState;`",257,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",258,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",258,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCException` to one of its base interfaces.",258,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",258,{"inputs":[{"name":"self"}],"output":{"name":"nsiexception"}}],[11,"Initialize","","`void initialize (in AUTF8String aMessage, in nsresult aResult, in AUTF8String aName, in nsIStackFrame aLocation, in nsISupports aData);`",258,null],[11,"addref","","",259,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",259,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISeekableStream` to one of its base interfaces.",259,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",259,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NS_SEEK_SET","","",259,null],[18,"NS_SEEK_CUR","","",259,null],[18,"NS_SEEK_END","","",259,null],[11,"Seek","","`text /** * seek * * This method moves the stream offset of the steam implementing this * interface. * * @param whence specifies how to interpret the 'offset' parameter in * setting the stream offset associated with the implementing * stream. * * @param offset specifies a value, in bytes, that is used in conjunction * with the 'whence' parameter to set the stream offset of the * implementing stream. A negative value causes seeking in * the reverse direction. * * @throws NS_BASE_STREAM_CLOSED if called on a closed stream. */`",259,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"Tell","","`text /** * tell * * This method reports the current offset, in bytes, from the start of the * stream. * * @throws NS_BASE_STREAM_CLOSED if called on a closed stream. */`",259,null],[11,"SetEOF","","`text /** * setEOF * * This method truncates the stream at the current offset. * * @throws NS_BASE_STREAM_CLOSED if called on a closed stream. */`",259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",260,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",260,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecCheckWrapChannel` to one of its base interfaces.",260,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",260,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInnerChannel","","`text /** * Returns the wrapped channel inside this class. */`",260,null],[11,"addref","","",261,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",261,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadContextInfo` to one of its base interfaces.",261,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",261,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_APP_ID","","",261,null],[18,"UNKNOWN_APP_ID","","",261,null],[11,"GetIsPrivate","","`text /** * Whether the context is in a Private Browsing mode */`",261,null],[11,"GetIsAnonymous","","`text /** * Whether the load is initiated as anonymous */`",261,null],[11,"addref","","",262,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",262,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadContextInfoFactory` to one of its base interfaces.",262,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",262,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDefault","","`readonly attribute nsILoadContextInfo default;`",262,null],[11,"GetPrivate","","`readonly attribute nsILoadContextInfo private;`",262,null],[11,"GetAnonymous","","`readonly attribute nsILoadContextInfo anonymous;`",262,null],[11,"FromLoadContext","","`nsILoadContextInfo fromLoadContext (in nsILoadContext aLoadContext, in boolean aAnonymous);`",262,null],[11,"FromWindow","","`nsILoadContextInfo fromWindow (in nsIDOMWindow aWindow, in boolean aAnonymous);`",262,null],[11,"addref","","",263,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",263,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserGlue` to one of its base interfaces.",263,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",263,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Sanitize","","`text /** * Deletes privacy sensitive data according to user preferences * * @param aParentWindow an optionally null window which is the parent of the * sanitization dialog * */`",263,null],[11,"addref","","",264,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",264,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleText` to one of its base interfaces.",264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",264,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TEXT_OFFSET_END_OF_TEXT","","",264,null],[18,"TEXT_OFFSET_CARET","","",264,null],[18,"BOUNDARY_CHAR","","",264,null],[18,"BOUNDARY_WORD_START","","",264,null],[18,"BOUNDARY_WORD_END","","",264,null],[18,"BOUNDARY_SENTENCE_START","","",264,null],[18,"BOUNDARY_SENTENCE_END","","",264,null],[18,"BOUNDARY_LINE_START","","",264,null],[18,"BOUNDARY_LINE_END","","",264,null],[11,"GetCaretOffset","","`text /** * The current current caret offset. * If set < 0 then caret will be placed at the end of the text */`",264,null],[11,"SetCaretOffset","","`text /** * The current current caret offset. * If set < 0 then caret will be placed at the end of the text */`",264,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetCharacterCount","","`readonly attribute long characterCount;`",264,null],[11,"GetSelectionCount","","`readonly attribute long selectionCount;`",264,null],[11,"GetText","","`text /** * String methods may need to return multibyte-encoded strings, * since some locales can't be encoded using 16-bit chars. * So the methods below might return UTF-16 strings, or they could * return \"string\" values which are UTF-8. */`",264,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTextAfterOffset","","`AString getTextAfterOffset (in long offset, in AccessibleTextBoundary boundaryType, out long startOffset, out long endOffset);`",264,null],[11,"GetTextAtOffset","","`AString getTextAtOffset (in long offset, in AccessibleTextBoundary boundaryType, out long startOffset, out long endOffset);`",264,null],[11,"GetTextBeforeOffset","","`AString getTextBeforeOffset (in long offset, in AccessibleTextBoundary boundaryType, out long startOffset, out long endOffset);`",264,null],[11,"GetCharacterAtOffset","","`text /** * It would be better to return an unsigned long here, * to allow unicode chars > 16 bits */`",264,null],[11,"GetTextAttributes","","`text /** * Get the accessible start/end offsets around the given offset, * return the text attributes for this range of text. * * @param includeDefAttrs [in] points whether text attributes applied to * the entire accessible should be included or not. * @param offset [in] text offset * @param rangeStartOffset [out] start offset of the range of text * @param rangeEndOffset [out] end offset of the range of text */`",264,null],[11,"GetDefaultTextAttributes","","`text /** * Return the text attributes that apply to the entire accessible. */`",264,null],[11,"GetCharacterExtents","","`text /** * Returns the bounding box of the specified position. * * The virtual character after the last character of the represented text, * i.e. the one at position length is a special case. It represents the * current input position and will therefore typically be queried by AT more * often than other positions. Because it does not represent an existing * character its bounding box is defined in relation to preceding characters. * It should be roughly equivalent to the bounding box of some character when * inserted at the end of the text. Its height typically being the maximal * height of all the characters in the text or the height of the preceding * character, its width being at least one pixel so that the bounding box is * not degenerate. * * @param offset - Index of the character for which to return its bounding * box. The valid range is 0..length. * @param x - X coordinate of the bounding box of the referenced character. * @param y - Y coordinate of the bounding box of the referenced character. * @param width - Width of the bounding box of the referenced character. * @param height - Height of the bounding box of the referenced character. * @param coordType - Specifies if the coordinates are relative to the screen * or to the parent window (see constants declared in * nsIAccessibleCoordinateType). */`",264,null],[11,"GetRangeExtents","","`void getRangeExtents (in long startOffset, in long endOffset, out long x, out long y, out long width, out long height, in unsigned long coordType);`",264,null],[11,"GetOffsetAtPoint","","`text /** * Get the text offset at the given point, or return -1 * if no character exists at that point * * @param x - The position's x value for which to look up the index of the * character that is rendered on to the display at that point. * @param y - The position's y value for which to look up the index of the * character that is rendered on to the display at that point. * @param coordType - Screen coordinates or window coordinates (see constants * declared in nsIAccessibleCoordinateType). * @return offset - Index of the character under the given point or -1 if * the point is invalid or there is no character under * the point. */`",264,null],[11,"GetSelectionBounds","","`void getSelectionBounds (in long selectionNum, out long startOffset, out long endOffset);`",264,null],[11,"SetSelectionBounds","","`text /** * Set the bounds for the given selection range */`",264,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"AddSelection","","`void addSelection (in long startOffset, in long endOffset);`",264,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"RemoveSelection","","`void removeSelection (in long selectionNum);`",264,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollSubstringTo","","`text /** * Makes a specific part of string visible on screen. * * @param startIndex 0-based character offset * @param endIndex 0-based character offset - the offset of the * character just past the last character of the * string * @param scrollType defines how to scroll (see nsIAccessibleScrollType for * available constants) */`",264,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollSubstringToPoint","","`text /** * Moves the top left of a substring to a specified location. * * @param startIndex 0-based character offset * @param endIndex 0-based character offset - the offset of the * character just past the last character of * the string * @param coordinateType specifies the coordinates origin (for available * constants refer to nsIAccessibleCoordinateType) * @param x defines the x coordinate * @param y defines the y coordinate */`",264,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"uint32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetEnclosingRange","","`text /** * Return a range that encloses this text control or otherwise the document * this text accessible belongs to. */`",264,null],[11,"GetSelectionRanges","","`text /** * Return an array of disjoint ranges for selected text within the text control * or otherwise the document this accessible belongs to. */`",264,null],[11,"GetVisibleRanges","","`text /** * Return an array of disjoint ranges of visible text within the text control * or otherwise the document this accessible belongs to. */`",264,null],[11,"GetRangeByChild","","`text /** * Return a range containing the given accessible. */`",264,null],[11,"GetRangeAtPoint","","`text /** * Return a range containing an accessible at the given point. */`",264,null],[11,"addref","","",265,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",265,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteSearch` to one of its base interfaces.",265,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",265,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartSearch","","`void startSearch (in AString searchString, in AString searchParam, in nsIAutoCompleteResult previousResult, in nsIAutoCompleteObserver listener);`",265,null],[11,"StopSearch","","`void stopSearch ();`",265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",266,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",266,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteObserver` to one of its base interfaces.",266,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",266,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSearchResult","","`void onSearchResult (in nsIAutoCompleteSearch search, in nsIAutoCompleteResult result);`",266,null],[11,"addref","","",267,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",267,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteSearchDescriptor` to one of its base interfaces.",267,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",267,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SEARCH_TYPE_DELAYED","","",267,null],[18,"SEARCH_TYPE_IMMEDIATE","","",267,null],[11,"GetSearchType","","`text /** * Identifies the search behavior. * Should be one of the SEARCH_TYPE_* constants above. * Defaults to SEARCH_TYPE_DELAYED. */`",267,null],[11,"GetClearingAutoFillSearchesAgain","","`readonly attribute boolean clearingAutoFillSearchesAgain;`",267,null],[11,"addref","","",268,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",268,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `txIFunctionEvaluationContext` to one of its base interfaces.",268,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",268,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPosition","","`readonly attribute uint32_t position;`",268,null],[11,"GetSize","","`readonly attribute uint32_t size;`",268,null],[11,"GetContextNode","","`readonly attribute nsIDOMNode contextNode;`",268,null],[11,"GetState","","`readonly attribute nsISupports state;`",268,null],[11,"addref","","",269,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",269,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConsoleListener` to one of its base interfaces.",269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",269,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Observe","","`void observe (in nsIConsoleMessage aMessage);`",269,null],[11,"addref","","",270,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",270,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPrefObserver` to one of its base interfaces.",270,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",270,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnContentPrefSet","","`text /** * Called when a content pref is set to a different value. * * @param aGroup the group to which the pref belongs, or null * if it's a global pref (applies to all sites) * @param aName the name of the pref that was set * @param aValue the new value of the pref * @param aIsPrivate an optional flag determining whether the * original context is private or not */`",270,null],[11,"OnContentPrefRemoved","","`text /** * Called when a content pref is removed. * * @param aGroup the group to which the pref belongs, or null * if it's a global pref (applies to all sites) * @param aName the name of the pref that was removed * @param aIsPrivate an optional flag determining whether the * original context is private or not */`",270,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",271,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",271,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPrefService2` to one of its base interfaces.",271,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",271,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetByName","","`text /** * Gets all the preferences with the given name. * * @param name The preferences' name. * @param context The private-browsing context, if any. * @param callback handleResult is called once for each preference unless * no such preferences exist, in which case handleResult * is not called at all. */`",271,null],[11,"GetByDomainAndName","","`text /** * Gets the preference with the given domain and name. * * @param domain The preference's domain. * @param name The preference's name. * @param context The private-browsing context, if any. * @param callback handleResult is called once unless no such preference * exists, in which case handleResult is not called at all. */`",271,null],[11,"GetBySubdomainAndName","","`text /** * Gets all preferences with the given name whose domains are either the same * as or subdomains of the given domain. * * @param domain The preferences' domain. * @param name The preferences' name. * @param context The private-browsing context, if any. * @param callback handleResult is called once for each preference. If no * such preferences exist, handleResult is not called at all. */`",271,null],[11,"GetGlobal","","`text /** * Gets the preference with no domain and the given name. * * @param name The preference's name. * @param context The private-browsing context, if any. * @param callback handleResult is called once unless no such preference * exists, in which case handleResult is not called at all. */`",271,null],[11,"GetCachedByDomainAndName","","`text /** * Synchronously retrieves from the in-memory cache the preference with the * given domain and name. * * In addition to caching preference values, the cache also keeps track of * preferences that are known not to exist. If the preference is known not to * exist, the value attribute of the returned object will be undefined * (nsIDataType::VTYPE_VOID). * * If the preference is neither cached nor known not to exist, then null is * returned, and get() must be called to determine whether the preference * exists. * * @param domain The preference's domain. * @param name The preference's name. * @param context The private-browsing context, if any. * @return The preference, or null if no such preference is known to * exist. */`",271,null],[11,"GetCachedBySubdomainAndName","","`text /** * Synchronously retrieves from the in-memory cache all preferences with the * given name whose domains are either the same as or subdomains of the given * domain. * * The preferences are returned in an array through the out-parameter. If a * preference for a particular subdomain is known not to exist, then an object * corresponding to that preference will be present in the array, and, as with * getCachedByDomainAndName, its value attribute will be undefined. * * @param domain The preferences' domain. * @param name The preferences' name. * @param context The private-browsing context, if any. * @param len The length of the returned array. * @param prefs The array of preferences. */`",271,null],[11,"GetCachedGlobal","","`text /** * Synchronously retrieves from the in-memory cache the preference with no * domain and the given name. * * As with getCachedByDomainAndName, if the preference is cached then it is * returned; if the preference is known not to exist, then the value attribute * of the returned object will be undefined; if the preference is neither * cached nor known not to exist, then null is returned. * * @param name The preference's name. * @param context The private-browsing context, if any. * @return The preference, or null if no such preference is known to * exist. */`",271,null],[11,"Set","","`text /** * Sets a preference. * * @param domain The preference's domain. * @param name The preference's name. * @param value The preference's value. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the preference has been * stored. */`",271,null],[11,"SetGlobal","","`text /** * Sets a preference with no domain. * * @param name The preference's name. * @param value The preference's value. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the preference has been * stored. */`",271,null],[11,"RemoveByDomainAndName","","`text /** * Removes the preference with the given domain and name. * * @param domain The preference's domain. * @param name The preference's name. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveBySubdomainAndName","","`text /** * Removes all the preferences with the given name whose domains are either * the same as or subdomains of the given domain. * * @param domain The preferences' domain. * @param name The preferences' name. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveGlobal","","`text /** * Removes the preference with no domain and the given name. * * @param name The preference's name. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveByDomain","","`text /** * Removes all preferences with the given domain. * * @param domain The preferences' domain. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveBySubdomain","","`text /** * Removes all preferences whose domains are either the same as or subdomains * of the given domain. * * @param domain The preferences' domain. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveByName","","`text /** * Removes all preferences with the given name regardless of domain, including * global preferences with the given name. * * @param name The preferences' name. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveAllDomains","","`text /** * Removes all non-global preferences -- in other words, all preferences that * have a domain. * * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveAllDomainsSince","","`text /** * Removes all non-global preferences created after and including |since|. * * @param since Timestamp in milliseconds. * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"RemoveAllGlobals","","`text /** * Removes all global preferences -- in other words, all preferences that have * no domain. * * @param context The private-browsing context, if any. * @param callback handleCompletion is called when the operation completes. */`",271,null],[11,"AddObserverForName","","`text /** * Registers an observer that will be notified whenever a preference with the * given name is set or removed. * * When a set or remove method is called, observers are called after the set * or removal completes and after the method's callback is called, and they * are called in the same turn of the event loop as the callback. * * The service holds a strong reference to the observer, so the observer must * be removed later to avoid leaking it. * * @param name The name of the preferences to observe. Pass null to * observe all preference changes regardless of name. * @param observer The observer. */`",271,null],[11,"RemoveObserverForName","","`text /** * Unregisters an observer for the given name. * * @param name The name for which the observer was registered. Pass null * if the observer was added with a null name. * @param observer The observer. */`",271,null],[11,"ExtractDomain","","`text /** * Extracts and returns the domain from the given string representation of a * URI. This is how the API extracts domains from URIs passed to it. * * @param str The string representation of a URI, like * \"http://example.com/foo/bar\". * @return If the given string is a valid URI, the domain of that URI is * returned. Otherwise, the string itself is returned. */`",271,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",272,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",272,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPrefCallback2` to one of its base interfaces.",272,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",272,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"COMPLETE_OK","","",272,null],[18,"COMPLETE_ERROR","","",272,null],[11,"HandleResult","","`text /** * The callback used by the above methods. */ /** * For the retrieval methods, this is called once for each retrieved * preference. It is not called for other methods. * * @param pref The retrieved preference. */`",272,null],[11,"HandleError","","`text /** * Called when an error occurs. This may be called multiple times before * handleCompletion is called. * * @param error A number in Components.results describing the error. */`",272,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"HandleCompletion","","`text /** * Called when the method finishes. This will be called exactly once for * each method invocation, and afterward no other callback methods will be * called. * * @param reason One of the COMPLETE_* values indicating the manner in which * the method completed. */`",272,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",273,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",273,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPref` to one of its base interfaces.",273,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",273,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDomain","","`readonly attribute AString domain;`",273,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`readonly attribute AString name;`",273,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`readonly attribute nsIVariant value;`",273,null],[11,"addref","","",274,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",274,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISelectionController` to one of its base interfaces.",274,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",274,{"inputs":[{"name":"self"}],"output":{"name":"nsiselectiondisplay"}}],[18,"SELECTION_NONE","","",274,null],[18,"SELECTION_NORMAL","","",274,null],[18,"SELECTION_SPELLCHECK","","",274,null],[18,"SELECTION_IME_RAWINPUT","","",274,null],[18,"SELECTION_IME_SELECTEDRAWTEXT","","",274,null],[18,"SELECTION_IME_CONVERTEDTEXT","","",274,null],[18,"SELECTION_IME_SELECTEDCONVERTEDTEXT","","",274,null],[18,"SELECTION_ACCESSIBILITY","","",274,null],[18,"SELECTION_FIND","","",274,null],[18,"SELECTION_URLSECONDARY","","",274,null],[18,"SELECTION_URLSTRIKEOUT","","",274,null],[18,"NUM_SELECTIONTYPES","","",274,null],[18,"SELECTION_ANCHOR_REGION","","",274,null],[18,"SELECTION_FOCUS_REGION","","",274,null],[18,"SELECTION_WHOLE_SELECTION","","",274,null],[18,"NUM_SELECTION_REGIONS","","",274,null],[18,"SELECTION_OFF","","",274,null],[18,"SELECTION_HIDDEN","","",274,null],[18,"SELECTION_ON","","",274,null],[18,"SELECTION_DISABLED","","",274,null],[18,"SELECTION_ATTENTION","","",274,null],[18,"SCROLL_SYNCHRONOUS","","",274,null],[18,"SCROLL_FIRST_ANCESTOR_ONLY","","",274,null],[18,"SCROLL_CENTER_VERTICALLY","","",274,null],[18,"SCROLL_OVERFLOW_HIDDEN","","",274,null],[18,"SCROLL_FOR_CARET_MOVE","","",274,null],[18,"MOVE_LEFT","","`text /** * nsFrameSelection::PhysicalMove depends on the ordering of these values; * do not change without checking there! */`",274,null],[18,"MOVE_RIGHT","","",274,null],[18,"MOVE_UP","","",274,null],[18,"MOVE_DOWN","","",274,null],[11,"SetDisplaySelection","","`text /** * SetDisplaySelection will set the display mode for the selection. OFF,ON,DISABLED */`",274,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetDisplaySelection","","`text /** * GetDisplaySelection will get the display mode for the selection. OFF,ON,DISABLED */`",274,null],[11,"GetSelection","","`text /** * GetSelection will return the selection that the presentation * shell may implement. * * @param aType This will hold the type of selection. This value must be one * of RawSelectionType values. * @param _return will hold the return value */`",274,null],[11,"ScrollSelectionIntoView","","`text /** * ScrollSelectionIntoView scrolls a region of the selection, * so that it is visible in the scrolled view. * * @param aType the selection to scroll into view. This value must be one * of RawSelectionType values. * @param aRegion the region inside the selection to scroll into view. //SelectionRegion * @param aFlags the scroll flags. Valid bits include: * SCROLL_SYNCHRONOUS: when set, scrolls the selection into view * before returning. If not set, posts a request which is processed * at some point after the method returns. * SCROLL_FIRST_ANCESTOR_ONLY: if set, only the first ancestor will be scrolled * into view. * SCROLL_OVERFLOW_HIDDEN: if set, scrolls even if the overflow is specified * as hidden. * SCROLL_FOR_CARET_MOVE: set to indicate whether scrolling is in response * to the caret being moved. Does not affect behavior (used for telemetry * purposes only). * * Note that if isSynchronous is true, then this might flush the pending * reflow. It's dangerous for some objects. See bug 418470 comment 12. */`",274,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"int16_t"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"RepaintSelection","","`text /** * RepaintSelection repaints the selection specified by aType. * * @param aType specifies the selection to repaint. */`",274,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"SetCaretEnabled","","`text /** * Set the caret as enabled or disabled. An enabled caret will * draw or blink when made visible. A disabled caret will never show up. * Can be called any time. * @param aEnable PR_TRUE to enable caret. PR_FALSE to disable. * @return always NS_OK */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetCaretReadOnly","","`text /** * Set the caret readonly or not. An readonly caret will * draw but not blink when made visible. * @param aReadOnly PR_TRUE to enable caret. PR_FALSE to disable. * @return always NS_OK */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCaretEnabled","","`text /** * Gets the current state of the caret. * @param aEnabled [OUT] set to the current caret state, as set by SetCaretEnabled * @return if aOutEnabled==null, returns NS_ERROR_INVALID_ARG * else NS_OK */`",274,null],[11,"GetCaretVisible","","`text /** * This is true if the caret is enabled, visible, and currently blinking. * This is still true when the caret is enabled, visible, but in its \"off\" * blink cycle. */`",274,null],[11,"SetCaretVisibilityDuringSelection","","`text /** * Show the caret even in selections. By default the caret is hidden unless the * selection is collapsed. Use this function to show the caret even in selections. * @param aVisibility PR_TRUE to show the caret in selections. PR_FALSE to hide. * @return always NS_OK */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CharacterMove","","`text /** CharacterMove will move the selection one character forward/backward in the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"PhysicalMove","","`text /** PhysicalMove will move the selection one \"unit\" in a given direction * within the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aDirection * @param aAmount character/line; word/lineBoundary * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"int16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CharacterExtendForDelete","","`text /** * CharacterExtendForDelete will extend the selection one character cell * forward in the document. * this method is used internally for handling del key. */`",274,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CharacterExtendForBackspace","","`text /** * CharacterExtendForBackspace will extend the selection one character cell * backward in the document. * this method is used internally for handling backspace key only when we're * after UTF-16 surrogates. */`",274,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"WordMove","","`text /** WordMove will move the selection one word forward/backward in the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"WordExtendForDelete","","`text /** wordExtendForDelete will extend the selection one word forward/backward in the document. * this method is used internally for handling ctrl[option]-backspace and ctrl[option]-del. * @param aForward forward or backward if PR_FALSE */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"LineMove","","`text /** LineMove will move the selection one line forward/backward in the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"IntraLineMove","","`text /** IntraLineMove will move the selection to the front of the line or end of the line * in the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"PageMove","","`text /** PageMove will move the selection one page forward/backward in the document. * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CompleteScroll","","`text /** CompleteScroll will move page view to the top or bottom of the document * @param aForward forward or backward if PR_FALSE */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CompleteMove","","`text /** CompleteMove will move page view to the top or bottom of the document * this will also have the effect of collapsing the selection if the aExtend = PR_FALSE * the \"point\" of selection that is extended is considered the \"focus\" point. * or the last point adjusted by the selection. * @param aForward forward or backward if PR_FALSE * @param aExtend should it collapse the selection of extend it? */`",274,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ScrollPage","","`text /** ScrollPage will scroll the page without affecting the selection. * @param aForward scroll forward or backwards in selection */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ScrollLine","","`text /** ScrollLine will scroll line up or down dependent on the boolean * @param aForward scroll forward or backwards in selection */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ScrollCharacter","","`text /** ScrollCharacter will scroll right or left dependent on the boolean * @param aRight if true will scroll right. if not will scroll left. */`",274,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SelectAll","","`text /** SelectAll will select the whole page */`",274,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CheckVisibility","","`text /** CheckVisibility will return true if textnode and offsets are actually rendered * in the current precontext. * @param aNode textNode to test * @param aStartOffset offset in dom to first char of textnode to test * @param aEndOffset offset in dom to last char of textnode to test * @param aReturnBool boolean returned TRUE if visible FALSE if not */`",274,null],[11,"addref","","",275,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",275,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `txIXPathObject` to one of its base interfaces.",275,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",275,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",276,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",276,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITypeAheadFind` to one of its base interfaces.",276,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",276,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FIND_FOUND","","`text /******************************* Constants *******************************/`",276,null],[18,"FIND_NOTFOUND","","",276,null],[18,"FIND_WRAPPED","","",276,null],[18,"FIND_PENDING","","",276,null],[11,"Init","","`text /****************************** Initializer ******************************/`",276,null],[11,"Find","","`text /***************************** Core functions ****************************/`",276,null],[11,"FindAgain","","`unsigned short findAgain (in boolean findBackwards, in boolean aLinksOnly);`",276,null],[11,"GetFoundRange","","`nsIDOMRange getFoundRange ();`",276,null],[11,"SetDocShell","","`text /**************************** Helper functions ***************************/`",276,null],[11,"SetSelectionModeAndRepaint","","`void setSelectionModeAndRepaint (in short toggle);`",276,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"CollapseSelection","","`void collapseSelection ();`",276,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsRangeVisible","","`boolean isRangeVisible (in nsIDOMRange aRange, in boolean aMustBeInViewPort);`",276,null],[11,"IsRangeRendered","","`boolean isRangeRendered (in nsIDOMRange aRange);`",276,null],[11,"GetSearchString","","`text /******************************* Attributes ******************************/`",276,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCaseSensitive","","`attribute boolean caseSensitive;`",276,null],[11,"SetCaseSensitive","","`attribute boolean caseSensitive;`",276,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEntireWord","","`attribute boolean entireWord;`",276,null],[11,"SetEntireWord","","`attribute boolean entireWord;`",276,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetFoundLink","","`readonly attribute nsIDOMElement foundLink;`",276,null],[11,"GetFoundEditable","","`readonly attribute nsIDOMElement foundEditable;`",276,null],[11,"GetCurrentWindow","","`readonly attribute mozIDOMWindow currentWindow;`",276,null],[11,"addref","","",277,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",277,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpAuthenticatorCallback` to one of its base interfaces.",277,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",277,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnCredsGenerated","","`text /** * Authentication data for a header is available. * * @param aCreds * Credentials which were obtained asynchonously. * @param aFlags * Flags set by asynchronous call. * @param aResult * Result status of credentials generation * @param aSessionState * Modified session state to be passed to caller * @param aContinuationState * Modified continuation state to be passed to caller */`",277,null],[11,"addref","","",278,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",278,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMTreeWalker` to one of its base interfaces.",278,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",278,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRoot","","`readonly attribute nsIDOMNode root;`",278,null],[11,"GetWhatToShow","","`readonly attribute unsigned long whatToShow;`",278,null],[11,"GetFilter","","`readonly attribute nsIDOMNodeFilter filter;`",278,null],[11,"GetCurrentNode","","`attribute nsIDOMNode currentNode;`",278,null],[11,"SetCurrentNode","","`attribute nsIDOMNode currentNode;`",278,null],[11,"ParentNode","","`nsIDOMNode parentNode ();`",278,null],[11,"FirstChild","","`nsIDOMNode firstChild ();`",278,null],[11,"LastChild","","`nsIDOMNode lastChild ();`",278,null],[11,"PreviousSibling","","`nsIDOMNode previousSibling ();`",278,null],[11,"NextSibling","","`nsIDOMNode nextSibling ();`",278,null],[11,"PreviousNode","","`nsIDOMNode previousNode ();`",278,null],[11,"NextNode","","`nsIDOMNode nextNode ();`",278,null],[11,"addref","","",279,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",279,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptableRegion` to one of its base interfaces.",279,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",279,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`void init ();`",279,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetToRegion","","`text /** * copy operator equivalent that takes another region * * @param region to copy * @return void * **/`",279,null],[11,"SetToRect","","`text /** * copy operator equivalent that takes a rect * * @param aX xoffset of rect to set region to * @param aY yoffset of rect to set region to * @param aWidth width of rect to set region to * @param aHeight height of rect to set region to * @return void * **/`",279,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"IntersectRegion","","`text /** * destructively intersect another region with this one * * @param region to intersect * @return void * **/`",279,null],[11,"IntersectRect","","`text /** * destructively intersect a rect with this region * * @param aX xoffset of rect to intersect with region * @param aY yoffset of rect to intersect with region * @param aWidth width of rect to intersect with region * @param aHeight height of rect to intersect with region * @return void * **/`",279,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"UnionRegion","","`text /** * destructively union another region with this one * * @param region to union * @return void * **/`",279,null],[11,"UnionRect","","`text /** * destructively union a rect with this region * * @param aX xoffset of rect to union with region * @param aY yoffset of rect to union with region * @param aWidth width of rect to union with region * @param aHeight height of rect to union with region * @return void * **/`",279,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SubtractRegion","","`text /** * destructively subtract another region with this one * * @param region to subtract * @return void * **/`",279,null],[11,"SubtractRect","","`text /** * destructively subtract a rect from this region * * @param aX xoffset of rect to subtract with region * @param aY yoffset of rect to subtract with region * @param aWidth width of rect to subtract with region * @param aHeight height of rect to subtract with region * @return void * **/`",279,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"IsEmpty","","`text /** * is this region empty? i.e. does it contain any pixels * * @param none * @return returns whether the region is empty * **/`",279,null],[11,"IsEqualRegion","","`text /** * == operator equivalent i.e. do the regions contain exactly * the same pixels * * @param region to compare * @return whether the regions are identical * **/`",279,null],[11,"GetBoundingBox","","`text /** * returns the bounding box of the region i.e. the smallest * rectangle that completely contains the region. * * @param aX out parameter for xoffset of bounding rect for region * @param aY out parameter for yoffset of bounding rect for region * @param aWidth out parameter for width of bounding rect for region * @param aHeight out parameter for height of bounding rect for region * @return void * **/`",279,null],[11,"Offset","","`text /** * offsets the region in x and y * * @param xoffset pixel offset in x * @param yoffset pixel offset in y * @return void * **/`",279,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ContainsRect","","`text /** * does the region intersect the rectangle? * * @param rect to check for containment * @return true if the region intersects the rect * **/`",279,null],[11,"addref","","",280,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",280,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULAppInfo` to one of its base interfaces.",280,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",280,{"inputs":[{"name":"self"}],"output":{"name":"nsiplatforminfo"}}],[11,"GetVendor","","`text /** * @see XREAppData.vendor * @returns an empty string if XREAppData.vendor is not set. */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`text /** * @see XREAppData.name */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetID","","`text /** * @see XREAppData.ID * @returns an empty string if XREAppData.ID is not set. */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetVersion","","`text /** * The version of the XUL application. It is different than the * version of the XULRunner platform. Be careful about which one you want. * * @see XREAppData.version * @returns an empty string if XREAppData.version is not set. */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppBuildID","","`text /** * The build ID/date of the application. For xulrunner applications, * this will be different than the build ID of the platform. Be careful * about which one you want. */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUAName","","`text /** * @see XREAppData.UAName * @returns an empty string if XREAppData.UAName is not set. */`",280,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",281,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",281,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULOverlayProvider` to one of its base interfaces.",281,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",281,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetXULOverlays","","`text /** * Get the XUL overlays for a particular chrome URI. * * @param aURI The URI being loaded * @return An enumerator of nsIURI for the overlays of this URI */`",281,null],[11,"GetStyleOverlays","","`text /** * Get the style overlays for a particular chrome URI. * * @param aURI The URI being loaded * @return An enumerator of nsIURI for the overlays of this URI */`",281,null],[11,"addref","","",282,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",282,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHandlerInfo` to one of its base interfaces.",282,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",282,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"saveToDisk","","",282,null],[18,"alwaysAsk","","`text /** * Used to indicate that we know nothing about what to do with this. You * could consider this to be not initialized. */`",282,null],[18,"useHelperApp","","",282,null],[18,"handleInternally","","",282,null],[18,"useSystemDefault","","",282,null],[11,"GetType","","`text /** * The type of this handler info. For MIME handlers, this is the MIME type. * For protocol handlers, it's the scheme. * * @return String representing the type. */`",282,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDescription","","`text /** * A human readable description of the handler type */`",282,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDescription","","`text /** * A human readable description of the handler type */`",282,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPreferredApplicationHandler","","`text /** * The application the user has said they want associated with this content * type. This is not always guaranteed to be set!! */`",282,null],[11,"SetPreferredApplicationHandler","","`text /** * The application the user has said they want associated with this content * type. This is not always guaranteed to be set!! */`",282,null],[11,"GetPossibleApplicationHandlers","","`text /** * Applications that can handle this content type. * * The list will include the preferred handler, if any. Elements of this * array are nsIHandlerApp objects, and this attribute will always reference * an array, whether or not there are any possible handlers. If there are * no possible handlers, the array will contain no elements, so just check * its length (nsIArray::length) to see if there are any possible handlers. */`",282,null],[11,"GetHasDefaultHandler","","`text /** * Indicates whether a default application handler exists, * i.e. whether launchWithFile with action = useSystemDefault is possible * and defaultDescription will contain usable information. */`",282,null],[11,"GetDefaultDescription","","`text /** * A pretty name description of the associated default application. Only * usable if hasDefaultHandler is true. */`",282,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"LaunchWithURI","","`text /** * Launches the application with the specified URI, in a way that * depends on the value of preferredAction. preferredAction must be * useHelperApp or useSystemDefault. * * @note Only the URI scheme is used to determine how to launch. This is * essentially a pass-by-value operation. This means that in the case of * a file: URI, the handler that is registered for file: will be launched * and our code will not make any decision based on the content-type or * extension, though the invoked file: handler is free to do so. * * @param aURI * The URI to launch this application with * * @param aWindowContext * The window to parent the dialog against, and, if a web handler * is chosen, it is loaded in this window as well. See * nsIHandlerApp.launchWithURI for more details. * * @throw NS_ERROR_INVALID_ARG if preferredAction is not valid for this * call. Other exceptions may be thrown. */`",282,null],[11,"GetPreferredAction","","`text /** * preferredAction is how the user specified they would like to handle * this content type: save to disk, use specified helper app, use OS * default handler or handle using navigator; possible value constants * listed below */`",282,null],[11,"SetPreferredAction","","`text /** * preferredAction is how the user specified they would like to handle * this content type: save to disk, use specified helper app, use OS * default handler or handle using navigator; possible value constants * listed below */`",282,{"inputs":[{"name":"self"},{"name":"nshandlerinfoaction"}],"output":{"name":"nsresult"}}],[11,"GetAlwaysAskBeforeHandling","","`text /** * alwaysAskBeforeHandling: if true, we should always give the user a * dialog asking how to dispose of this content. */`",282,null],[11,"SetAlwaysAskBeforeHandling","","`text /** * alwaysAskBeforeHandling: if true, we should always give the user a * dialog asking how to dispose of this content. */`",282,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",283,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",283,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMIMEInfo` to one of its base interfaces.",283,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",283,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerinfo"}}],[11,"GetFileExtensions","","`text /** * Gives you an array of file types associated with this type. * * @return Number of elements in the array. * @return Array of extensions. */`",283,null],[11,"SetFileExtensions","","`text /** * Set File Extensions. Input is a comma delimited list of extensions. */`",283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ExtensionExists","","`text /** * Returns whether or not the given extension is * associated with this MIME info. * * @return TRUE if the association exists. */`",283,null],[11,"AppendExtension","","`text /** * Append a given extension to the set of extensions */`",283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPrimaryExtension","","`text /** * Returns the first extension association in * the internal set of extensions. * * @return The first extension. */`",283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPrimaryExtension","","`text /** * Returns the first extension association in * the internal set of extensions. * * @return The first extension. */`",283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMIMEType","","`text /** * The MIME type of this MIMEInfo. * * @return String representing the MIME type. * * @deprecated use nsIHandlerInfo::type instead. */`",283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Equals","","`text /** * Returns whether or not these two nsIMIMEInfos are logically * equivalent. * * @returns PR_TRUE if the two are considered equal */`",283,null],[11,"GetPossibleLocalHandlers","","`text /** * Returns a list of nsILocalHandlerApp objects containing * handlers associated with this mimeinfo. Implemented per * platform using information in this object to generate the * best list. Typically used for an \"open with\" style user * option. * * @return nsIArray of nsILocalHandlerApp */`",283,null],[11,"LaunchWithFile","","`text /** * Launches the application with the specified file, in a way that * depends on the value of preferredAction. preferredAction must be * useHelperApp or useSystemDefault. * * @param aFile The file to launch this application with. * * @throw NS_ERROR_INVALID_ARG if action is not valid for this function. * Other exceptions may be thrown. */`",283,null],[11,"addref","","",284,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",284,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHandlerApp` to one of its base interfaces.",284,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",284,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`text /** * nsIHandlerApp represents an external application that can handle content * of some sort (either a MIME type or a protocol). * * FIXME: now that we've made nsIWebHandlerApp inherit from nsIHandlerApp, * we should also try to make nsIWebContentHandlerInfo inherit from or possibly * be replaced by nsIWebHandlerApp (bug 394710). */ /** * Human readable name for the handler */`",284,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`text /** * nsIHandlerApp represents an external application that can handle content * of some sort (either a MIME type or a protocol). * * FIXME: now that we've made nsIWebHandlerApp inherit from nsIHandlerApp, * we should also try to make nsIWebContentHandlerInfo inherit from or possibly * be replaced by nsIWebHandlerApp (bug 394710). */ /** * Human readable name for the handler */`",284,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDetailedDescription","","`text /** * Detailed description for this handler. Suitable for * a tooltip or short informative sentence. */`",284,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDetailedDescription","","`text /** * Detailed description for this handler. Suitable for * a tooltip or short informative sentence. */`",284,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Equals","","`text /** * Whether or not the given handler app is logically equivalent to the * invokant (i.e. they represent the same app). * * Two apps are the same if they are both either local or web handlers * and their executables/URI templates and command line parameters are * the same. * * @param aHandlerApp the handler app to compare to the invokant * * @returns true if the two are logically equivalent, false otherwise */`",284,null],[11,"LaunchWithURI","","`text /** * Launches the application with the specified URI. * * @param aURI * The URI to launch this application with * * @param aWindowContext * * Currently only relevant to web-handler apps. If given, this * represents the docshell to load the handler in and is passed * through to nsIURILoader.openURI. If this parameter is null or * not present, the web handler app implementation will attempt to * find/create a place to load the handler and do so. As of this * writing, it tries to load the web handler in a new window using * nsIBrowserDOMWindow.openURI. In the future, it may attempt to * have a more comprehensive strategy which could include handing * off to the system default browser (bug 394479). */`",284,null],[11,"addref","","",285,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",285,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILocalHandlerApp` to one of its base interfaces.",285,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",285,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[11,"GetExecutable","","`text /** * Pointer to the executable file used to handle content */`",285,null],[11,"SetExecutable","","`text /** * Pointer to the executable file used to handle content */`",285,null],[11,"GetParameterCount","","`text /** * Returns the current number of command line parameters. */`",285,null],[11,"ClearParameters","","`text /** * Clears the current list of command line parameters. */`",285,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AppendParameter","","`text /** * Appends a command line parameter to the command line * parameter list. * * @param param the parameter to add. */`",285,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParameter","","`text /** * Retrieves a specific command line parameter. * * @param param the index of the parameter to return. * * @return the parameter string. * * @throw NS_ERROR_INVALID_ARG if the index is out of range. */`",285,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ParameterExists","","`text /** * Checks to see if a parameter exists in the command line * parameter list. * * @param param the parameter to search for. * * @return TRUE if the parameter exists in the current list. */`",285,null],[11,"addref","","",286,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",286,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebHandlerApp` to one of its base interfaces.",286,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",286,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[11,"GetUriTemplate","","`text /** * Template used to construct the URI to GET. Template is expected to have * a %s in it, and the escaped URI to be handled is inserted in place of * that %s, as per the HTML5 spec. */`",286,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetUriTemplate","","`text /** * Template used to construct the URI to GET. Template is expected to have * a %s in it, and the escaped URI to be handled is inserted in place of * that %s, as per the HTML5 spec. */`",286,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",287,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",287,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDBusHandlerApp` to one of its base interfaces.",287,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",287,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[11,"GetService","","`text /** * Service defines the dbus service that should handle this protocol. * If its not set, NS_ERROR_FAILURE will be returned by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetService","","`text /** * Service defines the dbus service that should handle this protocol. * If its not set, NS_ERROR_FAILURE will be returned by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetObjectPath","","`text /** * Objpath defines the object path of the dbus service that should handle * this protocol. If its not set, NS_ERROR_FAILURE will be returned * by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetObjectPath","","`text /** * Objpath defines the object path of the dbus service that should handle * this protocol. If its not set, NS_ERROR_FAILURE will be returned * by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDBusInterface","","`text /** * DBusInterface defines the interface of the dbus service that should * handle this protocol. If its not set, NS_ERROR_FAILURE will be * returned by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDBusInterface","","`text /** * DBusInterface defines the interface of the dbus service that should * handle this protocol. If its not set, NS_ERROR_FAILURE will be * returned by LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMethod","","`text /** * Method defines the dbus method that should be invoked to handle this * protocol. If its not set, NS_ERROR_FAILURE will be returned by * LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetMethod","","`text /** * Method defines the dbus method that should be invoked to handle this * protocol. If its not set, NS_ERROR_FAILURE will be returned by * LaunchWithURI */`",287,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",288,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",288,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISAXErrorHandler` to one of its base interfaces.",288,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",288,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Error","","`text /** * Receive notification of a recoverable error. * * This corresponds to the definition of \"error\" in section 1.2 * of the W3C XML 1.0 Recommendation. For example, a validating * parser would use this callback to report the violation of a * validity constraint. The default behaviour is to take no * action. * * The SAX parser must continue to provide normal parsing events * after invoking this method: it should still be possible for the * application to process the document through to the end. If the * application cannot do so, then the parser should report a fatal * error even if the XML recommendation does not require it to do * so. * * Filters may use this method to report other, non-XML errors as * well. * * @param error The error message. */`",288,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FatalError","","`text /** * Receive notification of a non-recoverable error. * * There is an apparent contradiction between the documentation * for this method and the documentation for * ContentHandler.endDocument(). Until this ambiguity is resolved in * a future major release, clients should make no assumptions about * whether endDocument() will or will not be invoked when the parser * has reported a fatalError() or thrown an exception. * * This corresponds to the definition of \"fatal error\" in section * 1.2 of the W3C XML 1.0 Recommendation. For example, a parser * would use this callback to report the violation of a * well-formedness constraint. * * The application must assume that the document is unusable * after the parser has invoked this method, and should continue (if * at all) only for the sake of collecting additional error * messages: in fact, SAX parsers are free to stop reporting any * other events once this method has been invoked. * * @param error The error message. */`",288,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IgnorableWarning","","`text /** * Receive notification of a warning. * * SAX parsers will use this method to report conditions that are * not errors or fatal errors as defined by the XML * recommendation. The default behaviour is to take no action. * * The SAX parser must continue to provide normal parsing events * after invoking this method: it should still be possible for the * application to process the document through to the end. * * Filters may use this method to report other, non-XML warnings * as well. * * @param error The warning message. */`",288,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",289,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",289,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdentityCryptoService` to one of its base interfaces.",289,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",289,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GenerateKeyPair","","`void generateKeyPair (in AUTF8String algorithm, in nsIIdentityKeyGenCallback callback);`",289,null],[11,"Base64UrlEncode","","`ACString base64UrlEncode (in AUTF8String toEncode);`",289,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",290,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",290,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdentityKeyPair` to one of its base interfaces.",290,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",290,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetKeyType","","`readonly attribute AUTF8String keyType;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexRSAPublicKeyExponent","","`readonly attribute AUTF8String hexRSAPublicKeyExponent;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexRSAPublicKeyModulus","","`readonly attribute AUTF8String hexRSAPublicKeyModulus;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexDSAPrime","","`readonly attribute AUTF8String hexDSAPrime;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexDSASubPrime","","`readonly attribute AUTF8String hexDSASubPrime;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexDSAGenerator","","`readonly attribute AUTF8String hexDSAGenerator;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHexDSAPublicValue","","`readonly attribute AUTF8String hexDSAPublicValue;`",290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Sign","","`void sign (in AUTF8String aText, in nsIIdentitySignCallback callback);`",290,null],[11,"addref","","",291,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",291,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdentityKeyGenCallback` to one of its base interfaces.",291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",291,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GenerateKeyPairFinished","","`text /** * This interface provides a JavaScript callback object used to collect the * nsIIdentityServeKeyPair when the keygen operation is complete * * though there is discussion as to whether we need the nsresult, * we keep it so we can track deeper crypto errors. */`",291,null],[11,"addref","","",292,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",292,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdentitySignCallback` to one of its base interfaces.",292,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",292,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SignFinished","","`text /** * This interface provides a JavaScript callback object used to collect the * AUTF8String signature */ /** On success, base64urlSignature is the base-64-URL-encoded signature * * For RS256 signatures, XXX bug 769858 * * For DSA128 signatures, the signature is the r value concatenated with the * s value, each component padded with leading zeroes as necessary. */`",292,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",293,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",293,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `xpcIJSModuleLoader` to one of its base interfaces.",293,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",293,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LoadedModules","","`void loadedModules ([optional] out unsigned long length, [array, size_is (length), retval] out string aModules);`",293,null],[11,"LoadedComponents","","`void loadedComponents ([optional] out unsigned long length, [array, size_is (length), retval] out string aComponents);`",293,null],[11,"GetModuleImportStack","","`ACString getModuleImportStack (in AUTF8String aLocation);`",293,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetComponentLoadStack","","`ACString getComponentLoadStack (in AUTF8String aLocation);`",293,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",294,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",294,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadInfo` to one of its base interfaces.",294,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",294,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SEC_NORMAL","","`text /** * *** DEPRECATED *** * No LoadInfo created within Gecko should contain this security flag. * Please use any of the five security flags defined underneath. * We only keep this security flag to provide backwards compatibilty. */`",294,null],[18,"SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS","","`text /** * The following five flags determine the security mode and hence what kind of * security checks should be performed throughout the lifetime of the channel. * * * SEC_REQUIRE_SAME_ORIGIN_DATA_INHERITS * * SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED * * SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS * * SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL * * SEC_REQUIRE_CORS_DATA_INHERITS * * Exactly one of these flags are required to be set in order to allow * the channel to perform the correct security checks (SOP, CORS, ...) and * return the correct result principal. If none or more than one of these * flags are set AsyncOpen2 will fail. */`",294,null],[18,"SEC_REQUIRE_SAME_ORIGIN_DATA_IS_BLOCKED","","",294,null],[18,"SEC_ALLOW_CROSS_ORIGIN_DATA_INHERITS","","`text /** * Allow loads from other origins. Loads from data: will inherit the * principal. See the documentation for principalToInherit, which describes * exactly what principal is inherited. * * Commonly used by plain <img>, <video>, <link rel=stylesheet> etc. */`",294,null],[18,"SEC_ALLOW_CROSS_ORIGIN_DATA_IS_NULL","","`text /** * Allow loads from other origins. Loads from data: will be allowed, * but the resulting resource will get a null principal. * Used in blink/webkit for <iframe>s. Likely also the mode * that should be used by most Chrome code. */`",294,null],[18,"SEC_REQUIRE_CORS_DATA_INHERITS","","`text /** * Allow loads from any origin, but require CORS for cross-origin loads. * Loads from data: are allowed and the result will inherit the principal. * See the documentation for principalToInherit, which describes exactly what * principal is inherited. * * Commonly used by <img crossorigin>, <video crossorigin>, * XHR, fetch(), etc. */`",294,null],[18,"SEC_COOKIES_DEFAULT","","`text /** * Choose cookie policy. The default policy is equivalent to \"INCLUDE\" for * SEC_REQUIRE_SAME_ORIGIN_* and SEC_ALLOW_CROSS_ORIGIN_* modes, and * equivalent to \"SAME_ORIGIN\" for SEC_REQUIRE_CORS_DATA_INHERITS mode. * * This means that if you want to perform a CORS load with credentials, pass * SEC_COOKIES_INCLUDE. * * Note that these flags are still subject to the user's cookie policies. * For example, if the user is blocking 3rd party cookies, those cookies * will be blocked no matter which of these flags are set. */`",294,null],[18,"SEC_COOKIES_INCLUDE","","",294,null],[18,"SEC_COOKIES_SAME_ORIGIN","","",294,null],[18,"SEC_COOKIES_OMIT","","",294,null],[18,"SEC_FORCE_INHERIT_PRINCIPAL","","`text /** * Force inheriting of the principal. See the documentation for * principalToInherit, which describes exactly what principal is inherited. * * Setting this flag will cause GetChannelResultPrincipal to return the * principal to be inherited as the channel principal. * * This will happen independently of the scheme of the URI that the * channel is loading. * * So if the principal that gets inherited is \"http://a.com/\", and the channel * is loading the URI \"http://b.com/whatever\", GetChannelResultPrincipal * will return a principal from \"http://a.com/\". * * This flag can not be used together with SEC_SANDBOXED. If both are passed * to the LoadInfo constructor then this flag will be dropped. If you need * to know whether this flag would have been present but was dropped due to * sandboxing, check for the forceInheritPrincipalDropped flag. */`",294,null],[18,"SEC_SANDBOXED","","`text /** * Sandbox the load. The resulting resource will use a freshly created * null principal. So GetChannelResultPrincipal will always return a * null principal whenever this flag is set. * * This will happen independently of the scheme of the URI that the * channel is loading. * * This flag can not be used together with SEC_FORCE_INHERIT_PRINCIPAL. */`",294,null],[18,"SEC_ABOUT_BLANK_INHERITS","","`text /** * Inherit the Principal for about:blank. */`",294,null],[18,"SEC_ALLOW_CHROME","","`text /** * Allow access to chrome: packages that are content accessible. */`",294,null],[18,"SEC_DISALLOW_SCRIPT","","`text /** * Disallow access to javascript: uris. */`",294,null],[18,"SEC_DONT_FOLLOW_REDIRECTS","","`text /** * Don't follow redirects. Instead the redirect response is returned * as a successful response for the channel. * * Redirects not initiated by a server response, i.e. REDIRECT_INTERNAL and * REDIRECT_STS_UPGRADE, are still followed. * * Note: If this flag is set and the channel response is a redirect, then * the response body might not be available. * This can happen if the redirect was cached. */`",294,null],[18,"SEC_LOAD_ERROR_PAGE","","`text /** * Load an error page, it should be one of following : about:neterror, * about:certerror, about:blocked, or about:tabcrashed. */`",294,null],[18,"SEC_FORCE_INHERIT_PRINCIPAL_OVERRULE_OWNER","","`text /** * Force inheriting of the principal, overruling any owner that might be set * on the channel. (Please note that channel.owner is deprecated and will be * removed within Bug 1286838). See the documentation for principalToInherit, * which describes exactly what principal is inherited. * * Setting this flag will cause GetChannelResultPrincipal to return the * principal to be inherited as the channel principal. * * This will happen independently of the scheme of the URI that the * channel is loading. */`",294,null],[18,"TAINTING_BASIC","","`text /** * Constants reflecting the channel tainting. These are mainly defined here * for script. Internal C++ code should use the enum defined in LoadTainting.h. * See LoadTainting.h for documentation. */`",294,null],[18,"TAINTING_CORS","","",294,null],[18,"TAINTING_OPAQUE","","",294,null],[11,"GetLoadingPrincipal","","`text /** * This is the principal of the network request's caller/requester where * the resulting resource will be used. I.e. it is the principal which * will get access to the result of the request. (Where \"get access to\" * might simply mean \"embed\" depending on the type of resource that is * loaded). * * For example for an image, it is the principal of the document where * the image is rendered. For a stylesheet it is the principal of the * document where the stylesheet will be applied. * * So if document at http://a.com/page.html loads an image from * http://b.com/pic.jpg, then loadingPrincipal will be * http://a.com/page.html. * * For <iframe> and <frame> loads, the LoadingPrincipal is the * principal of the parent document. For top-level loads, the * LoadingPrincipal is null. For all loads except top-level loads * the LoadingPrincipal is never null. * * If the loadingPrincipal is the system principal, no security checks * will be done at all. There will be no security checks on the initial * load or any subsequent redirects. This means there will be no * nsIContentPolicy checks or any CheckLoadURI checks. Because of * this, never set the loadingPrincipal to the system principal when * the URI to be loaded is controlled by a webpage. * If the loadingPrincipal and triggeringPrincipal are both * codebase-principals, then we will always call into * nsIContentPolicies and CheckLoadURI. The call to nsIContentPolicies * and CheckLoadURI happen even if the URI to be loaded is same-origin * with the loadingPrincipal or triggeringPrincipal. */`",294,null],[11,"GetTriggeringPrincipal","","`text /** * This is the principal which caused the network load to start. I.e. * this is the principal which provided the URL to be loaded. This is * often the same as the LoadingPrincipal, but there are a few cases * where that's not true. * * For example for loads into an <iframe>, the LoadingPrincipal is always * the principal of the parent document. However the triggeringPrincipal * is the principal of the document which provided the URL that the * <iframe> is navigating to. This could be the previous document inside * the <iframe> which set document.location. Or a document elsewhere in * the frame tree which contained a <a target=\"...\"> which targetted the * <iframe>. * * If a stylesheet links to a sub-resource, like an @imported stylesheet, * or a background image, then the triggeringPrincipal is the principal * of the stylesheet, while the LoadingPrincipal is the principal of the * document being styled. * * The triggeringPrincipal is never null. * * If the triggeringPrincipal is the system principal, no security checks * will be done at all. There will be no security checks on the initial * load or any subsequent redirects. This means there will be no * nsIContentPolicy checks or any CheckLoadURI checks. Because of * this, never set the triggeringPrincipal to the system principal when * the URI to be loaded is controlled by a webpage. * If the loadingPrincipal and triggeringPrincipal are both * codebase-principals, then we will always call into * nsIContentPolicies and CheckLoadURI. The call to nsIContentPolicies * and CheckLoadURI happen even if the URI to be loaded is same-origin * with the loadingPrincipal or triggeringPrincipal. */`",294,null],[11,"GetPrincipalToInherit","","`text /** * For non-document loads the principalToInherit is always null. For * loads of type TYPE_DOCUMENT or TYPE_SUBDOCUMENT the principalToInherit * might be null. If it's non null, then this is the principal that is * inherited if a principal needs to be inherited. If the principalToInherit * is null but the inherit flag is set, then the triggeringPrincipal is * the principal that is inherited. */`",294,null],[11,"SetPrincipalToInherit","","`text /** * For non-document loads the principalToInherit is always null. For * loads of type TYPE_DOCUMENT or TYPE_SUBDOCUMENT the principalToInherit * might be null. If it's non null, then this is the principal that is * inherited if a principal needs to be inherited. If the principalToInherit * is null but the inherit flag is set, then the triggeringPrincipal is * the principal that is inherited. */`",294,null],[11,"GetLoadingDocument","","`text /** * This is the ownerDocument of the LoadingNode. Unless the LoadingNode * is a Document, in which case the LoadingDocument is the same as the * LoadingNode. * * For top-level loads, and for loads originating from workers, the * LoadingDocument is null. When the LoadingDocument is not null, the * LoadingPrincipal is set to the principal of the LoadingDocument. */`",294,null],[11,"GetSecurityFlags","","`text /** * The securityFlags of that channel. */`",294,null],[11,"GetSecurityMode","","`text /** * Allows to query only the security mode bits from above. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetIsInThirdPartyContext","","`text /** * True if this request is embedded in a context that can't be third-party * (i.e. an iframe embedded in a cross-origin parent window). If this is * false, then this request may be third-party if it's a third-party to * loadingPrincipal. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetCookiePolicy","","`text /** * See the SEC_COOKIES_* flags above. This attribute will never return * SEC_COOKIES_DEFAULT, but will instead return what the policy resolves to. * I.e. SEC_COOKIES_SAME_ORIGIN for CORS mode, and SEC_COOKIES_INCLUDE * otherwise. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetForceInheritPrincipal","","`text /** * If forceInheritPrincipal is true, the data coming from the channel should * inherit its principal, even when the data is loaded over http:// or another * protocol that would normally use a URI-based principal. * * See the documentation for principalToInherit, which describes exactly what * principal is inherited. * * This attribute will never be true when loadingSandboxed is true. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetForceInheritPrincipalOverruleOwner","","`text /** * If forceInheritPrincipalOverruleOwner is true, the data coming from the * channel should inherit the principal, even when the data is loaded over * http:// or another protocol that would normally use a URI-based principal * and even if the channel's .owner is not null. This last is the difference * between forceInheritPrincipalOverruleOwner and forceInheritPrincipal: the * latter does _not_ overrule the .owner setting. * * See the documentation for principalToInherit, which describes exactly what * principal is inherited. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetLoadingSandboxed","","`text /** * If loadingSandboxed is true, the data coming from the channel is * being loaded sandboxed, so it should have a nonce origin and * hence should use a NullPrincipal. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetAboutBlankInherits","","`text /** * If aboutBlankInherits is true, then about:blank should inherit * the principal. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetAllowChrome","","`text /** * If allowChrome is true, then use nsIScriptSecurityManager::ALLOW_CHROME * when calling CheckLoadURIWithPrincipal(). */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetDisallowScript","","`text /** * If disallowScript is true, then use nsIScriptSecurityManager::DISALLOW_SCRIPT * when calling CheckLoadURIWithPrincipal(). */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetDontFollowRedirects","","`text /** * Returns true if SEC_DONT_FOLLOW_REDIRECTS is set. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetLoadErrorPage","","`text /** * Returns true if SEC_LOAD_ERROR_PAGE is set. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetExternalContentPolicyType","","`text /** * The external contentPolicyType of the channel, used for security checks * like Mixed Content Blocking and Content Security Policy. * * Specifically, content policy types with _INTERNAL_ in their name will * never get returned from this attribute. */`",294,null],[11,"InternalContentPolicyType","","`text /** * The internal contentPolicyType of the channel, used for constructing * RequestContext values when creating a fetch event for an intercepted * channel. * * This should not be used for the purposes of security checks, since * the content policy implementations cannot be expected to deal with * _INTERNAL_ values. Please use the contentPolicyType attribute above * for that purpose. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"nscontentpolicytype"}}],[11,"GetUpgradeInsecureRequests","","`text /** * Returns true if document or any of the documents ancestors * up to the toplevel document make use of the CSP directive * 'upgrade-insecure-requests'. Used to identify upgrade * requests in e10s where the loadingDocument is not available. * * Warning: If the loadingDocument is null, then the * upgradeInsecureRequests is false. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetVerifySignedContent","","`text /** * If true, the content of the channel is queued up and checked * if it matches a content signature. Note, setting this flag * to true will negatively impact performance since the preloader * can not start until all of the content is fetched from the * netwerk. * * Only use that in combination with TYPE_DOCUMENT. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetVerifySignedContent","","`text /** * If true, the content of the channel is queued up and checked * if it matches a content signature. Note, setting this flag * to true will negatively impact performance since the preloader * can not start until all of the content is fetched from the * netwerk. * * Only use that in combination with TYPE_DOCUMENT. */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEnforceSRI","","`text /** * If true, this load will fail if it has no SRI integrity */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetEnforceSRI","","`text /** * If true, this load will fail if it has no SRI integrity */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForceAllowDataURI","","`text /** * If true, toplevel data: URI navigation is allowed */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetForceAllowDataURI","","`text /** * If true, toplevel data: URI navigation is allowed */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForceInheritPrincipalDropped","","`text /** * The SEC_FORCE_INHERIT_PRINCIPAL flag may be dropped when a load info * object is created. Specifically, it will be dropped if the SEC_SANDBOXED * flag is also present. This flag is set if SEC_FORCE_INHERIT_PRINCIPAL was * dropped. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetInnerWindowID","","`text /** * These are the window IDs of the window in which the element being * loaded lives. parentOuterWindowID is the window ID of this window's * parent. topOuterWindowID is the ID of the top-level window of the same * docShell type. * * Note that these window IDs can be 0 if the window is not * available. parentOuterWindowID and topOuterWindowID will be the same as * outerWindowID if the window has no parent. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint64_t"}}],[11,"GetOuterWindowID","","`[infallible] readonly attribute unsigned long long outerWindowID;`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint64_t"}}],[11,"GetParentOuterWindowID","","`[infallible] readonly attribute unsigned long long parentOuterWindowID;`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint64_t"}}],[11,"GetTopOuterWindowID","","`[infallible] readonly attribute unsigned long long topOuterWindowID;`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint64_t"}}],[11,"GetFrameOuterWindowID","","`text /** * Only when the element being loaded is <frame src=\"foo.html\"> * (or, more generally, if the element QIs to nsIFrameLoaderOwner), * the frameOuterWindowID is the outer window containing the * foo.html document. * * Note: For other cases, frameOuterWindowID is 0. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"uint64_t"}}],[11,"ResetPrincipalToInheritToNullPrincipal","","`text /** * Resets the PrincipalToInherit to a freshly created NullPrincipal * which inherits the origin attributes from the loadInfo. * * WARNING: Please only use that function if you know exactly what * you are doing!!! */`",294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEnforceSecurity","","`text /** * Whenever a channel is openend by asyncOpen2() [or also open2()], * lets set this flag so that redirects of such channels are also * openend using asyncOpen2() [open2()]. * * Please note, once the flag is set to true it must remain true * throughout the lifetime of the channel. Trying to set it * to anything else than true will be discareded. * */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetEnforceSecurity","","`text /** * Whenever a channel is openend by asyncOpen2() [or also open2()], * lets set this flag so that redirects of such channels are also * openend using asyncOpen2() [open2()]. * * Please note, once the flag is set to true it must remain true * throughout the lifetime of the channel. Trying to set it * to anything else than true will be discareded. * */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInitialSecurityCheckDone","","`text /** * Whenever a channel is evaluated by the ContentSecurityManager * the first time, we set this flag to true to indicate that * subsequent calls of AsyncOpen2() do not have to enforce all * security checks again. E.g., after a redirect there is no * need to set up CORS again. We need this separate flag * because the redirectChain might also contain internal * redirects which might pollute the redirectChain so we can't * rely on the size of the redirectChain-array to query whether * a channel got redirected or not. * * Please note, once the flag is set to true it must remain true * throughout the lifetime of the channel. Trying to set it * to anything else than true will be discarded. * */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetInitialSecurityCheckDone","","`text /** * Whenever a channel is evaluated by the ContentSecurityManager * the first time, we set this flag to true to indicate that * subsequent calls of AsyncOpen2() do not have to enforce all * security checks again. E.g., after a redirect there is no * need to set up CORS again. We need this separate flag * because the redirectChain might also contain internal * redirects which might pollute the redirectChain so we can't * rely on the size of the redirectChain-array to query whether * a channel got redirected or not. * * Please note, once the flag is set to true it must remain true * throughout the lifetime of the channel. Trying to set it * to anything else than true will be discarded. * */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLoadTriggeredFromExternal","","`text /** * Returns true if the load was triggered from an external application * (e.g. Thunderbird). Please note that this flag will only ever be true * if the load is of TYPE_DOCUMENT. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetLoadTriggeredFromExternal","","`text /** * Returns true if the load was triggered from an external application * (e.g. Thunderbird). Please note that this flag will only ever be true * if the load is of TYPE_DOCUMENT. */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetServiceWorkerTaintingSynthesized","","`text /** * True if the tainting has been set by the service worker. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"AppendRedirectHistoryEntry","","`text /** * Whenever a channel gets redirected, append the redirect history entry of * the channel which contains principal referrer and remote address [before * the channels got redirected] to the loadinfo, so that at every point this * array provides us information about all the redirects this channel went * through. * @param entry, the nsIRedirectHistoryEntry before the channel * got redirected. * @param aIsInternalRedirect should be true if the channel is going * through an internal redirect, otherwise false. */`",294,null],[11,"GetForcePreflight","","`text /** * Returns value set through setCorsPreflightInfo. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsPreflight","","`text /** * A C++ friendly getter for the forcePreflight flag. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetForceHSTSPriming","","`text /** * When this request would be mixed-content and we do not have an * entry in the HSTS cache, we send an HSTS priming request to * determine if it is ok to upgrade the request to HTTPS. */ /** * True if this is a mixed-content load and HSTS priming request will be sent. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetMixedContentWouldBlock","","`text /** * Carry the decision whether this load would be blocked by mixed content so * that if HSTS priming fails, the correct decision can be made. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsHSTSPriming","","`text /** * True if this load is an HSTS priming request. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetIsHSTSPriming","","`text /** * True if this load is an HSTS priming request. */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsHSTSPrimingUpgrade","","`text /** * True if this load was upgraded from HSTS priming */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetIsHSTSPrimingUpgrade","","`text /** * True if this load was upgraded from HSTS priming */`",294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTainting","","`text /** * Determine the associated channel's current tainting. Note, this can * change due to a service worker intercept, so it should be checked after * OnStartRequest() fires. */`",294,null],[11,"MaybeIncreaseTainting","","`text /** * Note a new tainting level and possibly increase the current tainting * to match. If the tainting level is already greater than the given * value, then there is no effect. It is not possible to reduce the tainting * level on an existing channel/loadinfo. */`",294,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsTopLevelLoad","","`text /** * Various helper code to provide more convenient C++ access to the tainting * attribute and maybeIncreaseTainting(). */ /** * Returns true if this load is for top level document. * Note that the load for a sub-frame's document will return false here. */`",294,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetResultPrincipalURI","","`text /** * If this is non-null, this property represents two things: (1) the * URI to be used for the principal if the channel with this loadinfo * gets a principal based on URI and (2) the URI to use for a document * created from the channel with this loadinfo. */`",294,null],[11,"SetResultPrincipalURI","","`text /** * If this is non-null, this property represents two things: (1) the * URI to be used for the principal if the channel with this loadinfo * gets a principal based on URI and (2) the URI to use for a document * created from the channel with this loadinfo. */`",294,null],[11,"GetSandboxedLoadingPrincipal","","`text /** * Returns the null principal of the resulting resource if the SEC_SANDBOXED * flag is set. Otherwise returns null. This is used by * GetChannelResultPrincipal() to ensure that the same null principal object * is returned every time. */`",294,null],[11,"addref","","",295,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",295,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEffectiveTLDService` to one of its base interfaces.",295,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",295,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPublicSuffix","","`text /** * Returns the public suffix of a URI. A public suffix is the highest-level domain * under which individual domains may be registered; it may therefore contain one * or more dots. For example, the public suffix for \"www.bbc.co.uk\" is \"co.uk\", * because the .uk TLD does not allow the registration of domains at the * second level (\"bbc.uk\" is forbidden). * * The public suffix will be returned encoded in ASCII/ACE and will be normalized * according to RFC 3454, i.e. the same encoding returned by nsIURI::GetAsciiHost(). * If consumers wish to compare the result of this method against the host from * another nsIURI, the host should be obtained using nsIURI::GetAsciiHost(). * In the case of nested URIs, the innermost URI will be used. * * @param aURI The URI to be analyzed * * @returns the public suffix * * @throws NS_ERROR_UNEXPECTED * or other error returned by nsIIDNService::normalize when * the hostname contains characters disallowed in URIs * @throws NS_ERROR_HOST_IS_IP_ADDRESS * if the host is a numeric IPv4 or IPv6 address (as determined by * the success of a call to PR_StringToNetAddr()). */`",295,null],[11,"GetBaseDomain","","`text /** * Returns the base domain of a URI; that is, the public suffix with a given * number of additional domain name parts. For example, the result of this method * for \"www.bbc.co.uk\", depending on the value of aAdditionalParts parameter, will * be: * * 0 (default) -> bbc.co.uk * 1 -> www.bbc.co.uk * * Similarly, the public suffix for \"www.developer.mozilla.org\" is \"org\", and the base * domain will be: * * 0 (default) -> mozilla.org * 1 -> developer.mozilla.org * 2 -> www.developer.mozilla.org * * The base domain will be returned encoded in ASCII/ACE and will be normalized * according to RFC 3454, i.e. the same encoding returned by nsIURI::GetAsciiHost(). * If consumers wish to compare the result of this method against the host from * another nsIURI, the host should be obtained using nsIURI::GetAsciiHost(). * In the case of nested URIs, the innermost URI will be used. * * @param aURI The URI to be analyzed * @param aAdditionalParts Number of domain name parts to be * returned in addition to the public suffix * * @returns the base domain (public suffix plus the requested number of additional parts) * * @throws NS_ERROR_UNEXPECTED * or other error returned by nsIIDNService::normalize when * the hostname contains characters disallowed in URIs * @throws NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS * when there are insufficient subdomain levels in the hostname to satisfy the * requested aAdditionalParts value. * @throws NS_ERROR_HOST_IS_IP_ADDRESS * if aHost is a numeric IPv4 or IPv6 address (as determined by * the success of a call to PR_StringToNetAddr()). * * @see getPublicSuffix() */`",295,null],[11,"GetPublicSuffixFromHost","","`text /** * NOTE: It is strongly recommended to use getPublicSuffix() above if a suitable * nsIURI is available. Only use this method if this is not the case. * * Returns the public suffix of a host string. Otherwise identical to getPublicSuffix(). * * @param aHost The host to be analyzed. Any additional parts (e.g. scheme, * port, or path) will cause this method to throw. ASCII/ACE and * UTF8 encodings are acceptable as input; normalization will * be performed as specified in getBaseDomain(). * * @see getPublicSuffix() */`",295,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBaseDomainFromHost","","`text /** * NOTE: It is strongly recommended to use getBaseDomain() above if a suitable * nsIURI is available. Only use this method if this is not the case. * * Returns the base domain of a host string. Otherwise identical to getBaseDomain(). * * @param aHost The host to be analyzed. Any additional parts (e.g. scheme, * port, or path) will cause this method to throw. ASCII/ACE and * UTF8 encodings are acceptable as input; normalization will * be performed as specified in getBaseDomain(). * * @see getBaseDomain() */`",295,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetNextSubDomain","","`text /** * Returns the parent sub-domain of a host string. If the host is a base * domain, it will throw NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS. * * For example: \"player.bbc.co.uk\" would return \"bbc.co.uk\" and * \"bbc.co.uk\" would throw NS_ERROR_INSUFFICIENT_DOMAIN_LEVELS. * * @param aHost The host to be analyzed. Any additional parts (e.g. scheme, * port, or path) will cause this method to throw. ASCII/ACE and * UTF8 encodings are acceptable as input; normalization will * be performed as specified in getBaseDomain(). */`",295,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",296,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",296,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebProgress` to one of its base interfaces.",296,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",296,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NOTIFY_STATE_REQUEST","","`text /** * The following flags may be combined to form the aNotifyMask parameter for * the addProgressListener method. They limit the set of events that are * delivered to an nsIWebProgressListener instance. */ /** * These flags indicate the state transistions to observe, corresponding to * nsIWebProgressListener::onStateChange. * * NOTIFY_STATE_REQUEST * Only receive the onStateChange event if the aStateFlags parameter * includes nsIWebProgressListener::STATE_IS_REQUEST. * * NOTIFY_STATE_DOCUMENT * Only receive the onStateChange event if the aStateFlags parameter * includes nsIWebProgressListener::STATE_IS_DOCUMENT. * * NOTIFY_STATE_NETWORK * Only receive the onStateChange event if the aStateFlags parameter * includes nsIWebProgressListener::STATE_IS_NETWORK. * * NOTIFY_STATE_WINDOW * Only receive the onStateChange event if the aStateFlags parameter * includes nsIWebProgressListener::STATE_IS_WINDOW. * * NOTIFY_STATE_ALL * Receive all onStateChange events. */`",296,null],[18,"NOTIFY_STATE_DOCUMENT","","",296,null],[18,"NOTIFY_STATE_NETWORK","","",296,null],[18,"NOTIFY_STATE_WINDOW","","",296,null],[18,"NOTIFY_STATE_ALL","","",296,null],[18,"NOTIFY_PROGRESS","","`text /** * These flags indicate the other events to observe, corresponding to the * other four methods defined on nsIWebProgressListener. * * NOTIFY_PROGRESS * Receive onProgressChange events. * * NOTIFY_STATUS * Receive onStatusChange events. * * NOTIFY_SECURITY * Receive onSecurityChange events. * * NOTIFY_LOCATION * Receive onLocationChange events. * * NOTIFY_REFRESH * Receive onRefreshAttempted events. * This is defined on nsIWebProgressListener2. */`",296,null],[18,"NOTIFY_STATUS","","",296,null],[18,"NOTIFY_SECURITY","","",296,null],[18,"NOTIFY_LOCATION","","",296,null],[18,"NOTIFY_REFRESH","","",296,null],[18,"NOTIFY_ALL","","`text /** * This flag enables all notifications. */`",296,null],[11,"AddProgressListener","","`text /** * Registers a listener to receive web progress events. * * @param aListener * The listener interface to be called when a progress event occurs. * This object must also implement nsISupportsWeakReference. * @param aNotifyMask * The types of notifications to receive. * * @throw NS_ERROR_INVALID_ARG * Indicates that aListener was either null or that it does not * support weak references. * @throw NS_ERROR_FAILURE * Indicates that aListener was already registered. */`",296,null],[11,"RemoveProgressListener","","`text /** * Removes a previously registered listener of progress events. * * @param aListener * The listener interface previously registered with a call to * addProgressListener. * * @throw NS_ERROR_FAILURE * Indicates that aListener was not registered. */`",296,null],[11,"GetDOMWindow","","`text /** * The DOM window associated with this nsIWebProgress instance. * * @throw NS_ERROR_FAILURE * Indicates that there is no associated DOM window. */`",296,null],[11,"GetDOMWindowID","","`readonly attribute uint64_t DOMWindowID;`",296,null],[11,"GetInnerDOMWindowID","","`readonly attribute uint64_t innerDOMWindowID;`",296,null],[11,"GetIsTopLevel","","`text /** * Indicates whether DOMWindow.top == DOMWindow. */`",296,null],[11,"GetIsLoadingDocument","","`text /** * Indicates whether or not a document is currently being loaded * in the context of this nsIWebProgress instance. */`",296,null],[11,"GetLoadType","","`text /** * Contains a load type as specified by the load* constants in * nsIDocShellLoadInfo.idl. */`",296,null],[11,"GetTarget","","`text /** * Main thread event target to which progress updates should be * dispatched. This typically will be a SchedulerEventTarget * corresponding to the tab requesting updates. */`",296,null],[11,"SetTarget","","`text /** * Main thread event target to which progress updates should be * dispatched. This typically will be a SchedulerEventTarget * corresponding to the tab requesting updates. */`",296,null],[11,"addref","","",297,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",297,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupports` to one of its base interfaces.",297,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"QueryInterface","","`void QueryInterface (in nsIIDRef uuid, [iid_is (uuid), retval] out nsQIResult result);`",297,null],[11,"AddRef","","`[noscript,notxpcom] nsrefcnt AddRef ();`",297,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"Release","","`[noscript,notxpcom] nsrefcnt Release ();`",297,{"inputs":[{"name":"self"}],"output":{"name":"nsrefcnt"}}],[11,"addref","","",298,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",298,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeAppSupport` to one of its base interfaces.",298,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",298,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Start","","`boolean start ();`",298,null],[11,"Enable","","`void enable ();`",298,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Stop","","`boolean stop ();`",298,null],[11,"Quit","","`void quit ();`",298,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnLastWindowClosing","","`void onLastWindowClosing ();`",298,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ReOpen","","`void ReOpen ();`",298,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",299,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",299,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIExtensionProcessScript` to one of its base interfaces.",299,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",299,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PreloadContentScript","","`void preloadContentScript (in nsISupports contentScript);`",299,null],[11,"LoadContentScript","","`void loadContentScript (in nsISupports contentScript, in mozIDOMWindowProxy window);`",299,null],[11,"InitExtensionDocument","","`void initExtensionDocument (in nsISupports extension, in nsIDOMDocument doc);`",299,null],[11,"addref","","",300,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",300,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPICommandUpdater` to one of its base interfaces.",300,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",300,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`void init (in mozIDOMWindowProxy aWindow);`",300,null],[11,"CommandStatusChanged","","`void commandStatusChanged (in string aCommandName);`",300,null],[11,"addref","","",301,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",301,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdleService` to one of its base interfaces.",301,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",301,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIdleTime","","`text /** * The amount of time in milliseconds that has passed * since the last user activity. * * If we do not have a valid idle time to report, 0 is returned * (this can happen if the user never interacted with the browser * at all, and if we are also unable to poll for idle time manually). */`",301,null],[11,"AddIdleObserver","","`text /** * Add an observer to be notified when the user idles for some period of * time, and when they get back from that. * * @param observer the observer to be notified * @param time the amount of time in seconds the user should be idle before * the observer should be notified. * * @note * The subject of the notification the observer will get is always the * nsIIdleService itself. * When the user goes idle, the observer topic is \"idle\" and when he gets * back, the observer topic is \"active\". * The data param for the notification contains the current user idle time. * * @note * You can add the same observer twice. * @note * Most implementations need to poll the OS for idle info themselves, * meaning your notifications could arrive with a delay up to the length * of the polling interval in that implementation. * Current implementations use a delay of 5 seconds. */`",301,null],[11,"RemoveIdleObserver","","`text /** * Remove an observer registered with addIdleObserver. * @param observer the observer that needs to be removed. * @param time the amount of time they were listening for. * @note * Removing an observer will remove it once, for the idle time you specify. * If you have added an observer multiple times, you will need to remove it * just as many times. */`",301,null],[11,"addref","","",302,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",302,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIShellService` to one of its base interfaces.",302,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",302,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"BACKGROUND_TILE","","`text /** * Flags for positioning/sizing of the Desktop Background image. */`",302,null],[18,"BACKGROUND_STRETCH","","",302,null],[18,"BACKGROUND_CENTER","","",302,null],[18,"BACKGROUND_FILL","","",302,null],[18,"BACKGROUND_FIT","","",302,null],[18,"APPLICATION_MAIL","","`text /** * Constants identifying applications that can be opened with * openApplication. */`",302,null],[18,"APPLICATION_NEWS","","",302,null],[11,"IsDefaultBrowser","","`text /** * Determines whether or not Firefox is the \"Default Browser.\" * This is simply whether or not Firefox is registered to handle * http links. * * @param aStartupCheck true if this is the check being performed * by the first browser window at startup, * false otherwise. * @param aForAllTypes true if the check should be made for HTTP and HTML. * false if the check should be made for HTTP only. * This parameter may be ignored on some platforms. */`",302,null],[11,"SetDefaultBrowser","","`text /** * Registers Firefox as the \"Default Browser.\" * * @param aClaimAllTypes Register Firefox as the handler for * additional protocols (ftp, chrome etc) * and web documents (.html, .xhtml etc). * @param aForAllUsers Whether or not Firefox should attempt * to become the default browser for all * users on a multi-user system. */`",302,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetDesktopBackground","","`text /** * Sets the desktop background image using either the HTML <IMG> * element supplied or the background image of the element supplied. * * @param aImageElement Either a HTML <IMG> element or an element with * a background image from which to source the * background image. * @param aPosition How to place the image on the desktop * @param aImageName The image name. Equivalent to the leaf name of the * location.href. */`",302,null],[11,"OpenApplication","","`text /** * Opens the application specified. If more than one application of the * given type is available on the system, the default or \"preferred\" * application is used. */`",302,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetDesktopBackgroundColor","","`text /** * The desktop background color, visible when no background image is * used, or if the background image is centered and does not fill the * entire screen. A rgb value, where (r << 16 | g << 8 | b) */`",302,null],[11,"SetDesktopBackgroundColor","","`text /** * The desktop background color, visible when no background image is * used, or if the background image is centered and does not fill the * entire screen. A rgb value, where (r << 16 | g << 8 | b) */`",302,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"OpenApplicationWithURI","","`text /** * Opens an application with a specific URI to load. * @param application * The application file (or bundle directory, on OS X) * @param uri * The uri to be loaded by the application */`",302,null],[11,"GetDefaultFeedReader","","`text /** * The default system handler for web feeds */`",302,null],[11,"addref","","",303,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",303,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIPlacesPendingOperation` to one of its base interfaces.",303,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",303,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Cancel","","`text /** * Cancels a pending operation, if possible. This will only fail if you try * to cancel more than once. */`",303,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",304,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",304,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScrollable` to one of its base interfaces.",304,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",304,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ScrollOrientation_X","","`text /** * Constants declaring the two scroll orientations a scrollbar can be in. * ScrollOrientation_X - Horizontal scrolling. When passing this * in to a method you are requesting or setting data for the * horizontal scrollbar. * ScrollOrientation_Y - Vertical scrolling. When passing this * in to a method you are requesting or setting data for the * vertical scrollbar. */`",304,null],[18,"ScrollOrientation_Y","","",304,null],[18,"Scrollbar_Auto","","`text /** * Constants declaring the states of the scrollbars. * ScrollPref_Auto - bars visible only when needed. * ScrollPref_Never - bars never visible, even when scrolling still possible. * ScrollPref_Always - bars always visible, even when scrolling is not possible */`",304,null],[18,"Scrollbar_Never","","",304,null],[18,"Scrollbar_Always","","",304,null],[11,"GetDefaultScrollbarPreferences","","`text /** * Get or set the default scrollbar state for all documents in * this shell. */`",304,null],[11,"SetDefaultScrollbarPreferences","","`void setDefaultScrollbarPreferences (in long scrollOrientation, in long scrollbarPref);`",304,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetScrollbarVisibility","","`text /** * Get information about whether the vertical and horizontal scrollbars are * currently visible. If you are only interested in one of the visibility * settings pass nullptr in for the one you aren't interested in. */`",304,null],[11,"addref","","",305,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",305,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `NetDashboardCallback` to one of its base interfaces.",305,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",305,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",306,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",306,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDashboard` to one of its base interfaces.",306,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",306,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RequestSockets","","`void requestSockets (in NetDashboardCallback cb);`",306,null],[11,"RequestHttpConnections","","`void requestHttpConnections (in NetDashboardCallback cb);`",306,null],[11,"RequestWebsocketConnections","","`void requestWebsocketConnections (in NetDashboardCallback cb);`",306,null],[11,"RequestDNSInfo","","`void requestDNSInfo (in NetDashboardCallback cb);`",306,null],[11,"RequestConnection","","`void requestConnection (in ACString aHost, in unsigned long aPort, in string aProtocol, in unsigned long aTimeout, in NetDashboardCallback cb);`",306,null],[11,"GetEnableLogging","","`attribute boolean enableLogging;`",306,null],[11,"SetEnableLogging","","`attribute boolean enableLogging;`",306,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RequestDNSLookup","","`void requestDNSLookup (in ACString aHost, in NetDashboardCallback cb);`",306,null],[11,"RequestRcwnStats","","`text /** * Asyncly returns stats regarding the \"Race Cache With Network\" feature. */`",306,null],[11,"GetLogPath","","`AUTF8String getLogPath ();`",306,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",307,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",307,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFInferDataSource` to one of its base interfaces.",307,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",307,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfdatasource"}}],[11,"GetBaseDataSource","","`text /** * * The wrapped datasource. * * The InferDataSource contains all arcs from the wrapped * datasource plus those infered by the vocabulary implemented * by the InferDataSource. */`",307,null],[11,"SetBaseDataSource","","`text /** * * The wrapped datasource. * * The InferDataSource contains all arcs from the wrapped * datasource plus those infered by the vocabulary implemented * by the InferDataSource. */`",307,null],[11,"addref","","",308,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",308,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandParams` to one of its base interfaces.",308,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",308,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eNoType","","",308,null],[18,"eBooleanType","","",308,null],[18,"eLongType","","",308,null],[18,"eDoubleType","","",308,null],[18,"eWStringType","","",308,null],[18,"eISupportsType","","",308,null],[18,"eStringType","","",308,null],[11,"GetValueType","","`short getValueType (in string name);`",308,null],[11,"GetBooleanValue","","`boolean getBooleanValue (in string name);`",308,null],[11,"GetLongValue","","`long getLongValue (in string name);`",308,null],[11,"GetDoubleValue","","`double getDoubleValue (in string name);`",308,null],[11,"GetStringValue","","`AString getStringValue (in string name);`",308,null],[11,"GetCStringValue","","`string getCStringValue (in string name);`",308,null],[11,"GetISupportsValue","","`nsISupports getISupportsValue (in string name);`",308,null],[11,"SetBooleanValue","","`void setBooleanValue (in string name, in boolean value);`",308,null],[11,"SetLongValue","","`void setLongValue (in string name, in long value);`",308,null],[11,"SetDoubleValue","","`void setDoubleValue (in string name, in double value);`",308,null],[11,"SetStringValue","","`void setStringValue (in string name, in AString value);`",308,null],[11,"SetCStringValue","","`void setCStringValue (in string name, in string value);`",308,null],[11,"SetISupportsValue","","`void setISupportsValue (in string name, in nsISupports value);`",308,null],[11,"RemoveValue","","`void removeValue (in string name);`",308,null],[11,"addref","","",309,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",309,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheStorageService` to one of its base interfaces.",309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",309,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PURGE_DISK_DATA_ONLY","","`text /** * Purge only data of disk backed entries. Metadata are left for * performance purposes. */`",309,null],[18,"PURGE_DISK_ALL","","`text /** * Purge whole disk backed entries from memory. Disk files will * be left unattended. */`",309,null],[18,"PURGE_EVERYTHING","","`text /** * Purge all entries we keep in memory, including memory-storage * entries. This may be dangerous to use. */`",309,null],[11,"MemoryCacheStorage","","`text /** * Get storage where entries will only remain in memory, never written * to the disk. * * NOTE: Any existing disk entry for [URL|id-extension] will be doomed * prior opening an entry using this memory-only storage. Result of * AsyncOpenURI will be a new and empty memory-only entry. Using * OPEN_READONLY open flag has no effect on this behavior. * * @param aLoadContextInfo * Information about the loading context, this focuses the storage JAR and * respects separate storage for private browsing. */`",309,null],[11,"DiskCacheStorage","","`text /** * Get storage where entries will be written to disk when not forbidden by * response headers. * * @param aLookupAppCache * When set true (for top level document loading channels) app cache will * be first to check on to find entries in. */`",309,null],[11,"PinningCacheStorage","","`text /** * Get storage where entries will be written to disk and marked as pinned. * These pinned entries are immune to over limit eviction and call of clear() * on this service. */`",309,null],[11,"AppCacheStorage","","`text /** * Get storage for a specified application cache obtained using some different * mechanism. * * @param aLoadContextInfo * Mandatory reference to a load context information. * @param aApplicationCache * Optional reference to an existing appcache. When left null, this will * work with offline cache as a whole. */`",309,null],[11,"SynthesizedCacheStorage","","`text /** * Get storage for synthesized cache entries that we currently use for ServiceWorker interception in non-e10s mode. * * This cache storage has no limits on file size to allow the ServiceWorker to intercept large files. */`",309,null],[11,"Clear","","`text /** * Evict the whole cache. */`",309,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PurgeFromMemory","","`text /** * Purges data we keep warmed in memory. Use for tests and for * saving memory. */`",309,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIoTarget","","`text /** * I/O thread target to use for any operations on disk */`",309,null],[11,"AsyncGetDiskConsumption","","`text /** * Asynchronously determine how many bytes of the disk space the cache takes. * @see nsICacheStorageConsumptionObserver * @param aObserver * A mandatory (weak referred) observer. Documented at * nsICacheStorageConsumptionObserver. * NOTE: the observer MUST implement nsISupportsWeakReference. */`",309,null],[11,"AsyncVisitAllStorages","","`text /** * Asynchronously visits all storages of the disk cache and memory cache. * @see nsICacheStorageVisitor * @param aVisitor * A visitor callback. * @param aVisitEntries * A boolean indicates whether visits entries. */`",309,null],[11,"addref","","",310,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",310,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheStorageConsumptionObserver` to one of its base interfaces.",310,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",310,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnNetworkCacheDiskConsumption","","`text /** * Callback invoked to answer asyncGetDiskConsumption call. Always triggered * on the main thread. * NOTE: implementers must also implement nsISupportsWeakReference. * * @param aDiskSize * The disk consumption in bytes. */`",310,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",311,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",311,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIPlacesDatabase` to one of its base interfaces.",311,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",311,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDBConnection","","`text /** * The database connection used by Places. */`",311,null],[11,"AsyncExecuteLegacyQueries","","`text /** * Asynchronously executes the statement created from queries. * * @see nsINavHistoryService::executeQueries * @note THIS IS A TEMPORARY API. Don't rely on it, since it will be replaced * in future versions by a real async querying API. * @note Results obtained from this method differ from results obtained from * executeQueries, because there is additional filtering and sorting * done by the latter. Thus you should use executeQueries, unless you * are absolutely sure that the returned results are fine for * your use-case. */`",311,null],[11,"GetShutdownClient","","`text /** * Hook for clients who need to perform actions during/by the end of * the shutdown of the database. * May be null if it's too late to get one. */`",311,null],[11,"GetConnectionShutdownClient","","`text /** * Hook for internal clients who need to perform actions just before the * connection gets closed. * May be null if it's too late to get one. */`",311,null],[11,"addref","","",312,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",312,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorSpellCheck` to one of its base interfaces.",312,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",312,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CanSpellCheck","","`text /** * Returns true if we can enable spellchecking. If there are no available * dictionaries, this will return false. */`",312,null],[11,"InitSpellChecker","","`text /** * Turns on the spell checker for the given editor. enableSelectionChecking * set means that we only want to check the current selection in the editor, * (this controls the behavior of GetNextMisspelledWord). For spellchecking * clients with no modal UI (such as inline spellcheckers), this flag doesn't * matter. Initialization is asynchronous and is not complete until the given * callback is called. */`",312,null],[11,"GetNextMisspelledWord","","`text /** * When interactively spell checking the document, this will return the * value of the next word that is misspelled. This also computes the * suggestions which you can get by calling GetSuggestedWord. * * @see nsISpellChecker::GetNextMisspelledWord */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSuggestedWord","","`text /** * Used to get suggestions for the last word that was checked and found to * be misspelled. The first call will give you the first (best) suggestion. * Subsequent calls will iterate through all the suggestions, allowing you * to build a list. When there are no more suggestions, an empty string * (not a null pointer) will be returned. * * @see nsISpellChecker::GetSuggestedWord */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CheckCurrentWord","","`text /** * Check a given word. In spite of the name, this function checks the word * you give it, returning true if the word is misspelled. If the word is * misspelled, it will compute the suggestions which you can get from * GetSuggestedWord(). * * @see nsISpellChecker::CheckCurrentWord */`",312,null],[11,"ReplaceWord","","`text /** * Use when modally checking the document to replace a word. * * @see nsISpellChecker::CheckCurrentWord */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"IgnoreWordAllOccurrences","","`text /** * @see nsISpellChecker::IgnoreAll */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPersonalDictionary","","`text /** * Fills an internal list of words added to the personal dictionary. These * words can be retrieved using GetPersonalDictionaryWord() * * @see nsISpellChecker::GetPersonalDictionary * @see GetPersonalDictionaryWord */`",312,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPersonalDictionaryWord","","`text /** * Used after you call GetPersonalDictionary() to iterate through all the * words added to the personal dictionary. Will return the empty string when * there are no more words. */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddWordToDictionary","","`text /** * Adds a word to the current personal dictionary. * * @see nsISpellChecker::AddWordToDictionary */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveWordFromDictionary","","`text /** * Removes a word from the current personal dictionary. * * @see nsISpellChecker::RemoveWordFromPersonalDictionary */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDictionaryList","","`text /** * Retrieves a list of the currently available dictionaries. The strings will * typically be language IDs, like \"en-US\". * * @see mozISpellCheckingEngine::GetDictionaryList */`",312,null],[11,"GetCurrentDictionary","","`text /** * @see nsISpellChecker::GetCurrentDictionary */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCurrentDictionary","","`text /** * @see nsISpellChecker::SetCurrentDictionary */`",312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UninitSpellChecker","","`text /** * Call this to free up the spell checking object. It will also save the * current selected language as the default for future use. * * If you have called CanSpellCheck but not InitSpellChecker, you can still * call this function to clear the cached spell check object, and no * preference saving will happen. */`",312,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetFilter","","`text /** * Used to filter the content (for example, to skip blockquotes in email from * spellchecking. Call this before calling InitSpellChecker; calling it * after initialization will have no effect. * * @see nsITextServicesDocument::setFilter */`",312,null],[11,"CheckCurrentWordNoSuggest","","`text /** * Like CheckCurrentWord, checks the word you give it, returning true if it's * misspelled. This is faster than CheckCurrentWord because it does not * compute any suggestions. * * Watch out: this does not clear any suggestions left over from previous * calls to CheckCurrentWord, so there may be suggestions, but they will be * invalid. */`",312,null],[11,"UpdateCurrentDictionary","","`text /** * Update the dictionary in use to be sure it corresponds to what the editor * needs. The update is asynchronous and is not complete until the given * callback is called. */`",312,null],[11,"addref","","",313,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",313,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorSpellCheckCallback` to one of its base interfaces.",313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",313,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EditorSpellCheckDone","","`void editorSpellCheckDone ();`",313,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",314,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",314,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentHandler` to one of its base interfaces.",314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",314,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleContent","","`text /** * Tells the content handler to take over handling the content. If this * function succeeds, the URI Loader will leave this request alone, ignoring * progress notifications. Failure of this method will cause the request to be * cancelled, unless the error code is NS_ERROR_WONT_HANDLE_CONTENT (see * below). * * @param aWindowContext * Window context, used to get things like the current nsIDOMWindow * for this request. May be null. * @param aContentType * The content type of aRequest * @param aRequest * A request whose content type is already known. * * @throw NS_ERROR_WONT_HANDLE_CONTENT Indicates that this handler does not * want to handle this content. A different way for handling this * content should be tried. */`",314,null],[11,"addref","","",315,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",315,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITimerCallback` to one of its base interfaces.",315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",315,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Notify","","`text /** * @param aTimer the timer which has expired */`",315,null],[11,"addref","","",316,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",316,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITimer` to one of its base interfaces.",316,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",316,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_ONE_SHOT","","`text /** * nsITimer instances must be initialized by calling one of the \"init\" methods * documented below. You may also re-initialize (using one of the init() * methods) an existing instance to avoid the overhead of destroying and * creating a timer. It is not necessary to cancel the timer in that case. * * By default a timer will fire on the thread that created it. Set the .target * attribute to fire on a different thread. Once you have set a timer's .target * and called one of its init functions, any further interactions with the timer * (calling cancel(), changing member fields, etc) should only be done by the * target thread, or races may occur with bad results like timers firing after * they've been canceled, and/or not firing after re-initiatization. */ /** * Type of a timer that fires once only. */`",316,null],[18,"TYPE_REPEATING_SLACK","","`text /** * After firing, a TYPE_REPEATING_SLACK timer is stopped and not restarted * until its callback completes. Specified timer period will be at least * the time between when processing for last firing the callback completes * and when the next firing occurs. * * This is the preferable repeating type for most situations. */`",316,null],[18,"TYPE_REPEATING_PRECISE","","`text /** * TYPE_REPEATING_PRECISE is just a synonym for * TYPE_REPEATING_PRECISE_CAN_SKIP. They used to be distinct, but the old * TYPE_REPEATING_PRECISE kind was similar to TYPE_REPEATING_PRECISE_CAN_SKIP * while also being less useful. So the distinction was removed. */`",316,null],[18,"TYPE_REPEATING_PRECISE_CAN_SKIP","","`text /** * A TYPE_REPEATING_PRECISE_CAN_SKIP repeating timer aims to have constant * period between firings. The processing time for each timer callback * should not influence the timer period. However this timer type * guarantees that it will not queue up new events to fire the callback * until the previous callback event finishes firing. If the callback * takes a long time, then the next callback will be scheduled immediately * afterward, but only once. This is the only non-slack timer available. */`",316,null],[18,"TYPE_REPEATING_SLACK_LOW_PRIORITY","","`text /** * Same as TYPE_REPEATING_SLACK with the exception that idle events * won't yield to timers with this type. Use this when you want an * idle callback to be scheduled to run even though this timer is * about to fire. */`",316,null],[18,"TYPE_ONE_SHOT_LOW_PRIORITY","","`text /** * Same as TYPE_ONE_SHOT with the exception that idle events won't * yield to timers with this type. Use this when you want an idle * callback to be scheduled to run even though this timer is about * to fire. */`",316,null],[11,"Init","","`text /** * Initialize a timer that will fire after the said delay. * A user must keep a reference to this timer till it is * is no longer needed or has been cancelled. * * @param aObserver the callback object that observes the * ``timer-callback'' topic with the subject being * the timer itself when the timer fires: * * observe(nsISupports aSubject, => nsITimer * string aTopic, => ``timer-callback'' * wstring data => null * * @param aDelay delay in milliseconds for timer to fire * @param aType timer type per TYPE* consts defined above */`",316,null],[11,"InitWithCallback","","`text /** * Initialize a timer to fire after the given millisecond interval. * This version takes a callback object. * * @param aFunc nsITimerCallback interface to call when timer expires * @param aDelay The millisecond interval * @param aType Timer type per TYPE* consts defined above */`",316,null],[11,"Cancel","","`text /** * Cancel the timer. This method works on all types, not just on repeating * timers -- you might want to cancel a TYPE_ONE_SHOT timer, and even reuse * it by re-initializing it (to avoid object destruction and creation costs * by conserving one timer instance). */`",316,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDelay","","`text /** * The millisecond delay of the timeout. * * NOTE: Re-setting the delay on a one-shot timer that has already fired * doesn't restart the timer. Call one of the init() methods to restart * a one-shot timer. */`",316,null],[11,"SetDelay","","`text /** * The millisecond delay of the timeout. * * NOTE: Re-setting the delay on a one-shot timer that has already fired * doesn't restart the timer. Call one of the init() methods to restart * a one-shot timer. */`",316,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetType","","`text /** * The timer type - one of the above TYPE_* constants. */`",316,null],[11,"SetType","","`text /** * The timer type - one of the above TYPE_* constants. */`",316,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetClosure","","`text /** * The opaque pointer pass to initWithFuncCallback. */`",316,null],[11,"GetCallback","","`text /** * The nsITimerCallback object passed to initWithCallback. */`",316,null],[11,"GetTarget","","`text /** * The nsIEventTarget where the callback will be dispatched. Note that this * target may only be set before the call to one of the init methods above. * * By default the target is the thread that created the timer. */`",316,null],[11,"SetTarget","","`text /** * The nsIEventTarget where the callback will be dispatched. Note that this * target may only be set before the call to one of the init methods above. * * By default the target is the thread that created the timer. */`",316,null],[11,"GetAllowedEarlyFiringMicroseconds","","`text /** * The number of microseconds this nsITimer implementation can possibly * fire early. */`",316,null],[11,"addref","","",317,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",317,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersistable` to one of its base interfaces.",317,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",317,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartPersistence","","`void startPersistence (in unsigned long long aOuterWindowID, in nsIWebBrowserPersistDocumentReceiver aRecv);`",317,null],[11,"addref","","",318,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",318,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpAuthManager` to one of its base interfaces.",318,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",318,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAuthIdentity","","`text /** * Lookup auth identity. * * @param aScheme * the URL scheme (e.g., \"http\"). NOTE: for proxy authentication, * this should be \"http\" (this includes authentication for CONNECT * tunneling). * @param aHost * the host of the server issuing a challenge (ASCII only). * @param aPort * the port of the server issuing a challenge. * @param aAuthType * optional string identifying auth type used (e.g., \"basic\") * @param aRealm * optional string identifying auth realm. * @param aPath * optional string identifying auth path. empty for proxy auth. * @param aUserDomain * return value containing user domain. * @param aUserName * return value containing user name. * @param aUserPassword * return value containing user password. * @param aIsPrivate * whether to look up a private or public identity (they are * stored separately, for use by private browsing) * @param aPrincipal * the principal from which to derive information about which * app/mozbrowser is in use for this request */`",318,null],[11,"SetAuthIdentity","","`text /** * Store auth identity. * * @param aScheme * the URL scheme (e.g., \"http\"). NOTE: for proxy authentication, * this should be \"http\" (this includes authentication for CONNECT * tunneling). * @param aHost * the host of the server issuing a challenge (ASCII only). * @param aPort * the port of the server issuing a challenge. * @param aAuthType * optional string identifying auth type used (e.g., \"basic\") * @param aRealm * optional string identifying auth realm. * @param aPath * optional string identifying auth path. empty for proxy auth. * @param aUserDomain * optional string containing user domain. * @param aUserName * optional string containing user name. * @param aUserPassword * optional string containing user password. * @param aIsPrivate * whether to store a private or public identity (they are * stored separately, for use by private browsing) * @param aPrincipal * the principal from which to derive information about which * app/mozbrowser is in use for this request */`",318,null],[11,"ClearAll","","`text /** * Clear all auth cache. */`",318,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",319,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",319,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaUsageResult` to one of its base interfaces.",319,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",319,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetOrigin","","`readonly attribute ACString origin;`",319,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPersisted","","`readonly attribute boolean persisted;`",319,null],[11,"GetUsage","","`readonly attribute unsigned long long usage;`",319,null],[11,"addref","","",320,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",320,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaOriginUsageResult` to one of its base interfaces.",320,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",320,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetUsage","","`readonly attribute unsigned long long usage;`",320,null],[11,"GetFileUsage","","`readonly attribute unsigned long long fileUsage;`",320,null],[11,"GetLimit","","`readonly attribute unsigned long long limit;`",320,null],[11,"addref","","",321,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",321,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestObjectReadOnly` to one of its base interfaces.",321,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",321,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStrReadOnly","","`readonly attribute string strReadOnly;`",321,null],[11,"GetBoolReadOnly","","`readonly attribute boolean boolReadOnly;`",321,null],[11,"GetShortReadOnly","","`readonly attribute short shortReadOnly;`",321,null],[11,"GetLongReadOnly","","`readonly attribute long longReadOnly;`",321,null],[11,"GetFloatReadOnly","","`readonly attribute float floatReadOnly;`",321,null],[11,"GetCharReadOnly","","`readonly attribute char charReadOnly;`",321,null],[11,"GetTimeReadOnly","","`readonly attribute PRTime timeReadOnly;`",321,null],[11,"addref","","",322,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",322,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestObjectReadWrite` to one of its base interfaces.",322,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",322,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStringProperty","","`attribute string stringProperty;`",322,null],[11,"SetStringProperty","","`attribute string stringProperty;`",322,null],[11,"GetBooleanProperty","","`attribute boolean booleanProperty;`",322,null],[11,"SetBooleanProperty","","`attribute boolean booleanProperty;`",322,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShortProperty","","`attribute short shortProperty;`",322,null],[11,"SetShortProperty","","`attribute short shortProperty;`",322,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetLongProperty","","`attribute long longProperty;`",322,null],[11,"SetLongProperty","","`attribute long longProperty;`",322,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetFloatProperty","","`attribute float floatProperty;`",322,null],[11,"SetFloatProperty","","`attribute float floatProperty;`",322,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetCharProperty","","`attribute char charProperty;`",322,null],[11,"SetCharProperty","","`attribute char charProperty;`",322,{"inputs":[{"name":"self"},{"name":"c_char"}],"output":{"name":"nsresult"}}],[11,"GetTimeProperty","","`attribute PRTime timeProperty;`",322,null],[11,"SetTimeProperty","","`attribute PRTime timeProperty;`",322,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"addref","","",323,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",323,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpHeaderVisitor` to one of its base interfaces.",323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",323,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VisitHeader","","`text /** * Called by the nsIHttpChannel implementation when visiting request and * response headers. * * @param aHeader * the header being visited. * @param aValue * the header value (possibly a comma delimited list). * * @throw any exception to terminate enumeration */`",323,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",324,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",324,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGfxInfoDebug` to one of its base interfaces.",324,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",324,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SpoofVendorID","","`void spoofVendorID (in DOMString aVendorID);`",324,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SpoofDeviceID","","`void spoofDeviceID (in DOMString aDeviceID);`",324,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SpoofDriverVersion","","`void spoofDriverVersion (in DOMString aDriverVersion);`",324,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SpoofOSVersion","","`void spoofOSVersion (in unsigned long aVersion);`",324,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",325,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",325,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIControllerCommand` to one of its base interfaces.",325,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",325,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsCommandEnabled","","`text /** * Returns true if the command is currently enabled. An nsIControllerCommand * can implement more than one commands; say, a group of related commands * (e.g. delete left/delete right). Because of this, the command name is * passed to each method. * * @param aCommandName the name of the command for which we want the enabled * state. * @param aCommandContext a cookie held by the nsIControllerCommandTable, * allowing the command to get some context information. * The contents of this cookie are implementation-defined. */`",325,null],[11,"GetCommandStateParams","","`void getCommandStateParams (in string aCommandName, in nsICommandParams aParams, in nsISupports aCommandContext);`",325,null],[11,"DoCommand","","`text /** * Execute the name command. * * @param aCommandName the name of the command to execute. * * @param aCommandContext a cookie held by the nsIControllerCommandTable, * allowing the command to get some context information. * The contents of this cookie are implementation-defined. */`",325,null],[11,"DoCommandParams","","`void doCommandParams (in string aCommandName, in nsICommandParams aParams, in nsISupports aCommandContext);`",325,null],[11,"addref","","",326,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",326,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDragSession` to one of its base interfaces.",326,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",326,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCanDrop","","`text /** * Set the current state of the drag, whether it can be dropped or not. * usually the target \"frame\" sets this so the native system can render the correct feedback */`",326,null],[11,"SetCanDrop","","`text /** * Set the current state of the drag, whether it can be dropped or not. * usually the target \"frame\" sets this so the native system can render the correct feedback */`",326,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOnlyChromeDrop","","`text /** * Indicates if the drop event should be dispatched only to chrome. */`",326,null],[11,"SetOnlyChromeDrop","","`text /** * Indicates if the drop event should be dispatched only to chrome. */`",326,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDragAction","","`text /** * Sets the action (copy, move, link, et.c) for the current drag */`",326,null],[11,"SetDragAction","","`text /** * Sets the action (copy, move, link, et.c) for the current drag */`",326,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetNumDropItems","","`text /** * Get the number of items that were dropped */`",326,null],[11,"GetSourceDocument","","`text /** * The document where the drag was started, which will be null if the * drag originated outside the application. Useful for determining if a drop * originated in the same document. */`",326,null],[11,"GetSourceNode","","`text /** * The dom node that was originally dragged to start the session, which will be null if the * drag originated outside the application. */`",326,null],[11,"GetDataTransfer","","`text /** * The data transfer object for the current drag. */`",326,null],[11,"SetDataTransfer","","`text /** * The data transfer object for the current drag. */`",326,null],[11,"GetData","","`text /** * Get data from a Drag&Drop. Can be called while the drag is in process * or after the drop has completed. * * @param aTransferable the transferable for the data to be put into * @param aItemIndex which of multiple drag items, zero-based */`",326,null],[11,"IsDataFlavorSupported","","`text /** * Check to set if any of the native data on the clipboard matches this data flavor */`",326,null],[11,"UserCancelled","","`void userCancelled ();`",326,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DragEventDispatchedToChildProcess","","`void dragEventDispatchedToChildProcess ();`",326,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UpdateDragEffect","","`void updateDragEffect ();`",326,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UpdateDragImage","","`void updateDragImage (in nsIDOMNode aImage, in long aImageX, in long aImageY);`",326,null],[11,"addref","","",327,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",327,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProxiedChannel` to one of its base interfaces.",327,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",327,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetProxyInfo","","`text /** * Gets the proxy info the channel was constructed with. null or a * proxyInfo with type \"direct\" mean no proxy. * * The returned proxy info must not be modified. */`",327,null],[11,"addref","","",328,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",328,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTableChangeEvent` to one of its base interfaces.",328,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",328,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetRowOrColIndex","","`text /** * Return the row or column index. */`",328,null],[11,"GetRowsOrColsCount","","`text /** * Return the number of rows or cols */`",328,null],[11,"addref","","",329,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",329,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMStorage` to one of its base interfaces.",329,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",329,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",330,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",330,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntryOpenCallback` to one of its base interfaces.",330,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",330,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ENTRY_WANTED","","`text /** * State of the entry determined by onCacheEntryCheck. * * ENTRY_WANTED - the consumer is interested in the entry, we will pass it. * RECHECK_AFTER_WRITE_FINISHED - the consumer cannot use the entry while data is * still being written and wants to check it again after the current write is * finished. This actually prevents concurrent read/write and is used with * non-resumable HTTP responses. * ENTRY_NEEDS_REVALIDATION - entry needs to be revalidated first with origin server, * this means the loading channel will decide whether to use the entry content * as is after it gets a positive response from the server about validity of the * content ; when a new content needs to be loaded from the server, the loading * channel opens a new entry with OPEN_TRUNCATE flag which dooms the one * this check has been made for. * ENTRY_NOT_WANTED - the consumer is not interested in the entry, we will not pass it. */`",330,null],[18,"RECHECK_AFTER_WRITE_FINISHED","","",330,null],[18,"ENTRY_NEEDS_REVALIDATION","","",330,null],[18,"ENTRY_NOT_WANTED","","",330,null],[11,"OnCacheEntryCheck","","`text /** * Callback to perform any validity checks before the entry should be used. * Called before onCacheEntryAvailable callback, depending on the result it * may be called more then one time. * * This callback is ensured to be called on the same thread on which asyncOpenURI * has been called, unless nsICacheStorage.CHECK_MULTITHREADED flag has been specified. * In that case this callback can be invoked on any thread, usually it is the cache I/O * or cache management thread. * * IMPORTANT NOTE: * This callback may be invoked sooner then respective asyncOpenURI call exits. * * @param aEntry * An entry to examine. Consumer has a chance to decide whether the * entry is valid or not. * @param aApplicationCache * Optional, application cache the entry has been found in, if any. * @return * State of the entry, see the constants just above. */`",330,null],[11,"OnCacheEntryAvailable","","`text /** * Callback giving actual result of asyncOpenURI. It may give consumer the cache * entry or a failure result when it's not possible to open it from some reason. * This callback is ensured to be called on the same thread on which asyncOpenURI * has been called. * * IMPORTANT NOTE: * This callback may be invoked sooner then respective asyncOpenURI call exits. * * @param aEntry * The entry bound to the originally requested URI. May be null when * loading from a particular application cache and the URI has not * been found in that application cache. * @param aNew * Whether no data so far has been stored for this entry, i.e. reading * it will just fail. When aNew is true, a server request should be * made and data stored to this new entry. * @param aApplicationCache * When an entry had been found in an application cache, this is the * given application cache. It should be associated with the loading * channel. * @param aResult * Result of the request. This may be a failure only when one of these * issues occur: * - the cache storage service could not be started due to some unexpected * faulure * - there is not enough disk space to create new entries * - cache entry was not found in a given application cache */`",330,null],[11,"addref","","",331,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",331,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUDPSocket` to one of its base interfaces.",331,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",331,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Close","","`text /** * close * * This method closes a UDP socket. This does not affect already * connected client sockets (i.e., the nsISocketTransport instances * created from this UDP socket). This will cause the onStopListening * event to asynchronously fire with a status of NS_BINDING_ABORTED. */`",331,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AsyncListen","","`text /** * asyncListen * * This method puts the UDP socket in the listening state. It will * asynchronously listen for and accept client connections. The listener * will be notified once for each client connection that is accepted. The * listener's onSocketAccepted method will be called on the same thread * that called asyncListen (the calling thread must have a nsIEventTarget). * * The listener will be passed a reference to an already connected socket * transport (nsISocketTransport). See below for more details. * * @param aListener * The listener to be notified when client connections are accepted. */`",331,null],[11,"GetLocalAddr","","`text /** * Returns the local address of this UDP socket */`",331,null],[11,"GetPort","","`text /** * Returns the port of this UDP socket. */`",331,null],[11,"Send","","`text /** * send * * Send out the datagram to specified remote host and port. * DNS lookup will be triggered. * * @param host The remote host name. * @param port The remote port. * @param data The buffer containing the data to be written. * @param dataLength The maximum number of bytes to be written. * @return number of bytes written. (0 or dataLength) */`",331,null],[11,"SendWithAddr","","`text /** * sendWithAddr * * Send out the datagram to specified remote host and port. * * @param addr The remote host address. * @param data The buffer containing the data to be written. * @param dataLength The maximum number of bytes to be written. * @return number of bytes written. (0 or dataLength) */`",331,null],[11,"SendBinaryStream","","`text /** * sendBinaryStream * * Send out the datagram to specified remote address and port. * * @param host The remote host name. * @param port The remote port. * @param stream The input stream to be sent. This must be a buffered stream implementation. */`",331,null],[11,"JoinMulticast","","`text /** * joinMulticast * * Join the multicast group specified by |addr|. You are then able to * receive future datagrams addressed to the group. * * @param addr * The multicast group address. * @param iface * The local address of the interface on which to join the group. If * this is not specified, the OS may join the group on all interfaces * or only the primary interface. */`",331,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"LeaveMulticast","","`text /** * leaveMulticast * * Leave the multicast group specified by |addr|. You will no longer * receive future datagrams addressed to the group. * * @param addr * The multicast group address. * @param iface * The local address of the interface on which to leave the group. * If this is not specified, the OS may leave the group on all * interfaces or only the primary interface. */`",331,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMulticastLoopback","","`text /** * multicastLoopback * * Whether multicast datagrams sent via this socket should be looped back to * this host (assuming this host has joined the relevant group). Defaults * to true. * Note: This is currently write-only. */`",331,null],[11,"SetMulticastLoopback","","`text /** * multicastLoopback * * Whether multicast datagrams sent via this socket should be looped back to * this host (assuming this host has joined the relevant group). Defaults * to true. * Note: This is currently write-only. */`",331,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMulticastInterface","","`text /** * multicastInterface * * The interface that should be used for sending future multicast datagrams. * Note: This is currently write-only. */`",331,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetMulticastInterface","","`text /** * multicastInterface * * The interface that should be used for sending future multicast datagrams. * Note: This is currently write-only. */`",331,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRecvBufferSize","","`text /** * recvBufferSize * * The size of the receive buffer. Default depends on the OS. */`",331,null],[11,"SetRecvBufferSize","","`text /** * recvBufferSize * * The size of the receive buffer. Default depends on the OS. */`",331,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSendBufferSize","","`text /** * sendBufferSize * * The size of the send buffer. Default depends on the OS. */`",331,null],[11,"SetSendBufferSize","","`text /** * sendBufferSize * * The size of the send buffer. Default depends on the OS. */`",331,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",332,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",332,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUDPSocketListener` to one of its base interfaces.",332,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",332,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPacketReceived","","`text /** * nsIUDPSocketListener * * This interface is notified whenever a UDP socket accepts a new connection. * The transport is in the connected state, and read/write streams can be opened * using the normal nsITransport API. The address of the client can be found by * calling the nsISocketTransport::GetAddress method or by inspecting * nsISocketTransport::GetHost, which returns a string representation of the * client's IP address (NOTE: this may be an IPv4 or IPv6 string literal). */ /** * onPacketReceived * * This method is called when a client sends an UDP packet. * * @param aSocket * The UDP socket. * @param aMessage * The message. */`",332,null],[11,"OnStopListening","","`text /** * onStopListening * * This method is called when the listening socket stops for some reason. * The UDP socket is effectively dead after this notification. * * @param aSocket * The UDP socket. * @param aStatus * The reason why the UDP socket stopped listening. If the * UDP socket was manually closed, then this value will be * NS_BINDING_ABORTED. */`",332,null],[11,"addref","","",333,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",333,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUDPMessage` to one of its base interfaces.",333,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",333,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFromAddr","","`text /** * nsIUDPMessage * * This interface is used to encapsulate an incomming UDP message */ /** * Address of the source of the message */`",333,null],[11,"GetData","","`text /** * Data of the message */`",333,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOutputStream","","`text /** * Stream to send a response */`",333,null],[11,"addref","","",334,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",334,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIObjectLoadingContent` to one of its base interfaces.",334,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",334,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_LOADING","","`text /** * See notes in nsObjectLoadingContent.h */`",334,null],[18,"TYPE_IMAGE","","",334,null],[18,"TYPE_PLUGIN","","",334,null],[18,"TYPE_FAKE_PLUGIN","","",334,null],[18,"TYPE_DOCUMENT","","",334,null],[18,"TYPE_NULL","","",334,null],[18,"PLUGIN_ACTIVE","","",334,null],[18,"PLUGIN_UNSUPPORTED","","",334,null],[18,"PLUGIN_ALTERNATE","","",334,null],[18,"PLUGIN_DISABLED","","",334,null],[18,"PLUGIN_BLOCKLISTED","","",334,null],[18,"PLUGIN_OUTDATED","","",334,null],[18,"PLUGIN_CRASHED","","",334,null],[18,"PLUGIN_SUPPRESSED","","",334,null],[18,"PLUGIN_USER_DISABLED","","",334,null],[18,"PLUGIN_CLICK_TO_PLAY","","",334,null],[18,"PLUGIN_VULNERABLE_UPDATABLE","","",334,null],[18,"PLUGIN_VULNERABLE_NO_UPDATE","","",334,null],[18,"PLUGIN_CLICK_TO_PLAY_QUIET","","",334,null],[18,"PLUGIN_PERMISSION_PROMPT_ACTION_QUIET","","",334,null],[11,"GetActualType","","`text /** * The actual mime type (the one we got back from the network * request) for the element. */`",334,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayedType","","`text /** * Gets the type of the content that's currently loaded. See * the constants above for the list of possible values. */`",334,null],[11,"GetContentTypeForMIMEType","","`text /** * Gets the content type that corresponds to the give MIME type. See the * constants above for the list of possible values. If nothing else fits, * TYPE_NULL will be returned. */`",334,null],[11,"GetBaseURI","","`text /** * Returns the base URI of the object as seen by plugins. This differs from * the normal codebase in that it takes <param> tags and plugin-specific * quirks into account. */`",334,null],[11,"PluginDestroyed","","`[noscript] void pluginDestroyed ();`",334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PluginCrashed","","`[noscript] void pluginCrashed (in nsIPluginTag pluginTag, in AString pluginDumpID, in AString browserDumpID, in boolean submittedCrashReport);`",334,null],[11,"Reload","","`text /** * Forces a re-evaluation and reload of the tag, optionally invalidating its * click-to-play state. This can be used when the MIME type that provides a * type has changed, for instance, to force the tag to re-evalulate the * handler to use. */`",334,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetActivated","","`text /** * This attribute will return true if the current content type has been * activated, either explicitly or by passing checks that would have it be * click-to-play. */`",334,null],[11,"StopPluginInstance","","`[noscript] void stopPluginInstance ();`",334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SyncStartPluginInstance","","`[noscript] void syncStartPluginInstance ();`",334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AsyncStartPluginInstance","","`[noscript] void asyncStartPluginInstance ();`",334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InitializeFromChannel","","`text /** * Puts the tag in the \"waiting on a channel\" state and adopts this * channel. This does not override the normal logic of examining attributes * and the channel type, so the load may cancel this channel if it decides not * to use one. * * This assumes: * - This tag has not begun loading yet * - This channel has not yet hit OnStartRequest * - The caller will continue to pass channel events to us as a listener */`",334,null],[11,"GetSrcURI","","`text /** * The URL of the data/src loaded in the object. This may be null (i.e. * an <embed> with no src). */`",334,null],[11,"SkipFakePlugins","","`text /** * Disable the use of fake plugins and reload the tag if necessary. */`",334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",335,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",335,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXSLTProcessor` to one of its base interfaces.",335,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",335,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ImportStylesheet","","`text /** * Import the stylesheet into this XSLTProcessor for transformations. * * @param style The root-node of a XSLT stylesheet. This can be either * a document node or an element node. If a document node * then the document can contain either a XSLT stylesheet * or a LRE stylesheet. * If the argument is an element node it must be the * xsl:stylesheet (or xsl:transform) element of an XSLT * stylesheet. */`",335,null],[11,"TransformToFragment","","`text /** * Transforms the node source applying the stylesheet given by * the importStylesheet() function. The owner document of the output node * owns the returned document fragment. * * @param source The node to be transformed * @param output This document is used to generate the output * @return DocumentFragment The result of the transformation */`",335,null],[11,"TransformToDocument","","`text /** * Transforms the node source applying the stylesheet given by the * importStylesheet() function. * * @param source The node to be transformed * @return Document The result of the transformation */`",335,null],[11,"SetParameter","","`text /** * Sets a parameter to be used in subsequent transformations with this * nsIXSLTProcessor. If the parameter doesn't exist in the stylesheet the * parameter will be ignored. * * @param namespaceURI The namespaceURI of the XSLT parameter * @param localName The local name of the XSLT parameter * @param value The new value of the XSLT parameter * * @exception NS_ERROR_ILLEGAL_VALUE The datatype of value is * not supported */`",335,null],[11,"GetParameter","","`text /** * Gets a parameter if previously set by setParameter. Returns null * otherwise. * * @param namespaceURI The namespaceURI of the XSLT parameter * @param localName The local name of the XSLT parameter * @return nsIVariant The value of the XSLT parameter */`",335,null],[11,"RemoveParameter","","`text /** * Removes a parameter, if set. This will make the processor use the * default-value for the parameter as specified in the stylesheet. * * @param namespaceURI The namespaceURI of the XSLT parameter * @param localName The local name of the XSLT parameter */`",335,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ClearParameters","","`text /** * Removes all set parameters from this nsIXSLTProcessor. This will make * the processor use the default-value for all parameters as specified in * the stylesheet. */`",335,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Reset","","`text /** * Remove all parameters and stylesheets from this nsIXSLTProcessor. */`",335,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",336,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",336,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerDebuggerManagerListener` to one of its base interfaces.",336,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",336,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnRegister","","`void onRegister (in nsIWorkerDebugger debugger);`",336,null],[11,"OnUnregister","","`void onUnregister (in nsIWorkerDebugger debugger);`",336,null],[11,"addref","","",337,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",337,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerDebuggerManager` to one of its base interfaces.",337,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",337,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetWorkerDebuggerEnumerator","","`nsISimpleEnumerator getWorkerDebuggerEnumerator ();`",337,null],[11,"AddListener","","`void addListener (in nsIWorkerDebuggerManagerListener listener);`",337,null],[11,"RemoveListener","","`void removeListener (in nsIWorkerDebuggerManagerListener listener);`",337,null],[11,"addref","","",338,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",338,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheTesting` to one of its base interfaces.",338,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",338,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SuspendCacheIOThread","","`void suspendCacheIOThread (in uint32_t aLevel);`",338,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ResumeCacheIOThread","","`void resumeCacheIOThread ();`",338,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Flush","","`void flush (in nsIObserver aObserver);`",338,null],[11,"addref","","",339,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",339,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMWindow` to one of its base interfaces.",339,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",339,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",340,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",340,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPluginDocument` to one of its base interfaces.",340,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",340,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Print","","`text /** * Causes the plugin to print in full-page mode */`",340,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",341,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",341,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCustomEvent` to one of its base interfaces.",341,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",341,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDetail","","`readonly attribute nsIVariant detail;`",341,null],[11,"InitCustomEvent","","`void initCustomEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in nsIVariant detailArg);`",341,null],[11,"addref","","",342,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",342,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPolicy` to one of its base interfaces.",342,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",342,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_INVALID","","`text /** * Indicates a unset or bogus policy type. */`",342,null],[18,"TYPE_OTHER","","`text /** * Gecko/Firefox developers: Avoid using TYPE_OTHER. Especially for * requests that are coming from webpages. Or requests in general which * you expect that security checks will be done on. * Always use a more specific type if one is available. And do not hesitate * to add more types as appropriate. * But if you are fairly sure that no one would care about your more specific * type, then it's ok to use TYPE_OTHER. * * Extension developers: Whenever it is reasonable, use one of the existing * content types. If none of the existing content types are right for * something you are doing, file a bug in the Core/DOM component that * includes a patch that adds your new content type to the end of the list of * TYPE_* constants here. But, don't start using your new content type until * your patch has been accepted, because it will be uncertain what exact * value and name your new content type will have; in that interim period, * use TYPE_OTHER. In your patch, document your new content type in the style * of the existing ones. In the bug you file, provide a more detailed * description of the new type of content you want Gecko to support, so that * the existing implementations of nsIContentPolicy can be properly modified * to deal with that new type of content. * * Implementations of nsIContentPolicy should treat this the same way they * treat unknown types, because existing users of TYPE_OTHER may be converted * to use new content types. * * Note that the TYPE_INTERNAL_* constants are never passed to content * policy implementations. They are mapped to other TYPE_* constants, and * are only intended for internal usage inside Gecko. */`",342,null],[18,"TYPE_SCRIPT","","`text /** * Indicates an executable script (such as JavaScript). */`",342,null],[18,"TYPE_IMAGE","","`text /** * Indicates an image (e.g., IMG elements). */`",342,null],[18,"TYPE_STYLESHEET","","`text /** * Indicates a stylesheet (e.g., STYLE elements). */`",342,null],[18,"TYPE_OBJECT","","`text /** * Indicates a generic object (plugin-handled content typically falls under * this category). */`",342,null],[18,"TYPE_DOCUMENT","","`text /** * Indicates a document at the top-level (i.e., in a browser). */`",342,null],[18,"TYPE_SUBDOCUMENT","","`text /** * Indicates a document contained within another document (e.g., IFRAMEs, * FRAMES, and OBJECTs). */`",342,null],[18,"TYPE_REFRESH","","`text /** * Indicates a timed refresh. * * shouldLoad will never get this, because it does not represent content * to be loaded (the actual load triggered by the refresh will go through * shouldLoad as expected). * * shouldProcess will get this for, e.g., META Refresh elements and HTTP * Refresh headers. */`",342,null],[18,"TYPE_XBL","","`text /** * Indicates an XBL binding request, triggered either by -moz-binding CSS * property. */`",342,null],[18,"TYPE_PING","","`text /** * Indicates a ping triggered by a click on <A PING=\"...\"> element. */`",342,null],[18,"TYPE_XMLHTTPREQUEST","","`text /** * Indicates an XMLHttpRequest. Also used for document.load and for EventSource. */`",342,null],[18,"TYPE_DATAREQUEST","","",342,null],[18,"TYPE_OBJECT_SUBREQUEST","","`text /** * Indicates a request by a plugin. */`",342,null],[18,"TYPE_DTD","","`text /** * Indicates a DTD loaded by an XML document. */`",342,null],[18,"TYPE_FONT","","`text /** * Indicates a font loaded via @font-face rule. */`",342,null],[18,"TYPE_MEDIA","","`text /** * Indicates a video or audio load. */`",342,null],[18,"TYPE_WEBSOCKET","","`text /** * Indicates a WebSocket load. */`",342,null],[18,"TYPE_CSP_REPORT","","`text /** * Indicates a Content Security Policy report. */`",342,null],[18,"TYPE_XSLT","","`text /** * Indicates a style sheet transformation. */`",342,null],[18,"TYPE_BEACON","","`text /** * Indicates a beacon post. */`",342,null],[18,"TYPE_FETCH","","`text /** * Indicates a load initiated by the fetch() function from the Fetch * specification. */`",342,null],[18,"TYPE_IMAGESET","","`text /** * Indicates a <img srcset> or <picture> request. */`",342,null],[18,"TYPE_WEB_MANIFEST","","`text /** * Indicates a web manifest. */`",342,null],[18,"TYPE_SAVEAS_DOWNLOAD","","`text /** * Indicates an save-as link download from the front-end code. */`",342,null],[18,"TYPE_INTERNAL_SCRIPT","","`text /** * Indicates an internal constant for scripts loaded through script * elements. * * This will be mapped to TYPE_SCRIPT before being passed to content policy * implementations. */`",342,null],[18,"TYPE_INTERNAL_WORKER","","`text /** * Indicates an internal constant for scripts loaded through a dedicated * worker. * * This will be mapped to TYPE_SCRIPT before being passed to content policy * implementations. */`",342,null],[18,"TYPE_INTERNAL_SHARED_WORKER","","`text /** * Indicates an internal constant for scripts loaded through a shared * worker. * * This will be mapped to TYPE_SCRIPT before being passed to content policy * implementations. */`",342,null],[18,"TYPE_INTERNAL_EMBED","","`text /** * Indicates an internal constant for content loaded from embed elements. * * This will be mapped to TYPE_OBJECT. */`",342,null],[18,"TYPE_INTERNAL_OBJECT","","`text /** * Indicates an internal constant for content loaded from object elements. * * This will be mapped to TYPE_OBJECT. */`",342,null],[18,"TYPE_INTERNAL_FRAME","","`text /** * Indicates an internal constant for content loaded from frame elements. * * This will be mapped to TYPE_SUBDOCUMENT. */`",342,null],[18,"TYPE_INTERNAL_IFRAME","","`text /** * Indicates an internal constant for content loaded from iframe elements. * * This will be mapped to TYPE_SUBDOCUMENT. */`",342,null],[18,"TYPE_INTERNAL_AUDIO","","`text /** * Indicates an internal constant for content loaded from audio elements. * * This will be mapped to TYPE_MEDIA. */`",342,null],[18,"TYPE_INTERNAL_VIDEO","","`text /** * Indicates an internal constant for content loaded from video elements. * * This will be mapped to TYPE_MEDIA. */`",342,null],[18,"TYPE_INTERNAL_TRACK","","`text /** * Indicates an internal constant for content loaded from track elements. * * This will be mapped to TYPE_MEDIA. */`",342,null],[18,"TYPE_INTERNAL_XMLHTTPREQUEST","","`text /** * Indicates an internal constant for an XMLHttpRequest. * * This will be mapped to TYPE_XMLHTTPREQUEST. */`",342,null],[18,"TYPE_INTERNAL_EVENTSOURCE","","`text /** * Indicates an internal constant for EventSource. * * This will be mapped to TYPE_DATAREQUEST. */`",342,null],[18,"TYPE_INTERNAL_SERVICE_WORKER","","`text /** * Indicates an internal constant for scripts loaded through a service * worker. * * This will be mapped to TYPE_SCRIPT before being passed to content policy * implementations. */`",342,null],[18,"TYPE_INTERNAL_SCRIPT_PRELOAD","","`text /** * Indicates an internal constant for *preloaded* scripts * loaded through script elements. * * This will be mapped to TYPE_SCRIPT before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_IMAGE","","`text /** * Indicates an internal constant for normal images. * * This will be mapped to TYPE_IMAGE before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_IMAGE_PRELOAD","","`text /** * Indicates an internal constant for *preloaded* images. * * This will be mapped to TYPE_IMAGE before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_STYLESHEET","","`text /** * Indicates an internal constant for normal stylesheets. * * This will be mapped to TYPE_STYLESHEET before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_STYLESHEET_PRELOAD","","`text /** * Indicates an internal constant for *preloaded* stylesheets. * * This will be mapped to TYPE_STYLESHEET before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_IMAGE_FAVICON","","`text /** * Indicates an internal constant for favicon. * * This will be mapped to TYPE_IMAGE before being passed * to content policy implementations. */`",342,null],[18,"TYPE_INTERNAL_WORKER_IMPORT_SCRIPTS","","`text /** * Indicates an importScripts() inside a worker script. * * This will be mapped to TYPE_SCRIPT before being passed to content policy * implementations. */`",342,null],[18,"REJECT_REQUEST","","`text /** * Returned from shouldLoad or shouldProcess if the load or process request * is rejected based on details of the request. */`",342,null],[18,"REJECT_TYPE","","`text /** * Returned from shouldLoad or shouldProcess if the load/process is rejected * based solely on its type (of the above flags). * * NOTE that it is not meant to stop future requests for this type--only the * current request. */`",342,null],[18,"REJECT_SERVER","","`text /** * Returned from shouldLoad or shouldProcess if the load/process is rejected * based on the server it is hosted on or requested from (aContentLocation or * aRequestOrigin), e.g., if you block an IMAGE because it is served from * goatse.cx (even if you don't necessarily block other types from that * server/domain). * * NOTE that it is not meant to stop future requests for this server--only the * current request. */`",342,null],[18,"REJECT_OTHER","","`text /** * Returned from shouldLoad or shouldProcess if the load/process is rejected * based on some other criteria. Mozilla callers will handle this like * REJECT_REQUEST; third-party implementors may, for example, use this to * direct their own callers to consult the extra parameter for additional * details. */`",342,null],[18,"ACCEPT","","`text /** * Returned from shouldLoad or shouldProcess if the load or process request * is not rejected. */`",342,null],[11,"ShouldLoad","","`text /** * Should the resource at this location be loaded? * ShouldLoad will be called before loading the resource at aContentLocation * to determine whether to start the load at all. * * @param aContentType the type of content being tested. This will be one * one of the TYPE_* constants. * * @param aContentLocation the location of the content being checked; must * not be null * * @param aRequestOrigin OPTIONAL. the location of the resource that * that is loading the request. This will generally * be the URI of the loading principal for the * resulting request (as determined by its * LoadInfo), but may vary depending on the * caller. Can be null if inapplicable. * * @param aContext OPTIONAL. the nsIDOMNode or nsIDOMWindow that * initiated the request, or something that can QI * to one of those; can be null if inapplicable. * Note that for navigation events (new windows and * link clicks), this is the NEW window. * * @param aMimeTypeGuess OPTIONAL. a guess for the requested content's * MIME type, based on information available to * the request initiator (e.g., an OBJECT's type * attribute); does not reliably reflect the * actual MIME type of the requested content * * @param aExtra an OPTIONAL argument, pass-through for non-Gecko * callers to pass extra data to callees. * * @param aRequestPrincipal an OPTIONAL argument, defines the principal that * caused the load. This is optional only for * non-gecko code: all gecko code should set this * argument. This should generally be the same as * the triggering principal for the resulting * request (as determined by its LoadInfo), but may * vary depending on the caller. Sometimes it will * be the loading principal or final channel * principal instead. * * @return ACCEPT or REJECT_* * * @note shouldLoad can be called while the DOM and layout of the document * involved is in an inconsistent state. This means that implementors of * this method MUST NOT do any of the following: * 1) Modify the DOM in any way (e.g. setting attributes is a no-no). * 2) Query any DOM properties that depend on layout (e.g. offset* * properties). * 3) Query any DOM properties that depend on style (e.g. computed style). * 4) Query any DOM properties that depend on the current state of the DOM * outside the \"context\" node (e.g. lengths of node lists). * 5) [JavaScript implementations only] Access properties of any sort on any * object without using XPCNativeWrapper (either explicitly or * implicitly). Due to various DOM0 things, this leads to item 4. * If you do any of these things in your shouldLoad implementation, expect * unpredictable behavior, possibly including crashes, content not showing * up, content showing up doubled, etc. If you need to do any of the things * above, do them off timeout or event. */`",342,null],[11,"ShouldProcess","","`text /** * Should the resource be processed? * ShouldProcess will be called once all the information passed to it has * been determined about the resource, typically after part of the resource * has been loaded. * * @param aContentType the type of content being tested. This will be one * one of the TYPE_* constants. * * @param aContentLocation OPTIONAL; the location of the resource being * requested: MAY be, e.g., a post-redirection URI * for the resource. * * @param aRequestOrigin OPTIONAL. the location of the resource that * initiated this load request; can be null if * inapplicable * * @param aContext OPTIONAL. the nsIDOMNode or nsIDOMWindow that * initiated the request, or something that can QI * to one of those; can be null if inapplicable. * * @param aMimeType the MIME type of the requested resource (e.g., * image/png), as reported by the networking library, * if available (may be empty if inappropriate for * the type, e.g., TYPE_REFRESH). * * @param aExtra an OPTIONAL argument, pass-through for non-Gecko * callers to pass extra data to callees. * * @return ACCEPT or REJECT_* * * @note shouldProcess can be called while the DOM and layout of the document * involved is in an inconsistent state. See the note on shouldLoad to see * what this means for implementors of this method. */`",342,null],[11,"addref","","",343,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",343,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWritablePropertyBag2` to one of its base interfaces.",343,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",343,{"inputs":[{"name":"self"}],"output":{"name":"nsipropertybag2"}}],[11,"SetPropertyAsInt32","","`void setPropertyAsInt32 (in AString prop, in int32_t value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsUint32","","`void setPropertyAsUint32 (in AString prop, in uint32_t value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsInt64","","`void setPropertyAsInt64 (in AString prop, in int64_t value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsUint64","","`void setPropertyAsUint64 (in AString prop, in uint64_t value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsDouble","","`void setPropertyAsDouble (in AString prop, in double value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsAString","","`void setPropertyAsAString (in AString prop, in AString value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsACString","","`void setPropertyAsACString (in AString prop, in ACString value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsAUTF8String","","`void setPropertyAsAUTF8String (in AString prop, in AUTF8String value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsBool","","`void setPropertyAsBool (in AString prop, in boolean value);`",343,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetPropertyAsInterface","","`void setPropertyAsInterface (in AString prop, in nsISupports value);`",343,null],[11,"addref","","",344,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",344,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFLiteral` to one of its base interfaces.",344,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",344,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfnode"}}],[11,"GetValue","","`text /** * The Unicode string value of the literal. */`",344,null],[11,"GetValueConst","","`text /** * An unscriptable version used to avoid a string copy. Meant * for use as a performance optimization. */`",344,null],[11,"addref","","",345,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",345,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFDate` to one of its base interfaces.",345,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",345,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfnode"}}],[11,"GetValue","","`text /** * The date value of the literal */`",345,null],[11,"addref","","",346,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",346,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFInt` to one of its base interfaces.",346,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",346,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfnode"}}],[11,"GetValue","","`text /** * The integer value of the literal */`",346,null],[11,"addref","","",347,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",347,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFBlob` to one of its base interfaces.",347,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",347,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfnode"}}],[11,"GetLength","","`text /** * The data's length. */`",347,null],[11,"addref","","",348,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",348,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSUnknownRule` to one of its base interfaces.",348,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",348,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",349,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",349,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDataSignatureVerifier` to one of its base interfaces.",349,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",349,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VerifyData","","`text /** * Verifies that the data matches the data that was used to generate the * signature. * * @param aData The data to be tested. * @param aSignature The signature of the data, base64 encoded. * @param aPublicKey The public part of the key used for signing, DER encoded * then base64 encoded. * @returns true if the signature matches the data, false if not. */`",349,null],[11,"addref","","",350,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",350,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIPersonalDictionary` to one of its base interfaces.",350,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",350,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Load","","`text /** * Load the dictionary */`",350,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Save","","`text /** * Save the dictionary */`",350,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetWordList","","`text /** * Get the (lexicographically sorted) list of words */`",350,null],[11,"Check","","`text /** * Check a unicode string */`",350,null],[11,"AddWord","","`text /** * Add a word to the personal dictionary */`",350,null],[11,"RemoveWord","","`text /** * Remove a word from the personal dictionary */`",350,null],[11,"IgnoreWord","","`text /** * Add a word to the ignore all list */`",350,null],[11,"EndSession","","`text /** * Clear the ignore list */`",350,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddCorrection","","`text /** * These three functions are here in case we want to store previous * misspellings and return them at the head of the misspell list. */ /** * Add a misspelling to the list of corrections */`",350,null],[11,"RemoveCorrection","","`text /** * Remove a misspelling from the list of corrections */`",350,null],[11,"GetCorrection","","`text /** * Get a list of previous corrections for the word */`",350,null],[11,"addref","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",351,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecureBrowserUI` to one of its base interfaces.",351,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",351,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`void init (in mozIDOMWindowProxy window);`",351,null],[11,"SetDocShell","","`void setDocShell (in nsIDocShell docShell);`",351,null],[11,"GetState","","`readonly attribute unsigned long state;`",351,null],[11,"addref","","",352,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",352,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMozBrowserFrame` to one of its base interfaces.",352,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",352,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMozbrowser","","`text /** * <iframe> element may have the mozbrowser attribute. * * The mozbrowser attribute has no effect unless the <iframe> element is * contained in a document privileged to create browser frames. * * An <iframe> element in a privileged document with the mozbrowser attribute * emits a variety of events when various things happen inside the frame. * * This will be documented eventually, but for more information at the moment, * see dom/browser-element/BrowserElement{Child,Parent}.js. * */`",352,null],[11,"SetMozbrowser","","`text /** * <iframe> element may have the mozbrowser attribute. * * The mozbrowser attribute has no effect unless the <iframe> element is * contained in a document privileged to create browser frames. * * An <iframe> element in a privileged document with the mozbrowser attribute * emits a variety of events when various things happen inside the frame. * * This will be documented eventually, but for more information at the moment, * see dom/browser-element/BrowserElement{Child,Parent}.js. * */`",352,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",353,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",353,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIListNetworkAddressesListener` to one of its base interfaces.",353,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",353,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnListedNetworkAddresses","","`text /** * Callback function that gets called by nsINetworkInfoService.listNetworkAddresses. * Each address in the array is a string IP address in canonical form, * e.g. 192.168.1.10, or an IPV6 address in string form. */`",353,null],[11,"OnListNetworkAddressesFailed","","`void onListNetworkAddressesFailed ();`",353,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",354,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",354,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGetHostnameListener` to one of its base interfaces.",354,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",354,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnGotHostname","","`void onGotHostname (in AUTF8String aHostname);`",354,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnGetHostnameFailed","","`void onGetHostnameFailed ();`",354,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",355,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",355,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkInfoService` to one of its base interfaces.",355,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",355,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ListNetworkAddresses","","`text /** * Obtain a list of local machine network addresses. The listener object's * onListedNetworkAddresses will be called with the obtained addresses. * On failure, the listener object's onListNetworkAddressesFailed() will be called. */`",355,null],[11,"GetHostname","","`text /** * Obtain the hostname of the local machine. The listener object's * onGotHostname will be called with the obtained hostname. * On failure, the listener object's onGetHostnameFailed() will be called. */`",355,null],[11,"addref","","",356,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",356,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditingSession` to one of its base interfaces.",356,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",356,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eEditorOK","","`text /** * Error codes when we fail to create an editor * is placed in attribute editorStatus */`",356,null],[18,"eEditorCreationInProgress","","",356,null],[18,"eEditorErrorCantEditMimeType","","",356,null],[18,"eEditorErrorFileNotFound","","",356,null],[18,"eEditorErrorCantEditFramesets","","",356,null],[18,"eEditorErrorUnknown","","",356,null],[11,"GetEditorStatus","","`text /** * Status after editor creation and document loading * Value is one of the above error codes */`",356,null],[11,"MakeWindowEditable","","`text /** * Make this window editable * @param aWindow nsIDOMWindow, the window the embedder needs to make editable * @param aEditorType string, \"html\" \"htmlsimple\" \"text\" \"textsimple\" * @param aMakeWholeDocumentEditable if PR_TRUE make the whole document in * aWindow editable, otherwise it's the * embedder who should make the document * (or part of it) editable. * @param aInteractive if PR_FALSE turn off scripting and plugins */`",356,null],[11,"WindowIsEditable","","`text /** * Test whether a specific window has had its editable flag set; it may have an editor * now, or will get one after the uri load. * * Use this, passing the content root window, to test if we've set up editing * for this content. */`",356,null],[11,"GetEditorForWindow","","`text /** * Get the editor for this window. May return null */`",356,null],[11,"SetupEditorOnWindow","","`text /** * Setup editor and related support objects */`",356,null],[11,"TearDownEditorOnWindow","","`text /** * Destroy editor and related support objects */`",356,null],[11,"SetEditorOnControllers","","`void setEditorOnControllers (in mozIDOMWindowProxy aWindow, in nsIEditor aEditor);`",356,null],[11,"DisableJSAndPlugins","","`text /** * Disable scripts and plugins in aWindow. */`",356,null],[11,"RestoreJSAndPlugins","","`text /** * Restore JS and plugins (enable/disable them) according to the state they * were before the last call to disableJSAndPlugins. */`",356,null],[11,"DetachFromWindow","","`text /** * Removes all the editor's controllers/listeners etc and makes the window * uneditable. */`",356,null],[11,"ReattachToWindow","","`text /** * Undos detachFromWindow(), reattaches this editing session/editor * to the window. */`",356,null],[11,"GetJsAndPluginsDisabled","","`text /** * Whether this session has disabled JS and plugins. */`",356,null],[11,"addref","","",357,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",357,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeView` to one of its base interfaces.",357,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",357,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DROP_BEFORE","","",357,null],[18,"DROP_ON","","",357,null],[18,"DROP_AFTER","","",357,null],[18,"PROGRESS_NORMAL","","`text /** * The progress mode for a given cell. This method is only called for * columns of type |progressmeter|. */`",357,null],[18,"PROGRESS_UNDETERMINED","","",357,null],[18,"PROGRESS_NONE","","",357,null],[11,"GetRowCount","","`text /** * The total number of rows in the tree (including the offscreen rows). */`",357,null],[11,"GetSelection","","`text /** * The selection for this view. */`",357,null],[11,"SetSelection","","`text /** * The selection for this view. */`",357,null],[11,"GetRowProperties","","`text /** * A whitespace delimited list of properties. For each property X the view * gives back will cause the pseudoclasses ::-moz-tree-cell(x), * ::-moz-tree-row(x), ::-moz-tree-twisty(x), ::-moz-tree-image(x), * ::-moz-tree-cell-text(x). to be matched on the pseudoelement * ::moz-tree-row. */`",357,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCellProperties","","`text /** * A whitespace delimited list of properties for a given cell. Each * property, x, that the view gives back will cause the pseudoclasses * ::-moz-tree-cell(x), ::-moz-tree-row(x), ::-moz-tree-twisty(x), * ::-moz-tree-image(x), ::-moz-tree-cell-text(x). to be matched on the * cell. */`",357,null],[11,"GetColumnProperties","","`text /** * Called to get properties to paint a column background. For shading the sort * column, etc. */`",357,null],[11,"IsContainer","","`text /** * Methods that can be used to test whether or not a twisty should be drawn, * and if so, whether an open or closed twisty should be used. */`",357,null],[11,"IsContainerOpen","","`boolean isContainerOpen (in long index);`",357,null],[11,"IsContainerEmpty","","`boolean isContainerEmpty (in long index);`",357,null],[11,"IsSeparator","","`text /** * isSeparator is used to determine if the row at index is a separator. * A value of true will result in the tree drawing a horizontal separator. * The tree uses the ::moz-tree-separator pseudoclass to draw the separator. */`",357,null],[11,"IsSorted","","`text /** * Specifies if there is currently a sort on any column. Used mostly by dragdrop * to affect drop feedback. */`",357,null],[11,"CanDrop","","`text /** * Methods used by the drag feedback code to determine if a drag is allowable at * the current location. To get the behavior where drops are only allowed on * items, such as the mailNews folder pane, always return false when * the orientation is not DROP_ON. */`",357,null],[11,"Drop","","`text /** * Called when the user drops something on this view. The |orientation| param * specifies before/on/after the given |row|. */`",357,null],[11,"GetParentIndex","","`text /** * Methods used by the tree to draw thread lines in the tree. * getParentIndex is used to obtain the index of a parent row. * If there is no parent row, getParentIndex returns -1. */`",357,null],[11,"HasNextSibling","","`text /** * hasNextSibling is used to determine if the row at rowIndex has a nextSibling * that occurs *after* the index specified by afterIndex. Code that is forced * to march down the view looking at levels can optimize the march by starting * at afterIndex+1. */`",357,null],[11,"GetLevel","","`text /** * The level is an integer value that represents * the level of indentation. It is multiplied by the width specified in the * :moz-tree-indentation pseudoelement to compute the exact indendation. */`",357,null],[11,"GetImageSrc","","`text /** * The image path for a given cell. For defining an icon for a cell. * If the empty string is returned, the :moz-tree-image pseudoelement * will be used. */`",357,null],[11,"GetProgressMode","","`long getProgressMode (in long row, in nsITreeColumn col);`",357,null],[11,"GetCellValue","","`text /** * The value for a given cell. This method is only called for columns * of type other than |text|. */`",357,null],[11,"GetCellText","","`text /** * The text for a given cell. If a column consists only of an image, then * the empty string is returned. */`",357,null],[11,"SetTree","","`text /** * Called during initialization to link the view to the front end box object. */`",357,null],[11,"ToggleOpenState","","`text /** * Called on the view when an item is opened or closed. */`",357,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CycleHeader","","`text /** * Called on the view when a header is clicked. */`",357,null],[11,"SelectionChanged","","`text /** * Should be called from a XUL onselect handler whenever the selection changes. */`",357,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CycleCell","","`text /** * Called on the view when a cell in a non-selectable cycling column (e.g., unread/flag/etc.) is clicked. */`",357,null],[11,"IsEditable","","`text /** * isEditable is called to ask the view if the cell contents are editable. * A value of true will result in the tree popping up a text field when * the user tries to inline edit the cell. */`",357,null],[11,"IsSelectable","","`text /** * isSelectable is called to ask the view if the cell is selectable. * This method is only called if the selection style is |cell| or |text|. * XXXvarga shouldn't this be called isCellSelectable? */`",357,null],[11,"SetCellValue","","`text /** * setCellValue is called when the value of the cell has been set by the user. * This method is only called for columns of type other than |text|. */`",357,null],[11,"SetCellText","","`text /** * setCellText is called when the contents of the cell have been edited by the user. */`",357,null],[11,"PerformAction","","`text /** * A command API that can be used to invoke commands on the selection. The tree * will automatically invoke this method when certain keys are pressed. For example, * when the DEL key is pressed, performAction will be called with the \"delete\" string. */`",357,null],[11,"PerformActionOnRow","","`text /** * A command API that can be used to invoke commands on a specific row. */`",357,null],[11,"PerformActionOnCell","","`text /** * A command API that can be used to invoke commands on a specific cell. */`",357,null],[11,"addref","","",358,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",358,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeTreeView` to one of its base interfaces.",358,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",358,{"inputs":[{"name":"self"}],"output":{"name":"nsitreeview"}}],[11,"EnsureNative","","`[noscript] void ensureNative ();`",358,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",359,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",359,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDocumentXBL` to one of its base interfaces.",359,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",359,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAnonymousNodes","","`text /** * See the MDC documentation for what these methods do. */`",359,null],[11,"GetAnonymousElementByAttribute","","`nsIDOMElement getAnonymousElementByAttribute (in nsIDOMElement elt, in DOMString attrName, in DOMString attrValue);`",359,null],[11,"GetBindingParent","","`nsIDOMElement getBindingParent (in nsIDOMNode node);`",359,null],[11,"LoadBindingDocument","","`void loadBindingDocument (in DOMString documentURL);`",359,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",360,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",360,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMenuBoxObject` to one of its base interfaces.",360,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",360,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",361,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",361,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICursorContinueCallback` to one of its base interfaces.",361,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",361,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleContinue","","`void handleContinue ();`",361,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",362,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",362,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDOMCursor` to one of its base interfaces.",362,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",362,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDone","","`readonly attribute boolean done;`",362,null],[11,"Continue","","`void continue ();`",362,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",363,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",363,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandLineRunner` to one of its base interfaces.",363,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",363,{"inputs":[{"name":"self"}],"output":{"name":"nsicommandline"}}],[11,"SetWindowContext","","`text /** * Set the windowContext parameter. */`",363,null],[11,"Run","","`text /** * Process the command-line handlers in the proper order, calling \"handle()\" on * each. * * @throws NS_ERROR_ABORT if any handler throws NS_ERROR_ABORT. All other errors * thrown by handlers will be silently ignored. */`",363,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetHelpText","","`text /** * Process and combine the help text provided by each command-line handler. */`",363,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",364,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",364,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHangReport` to one of its base interfaces.",364,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",364,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SLOW_SCRIPT","","",364,null],[18,"PLUGIN_HANG","","",364,null],[11,"GetHangType","","`readonly attribute unsigned long hangType;`",364,null],[11,"GetScriptBrowser","","`readonly attribute nsIDOMElement scriptBrowser;`",364,null],[11,"GetScriptFileName","","`readonly attribute ACString scriptFileName;`",364,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAddonId","","`readonly attribute AString addonId;`",364,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPluginName","","`readonly attribute ACString pluginName;`",364,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"UserCanceled","","`void userCanceled ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TerminateScript","","`void terminateScript ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TerminateGlobal","","`void terminateGlobal ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TerminatePlugin","","`void terminatePlugin ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginStartingDebugger","","`void beginStartingDebugger ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndStartingDebugger","","`void endStartingDebugger ();`",364,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsReportForBrowser","","`bool isReportForBrowser (in nsIFrameLoader aFrameLoader);`",364,null],[11,"addref","","",365,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",365,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHistory` to one of its base interfaces.",365,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",365,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"VIEWER_WINDOW","","`text /** * The size of the window of SHEntries which can have alive viewers in the * bfcache around the currently active SHEntry. * * We try to keep viewers for SHEntries between index - VIEWER_WINDOW and * index + VIEWER_WINDOW alive. */`",365,null],[11,"GetIsPartial","","`text /** * An attribute denoting whether the nsISHistory is associated to a grouped * session history. * * The abstraction of grouped session history is implemented at * nsIWebNavigation level, so those canGoBack / canGoForward / gotoIndex * functions work transparently; * * On the other hand, nsISHistory works on partial session history directly. * Unless otherwise specified, count / index attributes and parameters all * indicate local count / index, so we won't mess up docshell. */`",365,null],[11,"GetCount","","`text /** * A readonly property of the interface that returns * the number of toplevel documents currently available * in session history. */`",365,null],[11,"GetGlobalCount","","`text /** * If isPartial, globalCount denotes the total number of entries in the * grouped session history; Otherwise it has the same value as count. */`",365,null],[11,"GetGlobalIndexOffset","","`text /** * A readonly property which represents the difference between global indices * of grouped session history and local indices of this particular session * history object. */`",365,null],[11,"GetIndex","","`text /** * A readonly property of the interface that returns * the index of the current document in session history. */`",365,null],[11,"GetGlobalIndex","","`text /** * A readonly property which equals index + globalIndexOffset. */`",365,null],[11,"GetRequestedIndex","","`text /** * A readonly property of the interface that returns * the index of the last document that started to load and * didn't finished yet. When document finishes the loading * value -1 is returned. */`",365,null],[11,"GetMaxLength","","`text /** * A read/write property of the interface, used to Get/Set * the maximum number of toplevel documents, session history * can hold for each instance. */`",365,null],[11,"SetMaxLength","","`text /** * A read/write property of the interface, used to Get/Set * the maximum number of toplevel documents, session history * can hold for each instance. */`",365,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetEntryAtIndex","","`text /** * Called to obtain handle to the history entry at a * given index. * * @param index The index value whose entry is requested. * The oldest entry is located at index == 0. * @param modifyIndex A boolean flag that indicates if the current * index of session history should be modified * to the parameter index. * * @return <code>NS_OK</code> history entry for * the index is obtained successfully. * <code>NS_ERROR_FAILURE</code> Error in obtaining * history entry for the given index. */`",365,null],[11,"RestoreToEntryAtIndex","","`text /** * Load the entry at given index to root docshell directly in order to * restore to an entry in grouped session history navigation or session * restore case. This function will not notify nsISHistoryListener, as it's * not considered a normal history navigation. */`",365,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"PurgeHistory","","`text /** * Called to purge older documents from history. * Documents can be removed from session history for various * reasons. For example to control memory usage of the browser, to * prevent users from loading documents from history, to erase evidence of * prior page loads etc... * * @param numEntries The number of toplevel documents to be * purged from history. During purge operation, * the latest documents are maintained and older * 'numEntries' documents are removed from history. * @throws <code>NS_SUCCESS_LOSS_OF_INSIGNIFICANT_DATA</code> Purge was vetod. * @throws <code>NS_ERROR_FAILURE</code> numEntries is * invalid or out of bounds with the size of history. * */`",365,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"AddSHistoryListener","","`text /** * Called to register a listener for the session history component. * Listeners are notified when pages are loaded or purged from history. * * @param aListener Listener object to be notified for all * page loads that initiate in session history. * * @note A listener object must implement * nsISHistoryListener and nsSupportsWeakReference * * @see nsISHistoryListener * @see nsSupportsWeakReference */`",365,null],[11,"RemoveSHistoryListener","","`text /** * Called to remove a listener for the session history component. * Listeners are notified when pages are loaded from history. * * @param aListener Listener object to be removed from * session history. * * @note A listener object must implement * nsISHistoryListener and nsSupportsWeakReference * @see nsISHistoryListener * @see nsSupportsWeakReference */`",365,null],[11,"SetPartialSHistoryListener","","`text /** * Set the listener to handle cross nsISHistory navigation when it works * in \"partial\" mode. */`",365,null],[11,"GetSHistoryEnumerator","","`text /** * Called to obtain a enumerator for all the documents stored in * session history. The enumerator object thus returned by this method * can be traversed using nsISimpleEnumerator. * * @note To access individual history entries of the enumerator, perform the * following steps: * 1) Call nsISHistory->GetSHistoryEnumerator() to obtain handle * the nsISimpleEnumerator object. * 2) Use nsISimpleEnumerator->GetNext() on the object returned * by step #1 to obtain handle to the next object in the list. * The object returned by this step is of type nsISupports. * 3) Perform a QueryInterface on the object returned by step #2 * to nsISHEntry. * 4) Use nsISHEntry to access properties of each history entry. * * @see nsISimpleEnumerator * @see nsISHEntry * @see QueryInterface() * @see do_QueryInterface() */`",365,null],[11,"ReloadCurrentEntry","","`void reloadCurrentEntry ();`",365,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIndexOfEntry","","`text /** * Called to obtain the index to a given history entry. * * @param aEntry The entry to obtain the index of. * * @return <code>NS_OK</code> index for the history entry * is obtained successfully. * <code>NS_ERROR_FAILURE</code> Error in obtaining * index for the given history entry. */`",365,null],[11,"OnPartialSHistoryActive","","`text /** * Called when this nsISHistory has became the active history of a grouped * session history. * * @param globalLength The up to date number of entries in the grouped * session history. * @param targetIndex The local index to navigate to. */`",365,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnPartialSHistoryDeactive","","`text /** * Called when this nsISHistory has became inactive history of a grouped * session history. */`",365,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnAttachGroupedSHistory","","`text /** * Called when it's attached to a nsIGroupedSHistory instance. * * @param offset The number of entries in the grouped session * history before this session history object. */`",365,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",366,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",366,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClassInfo` to one of its base interfaces.",366,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",366,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SINGLETON","","`text /** * Bitflags for 'flags' attribute. */`",366,null],[18,"THREADSAFE","","",366,null],[18,"MAIN_THREAD_ONLY","","",366,null],[18,"DOM_OBJECT","","",366,null],[18,"PLUGIN_OBJECT","","",366,null],[18,"SINGLETON_CLASSINFO","","",366,null],[18,"CONTENT_NODE","","`text /** * 'flags' attribute bitflag: whether objects of this type implement * nsIContent. */`",366,null],[18,"RESERVED","","",366,null],[11,"GetInterfaces","","`text /** * Get an ordered list of the interface ids that instances of the class * promise to implement. Note that nsISupports is an implicit member * of any such list and need not be included. * * Should set *count = 0 and *array = null and return NS_OK if getting the * list is not supported. */`",366,null],[11,"GetScriptableHelper","","`text /** * Return an object to assist XPConnect in supplying JavaScript-specific * behavior to callers of the instance object, or null if not needed. */`",366,null],[11,"GetContractID","","`text /** * A contract ID through which an instance of this class can be created * (or accessed as a service, if |flags & SINGLETON|), or null/void. */`",366,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetClassDescription","","`text /** * A human readable string naming the class, or null/void. */`",366,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetClassID","","`text /** * A class ID through which an instance of this class can be created * (or accessed as a service, if |flags & SINGLETON|), or null. */`",366,null],[11,"GetFlags","","`readonly attribute uint32_t flags;`",366,null],[11,"GetClassIDNoAlloc","","`text /** * Also a class ID through which an instance of this class can be created * (or accessed as a service, if |flags & SINGLETON|). If the class does * not have a CID, it should return NS_ERROR_NOT_AVAILABLE. This attribute * exists so C++ callers can avoid allocating and freeing a CID, as would * happen if they used classID. */`",366,null],[11,"addref","","",367,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",367,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWyciwygChannel` to one of its base interfaces.",367,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",367,{"inputs":[{"name":"self"}],"output":{"name":"nsichannel"}}],[11,"WriteToCacheEntry","","`text /** * Append data to the cache entry; opens the cache entry if necessary. */`",367,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CloseCacheEntry","","`text /** * Close the cache entry; subsequent writes have undefined behavior. */`",367,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"SetSecurityInfo","","`text /** * Set the wyciwyg channels security info */`",367,null],[11,"SetCharsetAndSource","","`text /** * Store and read a charset and charset source on the wyciwyg channel. These * are opaque values to the channel; consumers who set them should know what * they mean. */`",367,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCharsetAndSource","","`text /** * The return value is the charset. Throws if either the charset or the * source cannot be retrieved. This is guaranteed to return a nonzero source * and a nonempty charset if it does not throw. */`",367,null],[11,"addref","","",368,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",368,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIAsyncLivemarks` to one of its base interfaces.",368,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",368,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReloadLivemarks","","`text /** * Reloads all livemarks if they are expired or if forced to do so. * * @param [optional]aForceUpdate * If set to true forces a reload even if contents are still valid. * * @note The update process is asynchronous, observers registered through * registerForUpdates will be notified of updated contents. */`",368,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",369,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",369,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozILivemarkInfo` to one of its base interfaces.",369,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",369,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`text /** * Id of the bookmarks folder representing this livemark. * * @deprecated Use guid instead. */`",369,null],[11,"GetGuid","","`text /** * The globally unique identifier of this livemark. */`",369,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** * Title of this livemark. */`",369,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParentId","","`text /** * Id of the bookmarks parent folder containing this livemark. * * @deprecated Use parentGuid instead. */`",369,null],[11,"GetParentGuid","","`text /** * Guid of the bookmarks parent folder containing this livemark. */`",369,null],[11,"GetIndex","","`text /** * The position of this livemark in the bookmarks parent folder. */`",369,null],[11,"GetDateAdded","","`text /** * Time this livemark was created. */`",369,null],[11,"GetLastModified","","`text /** * Time this livemark's details were last modified. Doesn't track changes to * the livemark contents. */`",369,null],[11,"GetFeedURI","","`text /** * The URI of the syndication feed associated with this livemark. */`",369,null],[11,"GetSiteURI","","`text /** * The URI of the website associated with this livemark. */`",369,null],[11,"addref","","",370,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",370,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozILivemark` to one of its base interfaces.",370,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",370,{"inputs":[{"name":"self"}],"output":{"name":"mozilivemarkinfo"}}],[18,"STATUS_READY","","",370,null],[18,"STATUS_LOADING","","",370,null],[18,"STATUS_FAILED","","",370,null],[11,"GetStatus","","`text /** * Status of this livemark. One of the STATUS_* constants above. */`",370,null],[11,"Reload","","`text /** * Reload livemark contents if they are expired or if forced to do so. * * @param [optional]aForceUpdate * If set to true forces a reload even if contents are still valid. * * @note The update process is asynchronous, it's possible to register a * result observer to be notified of updated contents through * registerForUpdates. */`",370,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",371,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",371,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFDataSource` to one of its base interfaces.",371,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",371,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetURI","","`text /** The \"URI\" of the data source. This used by the RDF service's * |GetDataSource()| method to cache datasources. */`",371,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSource","","`text /** Find an RDF resource that points to a given node over the * specified arc & truth value * * @throws NS_RDF_NO_VALUE if there is no source that leads * to the target with the specified property. */`",371,null],[11,"GetSources","","`text /** * Find all RDF resources that point to a given node over the * specified arc & truth value */`",371,null],[11,"GetTarget","","`text /** * Find a child of that is related to the source by the given arc * arc and truth value * * @throws NS_RDF_NO_VALUE if there is no target accessible from the * source via the specified property. */`",371,null],[11,"GetTargets","","`text /** * Find all children of that are related to the source by the given arc * arc and truth value. */`",371,null],[11,"Assert","","`text /** * Add an assertion to the graph. */`",371,null],[11,"Unassert","","`text /** * Remove an assertion from the graph. */`",371,null],[11,"Change","","`text /** * Change an assertion from * * [aSource]--[aProperty]-->[aOldTarget] * * to * * [aSource]--[aProperty]-->[aNewTarget] */`",371,null],[11,"Move","","`text /** * 'Move' an assertion from * * [aOldSource]--[aProperty]-->[aTarget] * * to * * [aNewSource]--[aProperty]-->[aTarget] */`",371,null],[11,"HasAssertion","","`text /** * Query whether an assertion exists in this graph. */`",371,null],[11,"AddObserver","","`text /** * Add an observer to this data source. If the datasource * supports observers, the datasource source should hold a strong * reference to the observer. */`",371,null],[11,"RemoveObserver","","`text /** * Remove an observer from this data source. */`",371,null],[11,"ArcLabelsIn","","`text /** * Get a cursor to iterate over all the arcs that point into a node. */`",371,null],[11,"ArcLabelsOut","","`text /** * Get a cursor to iterate over all the arcs that originate in * a resource. */`",371,null],[11,"GetAllResources","","`text /** * Retrieve all of the resources that the data source currently * refers to. */`",371,null],[11,"IsCommandEnabled","","`text /** * Returns whether a given command is enabled for a set of sources. */`",371,null],[11,"DoCommand","","`text /** * Perform the specified command on set of sources. */`",371,null],[11,"GetAllCmds","","`text /** * Returns the set of all commands defined for a given source. */`",371,null],[11,"HasArcIn","","`text /** * Returns true if the specified node is pointed to by the specified arc. * Equivalent to enumerating ArcLabelsIn and comparing for the specified arc. */`",371,null],[11,"HasArcOut","","`text /** * Returns true if the specified node has the specified outward arc. * Equivalent to enumerating ArcLabelsOut and comparing for the specified arc. */`",371,null],[11,"BeginUpdateBatch","","`text /** * Notify observers that the datasource is about to send several * notifications at once. * This must be followed by calling endUpdateBatch(), otherwise * viewers will get out of sync. */`",371,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndUpdateBatch","","`text /** * Notify observers that the datasource has completed issuing * a notification group. */`",371,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",372,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",372,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSRuleList` to one of its base interfaces.",372,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",372,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`text /** * The nsIDOMCSSRuleList interface is a datatype for a list of CSS * style rules in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",372,null],[11,"Item","","`nsIDOMCSSRule item (in unsigned long index);`",372,null],[11,"addref","","",373,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",373,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIParentalControlsService` to one of its base interfaces.",373,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",373,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DOWNLOAD","","`text /** * Action types that can be blocked for users. */`",373,null],[18,"INSTALL_EXTENSION","","",373,null],[18,"INSTALL_APP","","",373,null],[18,"BROWSE","","",373,null],[18,"SHARE","","",373,null],[18,"BOOKMARK","","",373,null],[18,"ADD_CONTACT","","",373,null],[18,"SET_IMAGE","","",373,null],[18,"MODIFY_ACCOUNTS","","",373,null],[18,"REMOTE_DEBUGGING","","",373,null],[18,"IMPORT_SETTINGS","","",373,null],[18,"PRIVATE_BROWSING","","",373,null],[18,"DATA_CHOICES","","",373,null],[18,"CLEAR_HISTORY","","",373,null],[18,"MASTER_PASSWORD","","",373,null],[18,"GUEST_BROWSING","","",373,null],[18,"ADVANCED_SETTINGS","","",373,null],[18,"CAMERA_MICROPHONE","","",373,null],[18,"BLOCK_LIST","","",373,null],[18,"TELEMETRY","","",373,null],[18,"HEALTH_REPORT","","",373,null],[18,"DEFAULT_THEME","","",373,null],[18,"ePCLog_URIVisit","","`text /** * Log entry types. Additional types can be defined and implemented * as needed. Other possible event types might include email events, * media related events, and IM events. */`",373,null],[18,"ePCLog_FileDownload","","",373,null],[11,"GetParentalControlsEnabled","","`text /** * @returns true if the current user account has parental controls * restrictions enabled. */`",373,null],[11,"GetBlockFileDownloadsEnabled","","`text /** * @returns true if the current user account parental controls * restrictions include the blocking of all file downloads. */`",373,null],[11,"IsAllowed","","`text /** * Check if the user can do the prescibed action for this uri. * * @param aAction Action being performed * @param aUri The uri requesting this action * @param aWindow The window generating this event. */`",373,null],[11,"RequestURIOverride","","`text /** * Request that blocked URI(s) be allowed through parental * control filters. Returns true if the URI was successfully * overriden. Note, may block while native UI is shown. * * @param aTarget(s) URI to be overridden. In the case of * multiple URI, the first URI in the array * should be the root URI of the site. * @param window Window that generates the event. */`",373,null],[11,"RequestURIOverrides","","`boolean requestURIOverrides (in nsIArray aTargets, [optional] in nsIInterfaceRequestor aWindowContext);`",373,null],[11,"GetLoggingEnabled","","`text /** * @returns true if the current user account has parental controls * logging enabled. If true, applications should log relevent events * using 'log'. */`",373,null],[11,"Log","","`text /** * Log an application specific parental controls * event. * * @param aEntryType Constant defining the type of event. * @param aFlag A flag indicating if the subject content * was blocked. * @param aSource The URI source of the subject content. * @param aTarget The location the content was saved to if * no blocking occurred. */`",373,null],[11,"addref","","",374,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",374,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIDownloadPlatform` to one of its base interfaces.",374,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",374,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ZONE_MY_COMPUTER","","`text /** * Security Zone constants. Used by mapUrlToZone(). */`",374,null],[18,"ZONE_INTRANET","","",374,null],[18,"ZONE_TRUSTED","","",374,null],[18,"ZONE_INTERNET","","",374,null],[18,"ZONE_RESTRICTED","","",374,null],[11,"DownloadDone","","`text /** * Perform platform specific operations when a download is done. * * Windows: * Add the download to the recent documents list * Set the file to be indexed for searching * Mac: * Bounce the downloads dock icon * GTK: * Add the download to the recent documents list * Save the source uri in the downloaded file's metadata * Android: * Scan media * * @param aSource * Source URI of the download * @param aReferrer * Referrer URI of the download * @param aTarget * Downloaded file * @param aContentType * The source's content type * @param aIsPrivate * True for private downloads * @return none */`",374,null],[11,"MapUrlToZone","","`text /** * Proxy for IInternetSecurityManager::MapUrlToZone(). * * Windows only. * * @param aURL * URI of the download * @return Security Zone corresponding to aURL. */`",374,null],[11,"addref","","",375,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",375,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRemoteWindowContext` to one of its base interfaces.",375,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",375,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OpenURI","","`void openURI (in nsIURI aURI);`",375,null],[11,"addref","","",376,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",376,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransactionManager` to one of its base interfaces.",376,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",376,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DoTransaction","","`text /** * The nsITransactionManager interface. * <P> * This interface is implemented by an object that wants to * manage/track transactions. */ /** * Calls a transaction's doTransaction() method, then pushes it on the * undo stack. * <P> * This method calls the transaction's AddRef() method. * The transaction's Release() method will be called when the undo or redo * stack is pruned or when the transaction manager is destroyed. * @param aTransaction the transaction to do. */`",376,null],[11,"UndoTransaction","","`text /** * Pops the topmost transaction on the undo stack, calls its * undoTransaction() method, then pushes it on the redo stack. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RedoTransaction","","`text /** * Pops the topmost transaction on the redo stack, calls its * redoTransaction() method, then pushes it on the undo stack. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Clear","","`text /** * Clears the undo and redo stacks. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearUndoStack","","`text /** * Clears the undo stack only. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearRedoStack","","`text /** * Clears the redo stack only. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginBatch","","`text /** * Turns on the transaction manager's batch mode, forcing all transactions * executed by the transaction manager's doTransaction() method to be * aggregated together until EndBatch() is called. This mode allows an * application to execute and group together several independent transactions * so they can be undone with a single call to undoTransaction(). * @param aData An arbitrary nsISupports object that is associated with the * batch. Can be retrieved from the undo or redo stacks. */`",376,null],[11,"EndBatch","","`text /** * Turns off the transaction manager's batch mode. * @param aAllowEmpty If true, a batch containing no children will be * pushed onto the undo stack. Otherwise, ending a batch with no * children will result in no transactions being pushed on the undo stack. */`",376,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetNumberOfUndoItems","","`text /** * The number of items on the undo stack. */`",376,null],[11,"GetNumberOfRedoItems","","`text /** * The number of items on the redo stack. */`",376,null],[11,"GetMaxTransactionCount","","`text /** * Sets the maximum number of transaction items the transaction manager will * maintain at any time. This is commonly referred to as the number of levels * of undo. * @param aMaxCount A value of -1 means no limit. A value of zero means the * transaction manager will execute each transaction, then immediately release * all references it has to the transaction without pushing it on the undo * stack. A value greater than zero indicates the max number of transactions * that can exist at any time on both the undo and redo stacks. This method * will prune the necessary number of transactions on the undo and redo * stacks if the value specified is less than the number of items that exist * on both the undo and redo stacks. */`",376,null],[11,"SetMaxTransactionCount","","`text /** * Sets the maximum number of transaction items the transaction manager will * maintain at any time. This is commonly referred to as the number of levels * of undo. * @param aMaxCount A value of -1 means no limit. A value of zero means the * transaction manager will execute each transaction, then immediately release * all references it has to the transaction without pushing it on the undo * stack. A value greater than zero indicates the max number of transactions * that can exist at any time on both the undo and redo stacks. This method * will prune the necessary number of transactions on the undo and redo * stacks if the value specified is less than the number of items that exist * on both the undo and redo stacks. */`",376,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"BatchTopUndo","","`text /** * Combines the transaction at the top of the undo stack (if any) with the * preceding undo transaction (if any) into a batch transaction. Thus, * a call to undoTransaction() will undo both transactions. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveTopUndo","","`text /** * Removes the transaction at the top of the undo stack (if any) without * transacting. */`",376,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PeekUndoStack","","`text /** * Returns an AddRef'd pointer to the transaction at the top of the * undo stack. Callers should be aware that this method could return * return a null in some implementations if there is a batch at the top * of the undo stack. */`",376,null],[11,"PeekRedoStack","","`text /** * Returns an AddRef'd pointer to the transaction at the top of the * redo stack. Callers should be aware that this method could return * return a null in some implementations if there is a batch at the top * of the redo stack. */`",376,null],[11,"AddListener","","`text /** * Adds a listener to the transaction manager's notification list. Listeners * are notified whenever a transaction is done, undone, or redone. * <P> * The listener's AddRef() method is called. * @param aListener the lister to add. */`",376,null],[11,"RemoveListener","","`text /** * Removes a listener from the transaction manager's notification list. * <P> * The listener's Release() method is called. * @param aListener the lister to remove. */`",376,null],[11,"addref","","",377,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",377,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerTestCallback` to one of its base interfaces.",377,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",377,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Onmessage","","`void onmessage (in DOMString data);`",377,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Onerror","","`void onerror (in DOMString data);`",377,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",378,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",378,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerTest` to one of its base interfaces.",378,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",378,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PostMessage","","`void postMessage (in DOMString data);`",378,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Terminate","","`void terminate ();`",378,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetCallback","","`attribute nsIWorkerTestCallback callback;`",378,null],[11,"SetCallback","","`attribute nsIWorkerTestCallback callback;`",378,null],[11,"addref","","",379,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",379,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorObserver` to one of its base interfaces.",379,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",379,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EditAction","","`text /** * Called after the editor completes a user action. */`",379,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeforeEditAction","","`text /** * Called when editor starts to handle a user action. I.e., This must be * called before the first DOM change. */`",379,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CancelEditAction","","`text /** * Called after BeforeEditAction() is called but EditorAction() won't be * called. */`",379,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",380,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeContentView` to one of its base interfaces.",380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",380,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetItemAtIndex","","`text /** * Retrieve the content item associated with the specified index. */`",380,null],[11,"GetIndexOfItem","","`text /** * Retrieve the index associated with the specified content item. */`",380,null],[11,"addref","","",381,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",381,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFinalizationWitnessService` to one of its base interfaces.",381,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",381,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",382,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",382,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inISearchProcess` to one of its base interfaces.",382,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",382,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsActive","","`readonly attribute boolean isActive;`",382,null],[11,"GetResultCount","","`readonly attribute long resultCount;`",382,null],[11,"GetHoldResults","","`attribute boolean holdResults;`",382,null],[11,"SetHoldResults","","`attribute boolean holdResults;`",382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SearchSync","","`void searchSync ();`",382,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SearchAsync","","`void searchAsync (in inISearchObserver aObserver);`",382,null],[11,"SearchStop","","`void searchStop ();`",382,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SearchStep","","`boolean searchStep ();`",382,null],[11,"GetStringResultAt","","`AString getStringResultAt (in long aIndex);`",382,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIntResultAt","","`long getIntResultAt (in long aIndex);`",382,null],[11,"GetUIntResultAt","","`unsigned long getUIntResultAt (in long aIndex);`",382,null],[11,"addref","","",383,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",383,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentActionCallback` to one of its base interfaces.",383,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",383,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RespondPayment","","`void respondPayment (in nsIPaymentActionResponse aResponse);`",383,null],[11,"ChangeShippingAddress","","`void changeShippingAddress (in AString aRequestId, in nsIPaymentAddress aAddress);`",383,null],[11,"ChangeShippingOption","","`void changeShippingOption (in AString aRequestId, in AString aOption);`",383,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",384,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",384,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentActionRequest` to one of its base interfaces.",384,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",384,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNKNOWN_ACTION","","",384,null],[18,"CREATE_ACTION","","",384,null],[18,"CANMAKE_ACTION","","",384,null],[18,"SHOW_ACTION","","",384,null],[18,"ABORT_ACTION","","",384,null],[18,"COMPLETE_ACTION","","",384,null],[18,"UPDATE_ACTION","","",384,null],[11,"GetRequestId","","`readonly attribute AString requestId;`",384,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`readonly attribute uint32_t type;`",384,null],[11,"GetCallback","","`readonly attribute nsIPaymentActionCallback callback;`",384,null],[11,"Init","","`void init (in AString aRequestId, in uint32_t aType, in nsIPaymentActionCallback aCallback);`",384,null],[11,"addref","","",385,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",385,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentCreateActionRequest` to one of its base interfaces.",385,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",385,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionrequest"}}],[11,"GetTabId","","`readonly attribute uint64_t tabId;`",385,null],[11,"GetTopLevelPrincipal","","`readonly attribute nsIPrincipal topLevelPrincipal;`",385,null],[11,"GetMethodData","","`readonly attribute nsIArray methodData;`",385,null],[11,"GetDetails","","`readonly attribute nsIPaymentDetails details;`",385,null],[11,"GetOptions","","`readonly attribute nsIPaymentOptions options;`",385,null],[11,"InitRequest","","`void initRequest (in AString aRequestId, in nsIPaymentActionCallback aCallback, in uint64_t aTabId, in nsIPrincipal aPrincipal, in nsIArray aMethodData, in nsIPaymentDetails aDetails, in nsIPaymentOptions aOptions);`",385,null],[11,"addref","","",386,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",386,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentCompleteActionRequest` to one of its base interfaces.",386,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",386,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionrequest"}}],[11,"GetCompleteStatus","","`readonly attribute AString completeStatus;`",386,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitRequest","","`void initRequest (in AString aRequestId, in nsIPaymentActionCallback aCallback, in AString aCompleteStatus);`",386,null],[11,"addref","","",387,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",387,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentUpdateActionRequest` to one of its base interfaces.",387,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",387,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionrequest"}}],[11,"GetDetails","","`readonly attribute nsIPaymentDetails details;`",387,null],[11,"InitRequest","","`void initRequest (in AString aRequestId, in nsIPaymentActionCallback aCallback, in nsIPaymentDetails aDetails);`",387,null],[11,"addref","","",388,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",388,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULLabeledControlElement` to one of its base interfaces.",388,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",388,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulcontrolelement"}}],[11,"GetCrop","","`attribute DOMString crop;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCrop","","`attribute DOMString crop;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImage","","`attribute DOMString image;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetImage","","`attribute DOMString image;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLabel","","`attribute DOMString label;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetLabel","","`attribute DOMString label;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAccessKey","","`attribute DOMString accessKey;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAccessKey","","`attribute DOMString accessKey;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCommand","","`attribute DOMString command;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCommand","","`attribute DOMString command;`",388,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",389,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",389,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentResponseData` to one of its base interfaces.",389,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",389,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"GENERAL_RESPONSE","","`text /** * The consts for representing the response data type. * GENERAL_RESPONSE is the general purpose response data type. Except basic * card response data, all response data should belong to this type. * BASICCARD_RESPONSE is a special response data type for basic card response. */`",389,null],[18,"BASICCARD_RESPONSE","","",389,null],[11,"GetType","","`text /** * The response data type. * Using the above defined consts(GENERAL_RESPONSE or BASICCARD_RESPONSE). */`",389,null],[11,"Init","","`text /** * The initial method. * @param aType - the response data type. */`",389,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",390,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",390,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGeneralResponseData` to one of its base interfaces.",390,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",390,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentresponsedata"}}],[11,"GetData","","`text /** * The stringified response data. */`",390,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",391,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",391,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBasicCardResponseData` to one of its base interfaces.",391,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",391,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentresponsedata"}}],[11,"GetData","","`text /** * The stringified response data. */`",391,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitData","","`text /** * The initial method for nsIBasicCardResponseData. * @param aCardholderName - the cardholder name. * @param aCardNumber - the card number. * @param aExpiryMonth - the expiry month. * @param aExpiryYear - the expiry year. * @param aCardSecurityCode - the card security code. * @param aBillingAddreess - the billing address. */`",391,null],[11,"addref","","",392,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",392,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentActionResponse` to one of its base interfaces.",392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",392,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_TYPE","","`text /** * The response type. * Align type to nsIPaymentActionRequest types, * where 1 is for payment request creation. * the action expects no response from UI module. */`",392,null],[18,"CANMAKE_ACTION","","",392,null],[18,"SHOW_ACTION","","",392,null],[18,"ABORT_ACTION","","",392,null],[18,"COMPLETE_ACTION","","",392,null],[18,"ABORT_SUCCEEDED","","`text /** * The abort status. */`",392,null],[18,"ABORT_FAILED","","",392,null],[18,"PAYMENT_REJECTED","","`text /** * The payment status. */`",392,null],[18,"PAYMENT_ACCEPTED","","",392,null],[18,"PAYMENT_NOTSUPPORTED","","",392,null],[18,"COMPLETE_SUCCEEDED","","`text /** * The complete status. */`",392,null],[18,"COMPLETE_FAILED","","",392,null],[11,"GetRequestId","","`readonly attribute AString requestId;`",392,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`readonly attribute uint32_t type;`",392,null],[11,"addref","","",393,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",393,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentCanMakeActionResponse` to one of its base interfaces.",393,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",393,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionresponse"}}],[11,"GetResult","","`text /** * The result of canMakePayment action. */`",393,null],[11,"Init","","`text /** * The initial method. * @param aRequestId - the request identifier of the payment request. * @param aResult - the canMakePayment result. */`",393,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",394,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",394,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentShowActionResponse` to one of its base interfaces.",394,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",394,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionresponse"}}],[11,"GetAcceptStatus","","`text /** * Accept status of the payment. * Using the defined consts(PAYMENT_XXX) in nsIPaymentActionResponse. */`",394,null],[11,"GetMethodName","","`text /** * The decided payment method name. i.e. \"basic-card\". */`",394,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetData","","`text /** * The data needed by the payment method. (it must be serializable) */`",394,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPayerName","","`text /** * The payer name information. */`",394,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPayerEmail","","`text /** * The payer email information. */`",394,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPayerPhone","","`text /** * The payer phone information. */`",394,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * The initial method. * @param aRequestId - the request identifier of the payment request. * @param aAcceptStatus - the payment status. * @param aMethodName - the decided method name. * @param aData - the response data for the decided payment method. * @param aPayerName - the payer's name. * @param aPayerEmail - the payer's email. * @param aPayerPhone - the payer's phone. */`",394,null],[11,"addref","","",395,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",395,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentAbortActionResponse` to one of its base interfaces.",395,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",395,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionresponse"}}],[11,"GetAbortStatus","","`text /** * The abort action status. * Using the defined consts(ABORT_XXX) in nsIPaymentActionResponse. */`",395,null],[11,"Init","","`text /** * The Initial method. * @param aRequestId - the request identifier of payment request. * @param aAbortStatus - the abort action result. */`",395,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"IsSucceeded","","`text /** * Check if the abort action is succeeded */`",395,null],[11,"addref","","",396,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",396,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentCompleteActionResponse` to one of its base interfaces.",396,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",396,{"inputs":[{"name":"self"}],"output":{"name":"nsipaymentactionresponse"}}],[11,"GetCompleteStatus","","`text /** * The complete action status. * Using the defined consts(COMPLETE_XXX) in nsIPaymentActionResponse. */`",396,null],[11,"Init","","`text /** * The Initial method. * @param aRequestId - the request identifier of payment request. * @param aCompleteStatus - the complete action result. */`",396,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"IsCompleted","","`text /** * Check if the complete action is succeeded. */`",396,null],[11,"addref","","",397,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",397,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserChrome2` to one of its base interfaces.",397,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",397,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebbrowserchrome"}}],[11,"SetStatusWithContext","","`text /** * Called when the status text in the chrome needs to be updated. This * method may be called instead of nsIWebBrowserChrome::SetStatus. An * implementor of this method, should still implement SetStatus. * * @param statusType * Indicates what is setting the text. * @param status * Status string. Null is an acceptable value meaning no status. * @param contextNode * An object that provides context pertaining to the status type. * If statusType is STATUS_LINK, then statusContext may be a DOM * node corresponding to the source of the link. This value can * be null if there is no context. */`",397,null],[11,"addref","","",398,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",398,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebSocketFrame` to one of its base interfaces.",398,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",398,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"OPCODE_CONTINUATION","","",398,null],[18,"OPCODE_TEXT","","",398,null],[18,"OPCODE_BINARY","","",398,null],[18,"OPCODE_CLOSE","","",398,null],[18,"OPCODE_PING","","",398,null],[18,"OPCODE_PONG","","",398,null],[11,"GetTimeStamp","","`[must_use] readonly attribute DOMHighResTimeStamp timeStamp;`",398,null],[11,"GetFinBit","","`[must_use] readonly attribute boolean finBit;`",398,null],[11,"GetRsvBit1","","`[must_use] readonly attribute boolean rsvBit1;`",398,null],[11,"GetRsvBit2","","`[must_use] readonly attribute boolean rsvBit2;`",398,null],[11,"GetRsvBit3","","`[must_use] readonly attribute boolean rsvBit3;`",398,null],[11,"GetOpCode","","`[must_use] readonly attribute unsigned short opCode;`",398,null],[11,"GetMaskBit","","`[must_use] readonly attribute boolean maskBit;`",398,null],[11,"GetMask","","`[must_use] readonly attribute unsigned long mask;`",398,null],[11,"GetPayload","","`[must_use] readonly attribute ACString payload;`",398,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",399,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",399,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebSocketEventListener` to one of its base interfaces.",399,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",399,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_STRING","","",399,null],[18,"TYPE_BLOB","","",399,null],[18,"TYPE_ARRAYBUFFER","","",399,null],[11,"WebSocketCreated","","`[must_use] void webSocketCreated (in unsigned long aWebSocketSerialID, in AString aURI, in ACString aProtocols);`",399,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"WebSocketOpened","","`[must_use] void webSocketOpened (in unsigned long aWebSocketSerialID, in AString aEffectiveURI, in ACString aProtocols, in ACString aExtensions);`",399,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"WebSocketMessageAvailable","","`[must_use] void webSocketMessageAvailable (in unsigned long aWebSocketSerialID, in ACString aMessage, in unsigned short aType);`",399,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"WebSocketClosed","","`[must_use] void webSocketClosed (in unsigned long aWebSocketSerialID, in boolean aWasClean, in unsigned short aCode, in AString aReason);`",399,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"bool"},{"name":"uint16_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FrameReceived","","`[must_use] void frameReceived (in unsigned long aWebSocketSerialID, in nsIWebSocketFrame aFrame);`",399,null],[11,"FrameSent","","`[must_use] void frameSent (in unsigned long aWebSocketSerialID, in nsIWebSocketFrame aFrame);`",399,null],[11,"addref","","",400,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",400,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebSocketEventService` to one of its base interfaces.",400,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",400,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddListener","","`[must_use] void addListener (in unsigned long long aInnerWindowID, in nsIWebSocketEventListener aListener);`",400,null],[11,"RemoveListener","","`[must_use] void removeListener (in unsigned long long aInnerWindowID, in nsIWebSocketEventListener aListener);`",400,null],[11,"HasListenerFor","","`[must_use] bool hasListenerFor (in unsigned long long aInnerWindowID);`",400,null],[11,"addref","","",401,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",401,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServerSocket` to one of its base interfaces.",401,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",401,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LoopbackOnly","","`text /** * @name Server Socket Flags * These flags define various socket options. * @{ */`",401,null],[18,"KeepWhenOffline","","",401,null],[11,"Init","","`text /** @} */ /** * init * * This method initializes a server socket. * * @param aPort * The port of the server socket. Pass -1 to indicate no preference, * and a port will be selected automatically. * @param aLoopbackOnly * If true, the server socket will only respond to connections on the * local loopback interface. Otherwise, it will accept connections * from any interface. To specify a particular network interface, * use initWithAddress. * @param aBackLog * The maximum length the queue of pending connections may grow to. * This parameter may be silently limited by the operating system. * Pass -1 to use the default value. */`",401,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InitSpecialConnection","","`text /** * initSpecialConnection * * This method initializes a server socket and offers the ability to have * that socket not get terminated if Gecko is set offline. * * @param aPort * The port of the server socket. Pass -1 to indicate no preference, * and a port will be selected automatically. * @param aFlags * Flags for the socket. * @param aBackLog * The maximum length the queue of pending connections may grow to. * This parameter may be silently limited by the operating system. * Pass -1 to use the default value. */`",401,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsserversocketflag"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InitWithFilename","","`text /** * initWithFilename * * This method initializes a Unix domain or \"local\" server socket. Such * a socket has a name in the filesystem, like an ordinary file. To * connect, a client supplies the socket's filename, and the usual * permission checks on socket apply. * * This makes Unix domain sockets useful for communication between the * programs being run by a specific user on a single machine: the * operating system takes care of authentication, and the user's home * directory or profile directory provide natural per-user rendezvous * points. * * Since Unix domain sockets are always local to the machine, they are * not affected by the nsIIOService's 'offline' flag. * * The system-level socket API may impose restrictions on the length of * the filename that are stricter than those of the underlying * filesystem. If the file name is too long, this returns * NS_ERROR_FILE_NAME_TOO_LONG. * * All components of the path prefix of |aPath| must name directories; * otherwise, this returns NS_ERROR_FILE_NOT_DIRECTORY. * * This call requires execute permission on all directories containing * the one in which the socket is to be created, and write and execute * permission on the directory itself. Otherwise, this returns * NS_ERROR_CONNECTION_REFUSED. * * This call creates the socket's directory entry. There must not be * any existing entry with the given name. If there is, this returns * NS_ERROR_SOCKET_ADDRESS_IN_USE. * * On systems that don't support Unix domain sockets at all, this * returns NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED. * * @param aPath nsIFile * The file name at which the socket should be created. * * @param aPermissions unsigned long * Unix-style permission bits to be applied to the new socket. * * Note about permissions: Linux's unix(7) man page claims that some * BSD-derived systems ignore permissions on UNIX-domain sockets; * NetBSD's bind(2) man page agrees, but says it does check now (dated * 2005). POSIX has required 'connect' to fail if write permission on * the socket itself is not granted since 2003 (Issue 6). NetBSD says * that the permissions on the containing directory (execute) have * always applied, so creating sockets in appropriately protected * directories should be secure on both old and new systems. */`",401,null],[11,"Close","","`text /** * close * * This method closes a server socket. This does not affect already * connected client sockets (i.e., the nsISocketTransport instances * created from this server socket). This will cause the onStopListening * event to asynchronously fire with a status of NS_BINDING_ABORTED. */`",401,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AsyncListen","","`text /** * asyncListen * * This method puts the server socket in the listening state. It will * asynchronously listen for and accept client connections. The listener * will be notified once for each client connection that is accepted. The * listener's onSocketAccepted method will be called on the same thread * that called asyncListen (the calling thread must have a nsIEventTarget). * * The listener will be passed a reference to an already connected socket * transport (nsISocketTransport). See below for more details. * * @param aListener * The listener to be notified when client connections are accepted. */`",401,null],[11,"GetPort","","`text /** * Returns the port of this server socket. */`",401,null],[11,"addref","","",402,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",402,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServerSocketListener` to one of its base interfaces.",402,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",402,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSocketAccepted","","`text /** * nsIServerSocketListener * * This interface is notified whenever a server socket accepts a new connection. * The transport is in the connected state, and read/write streams can be opened * using the normal nsITransport API. The address of the client can be found by * calling the nsISocketTransport::GetAddress method or by inspecting * nsISocketTransport::GetHost, which returns a string representation of the * client's IP address (NOTE: this may be an IPv4 or IPv6 string literal). */ /** * onSocketAccepted * * This method is called when a client connection is accepted. * * @param aServ * The server socket. * @param aTransport * The connected socket transport. */`",402,null],[11,"OnStopListening","","`text /** * onStopListening * * This method is called when the listening socket stops for some reason. * The server socket is effectively dead after this notification. * * @param aServ * The server socket. * @param aStatus * The reason why the server socket stopped listening. If the * server socket was manually closed, then this value will be * NS_BINDING_ABORTED. */`",402,null],[11,"addref","","",403,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",403,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProxiedProtocolHandler` to one of its base interfaces.",403,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",403,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolhandler"}}],[11,"NewProxiedChannel2","","`text /** Create a new channel with the given proxyInfo * * @param uri the channel uri * @param proxyInfo any proxy information that has already been determined, * or null if channel should later determine the proxy on its own using * proxyResolveFlags/proxyURI * @param proxyResolveFlags used if the proxy is later determined * from nsIProtocolProxyService::asyncResolve * @param proxyURI used if the proxy is later determined from * nsIProtocolProxyService::asyncResolve with this as the proxyURI name. * Generally this is the same as uri (or null which has the same * effect), except in the case of websockets which wants to bootstrap * to an http:// channel but make its proxy determination based on * a ws:// uri. * @param aLoadInfo used to evaluate who initated the resource request. */`",403,null],[11,"NewProxiedChannel","","`text /** Create a new channel with the given proxyInfo * * @param uri the channel uri * @param proxyInfo any proxy information that has already been determined, * or null if channel should later determine the proxy on its own using * proxyResolveFlags/proxyURI * @param proxyResolveFlags used if the proxy is later determined * from nsIProtocolProxyService::asyncResolve * @param proxyURI used if the proxy is later determined from * nsIProtocolProxyService::asyncResolve with this as the proxyURI name. * Generally this is the same as uri (or null which has the same * effect), except in the case of websockets which wants to bootstrap * to an http:// channel but make its proxy determination based on * a ws:// uri. */`",403,null],[11,"addref","","",404,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",404,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStorageStream` to one of its base interfaces.",404,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",404,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * * Initialize the stream, setting up the amount of space that will be * allocated for the stream's backing-store. * * @param segmentSize * Size of each segment. Must be a power of two. * @param maxSize * Maximum total size of this stream. length will always be less * than or equal to this value. Passing UINT32_MAX is safe. */`",404,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetOutputStream","","`text /** * Get a reference to the one and only output stream for this instance. * The zero-based startPosition argument is used is used to set the initial * write cursor position. The startPosition cannot be set larger than the * current buffer length. Calling this method has the side-effect of * truncating the internal buffer to startPosition bytes. */`",404,null],[11,"NewInputStream","","`text /** * Create a new input stream to read data (written by the singleton output * stream) from the internal buffer. Multiple, independent input streams * can be created. */`",404,null],[11,"GetLength","","`text /** * The length attribute indicates the total number of bytes stored in the * nsIStorageStream internal buffer, regardless of any consumption by input * streams. Assigning to the length field can be used to truncate the * buffer data, but can not be used when either the instance's output * stream is in use. * * @See #writeInProgress */`",404,null],[11,"SetLength","","`text /** * The length attribute indicates the total number of bytes stored in the * nsIStorageStream internal buffer, regardless of any consumption by input * streams. Assigning to the length field can be used to truncate the * buffer data, but can not be used when either the instance's output * stream is in use. * * @See #writeInProgress */`",404,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetWriteInProgress","","`text /** * True, when output stream has not yet been Close'ed */`",404,null],[11,"addref","","",405,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",405,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptableUnicodeConverter` to one of its base interfaces.",405,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",405,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConvertFromUnicode","","`text /** * Converts the data from Unicode to one Charset. * Returns the converted string. After converting, Finish should be called * and its return value appended to this return value. */`",405,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Finish","","`text /** * Returns the terminator string. * Should be called after ConvertFromUnicode() and appended to that * function's return value. */`",405,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ConvertToUnicode","","`text /** * Converts the data from one Charset to Unicode. */`",405,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ConvertFromByteArray","","`text /** * Converts an array of bytes to a unicode string. */`",405,null],[11,"ConvertToByteArray","","`text /** * Convert a unicode string to an array of bytes. Finish does not need to be * called. */`",405,null],[11,"ConvertToInputStream","","`text /** * Converts a unicode string to an input stream. The bytes in the stream are * encoded according to the charset attribute. * The returned stream will be nonblocking. */`",405,null],[11,"GetCharset","","`text /** * Current character set. * * @throw NS_ERROR_UCONV_NOCONV * The requested charset is not supported. */`",405,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetCharset","","`text /** * Current character set. * * @throw NS_ERROR_UCONV_NOCONV * The requested charset is not supported. */`",405,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsInternal","","`text /** * Meaningless */`",405,null],[11,"SetIsInternal","","`text /** * Meaningless */`",405,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",406,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",406,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIForcePendingChannel` to one of its base interfaces.",406,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",406,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ForcePending","","`text /** * forcePending(true) overrides the normal behavior for the * channel's IsPending(), forcing 'true' to be returned. A call to * forcePending(false) reverts IsPending() back to normal behavior. */`",406,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",407,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",407,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExternalProtocolHandler` to one of its base interfaces.",407,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",407,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolhandler"}}],[11,"ExternalAppExistsForScheme","","`text /** * This method checks if the external handler exists for a given scheme. * * @param scheme external scheme. * @return TRUE if the external handler exists for the input scheme, FALSE otherwise. */`",407,null],[11,"addref","","",408,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",408,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInlineSpellChecker` to one of its base interfaces.",408,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",408,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSpellChecker","","`readonly attribute nsIEditorSpellCheck spellChecker;`",408,null],[11,"Init","","`void init (in nsIEditor aEditor);`",408,null],[11,"Cleanup","","`void cleanup (in boolean aDestroyingFrames);`",408,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEnableRealTimeSpell","","`attribute boolean enableRealTimeSpell;`",408,null],[11,"SetEnableRealTimeSpell","","`attribute boolean enableRealTimeSpell;`",408,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SpellCheckRange","","`void spellCheckRange (in nsIDOMRange aSelection);`",408,null],[11,"GetMisspelledWord","","`nsIDOMRange getMisspelledWord (in nsIDOMNode aNode, in long aOffset);`",408,null],[11,"ReplaceWord","","`void replaceWord (in nsIDOMNode aNode, in long aOffset, in AString aNewword);`",408,null],[11,"AddWordToDictionary","","`void addWordToDictionary (in AString aWord);`",408,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveWordFromDictionary","","`void removeWordFromDictionary (in AString aWord);`",408,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IgnoreWord","","`void ignoreWord (in AString aWord);`",408,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IgnoreWords","","`void ignoreWords ([array, size_is (aCount)] in wstring aWordsToIgnore, in unsigned long aCount);`",408,null],[11,"UpdateCurrentDictionary","","`void updateCurrentDictionary ();`",408,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSpellCheckPending","","`readonly attribute boolean spellCheckPending;`",408,null],[11,"addref","","",409,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",409,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQueryContentEventResult` to one of its base interfaces.",409,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",409,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetOffset","","`readonly attribute unsigned long offset;`",409,null],[11,"GetTentativeCaretOffset","","`readonly attribute unsigned long tentativeCaretOffset;`",409,null],[11,"GetReversed","","`readonly attribute boolean reversed;`",409,null],[11,"GetLeft","","`readonly attribute long left;`",409,null],[11,"GetTop","","`readonly attribute long top;`",409,null],[11,"GetWidth","","`readonly attribute long width;`",409,null],[11,"GetHeight","","`readonly attribute long height;`",409,null],[11,"GetText","","`readonly attribute AString text;`",409,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCharacterRect","","`void getCharacterRect (in long offset, out long left, out long top, out long width, out long height);`",409,null],[11,"GetSucceeded","","`readonly attribute boolean succeeded;`",409,null],[11,"GetNotFound","","`readonly attribute boolean notFound;`",409,null],[11,"GetTentativeCaretOffsetNotFound","","`readonly attribute boolean tentativeCaretOffsetNotFound;`",409,null],[11,"addref","","",410,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",410,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMClipboardEvent` to one of its base interfaces.",410,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",410,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClipboardData","","`readonly attribute nsIDOMDataTransfer clipboardData;`",410,null],[11,"InitClipboardEvent","","`[noscript] void initClipboardEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in nsIDOMDataTransfer clipboardData);`",410,null],[11,"addref","","",411,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",411,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULElement` to one of its base interfaces.",411,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",411,{"inputs":[{"name":"self"}],"output":{"name":"nsidomelement"}}],[11,"addref","","",412,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",412,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inIDOMUtils` to one of its base interfaces.",412,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",412,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EXCLUDE_SHORTHANDS","","",412,null],[18,"INCLUDE_ALIASES","","",412,null],[18,"TYPE_LENGTH","","",412,null],[18,"TYPE_PERCENTAGE","","",412,null],[18,"TYPE_COLOR","","",412,null],[18,"TYPE_URL","","",412,null],[18,"TYPE_ANGLE","","",412,null],[18,"TYPE_FREQUENCY","","",412,null],[18,"TYPE_TIME","","",412,null],[18,"TYPE_GRADIENT","","",412,null],[18,"TYPE_TIMING_FUNCTION","","",412,null],[18,"TYPE_IMAGE_RECT","","",412,null],[18,"TYPE_NUMBER","","",412,null],[11,"GetAllStyleSheets","","`void getAllStyleSheets (in nsIDOMDocument aDoc, [optional] out unsigned long aLength, [array, size_is (aLength), retval] out nsISupports aSheets);`",412,null],[11,"GetCSSStyleRules","","`nsIArrayExtensions getCSSStyleRules (in nsIDOMElement aElement, [optional] in DOMString aPseudo);`",412,null],[11,"GetRuleLine","","`text /** * Get the line number of a rule. * * @param nsIDOMCSSRule aRule The rule. * @return The rule's line number. Line numbers are 1-based. */`",412,null],[11,"GetRuleColumn","","`text /** * Get the column number of a rule. * * @param nsIDOMCSSRule aRule The rule. * @return The rule's column number. Column numbers are 1-based. */`",412,null],[11,"GetRelativeRuleLine","","`text /** * Like getRuleLine, but if the rule is in a <style> element, * returns a line number relative to the start of the element. * * @param nsIDOMCSSRule aRule the rule to examine * @return the line number of the rule, possibly relative to the * <style> element */`",412,null],[11,"GetSelectorCount","","`unsigned long getSelectorCount (in nsIDOMCSSStyleRule aRule);`",412,null],[11,"GetSelectorText","","`AString getSelectorText (in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex);`",412,null],[11,"GetSpecificity","","`unsigned long long getSpecificity (in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex);`",412,null],[11,"SelectorMatchesElement","","`bool selectorMatchesElement (in nsIDOMElement aElement, in nsIDOMCSSStyleRule aRule, in unsigned long aSelectorIndex, [optional] in DOMString aPseudo);`",412,null],[11,"IsInheritedProperty","","`bool isInheritedProperty (in AString aPropertyName);`",412,null],[11,"GetCSSPropertyNames","","`void getCSSPropertyNames ([optional] in unsigned long aFlags, [optional] out unsigned long aCount, [array, size_is (aCount), retval] out wstring aProps);`",412,null],[11,"GetCSSValuesForProperty","","`void getCSSValuesForProperty (in AString aProperty, [optional] out unsigned long aLength, [array, size_is (aLength), retval] out wstring aValues);`",412,null],[11,"RgbToColorName","","`AString rgbToColorName (in octet aR, in octet aG, in octet aB);`",412,{"inputs":[{"name":"self"},{"name":"uint8_t"},{"name":"uint8_t"},{"name":"uint8_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IsValidCSSColor","","`bool isValidCSSColor (in AString aColorString);`",412,null],[11,"GetSubpropertiesForCSSProperty","","`void getSubpropertiesForCSSProperty (in AString aProperty, [optional] out unsigned long aLength, [array, size_is (aLength), retval] out wstring aValues);`",412,null],[11,"CssPropertyIsShorthand","","`bool cssPropertyIsShorthand (in AString aProperty);`",412,null],[11,"CssPropertySupportsType","","`bool cssPropertySupportsType (in AString aProperty, in unsigned long type);`",412,null],[11,"IsIgnorableWhitespace","","`boolean isIgnorableWhitespace (in nsIDOMCharacterData aDataNode);`",412,null],[11,"GetParentForNode","","`nsIDOMNode getParentForNode (in nsIDOMNode aNode, in boolean aShowingAnonymousContent);`",412,null],[11,"GetChildrenForNode","","`nsIDOMNodeList getChildrenForNode (in nsIDOMNode aNode, in boolean aShowingAnonymousContent);`",412,null],[11,"GetBindingURLs","","`nsIArray getBindingURLs (in nsIDOMElement aElement);`",412,null],[11,"GetContentState","","`unsigned long long getContentState (in nsIDOMElement aElement);`",412,null],[11,"SetContentState","","`text /** * Setting and removing content state on an element. Both these functions * calling EventStateManager::SetContentState internally, the difference is * that for the remove case we simply pass in nullptr for the element. * Use them accordingly. * * When removing the active state, you may optionally also clear the active * document as well by setting aClearActiveDocument * * @return Returns true if the state was set successfully. See more details * in EventStateManager.h SetContentState. */`",412,null],[11,"RemoveContentState","","`bool removeContentState (in nsIDOMElement aElement, in unsigned long long aState, [optional] in bool aClearActiveDocument);`",412,null],[11,"GetUsedFontFaces","","`nsIDOMFontFaceList getUsedFontFaces (in nsIDOMRange aRange);`",412,null],[11,"GetCSSPseudoElementNames","","`text /** * Get the names of all the supported pseudo-elements. * Pseudo-elements which are only accepted in UA style sheets are * not included. * * @param {unsigned long} aCount the number of items returned * @param {wstring[]} aNames the names */`",412,null],[11,"RemovePseudoClassLock","","`void removePseudoClassLock (in nsIDOMElement aElement, in DOMString aPseudoClass);`",412,null],[11,"HasPseudoClassLock","","`bool hasPseudoClassLock (in nsIDOMElement aElement, in DOMString aPseudoClass);`",412,null],[11,"ClearPseudoClassLocks","","`void clearPseudoClassLocks (in nsIDOMElement aElement);`",412,null],[11,"ParseStyleSheet","","`text /** * Parse CSS and update the style sheet in place. * * @param DOMCSSStyleSheet aSheet * @param DOMString aInput * The new source string for the style sheet. */`",412,null],[11,"ScrollElementIntoView","","`text /** * Scroll an element completely into view, if possible. * This is similar to ensureElementIsVisible but for all ancestors. * * @param DOMElement aElement */`",412,null],[11,"addref","","",413,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",413,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushSubscription` to one of its base interfaces.",413,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",413,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEndpoint","","`readonly attribute DOMString endpoint;`",413,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPushCount","","`readonly attribute long long pushCount;`",413,null],[11,"GetLastPush","","`readonly attribute long long lastPush;`",413,null],[11,"GetQuota","","`readonly attribute long quota;`",413,null],[11,"GetIsSystemSubscription","","`readonly attribute bool isSystemSubscription;`",413,null],[11,"QuotaApplies","","`bool quotaApplies ();`",413,null],[11,"IsExpired","","`bool isExpired ();`",413,null],[11,"GetKey","","`void getKey (in DOMString name, [optional] out uint32_t keyLen, [array, size_is (keyLen), retval] out uint8_t key);`",413,null],[11,"addref","","",414,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",414,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushSubscriptionCallback` to one of its base interfaces.",414,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",414,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPushSubscription","","`void onPushSubscription (in nsresult status, in nsIPushSubscription subscription);`",414,null],[11,"addref","","",415,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",415,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnsubscribeResultCallback` to one of its base interfaces.",415,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",415,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnUnsubscribe","","`void onUnsubscribe (in nsresult status, in bool success);`",415,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",416,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",416,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushClearResultCallback` to one of its base interfaces.",416,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",416,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnClear","","`void onClear (in nsresult status);`",416,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",417,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",417,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushService` to one of its base interfaces.",417,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",417,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPushTopic","","`text /** Observer topic names, exported for convenience. */`",417,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSubscriptionChangeTopic","","`readonly attribute DOMString subscriptionChangeTopic;`",417,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSubscriptionModifiedTopic","","`readonly attribute DOMString subscriptionModifiedTopic;`",417,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Subscribe","","`text /** * Creates a push subscription for the given |scope| URL and |principal|. * If a subscription already exists for this |(scope, principal)| pair, * the callback will receive the existing record as the second argument. * * The |endpoint| property of the subscription record is a URL string * that can be used to send push messages to subscribers. * * Each incoming message fires a `push-message` observer notification, with * an `nsIPushMessage` as the subject and the |scope| as the data. * * If the server drops a subscription, a `push-subscription-change` observer * will be fired, with the subject set to |principal| and the data set to * |scope|. Servers may drop subscriptions at any time, so callers should * recreate subscriptions if desired. */`",417,null],[11,"SubscribeWithKey","","`text /** * Creates a restricted push subscription with the given public |key|. The * application server must use the corresponding private key to authenticate * message delivery requests, as described in draft-thomson-webpush-vapid. */`",417,null],[11,"Unsubscribe","","`text /** * Removes a push subscription for the given |scope|. */`",417,null],[11,"GetSubscription","","`text /** * Retrieves the subscription record associated with the given * |(scope, principal)| pair. If the subscription does not exist, the * callback will receive |null| as the second argument. */`",417,null],[11,"ClearForDomain","","`text /** * Drops every subscription for the given |domain|, or all domains if * |domain| is \"*\". */`",417,null],[11,"addref","","",418,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",418,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushQuotaManager` to one of its base interfaces.",418,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",418,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotificationForOriginShown","","`text /** * Informs the quota manager that a notification * for the given origin has been shown. Used to * determine if push quota should be relaxed. */`",418,null],[11,"NotificationForOriginClosed","","`text /** * Informs the quota manager that a notification * for the given origin has been closed. Used to * determine if push quota should be relaxed. */`",418,null],[11,"addref","","",419,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",419,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITabChild` to one of its base interfaces.",419,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",419,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMessageManager","","`readonly attribute nsIContentFrameMessageManager messageManager;`",419,null],[11,"GetWebBrowserChrome","","`attribute nsIWebBrowserChrome3 webBrowserChrome;`",419,null],[11,"SetWebBrowserChrome","","`attribute nsIWebBrowserChrome3 webBrowserChrome;`",419,null],[11,"SendRequestFocus","","`[notxpcom] void sendRequestFocus (in boolean canFocus);`",419,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"c_void"}}],[11,"SendGetTabCount","","`[notxpcom] void sendGetTabCount (out uint32_t tabCount);`",419,null],[11,"RemoteSizeShellTo","","`[noscript] void remoteSizeShellTo (in int32_t width, in int32_t height, in int32_t shellItemWidth, in int32_t shellItemHeight);`",419,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"RemoteDropLinks","","`[noscript] void remoteDropLinks (in unsigned long linksCount, [array, size_is (linksCount)] in nsIDroppedLinkItem links);`",419,null],[11,"GetTabId","","`readonly attribute uint64_t tabId;`",419,null],[11,"BeforeUnloadAdded","","`[noscript,notxpcom] void beforeUnloadAdded ();`",419,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"BeforeUnloadRemoved","","`[noscript,notxpcom] void beforeUnloadRemoved ();`",419,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"addref","","",420,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",420,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHContainer` to one of its base interfaces.",420,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",420,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetChildCount","","`text /** * The current number of nsISHEntries which are immediate children of the * current SHEntry */`",420,null],[11,"AddChild","","`text /** * Add a new child SHEntry. If offset is -1 adds to the end of the list. */`",420,null],[11,"RemoveChild","","`text /** * Removes a child SHEntry */`",420,null],[11,"GetChildAt","","`text /** * Get child at an index */`",420,null],[11,"ReplaceChild","","`text /** * Replaces a child which is for the same docshell as aNewChild * with aNewChild. * @throw if nothing was replaced. */`",420,null],[11,"addref","","",421,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",421,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFObserver` to one of its base interfaces.",421,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",421,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnAssert","","`text /** * This method is called whenever a new assertion is made * in the data source * @param aDataSource the datasource that is issuing * the notification. * @param aSource the subject of the assertion * @param aProperty the predicate of the assertion * @param aTarget the object of the assertion */`",421,null],[11,"OnUnassert","","`text /** * This method is called whenever an assertion is removed * from the data source * @param aDataSource the datasource that is issuing * the notification. * @param aSource the subject of the assertion * @param aProperty the predicate of the assertion * @param aTarget the object of the assertion */`",421,null],[11,"OnChange","","`text /** * This method is called when the object of an assertion * changes from one value to another. * @param aDataSource the datasource that is issuing * the notification. * @param aSource the subject of the assertion * @param aProperty the predicate of the assertion * @param aOldTarget the old object of the assertion * @param aNewTarget the new object of the assertion */`",421,null],[11,"OnMove","","`text /** * This method is called when the subject of an assertion * changes from one value to another. * @param aDataSource the datasource that is issuing * the notification. * @param aOldSource the old subject of the assertion * @param aNewSource the new subject of the assertion * @param aProperty the predicate of the assertion * @param aTarget the object of the assertion */`",421,null],[11,"OnBeginUpdateBatch","","`text /** * This method is called when a datasource is about to * send several notifications at once. The observer can * use this as a cue to optimize its behavior. The observer * can expect the datasource to call endUpdateBatch() when * the group of notifications has completed. * @param aDataSource the datasource that is going to * be issuing the notifications. */`",421,null],[11,"OnEndUpdateBatch","","`text /** * This method is called when a datasource has completed * issuing a notification group. * @param aDataSource the datasource that has finished * issuing a group of notifications */`",421,null],[11,"addref","","",422,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",422,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkPredictorVerifier` to one of its base interfaces.",422,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",422,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPredictPrefetch","","`text /** * Callback for when we do a predictive prefetch * * @param uri - The URI that was prefetched * @param status - The request status code returned by the * prefetch attempt e.g. 200 (OK):w */`",422,null],[11,"OnPredictPreconnect","","`text /** * Callback for when we do a predictive preconnect * * @param uri - The URI that was preconnected to */`",422,null],[11,"OnPredictDNS","","`text /** * Callback for when we do a predictive DNS lookup * * @param uri - The URI that was looked up */`",422,null],[11,"addref","","",423,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",423,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIControllerContext` to one of its base interfaces.",423,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",423,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Init the controller, optionally passing a controller * command table. * * @param aCommandTable a command table, used internally * by this controller. May be null, in * which case the controller will create * a new, empty table. */`",423,null],[11,"SetCommandContext","","`text /** * Set a context on this controller, which is passed * to commands to give them some context when they execute. * * @param aCommandContext the context passed to commands. * Note that this is *not* addreffed by the * controller, and so needs to outlive it, * or be nulled out. */`",423,null],[11,"addref","","",424,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",424,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSListener` to one of its base interfaces.",424,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",424,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnLookupComplete","","`text /** * called when an asynchronous host lookup completes. * * @param aRequest * the value returned from asyncResolve. * @param aRecord * the DNS record corresponding to the hostname that was resolved. * this parameter is null if there was an error. * @param aStatus * if the lookup failed, this parameter gives the reason. */`",424,null],[11,"addref","","",425,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",425,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSListenerProxy` to one of its base interfaces.",425,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",425,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetOriginalListener","","`readonly attribute nsIDNSListener originalListener;`",425,null],[11,"addref","","",426,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",426,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `IPeerConnectionObserver` to one of its base interfaces.",426,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",426,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",427,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",427,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `IPeerConnection` to one of its base interfaces.",427,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",427,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kHintAudio","","",427,null],[18,"kHintVideo","","",427,null],[18,"kActionNone","","",427,null],[18,"kActionOffer","","",427,null],[18,"kActionAnswer","","",427,null],[18,"kActionPRAnswer","","",427,null],[18,"kActionRollback","","",427,null],[18,"kIceGathering","","",427,null],[18,"kIceWaiting","","",427,null],[18,"kIceChecking","","",427,null],[18,"kIceConnected","","",427,null],[18,"kIceFailed","","",427,null],[18,"kNew","","",427,null],[18,"kNegotiating","","",427,null],[18,"kActive","","",427,null],[18,"kClosing","","",427,null],[18,"kClosed","","",427,null],[18,"kDataChannelReliable","","",427,null],[18,"kDataChannelPartialReliableRexmit","","",427,null],[18,"kDataChannelPartialReliableTimed","","",427,null],[18,"kNoError","","",427,null],[18,"kInvalidCandidate","","",427,null],[18,"kInvalidMediastreamTrack","","",427,null],[18,"kInvalidState","","",427,null],[18,"kInvalidSessionDescription","","",427,null],[18,"kIncompatibleSessionDescription","","",427,null],[18,"kIncompatibleMediaStreamTrack","","",427,null],[18,"kInternalError","","",427,null],[18,"kMaxErrorType","","",427,null],[11,"addref","","",428,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",428,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageResultSet` to one of its base interfaces.",428,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",428,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNextRow","","`text /** * Obtains the next row from the result set from the statement that was * executed. * * @returns the next row from the result set. This will be null when there * are no more results. */`",428,null],[11,"addref","","",429,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",429,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocumentLoaderFactory` to one of its base interfaces.",429,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",429,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateInstance","","`nsIContentViewer createInstance (in string aCommand, in nsIChannel aChannel, in nsILoadGroup aLoadGroup, in ACString aContentType, in nsIDocShell aContainer, in nsISupports aExtraInfo, out nsIStreamListener aDocListenerResult);`",429,null],[11,"CreateInstanceForDocument","","`nsIContentViewer createInstanceForDocument (in nsISupports aContainer, in nsIDocument aDocument, in string aCommand);`",429,null],[11,"addref","","",430,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",430,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessiblePivot` to one of its base interfaces.",430,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",430,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"CHAR_BOUNDARY","","",430,null],[18,"WORD_BOUNDARY","","",430,null],[18,"LINE_BOUNDARY","","",430,null],[18,"ATTRIBUTE_RANGE_BOUNDARY","","",430,null],[18,"REASON_NONE","","",430,null],[18,"REASON_NEXT","","",430,null],[18,"REASON_PREV","","",430,null],[18,"REASON_FIRST","","",430,null],[18,"REASON_LAST","","",430,null],[18,"REASON_TEXT","","",430,null],[18,"REASON_POINT","","",430,null],[11,"GetPosition","","`text /** * The accessible the pivot is currently pointed at. */`",430,null],[11,"SetPosition","","`text /** * The accessible the pivot is currently pointed at. */`",430,null],[11,"GetRoot","","`text /** * The root of the subtree in which the pivot traverses. */`",430,null],[11,"GetModalRoot","","`text /** * The temporary modal root to which traversal is limited to. */`",430,null],[11,"SetModalRoot","","`text /** * The temporary modal root to which traversal is limited to. */`",430,null],[11,"GetStartOffset","","`text /** * The start offset of the text range the pivot points at, otherwise -1. */`",430,null],[11,"GetEndOffset","","`text /** * The end offset of the text range the pivot points at, otherwise -1. */`",430,null],[11,"AddObserver","","`text /** * Add an observer for pivot changes. * * @param aObserver [in] the observer object to be notified of pivot changes. */`",430,null],[11,"RemoveObserver","","`text /** * Remove an observer for pivot changes. * * @param aObserver [in] the observer object to remove from being notified. */`",430,null],[11,"addref","","",431,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",431,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessiblePivotObserver` to one of its base interfaces.",431,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",431,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPivotChanged","","`text /** * An observer interface for pivot changes. */ /** * Called when the pivot changes. * * @param aPivot [in] the pivot that has changed. * @param aOldAccessible [in] the old pivot position before the change, * or null. * @param aOldStart [in] the old start offset, or -1. * @param aOldEnd [in] the old end offset, or -1. * @param aReason [in] the reason for the pivot change. * @param aIsFromUserInput [in] the pivot changed because of direct user input * (default is true). */`",431,null],[11,"addref","","",432,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",432,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTraversalRule` to one of its base interfaces.",432,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",432,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FILTER_IGNORE","","",432,null],[18,"FILTER_MATCH","","",432,null],[18,"FILTER_IGNORE_SUBTREE","","",432,null],[18,"PREFILTER_INVISIBLE","","",432,null],[18,"PREFILTER_OFFSCREEN","","",432,null],[18,"PREFILTER_NOT_FOCUSABLE","","",432,null],[18,"PREFILTER_ARIA_HIDDEN","","",432,null],[18,"PREFILTER_TRANSPARENT","","",432,null],[11,"GetPreFilter","","`text /** * Pre-filter bitfield to filter out obviously ignorable nodes and lighten * the load on match(). */`",432,null],[11,"GetMatchRoles","","`text /** * Retrieve a list of roles that the traversal rule should test for. Any node * with a role not in this list will automatically be ignored. An empty list * will match all roles. It should be assumed that this method is called once * at the start of a traversal, so changing the method's return result after * that would have no affect. * * @param aRoles [out] an array of the roles to match. * @param aCount [out] the length of the array. */`",432,null],[11,"Match","","`text /** * Determines if a given accessible is to be accepted in our traversal rule * * @param aAccessible [in] accessible to examine. * @return a bitfield of FILTER_MATCH and FILTER_IGNORE_SUBTREE. */`",432,null],[11,"addref","","",433,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",433,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoConfig` to one of its base interfaces.",433,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",433,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetConfigURL","","`attribute string configURL;`",433,null],[11,"SetConfigURL","","`attribute string configURL;`",433,null],[11,"addref","","",434,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",434,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINullChannel` to one of its base interfaces.",434,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",434,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",435,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",435,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMSVGLength` to one of its base interfaces.",435,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",435,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SVG_LENGTHTYPE_UNKNOWN","","",435,null],[18,"SVG_LENGTHTYPE_NUMBER","","",435,null],[18,"SVG_LENGTHTYPE_PERCENTAGE","","",435,null],[18,"SVG_LENGTHTYPE_EMS","","",435,null],[18,"SVG_LENGTHTYPE_EXS","","",435,null],[18,"SVG_LENGTHTYPE_PX","","",435,null],[18,"SVG_LENGTHTYPE_CM","","",435,null],[18,"SVG_LENGTHTYPE_MM","","",435,null],[18,"SVG_LENGTHTYPE_IN","","",435,null],[18,"SVG_LENGTHTYPE_PT","","",435,null],[18,"SVG_LENGTHTYPE_PC","","",435,null],[11,"GetUnitType","","`readonly attribute unsigned short unitType;`",435,null],[11,"GetValue","","`attribute float value;`",435,null],[11,"SetValue","","`attribute float value;`",435,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetValueInSpecifiedUnits","","`attribute float valueInSpecifiedUnits;`",435,null],[11,"SetValueInSpecifiedUnits","","`attribute float valueInSpecifiedUnits;`",435,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetValueAsString","","`attribute DOMString valueAsString;`",435,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValueAsString","","`attribute DOMString valueAsString;`",435,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NewValueSpecifiedUnits","","`void newValueSpecifiedUnits (in unsigned short unitType, in float valueInSpecifiedUnits);`",435,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"ConvertToSpecifiedUnits","","`void convertToSpecifiedUnits (in unsigned short unitType);`",435,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",436,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",436,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUnicharInputStream` to one of its base interfaces.",436,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",436,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Read","","`text /** * Abstract unicode character input stream * @see nsIInputStream */ /** * Reads into a caller-provided character array. * * @return The number of characters that were successfully read. May be less * than aCount, even if there is more data in the input stream. * A return value of 0 means EOF. * * @note To read more than 2^32 characters, call this method multiple times. */`",436,null],[11,"ReadString","","`text /** * Read into a string object. * @param aCount The number of characters that should be read * @return The number of characters that were read. */`",436,null],[11,"Close","","`text /** * Close the stream and free associated resources. This also closes the * underlying stream, if any. */`",436,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",437,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",437,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISOCKSSocketInfo` to one of its base interfaces.",437,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",437,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",438,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",438,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPartialSHistoryListener` to one of its base interfaces.",438,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",438,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnRequestCrossBrowserNavigation","","`text /** * Called when the navigation target belongs to another nsISHistory within * the same nsIGroupedSHistory, and it needs to initiate cross nsISHistory * navigation. * * @param aIndex The index of complete history to navigate to. */`",438,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",439,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",439,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestFunctionInterface` to one of its base interfaces.",439,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",439,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Echo","","`string echo (in string arg);`",439,null],[11,"addref","","",440,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",440,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestUtils` to one of its base interfaces.",440,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",440,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DoubleWrapFunction","","`nsIXPCTestFunctionInterface doubleWrapFunction (in nsIXPCTestFunctionInterface f);`",440,null],[11,"addref","","",441,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",441,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContainerBoxObject` to one of its base interfaces.",441,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",441,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",442,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",442,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntryDescriptor` to one of its base interfaces.",442,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",442,{"inputs":[{"name":"self"}],"output":{"name":"nsicacheentryinfo"}}],[11,"SetExpirationTime","","`text /** * Set the time at which the cache entry should be considered invalid (in * seconds since the Epoch). */`",442,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetDataSize","","`text /** * Set the cache entry data size. This will fail if the cache entry * IS stream based. */`",442,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"OpenInputStream","","`text /** * Open blocking input stream to cache data. This will fail if the cache * entry IS NOT stream based. Use the stream transport service to * asynchronously read this stream on a background thread. The returned * stream MAY implement nsISeekableStream. * * @param offset * read starting from this offset into the cached data. an offset * beyond the end of the stream has undefined consequences. * * @return blocking, unbuffered input stream. */`",442,null],[11,"OpenOutputStream","","`text /** * Open blocking output stream to cache data. This will fail if the cache * entry IS NOT stream based. Use the stream transport service to * asynchronously write to this stream on a background thread. The returned * stream MAY implement nsISeekableStream. * * If opening an output stream to existing cached data, the data will be * truncated to the specified offset. * * @param offset * write starting from this offset into the cached data. an offset * beyond the end of the stream has undefined consequences. * * @return blocking, unbuffered output stream. */`",442,null],[11,"GetCacheElement","","`text /** * Get/set the cache data element. This will fail if the cache entry * IS stream based. The cache entry holds a strong reference to this * object. The object will be released when the cache entry is destroyed. */`",442,null],[11,"SetCacheElement","","`text /** * Get/set the cache data element. This will fail if the cache entry * IS stream based. The cache entry holds a strong reference to this * object. The object will be released when the cache entry is destroyed. */`",442,null],[11,"GetPredictedDataSize","","`text /** * Stores the Content-Length specified in the HTTP header for this * entry. Checked before we write to the cache entry, to prevent ever * taking up space in the cache for an entry that we know up front * is going to have to be evicted anyway. See bug 588507. */`",442,null],[11,"SetPredictedDataSize","","`text /** * Stores the Content-Length specified in the HTTP header for this * entry. Checked before we write to the cache entry, to prevent ever * taking up space in the cache for an entry that we know up front * is going to have to be evicted anyway. See bug 588507. */`",442,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetAccessGranted","","`text /** * Get the access granted to this descriptor. See nsICache.idl for the * definitions of the access modes and a thorough description of their * corresponding meanings. */`",442,null],[11,"GetStoragePolicy","","`text /** * Get/set the storage policy of the cache entry. See nsICache.idl for * the definitions of the storage policies. */`",442,null],[11,"SetStoragePolicy","","`text /** * Get/set the storage policy of the cache entry. See nsICache.idl for * the definitions of the storage policies. */`",442,{"inputs":[{"name":"self"},{"name":"nscachestoragepolicy"}],"output":{"name":"nsresult"}}],[11,"GetFile","","`text /** * Get the disk file associated with the cache entry. */`",442,null],[11,"GetSecurityInfo","","`text /** * Get/set security info on the cache entry for this descriptor. This fails * if the storage policy is not STORE_IN_MEMORY. */`",442,null],[11,"SetSecurityInfo","","`text /** * Get/set security info on the cache entry for this descriptor. This fails * if the storage policy is not STORE_IN_MEMORY. */`",442,null],[11,"GetStorageDataSize","","`text /** * Get the size of the cache entry data, as stored. This may differ * from the entry's dataSize, if the entry is compressed. */`",442,null],[11,"Doom","","`text /** * Doom the cache entry this descriptor references in order to slate it for * removal. Once doomed a cache entry cannot be undoomed. * * A descriptor with WRITE access can doom the cache entry and choose to * fail pending requests. This means that pending requests will not get * a cache descriptor. This is meant as a tool for clients that wish to * instruct pending requests to skip the cache. */`",442,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DoomAndFailPendingRequests","","`void doomAndFailPendingRequests (in nsresult status);`",442,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"AsyncDoom","","`text /** * Asynchronously doom an entry. Listener will be notified about the status * of the operation. Null may be passed if caller doesn't care about the * result. */`",442,null],[11,"MarkValid","","`text /** * A writer must validate this cache object before any readers are given * a descriptor to the object. */`",442,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Close","","`text /** * Explicitly close the descriptor (optional). */`",442,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetMetaDataElement","","`text /** * Methods for accessing meta data. Meta data is a table of key/value * string pairs. The strings do not have to conform to any particular * charset, but they must be null terminated. */`",442,null],[11,"SetMetaDataElement","","`void setMetaDataElement (in string key, in string value);`",442,null],[11,"VisitMetaData","","`text /** * Visitor will be called with key/value pair for each meta data element. */`",442,null],[11,"addref","","",443,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",443,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheMetaDataVisitor` to one of its base interfaces.",443,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",443,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VisitMetaDataElement","","`text /** * Called for each key/value pair in the meta data for a cache entry */`",443,null],[11,"addref","","",444,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",444,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStringInputStream` to one of its base interfaces.",444,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",444,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"SetData","","`text /** * SetData - assign data to the input stream (copied on assignment). * * @param data - stream data * @param dataLen - stream data length (-1 if length should be computed) * * NOTE: C++ code should consider using AdoptData or ShareData to avoid * making an extra copy of the stream data. * * NOTE: For JS callers, the given data must not contain null characters * (other than a null terminator) because a null character in the middle of * the data string will be seen as a terminator when the data is converted * from a JS string to a C++ character array. */`",444,null],[11,"AdoptData","","`text /** * NOTE: the following methods are designed to give C++ code added control * over the ownership and lifetime of the stream data. Use with care :-) */ /** * AdoptData - assign data to the input stream. the input stream takes * ownership of the given data buffer and will free it when * the input stream is destroyed. * * @param data - stream data * @param dataLen - stream data length (-1 if length should be computed) */`",444,null],[11,"ShareData","","`text /** * ShareData - assign data to the input stream. the input stream references * the given data buffer until the input stream is destroyed. the given * data buffer must outlive the input stream. * * @param data - stream data * @param dataLen - stream data length (-1 if length should be computed) */`",444,null],[11,"addref","","",445,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",445,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationAvailabilityListener` to one of its base interfaces.",445,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",445,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",446,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",446,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionListener` to one of its base interfaces.",446,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",446,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_CONNECTING","","",446,null],[18,"STATE_CONNECTED","","",446,null],[18,"STATE_CLOSED","","",446,null],[18,"STATE_TERMINATED","","",446,null],[11,"NotifyStateChange","","`void notifyStateChange (in DOMString sessionId, in unsigned short state, in nsresult reason);`",446,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint16_t"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"NotifyMessage","","`void notifyMessage (in DOMString sessionId, in ACString data, in boolean isBinary);`",446,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",447,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",447,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationRespondingListener` to one of its base interfaces.",447,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",447,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifySessionConnect","","`void notifySessionConnect (in unsigned long long windowId, in DOMString sessionId);`",447,{"inputs":[{"name":"self"},{"name":"uint64_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",448,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",448,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStringEnumerator` to one of its base interfaces.",448,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",448,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HasMore","","`boolean hasMore ();`",448,null],[11,"GetNext","","`AString getNext ();`",448,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",449,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",449,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUTF8StringEnumerator` to one of its base interfaces.",449,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",449,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HasMore","","`boolean hasMore ();`",449,null],[11,"GetNext","","`AUTF8String getNext ();`",449,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",450,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",450,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerUnregisterCallback` to one of its base interfaces.",450,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",450,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"UnregisterSucceeded","","`void unregisterSucceeded (in bool aState);`",450,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"UnregisterFailed","","`void unregisterFailed ();`",450,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",451,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",451,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerInfo` to one of its base interfaces.",451,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",451,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_PARSED","","",451,null],[18,"STATE_INSTALLING","","",451,null],[18,"STATE_INSTALLED","","",451,null],[18,"STATE_ACTIVATING","","",451,null],[18,"STATE_ACTIVATED","","",451,null],[18,"STATE_REDUNDANT","","",451,null],[18,"STATE_UNKNOWN","","",451,null],[11,"GetScriptSpec","","`readonly attribute DOMString scriptSpec;`",451,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCacheName","","`readonly attribute DOMString cacheName;`",451,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetState","","`readonly attribute unsigned short state;`",451,null],[11,"GetDebugger","","`readonly attribute nsIWorkerDebugger debugger;`",451,null],[11,"GetHandlesFetchEvents","","`readonly attribute bool handlesFetchEvents;`",451,null],[11,"GetInstalledTime","","`readonly attribute PRTime installedTime;`",451,null],[11,"GetActivatedTime","","`readonly attribute PRTime activatedTime;`",451,null],[11,"GetRedundantTime","","`readonly attribute PRTime redundantTime;`",451,null],[11,"AttachDebugger","","`void attachDebugger ();`",451,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DetachDebugger","","`void detachDebugger ();`",451,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",452,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",452,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerRegistrationInfoListener` to one of its base interfaces.",452,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",452,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnChange","","`void onChange ();`",452,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",453,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",453,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerRegistrationInfo` to one of its base interfaces.",453,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",453,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UPDATE_VIA_CACHE_IMPORTS","","",453,null],[18,"UPDATE_VIA_CACHE_ALL","","",453,null],[18,"UPDATE_VIA_CACHE_NONE","","",453,null],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",453,null],[11,"GetScope","","`readonly attribute DOMString scope;`",453,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetScriptSpec","","`readonly attribute DOMString scriptSpec;`",453,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUpdateViaCache","","`readonly attribute unsigned short updateViaCache;`",453,null],[11,"GetLastUpdateTime","","`readonly attribute PRTime lastUpdateTime;`",453,null],[11,"GetInstallingWorker","","`readonly attribute nsIServiceWorkerInfo installingWorker;`",453,null],[11,"GetWaitingWorker","","`readonly attribute nsIServiceWorkerInfo waitingWorker;`",453,null],[11,"GetActiveWorker","","`readonly attribute nsIServiceWorkerInfo activeWorker;`",453,null],[11,"GetWorkerByID","","`nsIServiceWorkerInfo getWorkerByID (in unsigned long long aID);`",453,null],[11,"AddListener","","`void addListener (in nsIServiceWorkerRegistrationInfoListener listener);`",453,null],[11,"RemoveListener","","`void removeListener (in nsIServiceWorkerRegistrationInfoListener listener);`",453,null],[11,"addref","","",454,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",454,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerManagerListener` to one of its base interfaces.",454,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",454,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnRegister","","`void onRegister (in nsIServiceWorkerRegistrationInfo aInfo);`",454,null],[11,"OnUnregister","","`void onUnregister (in nsIServiceWorkerRegistrationInfo aInfo);`",454,null],[11,"addref","","",455,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",455,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceWorkerManager` to one of its base interfaces.",455,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",455,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Register","","`text /** * Registers a ServiceWorker with script loaded from `aScriptURI` to act as * the ServiceWorker for aScope. Requires a valid entry settings object on * the stack. This means you must call this from content code 'within' * a window. * * Returns a Promise. */`",455,null],[11,"Unregister","","`text /** * Unregister an existing ServiceWorker registration for `aScope`. * It keeps aCallback alive until the operation is concluded. */`",455,null],[11,"GetRegistrations","","`nsISupports getRegistrations (in mozIDOMWindow aWindow);`",455,null],[11,"GetRegistration","","`nsISupports getRegistration (in mozIDOMWindow aWindow, in DOMString aScope);`",455,null],[11,"GetReadyPromise","","`nsISupports getReadyPromise (in mozIDOMWindow aWindow);`",455,null],[11,"RemoveReadyPromise","","`void removeReadyPromise (in mozIDOMWindow aWindow);`",455,null],[11,"GetRegistrationByPrincipal","","`nsIServiceWorkerRegistrationInfo getRegistrationByPrincipal (in nsIPrincipal aPrincipal, in DOMString aScope);`",455,null],[11,"GetInstalling","","`[noscript] nsISupports GetInstalling (in nsPIDOMWindowInner aWindow, in DOMString aScope);`",455,null],[11,"GetWaiting","","`[noscript] nsISupports GetWaiting (in nsPIDOMWindowInner aWindow, in DOMString aScope);`",455,null],[11,"GetActive","","`[noscript] nsISupports GetActive (in nsPIDOMWindowInner aWindow, in DOMString aScope);`",455,null],[11,"GetDocumentController","","`[noscript] nsISupports GetDocumentController (in nsPIDOMWindowInner aWindow);`",455,null],[11,"RemoveAndPropagate","","`void removeAndPropagate (in AUTF8String aHost);`",455,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetScopeForUrl","","`DOMString getScopeForUrl (in nsIPrincipal aPrincipal, in DOMString aPath);`",455,null],[11,"GetAllRegistrations","","`nsIArray getAllRegistrations ();`",455,null],[11,"PropagateUnregister","","`void propagateUnregister (in nsIPrincipal aPrincipal, in nsIServiceWorkerUnregisterCallback aCallback, in DOMString aScope);`",455,null],[11,"SendNotificationClickEvent","","`void sendNotificationClickEvent (in ACString aOriginSuffix, in ACString scope, in AString aID, in AString aTitle, in AString aDir, in AString aLang, in AString aBody, in AString aTag, in AString aIcon, in AString aData, in AString aBehavior);`",455,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SendNotificationCloseEvent","","`void sendNotificationCloseEvent (in ACString aOriginSuffix, in ACString scope, in AString aID, in AString aTitle, in AString aDir, in AString aLang, in AString aBody, in AString aTag, in AString aIcon, in AString aData, in AString aBehavior);`",455,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SendPushSubscriptionChangeEvent","","`void sendPushSubscriptionChangeEvent (in ACString aOriginAttributes, in ACString scope);`",455,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"AddListener","","`void addListener (in nsIServiceWorkerManagerListener aListener);`",455,null],[11,"RemoveListener","","`void removeListener (in nsIServiceWorkerManagerListener aListener);`",455,null],[11,"addref","","",456,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",456,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecurityEventSink` to one of its base interfaces.",456,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",456,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSecurityChange","","`text /** * Fired when a security change occurs due to page transitions, * or end document load. This interface should be called by * a security package (eg Netscape Personal Security Manager) * to notify nsIWebProgressListeners that security state has * changed. State flags are in nsIWebProgressListener.idl */`",456,null],[11,"addref","","",457,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",457,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClearSiteDataCallback` to one of its base interfaces.",457,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",457,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`text /** * callback with the result from a call to clearSiteData */`",457,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",458,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",458,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPluginHost` to one of its base interfaces.",458,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",458,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FLAG_CLEAR_ALL","","",458,null],[18,"FLAG_CLEAR_CACHE","","",458,null],[18,"EXCLUDE_NONE","","",458,null],[18,"EXCLUDE_DISABLED","","",458,null],[18,"EXCLUDE_FAKE","","",458,null],[11,"ReloadPlugins","","`text /** * Causes the plugins directory to be searched again for new plugin * libraries. */`",458,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPluginTags","","`void getPluginTags ([optional] out unsigned long aPluginCount, [array, size_is (aPluginCount), retval] out nsIPluginTag aResults);`",458,null],[11,"ClearSiteData","","`void clearSiteData (in nsIPluginTag plugin, in AUTF8String domain, in uint64_t flags, in int64_t maxAge, in nsIClearSiteDataCallback callback);`",458,null],[11,"SiteHasData","","`boolean siteHasData (in nsIPluginTag plugin, in AUTF8String domain);`",458,null],[11,"GetPermissionStringForType","","`text /** * Get the \"permission string\" for the plugin. This is a string that can be * passed to the permission manager to see whether the plugin is allowed to * run, for example. This will typically be based on the plugin's \"nice name\" * and its blocklist state. * * @mimeType The MIME type we're interested in. * @excludeFlags Set of the EXCLUDE_* flags above, defaulting to EXCLUDE_NONE. */`",458,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPermissionStringForTag","","`text /** * Get the \"permission string\" for the plugin. This is a string that can be * passed to the permission manager to see whether the plugin is allowed to * run, for example. This will typically be based on the plugin's \"nice name\" * and its blocklist state. * * @tag The tage we're interested in * @excludeFlags Set of the EXCLUDE_* flags above, defaulting to EXCLUDE_NONE. */`",458,null],[11,"GetPluginTagForType","","`text /** * Get the nsIPluginTag for this MIME type. This method works with both * enabled and disabled/blocklisted plugins, but an enabled plugin will * always be returned if available. * * A fake plugin tag, if one exists and is available, will be returned in * preference to NPAPI plugin tags unless excluded by the excludeFlags. * * @mimeType The MIME type we're interested in. * @excludeFlags Set of the EXCLUDE_* flags above, defaulting to EXCLUDE_NONE. * * @throws NS_ERROR_NOT_AVAILABLE if no plugin is available for this MIME * type. */`",458,null],[11,"GetStateForType","","`text /** * Get the nsIPluginTag enabled state for this MIME type. See * nsIPluginTag.enabledState. * * @mimeType The MIME type we're interested in. * @excludeFlags Set of the EXCLUDE_* flags above, defaulting to EXCLUDE_NONE. */`",458,null],[11,"GetBlocklistStateForType","","`text /** * Get the blocklist state for a MIME type. See nsIPluginTag.blocklistState. * * @mimeType The MIME type we're interested in. * @excludeFlags Set of the EXCLUDE_* flags above, defaulting to EXCLUDE_NONE. */`",458,null],[11,"GetFakePlugin","","`text /** * Get a reference to an existing fake plugin tag for the given MIME type, if * any. Can return null. */`",458,null],[11,"UnregisterFakePlugin","","`text /** * Unregister a fake plugin. The argument can be the .handlerURI.spec of an * existing nsIFakePluginTag, or just a known handler URI string that was * passed in the FakePluginTagInit when registering. */`",458,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",459,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",459,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierParseFindFullHashCallback` to one of its base interfaces.",459,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",459,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnCompleteHashFound","","`text /** * Callback when a match is found in full hash response. This callback may be * called multiple times when there are more than one matches in response. * * @param aCompleteHash A 32-byte complete hash string. * @param aTableNames The table names that this complete hash is associated with. * Since the server responded with a threat type, multiple * list names can be returned. The caller is reponsible * for filtering out the unrequested table names. * See |convertThreatTypeToListNames| for the format. * @param aPerHashCacheDuration See \"FindFullHashesResponse\" in safebrowsing.proto. * */`",459,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"OnResponseParsed","","`text /** * Callback when full hash response is received. * * @param aMinWaitDuration See \"FindFullHashesResponse\" in safebrowsing.proto. * @param aNegCacheDuration See \"FindFullHashesResponse\" in safebrowsing.proto. * */`",459,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",460,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",460,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierUtils` to one of its base interfaces.",460,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",460,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetKeyForURI","","`text /** * Get the lookup string for a given URI. This normalizes the hostname, * url-decodes the string, and strips off the protocol. * * @param uri URI to get the lookup key for. * * @returns String containing the canonicalized URI. */`",460,null],[11,"GetProvider","","`text /** * Get the provider by table name. * * @param tableName The table name that we want to lookup * * @returns the provider name that the given table belongs. */`",460,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTelemetryProvider","","`text /** * Get the provider used for Telemetry. * Because recording Telemetry will leak user-controlled strings, * only built-in providers should be recorded. * * @param tableName The table name that we want to lookup * * @returns the filtered provider for telemetry. * */`",460,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProtocolVersion","","`text /** * Get the protocol version for the given provider. * * @param provider String the provider name. e.g. \"google\" * * @returns String to indicate the protocol version. e.g. \"2.2\" */`",460,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ConvertThreatTypeToListNames","","`text /** * Convert threat type to list name. * * @param Integer to indicate threat type. * * @returns The list names separated by ','. For example, * 'goog-phish-proto,test-phish-proto'. */`",460,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ConvertListNameToThreatType","","`text /** * Convert list name to threat type. * * @param The list name. * * @returns The threat type in integer. */`",460,null],[11,"MakeUpdateRequestV4","","`text /** * Make update request for given lists and their states. * * @param aListNames An array of list name represented in string. * @param aState An array of states (encoded in base64 format) for each list. * @param aCount The array length of aList and aState. * * @returns A base64url encoded string. */`",460,null],[11,"MakeFindFullHashRequestV4","","`text /** * Make \"find full hash\" request by for the given prefixes. * * @param aListNames An array of list names represented in string. * @param aListStatesBase64 An array of list states represented in base64. * @param aPrefixes An array of prefixes for which we'd like to find full hashes.. * @param aListCount The array length of aListNames * @param aPrefixCount The array length of aPrefixes * * @returns A base64url encoded string. */`",460,null],[11,"MakeThreatHitReport","","`text /** * Make ThreatHit report request body. * * @param aChannel channel which encountered the threat. * @param aListName listname represented in string. * @param aHashBase64 hash-based hit represented in base64. * * @returns A base64 encoded string. */`",460,null],[11,"ParseFindFullHashResponseV4","","`text /** * Parse V4 FindFullHash response. * * @param aResponse Byte stream from the server. * @param aCallback The callback function on each complete hash parsed. * Can be called multiple times in one parsing. */`",460,null],[11,"addref","","",461,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",461,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEnvironment` to one of its base interfaces.",461,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",461,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Set","","`text /** * Set the value of an environment variable. * * @param aName the variable name to set. * @param aValue the value to set. */`",461,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Get","","`text /** * Get the value of an environment variable. * * @param aName the variable name to retrieve. * @return returns the value of the env variable. An empty string * will be returned when the env variable does not exist or * when the value itself is an empty string - please use * |exists()| to probe whether the env variable exists * or not. */`",461,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Exists","","`text /** * Check the existence of an environment variable. * This method checks whether an environment variable is present in * the environment or not. * * - For Unix/Linux platforms we follow the Unix definition: * An environment variable exists when |getenv()| returns a non-NULL value. * An environment variable does not exist when |getenv()| returns NULL. * - For non-Unix/Linux platforms we have to fall back to a * \"portable\" definition (which is incorrect for Unix/Linux!!!!) * which simply checks whether the string returned by |Get()| is empty * or not. * * @param aName the variable name to probe. * @return if the variable has been set, the value returned is * PR_TRUE. If the variable was not defined in the * environment PR_FALSE will be returned. */`",461,null],[11,"addref","","",462,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",462,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEmbeddingSiteWindow` to one of its base interfaces.",462,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",462,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DIM_FLAGS_POSITION","","`text /** * Flag indicates that position of the top left corner of the outer area * is required/specified. * * @see setDimensions * @see getDimensions */`",462,null],[18,"DIM_FLAGS_SIZE_INNER","","`text /** * Flag indicates that the size of the inner area is required/specified. * * @note The inner and outer flags are mutually exclusive and it is * invalid to combine them. * * @see setDimensions * @see getDimensions * @see DIM_FLAGS_SIZE_OUTER */`",462,null],[18,"DIM_FLAGS_SIZE_OUTER","","`text /** * Flag indicates that the size of the outer area is required/specified. * * @see setDimensions * @see getDimensions * @see DIM_FLAGS_SIZE_INNER */`",462,null],[18,"DIM_FLAGS_IGNORE_X","","`text /** * Flag indicates that the x parameter should be ignored. * * @see setDimensions */`",462,null],[18,"DIM_FLAGS_IGNORE_Y","","`text /** * Flag indicates that the y parameter should be ignored. * * @see setDimensions */`",462,null],[18,"DIM_FLAGS_IGNORE_CX","","`text /** * Flag indicates that the cx parameter should be ignored. * * @see setDimensions */`",462,null],[18,"DIM_FLAGS_IGNORE_CY","","`text /** * Flag indicates that the cy parameter should be ignored. * * @see setDimensions */`",462,null],[11,"SetDimensions","","`text /** * Sets the dimensions for the window; the position & size. The * flags to indicate what the caller wants to set and whether the size * refers to the inner or outer area. The inner area refers to just * the embedded area, wheras the outer area can also include any * surrounding chrome, window frame, title bar, and so on. * * @param flags Combination of position, inner and outer size flags. * The ignore flags are telling the parent to use the * current values for those dimensions and ignore the * corresponding parameters the child sends. * @param x Left hand corner of the outer area. * @param y Top corner of the outer area. * @param cx Width of the inner or outer area. * @param cy Height of the inner or outer area. * * @return <code>NS_OK</code> if operation was performed correctly; * <code>NS_ERROR_UNEXPECTED</code> if window could not be * destroyed; * <code>NS_ERROR_INVALID_ARG</code> for bad flag combination * or illegal dimensions. * * @see getDimensions * @see DIM_FLAGS_POSITION * @see DIM_FLAGS_SIZE_OUTER * @see DIM_FLAGS_SIZE_INNER */`",462,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetDimensions","","`text /** * Gets the dimensions of the window. The caller may pass * <CODE>nullptr</CODE> for any value it is uninterested in receiving. * * @param flags Combination of position, inner and outer size flag . * @param x Left hand corner of the outer area; or <CODE>nullptr</CODE>. * @param y Top corner of the outer area; or <CODE>nullptr</CODE>. * @param cx Width of the inner or outer area; or <CODE>nullptr</CODE>. * @param cy Height of the inner or outer area; or <CODE>nullptr</CODE>. * * @see setDimensions * @see DIM_FLAGS_POSITION * @see DIM_FLAGS_SIZE_OUTER * @see DIM_FLAGS_SIZE_INNER */`",462,null],[11,"SetFocus","","`text /** * Give the window focus. */`",462,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetVisibility","","`text /** * Visibility of the window. */`",462,null],[11,"SetVisibility","","`text /** * Visibility of the window. */`",462,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** * Title of the window. */`",462,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTitle","","`text /** * Title of the window. */`",462,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSiteWindow","","`text /** * Native window for the site's window. The implementor should copy the * native window object into the address supplied by the caller. The * type of the native window that the address refers to is platform * and OS specific as follows: * * <ul> * <li>On Win32 it is an <CODE>HWND</CODE>.</li> * <li>On MacOS this is a <CODE>WindowPtr</CODE>.</li> * <li>On GTK this is a <CODE>GtkWidget*</CODE>.</li> * </ul> */`",462,null],[11,"Blur","","`text /** * Blur the window. This should unfocus the window and send an onblur event. */`",462,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",463,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",463,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMClientRectList` to one of its base interfaces.",463,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",463,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",463,null],[11,"Item","","`nsIDOMClientRect item (in unsigned long index);`",463,null],[11,"addref","","",464,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",464,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISessionStartup` to one of its base interfaces.",464,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",464,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_SESSION","","`text /** * What type of session we're restoring. * NO_SESSION There is no data available from the previous session * RECOVER_SESSION The last session crashed. It will either be restored or * about:sessionrestore will be shown. * RESUME_SESSION The previous session should be restored at startup * DEFER_SESSION The previous session is fine, but it shouldn't be restored * without explicit action (with the exception of pinned tabs) */`",464,null],[18,"RECOVER_SESSION","","",464,null],[18,"RESUME_SESSION","","",464,null],[18,"DEFER_SESSION","","",464,null],[11,"DoRestore","","`text /** * Determines whether there is a pending session restore. Should only be * called after initialization has completed. */`",464,null],[11,"IsAutomaticRestoreEnabled","","`text /** * Determines whether automatic session restoration is enabled for this * launch of the browser. This does not include crash restoration, and will * return false if restoration will only be caused by a crash. */`",464,null],[11,"GetSessionType","","`readonly attribute unsigned long sessionType;`",464,null],[11,"GetPreviousSessionCrashed","","`readonly attribute bool previousSessionCrashed;`",464,null],[11,"addref","","",465,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",465,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIOUtil` to one of its base interfaces.",465,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",465,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"InputStreamIsBuffered","","`text /** * Test whether an input stream is buffered. See nsStreamUtils.h * documentation for NS_InputStreamIsBuffered for the definition of * \"buffered\" used here and for edge-case behavior. * * @throws NS_ERROR_INVALID_POINTER if null is passed in. */`",465,null],[11,"OutputStreamIsBuffered","","`text /** * Test whether an output stream is buffered. See nsStreamUtils.h * documentation for NS_OutputStreamIsBuffered for the definition of * \"buffered\" used here and for edge-case behavior. * * @throws NS_ERROR_INVALID_POINTER if null is passed in. */`",465,null],[11,"addref","","",466,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",466,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierPrefixSet` to one of its base interfaces.",466,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",466,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`void init (in ACString aName);`",466,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPrefixes","","`void setPrefixes ([array, size_is (aLength), const] in unsigned long aPrefixes, in unsigned long aLength);`",466,null],[11,"GetPrefixes","","`void getPrefixes (out unsigned long aCount, [array, size_is (aCount), retval] out unsigned long aPrefixes);`",466,null],[11,"Contains","","`boolean contains (in unsigned long aPrefix);`",466,null],[11,"IsEmpty","","`boolean isEmpty ();`",466,null],[11,"LoadFromFile","","`void loadFromFile (in nsIFile aFile);`",466,null],[11,"StoreToFile","","`void storeToFile (in nsIFile aFile);`",466,null],[11,"addref","","",467,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",467,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURISetSpec` to one of its base interfaces.",467,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",467,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetSpec","","`text /** * This setter is different from all other setters because it may be used to * initialize the object. We define it separately allowing mutator implementors * to define it separately, while the rest of the setters may be simply * forwarded to the mutable URI. */`",467,null],[11,"addref","","",468,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",468,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURISetters` to one of its base interfaces.",468,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",468,{"inputs":[{"name":"self"}],"output":{"name":"nsiurisetspec"}}],[11,"SetScheme","","`[must_use] nsIURIMutator setScheme (in AUTF8String aScheme);`",468,null],[11,"SetUserPass","","`[must_use] nsIURIMutator setUserPass (in AUTF8String aUserPass);`",468,null],[11,"SetUsername","","`[must_use] nsIURIMutator setUsername (in AUTF8String aUsername);`",468,null],[11,"SetPassword","","`[must_use] nsIURIMutator setPassword (in AUTF8String aPassword);`",468,null],[11,"SetHostPort","","`[must_use] nsIURIMutator setHostPort (in AUTF8String aHostPort);`",468,null],[11,"SetHostAndPort","","`[must_use] nsIURIMutator setHostAndPort (in AUTF8String aHostAndPort);`",468,null],[11,"SetHost","","`[must_use] nsIURIMutator setHost (in AUTF8String aHost);`",468,null],[11,"SetPort","","`[must_use] nsIURIMutator setPort (in long aPort);`",468,null],[11,"SetPathQueryRef","","`[must_use] nsIURIMutator setPathQueryRef (in AUTF8String aPathQueryRef);`",468,null],[11,"SetRef","","`[must_use] nsIURIMutator setRef (in AUTF8String aRef);`",468,null],[11,"SetFilePath","","`[must_use] nsIURIMutator setFilePath (in AUTF8String aFilePath);`",468,null],[11,"SetQuery","","`[must_use] nsIURIMutator setQuery (in AUTF8String aQuery);`",468,null],[11,"addref","","",469,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",469,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIMutator` to one of its base interfaces.",469,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",469,{"inputs":[{"name":"self"}],"output":{"name":"nsiurisetters"}}],[11,"Read","","`text /** * Initializes the URI by reading from the input stream. * The input stream must contain the serialization of the same object type. * See nsISerializable. */`",469,null],[11,"Finalize","","`text /** * Finishes changing or constructing the URI and returns an immutable URI. */`",469,null],[11,"addref","","",470,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",470,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJARProtocolHandler` to one of its base interfaces.",470,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",470,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolhandler"}}],[11,"GetJARCache","","`text /** * JARCache contains the collection of open jar files. */`",470,null],[11,"addref","","",471,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",471,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIListBoxObject` to one of its base interfaces.",471,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",471,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRowCount","","`long getRowCount ();`",471,null],[11,"GetItemAtIndex","","`nsIDOMElement getItemAtIndex (in long index);`",471,null],[11,"GetIndexOfItem","","`long getIndexOfItem (in nsIDOMElement item);`",471,null],[11,"addref","","",472,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",472,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGfxInfo` to one of its base interfaces.",472,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",472,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FEATURE_DIRECT2D","","",472,null],[18,"FEATURE_DIRECT3D_9_LAYERS","","",472,null],[18,"FEATURE_DIRECT3D_10_LAYERS","","",472,null],[18,"FEATURE_DIRECT3D_10_1_LAYERS","","",472,null],[18,"FEATURE_OPENGL_LAYERS","","",472,null],[18,"FEATURE_WEBGL_OPENGL","","",472,null],[18,"FEATURE_WEBGL_ANGLE","","",472,null],[18,"FEATURE_WEBGL_MSAA","","",472,null],[18,"FEATURE_STAGEFRIGHT","","",472,null],[18,"FEATURE_WEBRTC_HW_ACCELERATION","","",472,null],[18,"FEATURE_DIRECT3D_11_LAYERS","","",472,null],[18,"FEATURE_HARDWARE_VIDEO_DECODING","","",472,null],[18,"FEATURE_DIRECT3D_11_ANGLE","","",472,null],[18,"FEATURE_WEBRTC_HW_ACCELERATION_ENCODE","","",472,null],[18,"FEATURE_WEBRTC_HW_ACCELERATION_DECODE","","",472,null],[18,"FEATURE_CANVAS2D_ACCELERATION","","",472,null],[18,"FEATURE_VP8_HW_DECODE","","",472,null],[18,"FEATURE_VP9_HW_DECODE","","",472,null],[18,"FEATURE_DX_INTEROP2","","",472,null],[18,"FEATURE_GPU_PROCESS","","",472,null],[18,"FEATURE_WEBGL2","","",472,null],[18,"FEATURE_ADVANCED_LAYERS","","",472,null],[18,"FEATURE_D3D11_KEYED_MUTEX","","",472,null],[18,"FEATURE_MAX_VALUE","","",472,null],[18,"FEATURE_STATUS_OK","","",472,null],[18,"FEATURE_STATUS_UNKNOWN","","",472,null],[18,"FEATURE_BLOCKED_DRIVER_VERSION","","",472,null],[18,"FEATURE_BLOCKED_DEVICE","","",472,null],[18,"FEATURE_DISCOURAGED","","",472,null],[18,"FEATURE_BLOCKED_OS_VERSION","","",472,null],[18,"FEATURE_BLOCKED_MISMATCHED_VERSION","","",472,null],[11,"GetD2DEnabled","","`readonly attribute boolean D2DEnabled;`",472,null],[11,"GetDWriteEnabled","","`readonly attribute boolean DWriteEnabled;`",472,null],[11,"GetUsingGPUProcess","","`readonly attribute boolean usingGPUProcess;`",472,null],[11,"GetDWriteVersion","","`readonly attribute DOMString DWriteVersion;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCleartypeParameters","","`readonly attribute DOMString cleartypeParameters;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetContentBackend","","`readonly attribute DOMString ContentBackend;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetWebRenderEnabled","","`readonly attribute boolean WebRenderEnabled;`",472,null],[11,"GetIsHeadless","","`readonly attribute boolean isHeadless;`",472,null],[11,"GetOffMainThreadPaintEnabled","","`readonly attribute boolean OffMainThreadPaintEnabled;`",472,null],[11,"GetAdapterDescription","","`text /** * The name of the display adapter. */`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDescription2","","`readonly attribute DOMString adapterDescription2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriver","","`readonly attribute DOMString adapterDriver;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriver2","","`readonly attribute DOMString adapterDriver2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterVendorID","","`readonly attribute DOMString adapterVendorID;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterVendorID2","","`readonly attribute DOMString adapterVendorID2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDeviceID","","`readonly attribute DOMString adapterDeviceID;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDeviceID2","","`readonly attribute DOMString adapterDeviceID2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterSubsysID","","`readonly attribute DOMString adapterSubsysID;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterSubsysID2","","`readonly attribute DOMString adapterSubsysID2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterRAM","","`text /** * The amount of RAM in MB in the display adapter. */`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterRAM2","","`readonly attribute DOMString adapterRAM2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriverVersion","","`readonly attribute DOMString adapterDriverVersion;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriverVersion2","","`readonly attribute DOMString adapterDriverVersion2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriverDate","","`readonly attribute DOMString adapterDriverDate;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdapterDriverDate2","","`readonly attribute DOMString adapterDriverDate2;`",472,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIsGPU2Active","","`readonly attribute boolean isGPU2Active;`",472,null],[11,"GetFailures","","`void getFailures (out unsigned long failureCount, [array, size_is (failureCount), optional] out long indices, [array, size_is (failureCount), retval] out string failures);`",472,null],[11,"LogFailure","","`[noscript,notxpcom] void logFailure (in ACString failure);`",472,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"c_void"}}],[11,"GetFeatureStatus","","`text /** * Ask about a feature, and return the status of that feature. * If the feature is not ok then aFailureId will give a unique failure Id * otherwise it will be empty. */`",472,null],[11,"GetFeatureSuggestedDriverVersion","","`DOMString getFeatureSuggestedDriverVersion (in long aFeature);`",472,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetWebGLParameter","","`text /** * WebGL info; valid params are \"full-renderer\", \"vendor\", \"renderer\", \"version\", * \"shading_language_version\", \"extensions\". These return info from * underlying GL impl that's used to implement WebGL. */`",472,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetData","","`[noscript,notxpcom] void GetData ();`",472,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"ControlGPUProcessForXPCShell","","`boolean controlGPUProcessForXPCShell (in boolean aEnable);`",472,null],[11,"addref","","",473,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",473,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHTMLInputElement` to one of its base interfaces.",473,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",473,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAutocomplete","","`readonly attribute DOMString autocomplete;`",473,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetChecked","","`attribute boolean checked;`",473,null],[11,"SetChecked","","`attribute boolean checked;`",473,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForm","","`readonly attribute nsIDOMHTMLFormElement form;`",473,null],[11,"GetFormAction","","`attribute DOMString formAction;`",473,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFormAction","","`attribute DOMString formAction;`",473,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIndeterminate","","`attribute boolean indeterminate;`",473,null],[11,"SetIndeterminate","","`attribute boolean indeterminate;`",473,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetList","","`readonly attribute nsIDOMHTMLElement list;`",473,null],[11,"GetName","","`attribute DOMString name;`",473,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`attribute DOMString name;`",473,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReadOnly","","`attribute boolean readOnly;`",473,null],[11,"SetReadOnly","","`attribute boolean readOnly;`",473,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetControllers","","`readonly attribute nsIControllers controllers;`",473,null],[11,"addref","","",474,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",474,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inIDOMView` to one of its base interfaces.",474,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",474,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRootNode","","`attribute nsIDOMNode rootNode;`",474,null],[11,"SetRootNode","","`attribute nsIDOMNode rootNode;`",474,null],[11,"GetShowAnonymousContent","","`attribute boolean showAnonymousContent;`",474,null],[11,"SetShowAnonymousContent","","`attribute boolean showAnonymousContent;`",474,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowSubDocuments","","`attribute boolean showSubDocuments;`",474,null],[11,"SetShowSubDocuments","","`attribute boolean showSubDocuments;`",474,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowWhitespaceNodes","","`attribute boolean showWhitespaceNodes;`",474,null],[11,"SetShowWhitespaceNodes","","`attribute boolean showWhitespaceNodes;`",474,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowAccessibleNodes","","`attribute boolean showAccessibleNodes;`",474,null],[11,"SetShowAccessibleNodes","","`attribute boolean showAccessibleNodes;`",474,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWhatToShow","","`attribute unsigned long whatToShow;`",474,null],[11,"SetWhatToShow","","`attribute unsigned long whatToShow;`",474,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetNodeFromRowIndex","","`nsIDOMNode getNodeFromRowIndex (in long rowIndex);`",474,null],[11,"GetRowIndexFromNode","","`long getRowIndexFromNode (in nsIDOMNode node);`",474,null],[11,"Rebuild","","`void rebuild ();`",474,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",475,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",475,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOutputIterator` to one of its base interfaces.",475,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",475,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PutElement","","`text /** * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator. * The iterator and the underlying container or sequence cooperate to |Release()| * the replaced element, if any and if necessary, and to |AddRef()| the new element. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anElementToPut the element to place into the underlying container or sequence */`",475,null],[11,"StepForward","","`text /** * Advance this iterator to the next position in the underlying container or sequence. */`",475,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",476,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",476,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputIterator` to one of its base interfaces.",476,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",476,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetElement","","`text /** * Retrieve (and |AddRef()|) the element this iterator currently points to. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @result a new reference to the element this iterator currently points to (if any) */`",476,null],[11,"StepForward","","`text /** * Advance this iterator to the next position in the underlying container or sequence. */`",476,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsEqualTo","","`text /** * Test if |anotherIterator| points to the same position in the underlying container or sequence. * * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence. * * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence * @result true if |anotherIterator| points to the same position in the underlying container or sequence */`",476,null],[11,"Clone","","`text /** * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points. * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator. * * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator */`",476,null],[11,"addref","","",477,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",477,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIForwardIterator` to one of its base interfaces.",477,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",477,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetElement","","`text /** * Retrieve (and |AddRef()|) the element this iterator currently points to. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @result a new reference to the element this iterator currently points to (if any) */`",477,null],[11,"PutElement","","`text /** * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator. * The iterator and the underlying container or sequence cooperate to |Release()| * the replaced element, if any and if necessary, and to |AddRef()| the new element. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anElementToPut the element to place into the underlying container or sequence */`",477,null],[11,"StepForward","","`text /** * Advance this iterator to the next position in the underlying container or sequence. */`",477,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsEqualTo","","`text /** * Test if |anotherIterator| points to the same position in the underlying container or sequence. * * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence. * * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence * @result true if |anotherIterator| points to the same position in the underlying container or sequence */`",477,null],[11,"Clone","","`text /** * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points. * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator. * * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator */`",477,null],[11,"addref","","",478,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",478,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBidirectionalIterator` to one of its base interfaces.",478,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",478,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetElement","","`text /** * Retrieve (and |AddRef()|) the element this iterator currently points to. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @result a new reference to the element this iterator currently points to (if any) */`",478,null],[11,"PutElement","","`text /** * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator. * The iterator and the underlying container or sequence cooperate to |Release()| * the replaced element, if any and if necessary, and to |AddRef()| the new element. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anElementToPut the element to place into the underlying container or sequence */`",478,null],[11,"StepForward","","`text /** * Advance this iterator to the next position in the underlying container or sequence. */`",478,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StepBackward","","`text /** * Move this iterator to the previous position in the underlying container or sequence. */`",478,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsEqualTo","","`text /** * Test if |anotherIterator| points to the same position in the underlying container or sequence. * * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence. * * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence * @result true if |anotherIterator| points to the same position in the underlying container or sequence */`",478,null],[11,"Clone","","`text /** * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points. * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator. * * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator */`",478,null],[11,"addref","","",479,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",479,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRandomAccessIterator` to one of its base interfaces.",479,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",479,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetElement","","`text /** * Retrieve (and |AddRef()|) the element this iterator currently points to. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @result a new reference to the element this iterator currently points to (if any) */`",479,null],[11,"GetElementAt","","`text /** * Retrieve (and |AddRef()|) an element at some offset from where this iterator currently points. * The offset may be negative. |getElementAt(0)| is equivalent to |getElement()|. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anOffset a |0|-based offset from the position to which this iterator currently points * @result a new reference to the indicated element (if any) */`",479,null],[11,"PutElement","","`text /** * Put |anElementToPut| into the underlying container or sequence at the position currently pointed to by this iterator. * The iterator and the underlying container or sequence cooperate to |Release()| * the replaced element, if any and if necessary, and to |AddRef()| the new element. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anElementToPut the element to place into the underlying container or sequence */`",479,null],[11,"PutElementAt","","`text /** * Put |anElementToPut| into the underlying container or sequence at the position |anOffset| away from that currently pointed to by this iterator. * The iterator and the underlying container or sequence cooperate to |Release()| * the replaced element, if any and if necessary, and to |AddRef()| the new element. * |putElementAt(0, obj)| is equivalent to |putElement(obj)|. * * The result is undefined if this iterator currently points outside the * useful range of the underlying container or sequence. * * @param anOffset a |0|-based offset from the position to which this iterator currently points * @param anElementToPut the element to place into the underlying container or sequence */`",479,null],[11,"StepForward","","`text /** * Advance this iterator to the next position in the underlying container or sequence. */`",479,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StepForwardBy","","`text /** * Move this iterator by |anOffset| positions in the underlying container or sequence. * |anOffset| may be negative. |stepForwardBy(1)| is equivalent to |stepForward()|. * |stepForwardBy(0)| is a no-op. * * @param anOffset a |0|-based offset from the position to which this iterator currently points */`",479,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"StepBackward","","`text /** * Move this iterator to the previous position in the underlying container or sequence. */`",479,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StepBackwardBy","","`text /** * Move this iterator backwards by |anOffset| positions in the underlying container or sequence. * |anOffset| may be negative. |stepBackwardBy(1)| is equivalent to |stepBackward()|. * |stepBackwardBy(n)| is equivalent to |stepForwardBy(-n)|. |stepBackwardBy(0)| is a no-op. * * @param anOffset a |0|-based offset from the position to which this iterator currently points */`",479,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"IsEqualTo","","`text /** * Test if |anotherIterator| points to the same position in the underlying container or sequence. * * The result is undefined if |anotherIterator| was not created by or for the same underlying container or sequence. * * @param anotherIterator another iterator to compare against, created by or for the same underlying container or sequence * @result true if |anotherIterator| points to the same position in the underlying container or sequence */`",479,null],[11,"Clone","","`text /** * Create a new iterator pointing to the same position in the underlying container or sequence to which this iterator currently points. * The returned iterator is suitable for use in a subsequent call to |isEqualTo()| against this iterator. * * @result a new iterator pointing at the same position in the same underlying container or sequence as this iterator */`",479,null],[11,"addref","","",480,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",480,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeOSFileResult` to one of its base interfaces.",480,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",480,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDispatchDurationMS","","`text /** * Delay between when the operation was requested on the main thread and * when the operation was started off main thread. */`",480,null],[11,"GetExecutionDurationMS","","`text /** * Duration of the off main thread execution. */`",480,null],[11,"addref","","",481,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",481,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeOSFileSuccessCallback` to one of its base interfaces.",481,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",481,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`void complete (in nsINativeOSFileResult result);`",481,null],[11,"addref","","",482,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",482,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeOSFileErrorCallback` to one of its base interfaces.",482,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",482,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * @param operation The name of the failed operation. Provided to aid * debugging only, may change without notice. * @param OSstatus The OS status of the operation (errno under Unix, * GetLastError under Windows). */`",482,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",483,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",483,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeOSFileInternalsService` to one of its base interfaces.",483,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",483,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",484,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",484,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdatePatch` to one of its base interfaces.",484,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",484,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * The type of this patch: * \"partial\" A binary difference between two application versions * \"complete\" A complete patch containing all of the replacement files * to update to the new version */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetType","","`text /** * The type of this patch: * \"partial\" A binary difference between two application versions * \"complete\" A complete patch containing all of the replacement files * to update to the new version */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetURL","","`text /** * The URL this patch was being downloaded from */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetURL","","`text /** * The URL this patch was being downloaded from */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFinalURL","","`text /** * The final URL this patch was being downloaded from */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFinalURL","","`text /** * The final URL this patch was being downloaded from */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSize","","`text /** * The size of this file, in bytes. */`",484,null],[11,"SetSize","","`text /** * The size of this file, in bytes. */`",484,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetState","","`text /** * The state of this patch */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetState","","`text /** * The state of this patch */`",484,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetErrorCode","","`text /** * A numeric error code that conveys additional information about the state of * a failed update. If the update is not in the \"failed\" state the value is * zero. The possible values are located in common/errors.h and values between * 80 and 99 are in nsUpdateService.js. */`",484,null],[11,"SetErrorCode","","`text /** * A numeric error code that conveys additional information about the state of * a failed update. If the update is not in the \"failed\" state the value is * zero. The possible values are located in common/errors.h and values between * 80 and 99 are in nsUpdateService.js. */`",484,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSelected","","`text /** * true if this patch is currently selected as the patch to be downloaded and * installed for this update transaction, false if another patch from this * update has been selected. */`",484,null],[11,"SetSelected","","`text /** * true if this patch is currently selected as the patch to be downloaded and * installed for this update transaction, false if another patch from this * update has been selected. */`",484,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Serialize","","`text /** * Serializes this patch object into a DOM Element * @param updates * The document to serialize into * @returns The DOM Element created by the serialization process */`",484,null],[11,"addref","","",485,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",485,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdate` to one of its base interfaces.",485,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",485,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * The type of update: * \"major\" A major new version of the Application * \"minor\" A minor update to the Application (e.g. security update) */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetType","","`text /** * The type of update: * \"major\" A major new version of the Application * \"minor\" A minor update to the Application (e.g. security update) */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`text /** * The name of the update, or \"<Application Name> <Update Version>\" */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`text /** * The name of the update, or \"<Application Name> <Update Version>\" */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayVersion","","`text /** * The string to display in the user interface for the version. If you want * a real version number use appVersion. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDisplayVersion","","`text /** * The string to display in the user interface for the version. If you want * a real version number use appVersion. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAppVersion","","`text /** * The Application version of this update. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAppVersion","","`text /** * The Application version of this update. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPreviousAppVersion","","`text /** * The Application version prior to the application being updated. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPreviousAppVersion","","`text /** * The Application version prior to the application being updated. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBuildID","","`text /** * The Build ID of this update. Used to determine a particular build, down * to the hour, minute and second of its creation. This allows the system * to differentiate between several nightly builds with the same |version| * for example. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetBuildID","","`text /** * The Build ID of this update. Used to determine a particular build, down * to the hour, minute and second of its creation. This allows the system * to differentiate between several nightly builds with the same |version| * for example. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDetailsURL","","`text /** * The URL to a page which offers details about the content of this * update. Ideally, this page is not the release notes but some other page * that summarizes the differences between this update and the previous, * which also links to the release notes. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDetailsURL","","`text /** * The URL to a page which offers details about the content of this * update. Ideally, this page is not the release notes but some other page * that summarizes the differences between this update and the previous, * which also links to the release notes. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetServiceURL","","`text /** * The URL to the Update Service that supplied this update. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetServiceURL","","`text /** * The URL to the Update Service that supplied this update. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetChannel","","`text /** * The channel used to retrieve this update from the Update Service. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetChannel","","`text /** * The channel used to retrieve this update from the Update Service. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUnsupported","","`text /** * Whether the update is no longer supported on this system. */`",485,null],[11,"SetUnsupported","","`text /** * Whether the update is no longer supported on this system. */`",485,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPromptWaitTime","","`text /** * Allows overriding the default amount of time in seconds before prompting the * user to apply an update. If not specified, the value of * app.update.promptWaitTime will be used. */`",485,null],[11,"SetPromptWaitTime","","`text /** * Allows overriding the default amount of time in seconds before prompting the * user to apply an update. If not specified, the value of * app.update.promptWaitTime will be used. */`",485,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetIsCompleteUpdate","","`text /** * Whether or not the update being downloaded is a complete replacement of * the user's existing installation or a patch representing the difference * between the new version and the previous version. */`",485,null],[11,"SetIsCompleteUpdate","","`text /** * Whether or not the update being downloaded is a complete replacement of * the user's existing installation or a patch representing the difference * between the new version and the previous version. */`",485,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInstallDate","","`text /** * When the update was installed. */`",485,null],[11,"SetInstallDate","","`text /** * When the update was installed. */`",485,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetStatusText","","`text /** * A message associated with this update, if any. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetStatusText","","`text /** * A message associated with this update, if any. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSelectedPatch","","`text /** * The currently selected patch for this update. */`",485,null],[11,"GetState","","`text /** * The state of the selected patch: * \"downloading\" The update is being downloaded. * \"pending\" The update is ready to be applied. * \"pending-service\" The update is ready to be applied with the service. * \"pending-elevate\" The update is ready to be applied but requires elevation. * \"applying\" The update is being applied. * \"applied\" The update is ready to be switched to. * \"applied-os\" The update is OS update and to be installed. * \"applied-service\" The update is ready to be switched to with the service. * \"succeeded\" The update was successfully applied. * \"download-failed\" The update failed to be downloaded. * \"failed\" The update failed to be applied. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetState","","`text /** * The state of the selected patch: * \"downloading\" The update is being downloaded. * \"pending\" The update is ready to be applied. * \"pending-service\" The update is ready to be applied with the service. * \"pending-elevate\" The update is ready to be applied but requires elevation. * \"applying\" The update is being applied. * \"applied\" The update is ready to be switched to. * \"applied-os\" The update is OS update and to be installed. * \"applied-service\" The update is ready to be switched to with the service. * \"succeeded\" The update was successfully applied. * \"download-failed\" The update failed to be downloaded. * \"failed\" The update failed to be applied. */`",485,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetErrorCode","","`text /** * A numeric error code that conveys additional information about the state of * a failed update. If the update is not in the \"failed\" state the value is * zero. The possible values are located in common/errors.h and values between * 80 and 99 are in nsUpdateService.js. */`",485,null],[11,"SetErrorCode","","`text /** * A numeric error code that conveys additional information about the state of * a failed update. If the update is not in the \"failed\" state the value is * zero. The possible values are located in common/errors.h and values between * 80 and 99 are in nsUpdateService.js. */`",485,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetElevationFailure","","`text /** * Whether an elevation failure has been encountered for this update. */`",485,null],[11,"SetElevationFailure","","`text /** * Whether an elevation failure has been encountered for this update. */`",485,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPatchCount","","`text /** * The number of patches supplied by this update. */`",485,null],[11,"GetPatchAt","","`text /** * Retrieves a patch. * @param index * The index of the patch to retrieve. * @returns The nsIUpdatePatch at the specified index. */`",485,null],[11,"Serialize","","`text /** * Serializes this update object into a DOM Element * @param updates * The document to serialize into * @returns The DOM Element created by the serialization process */`",485,null],[11,"addref","","",486,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",486,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdateCheckListener` to one of its base interfaces.",486,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",486,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",487,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",487,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdateChecker` to one of its base interfaces.",487,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",487,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"CURRENT_CHECK","","`text /** * Constants for the |stopChecking| function that tell the Checker how long * to stop checking: * * CURRENT_CHECK: Stops the current (active) check only * CURRENT_SESSION: Stops all checking for the current session * ANY_CHECKS: Stops all checking, any session from now on * (disables update checking preferences) */`",487,null],[18,"CURRENT_SESSION","","",487,null],[18,"ANY_CHECKS","","",487,null],[11,"CheckForUpdates","","`text /** * Checks for available updates, notifying a listener of the results. * @param listener * An object implementing nsIUpdateCheckListener which is notified * of the results of an update check. * @param force * Forces the checker to check for updates, regardless of the * current value of the user's update settings. This is used by * any piece of UI that offers the user the imperative option to * check for updates now, regardless of their update settings. * force will not work if the system administrator has locked * the app.update.enabled preference. */`",487,null],[11,"StopChecking","","`text /** * Ends any pending update check. * @param duration * A value representing the set of checks to stop doing. */`",487,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",488,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",488,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationUpdateService` to one of its base interfaces.",488,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",488,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CheckForBackgroundUpdates","","`text /** * Checks for available updates in the background using the listener provided * by the application update service for background checks. */`",488,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetBackgroundChecker","","`text /** * The Update Checker used for background update checking. */`",488,null],[11,"SelectUpdate","","`text /** * Selects the best update to install from a list of available updates. * @param updates * An array of updates that are available * @param updateCount * The length of the |updates| array */`",488,null],[11,"AddDownloadListener","","`text /** * Adds a listener that receives progress and state information about the * update that is currently being downloaded, e.g. to update a user * interface. * @param listener * An object implementing nsIRequestObserver and optionally * nsIProgressEventSink that is to be notified of state and * progress information as the update is downloaded. */`",488,null],[11,"RemoveDownloadListener","","`text /** * Removes a listener that is receiving progress and state information * about the update that is currently being downloaded. * @param listener * The listener object to remove. */`",488,null],[11,"DownloadUpdate","","`text /** * */`",488,null],[11,"GetUpdatesDirectory","","`text /** * Get the Active Updates directory * @returns An nsIFile for the active updates directory. */`",488,null],[11,"PauseDownload","","`text /** * Pauses the active update download process */`",488,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsDownloading","","`text /** * Whether or not there is an download happening at the moment. */`",488,null],[11,"GetCanCheckForUpdates","","`text /** * Whether or not the Update Service can check for updates. This is a function * of whether or not application update is disabled by the application and the * platform the application is running on. */`",488,null],[11,"GetElevationRequired","","`text /** * Whether or not the installation requires elevation. Currently only * implemented on OSX, returns false on other platforms. */`",488,null],[11,"GetCanApplyUpdates","","`text /** * Whether or not the Update Service can download and install updates. * On Windows, this is a function of whether or not the maintenance service * is installed and enabled. On other systems, and as a fallback on Windows, * this depends on whether the current user has write access to the install * directory. */`",488,null],[11,"GetIsOtherInstanceHandlingUpdates","","`text /** * Whether or not a different instance is handling updates of this * installation. This currently only ever returns true on Windows * when 2 instances of an application are open. Only one of the instances * will actually handle updates for the installation. */`",488,null],[11,"GetCanStageUpdates","","`text /** * Whether the Update Service is able to stage updates. */`",488,null],[11,"addref","","",489,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",489,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdateProcessor` to one of its base interfaces.",489,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",489,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ProcessUpdate","","`text /** * Processes the update which has been downloaded. * This happens without restarting the application. * On Windows, this can also be used for switching to an applied * update request. * @param update The update being applied, or null if this is a switch * to updated application request. */`",489,null],[11,"addref","","",490,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",490,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdateManager` to one of its base interfaces.",490,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",490,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetUpdateAt","","`text /** * Gets the update at the specified index * @param index * The index within the updates array * @returns The nsIUpdate object at the specified index */`",490,null],[11,"GetUpdateCount","","`text /** * Gets the total number of updates in the history list. */`",490,null],[11,"GetActiveUpdate","","`text /** * The active (current) update. The active update is not in the history list. */`",490,null],[11,"SetActiveUpdate","","`text /** * The active (current) update. The active update is not in the history list. */`",490,null],[11,"SaveUpdates","","`text /** * Saves all updates to disk. */`",490,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RefreshUpdateStatus","","`text /** * Refresh the update status based on the information in update.status. */`",490,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ElevationOptedIn","","`text /** * The user agreed to proceed with an elevated update and we are now * permitted to show an elevation prompt. */`",490,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CleanupActiveUpdate","","`text /** * Clean up and remove the active update without applying it. */`",490,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",491,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",491,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdatePrompt` to one of its base interfaces.",491,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",491,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CheckForUpdates","","`text /** * Shows the application update checking user interface and checks if there * is an update available. */`",491,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ShowUpdateAvailable","","`text /** * Shows the application update available user interface advising that an * update is available for download and install. If the app.update.silent * preference is true or the user interface is already displayed the call will * be a no-op. * @param update * The nsIUpdate object to be downloaded and installed */`",491,null],[11,"ShowUpdateDownloaded","","`text /** * Shows the application update downloaded user interface advising that an * update has now been downloaded and a restart is necessary to complete the * update. If background is true (e.g. the download was not user initiated) * and the app.update.silent preference is true the call will be a no-op. * @param update * The nsIUpdate object that was downloaded * @param background * Less obtrusive UI, starting with a non-modal notification alert */`",491,null],[11,"ShowUpdateError","","`text /** * Shows the application update error user interface advising that an error * occurred while checking for or applying an update. If the app.update.silent * preference is true the call will be a no-op. * @param update * An nsIUpdate object representing the update that could not be * installed. The nsIUpdate object will not be the actual update when * the error occurred during an update check and will instead be an * nsIUpdate object with the error information for the update check. */`",491,null],[11,"ShowUpdateHistory","","`text /** * Shows a list of all updates installed to date. * @param parent * An nsIDOMWindow to set as the parent for this window. Can be null. */`",491,null],[11,"ShowUpdateElevationRequired","","`text /** * Shows the application update downloaded user interface advising that an * update, which requires elevation, has now been downloaded and a restart is * necessary to complete the update. */`",491,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",492,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",492,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWeakReference` to one of its base interfaces.",492,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",492,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"QueryReferentFromScript","","`text /** * |QueryReferent| queries the referent, if it exists, and like |QueryInterface|, produces * an owning reference to the desired interface. It is designed to look and act exactly * like (a proxied) |QueryInterface|. Don't hold on to the produced interface permanently; * that would defeat the purpose of using a non-owning |nsIWeakReference| in the first place. */`",492,null],[11,"addref","","",493,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",493,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsWeakReference` to one of its base interfaces.",493,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",493,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetWeakReference","","`text /** * |GetWeakReference| produces an appropriate instance of |nsIWeakReference|. * As with all good XPCOM `getters', you own the resulting interface and should * manage it with an |nsCOMPtr|. * * @see nsIWeakReference * @see nsWeakPtr * @see nsCOMPtr */`",493,null],[11,"addref","","",494,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",494,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINestedURI` to one of its base interfaces.",494,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",494,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInnerURI","","`text /** * The inner URI for this nested URI. This must not return null if the * getter succeeds; URIs that have no inner must not QI to this interface. * Dynamically changing whether there is an inner URI is not allowed. * * Modifying the returned URI must not in any way modify the nested URI; this * means the returned URI must be either immutable or a clone. */`",494,null],[11,"GetInnermostURI","","`text /** * The innermost URI for this nested URI. This must not return null if the * getter succeeds. This is equivalent to repeatedly calling innerURI while * the returned URI QIs to nsINestedURI. * * Modifying the returned URI must not in any way modify the nested URI; this * means the returned URI must be either immutable or a clone. */`",494,null],[11,"addref","","",495,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",495,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebVTTParserWrapper` to one of its base interfaces.",495,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",495,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LoadParser","","`text /** * Loads the JS WebVTTParser and sets it to use the passed window to create * VTTRegions and VTTCues. This function must be called before calling * parse, flush, or watch. * * @param window The window that the parser will use to create VTTCues and * VTTRegions. * */`",495,null],[11,"Parse","","`text /** * Attempts to parse the stream's data as WebVTT format. When it successfully * parses a WebVTT region or WebVTT cue it will create a VTTRegion or VTTCue * object and pass it back to the callee through its callbacks. * * @param data The buffer that contains the WebVTT data received by the * Necko consumer so far. */`",495,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Flush","","`text /** * Flush indicates that no more data is expected from the stream. As such the * parser should try to parse any kind of partial data it has. */`",495,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Watch","","`text /** * Set this parser object to use an nsIWebVTTListener object for its onCue * and onRegion callbacks. * * @param callback The nsIWebVTTListener object that exposes onCue and * onRegion callbacks for the parser. */`",495,null],[11,"ConvertCueToDOMTree","","`text /** * Convert the text content of a WebVTT cue to a document fragment so that * we can display it on the page. * * @param window A window object with which the document fragment will be * created. * @param cue The cue whose content will be converted to a document * fragment. */`",495,null],[11,"ProcessCues","","`text /** * Compute the display state of the VTTCues in cues along with any VTTRegions * that they might be in. First, it computes the positioning and styling of * the cues and regions passed and converts them into a DOM tree rooted at * a containing HTMLDivElement. It then adjusts those computed divs for * overlap avoidance using the dimensions of 'overlay'. Finally, it adds the * computed divs to the VTTCues display state property for use later. * * @param window A window object with which it will create the DOM tree * and containing div element. * @param cues An array of VTTCues who need there display state to be * computed. * @param overlay The HTMLElement that the cues will be displayed within. * @param controls The video control element that will affect cues position. */`",495,null],[11,"addref","","",496,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",496,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPromptFactory` to one of its base interfaces.",496,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",496,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrompt","","`text /** * Returns an object implementing the specified interface that creates * prompts parented to aParent. */`",496,null],[11,"addref","","",497,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",497,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketTransport` to one of its base interfaces.",497,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",497,{"inputs":[{"name":"self"}],"output":{"name":"nsitransport"}}],[18,"TIMEOUT_CONNECT","","`text /** * Values for the aType parameter passed to get/setTimeout. */`",497,null],[18,"TIMEOUT_READ_WRITE","","",497,null],[18,"STATUS_RESOLVING","","`text /** * nsITransportEventSink status codes. * * Although these look like XPCOM error codes and are passed in an nsresult * variable, they are *not* error codes. Note that while they *do* overlap * with existing error codes in Necko, these status codes are confined * within a very limited context where no error codes may appear, so there * is no ambiguity. * * The values of these status codes must never change. * * The status codes appear in near-chronological order (not in numeric * order). STATUS_RESOLVING may be skipped if the host does not need to be * resolved. STATUS_WAITING_FOR is an optional status code, which the impl * of this interface may choose not to generate. * * In C++, these constants have a type of uint32_t, so C++ callers must use * the NS_NET_STATUS_* constants defined below, which have a type of * nsresult. */`",497,null],[18,"STATUS_RESOLVED","","",497,null],[18,"STATUS_CONNECTING_TO","","",497,null],[18,"STATUS_CONNECTED_TO","","",497,null],[18,"STATUS_SENDING_TO","","",497,null],[18,"STATUS_WAITING_FOR","","",497,null],[18,"STATUS_RECEIVING_FROM","","",497,null],[18,"STATUS_TLS_HANDSHAKE_STARTING","","",497,null],[18,"STATUS_TLS_HANDSHAKE_ENDED","","",497,null],[18,"BYPASS_CACHE","","`text /** * Values for the connectionFlags * * When making a new connection BYPASS_CACHE will force the Necko DNS * cache entry to be refreshed with a new call to NSPR if it is set before * opening the new stream. */`",497,null],[18,"ANONYMOUS_CONNECT","","`text /** * When setting this flag, the socket will not apply any * credentials when establishing a connection. For example, * an SSL connection would not send any client-certificates * if this flag is set. */`",497,null],[18,"DISABLE_IPV6","","`text /** * If set, we will skip all IPv6 addresses the host may have and only * connect to IPv4 ones. */`",497,null],[18,"NO_PERMANENT_STORAGE","","`text /** * If set, indicates that the connection was initiated from a source * defined as being private in the sense of Private Browsing. Generally, * there should be no state shared between connections that are private * and those that are not; it is OK for multiple private connections * to share state with each other, and it is OK for multiple non-private * connections to share state with each other. */`",497,null],[18,"DISABLE_IPV4","","`text /** * If set, we will skip all IPv4 addresses the host may have and only * connect to IPv6 ones. */`",497,null],[18,"DISABLE_RFC1918","","`text /** * If set, indicates that the socket should not connect if the hostname * resolves to an RFC1918 address or IPv6 equivalent. */`",497,null],[18,"MITM_OK","","`text /** * This flag is an explicit opt-in that allows a normally secure socket * provider to use, at its discretion, an insecure algorithm. e.g. * a TLS socket without authentication. */`",497,null],[18,"BE_CONSERVATIVE","","`text /** * If set, do not use newer protocol features that might have interop problems * on the Internet. Intended only for use with critical infra like the updater. * default is false. */`",497,null],[11,"GetHost","","`text /** * Get the peer's host for the underlying socket connection. * For Unix domain sockets, this is a pathname, or the empty string for * unnamed and abstract socket addresses. */`",497,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * Get the port for the underlying socket connection. * For Unix domain sockets, this is zero. */`",497,null],[11,"GetNetworkInterfaceId","","`text /** * The platform-specific network interface id that this socket * associated with. Note that this attribute can be only accessed * in the socket thread. */`",497,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetNetworkInterfaceId","","`text /** * The platform-specific network interface id that this socket * associated with. Note that this attribute can be only accessed * in the socket thread. */`",497,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetScriptablePeerAddr","","`text /** * Returns a scriptable version of getPeerAddr. This attribute is defined * only once a connection has been established. */`",497,null],[11,"GetScriptableSelfAddr","","`text /** * Returns a scriptable version of getSelfAddr. This attribute is defined * only once a connection has been established. */`",497,null],[11,"GetSecurityInfo","","`text /** * Security info object returned from the secure socket provider. This * object supports nsISSLSocketControl, nsITransportSecurityInfo, and * possibly other interfaces. * * This attribute is only available once the socket is connected. */`",497,null],[11,"GetSecurityCallbacks","","`text /** * Security notification callbacks passed to the secure socket provider * via nsISSLSocketControl at socket creation time. * * NOTE: this attribute cannot be changed once a stream has been opened. */`",497,null],[11,"SetSecurityCallbacks","","`text /** * Security notification callbacks passed to the secure socket provider * via nsISSLSocketControl at socket creation time. * * NOTE: this attribute cannot be changed once a stream has been opened. */`",497,null],[11,"IsAlive","","`text /** * Test if this socket transport is (still) connected. */`",497,null],[11,"GetTimeout","","`text /** * Socket timeouts in seconds. To specify no timeout, pass UINT32_MAX * as aValue to setTimeout. The implementation may truncate timeout values * to a smaller range of values (e.g., 0 to 0xFFFF). */`",497,null],[11,"SetTimeout","","`void setTimeout (in unsigned long aType, in unsigned long aValue);`",497,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetReuseAddrPort","","`text /** * True to set addr and port reuse socket options. */`",497,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetConnectionFlags","","`text /** * connectionFlags is a bitmask that can be used to modify underlying * behavior of the socket connection. See the flags below. */`",497,null],[11,"SetConnectionFlags","","`text /** * connectionFlags is a bitmask that can be used to modify underlying * behavior of the socket connection. See the flags below. */`",497,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetTlsFlags","","`text /** * An opaque flags for non-standard behavior of the TLS system. * It is unlikely this will need to be set outside of telemetry studies * relating to the TLS implementation. */`",497,null],[11,"SetTlsFlags","","`text /** * An opaque flags for non-standard behavior of the TLS system. * It is unlikely this will need to be set outside of telemetry studies * relating to the TLS implementation. */`",497,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetQoSBits","","`text /** * Socket QoS/ToS markings. Valid values are IPTOS_DSCP_AFxx or * IPTOS_CLASS_CSx (or IPTOS_DSCP_EF, but currently no supported * services require expedited-forwarding). * Not setting this value will leave the socket with the default * ToS value, which on most systems if IPTOS_CLASS_CS0 (formerly * IPTOS_PREC_ROUTINE). */`",497,null],[11,"SetQoSBits","","`text /** * Socket QoS/ToS markings. Valid values are IPTOS_DSCP_AFxx or * IPTOS_CLASS_CSx (or IPTOS_DSCP_EF, but currently no supported * services require expedited-forwarding). * Not setting this value will leave the socket with the default * ToS value, which on most systems if IPTOS_CLASS_CS0 (formerly * IPTOS_PREC_ROUTINE). */`",497,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"GetRecvBufferSize","","`text /** * TCP send and receive buffer sizes. A value of 0 means OS level * auto-tuning is in effect. */`",497,null],[11,"SetRecvBufferSize","","`text /** * TCP send and receive buffer sizes. A value of 0 means OS level * auto-tuning is in effect. */`",497,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetSendBufferSize","","`attribute unsigned long sendBufferSize;`",497,null],[11,"SetSendBufferSize","","`attribute unsigned long sendBufferSize;`",497,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetKeepaliveEnabled","","`text /** * TCP keepalive configuration (support varies by platform). * Note that the attribute as well as the setter can only accessed * in the socket thread. */`",497,null],[11,"SetKeepaliveEnabled","","`text /** * TCP keepalive configuration (support varies by platform). * Note that the attribute as well as the setter can only accessed * in the socket thread. */`",497,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetKeepaliveVals","","`void setKeepaliveVals (in long keepaliveIdleTime, in long keepaliveRetryInterval);`",497,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetFirstRetryError","","`readonly attribute nsresult firstRetryError;`",497,null],[11,"addref","","",498,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",498,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocShellLoadInfo` to one of its base interfaces.",498,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",498,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"loadNormal","","",498,null],[18,"loadNormalReplace","","",498,null],[18,"loadHistory","","",498,null],[18,"loadReloadNormal","","",498,null],[18,"loadReloadBypassCache","","",498,null],[18,"loadReloadBypassProxy","","",498,null],[18,"loadReloadBypassProxyAndCache","","",498,null],[18,"loadLink","","",498,null],[18,"loadRefresh","","",498,null],[18,"loadReloadCharsetChange","","",498,null],[18,"loadBypassHistory","","",498,null],[18,"loadStopContent","","",498,null],[18,"loadStopContentAndReplace","","",498,null],[18,"loadNormalExternal","","",498,null],[18,"loadNormalBypassCache","","",498,null],[18,"loadNormalBypassProxy","","",498,null],[18,"loadNormalBypassProxyAndCache","","",498,null],[18,"loadPushState","","",498,null],[18,"loadReplaceBypassCache","","",498,null],[18,"loadReloadMixedContent","","",498,null],[18,"loadNormalAllowMixedContent","","",498,null],[18,"loadReloadCharsetChangeBypassCache","","",498,null],[18,"loadReloadCharsetChangeBypassProxyAndCache","","",498,null],[11,"GetReferrer","","`text /** This is the referrer for the load. */`",498,null],[11,"SetReferrer","","`text /** This is the referrer for the load. */`",498,null],[11,"GetOriginalURI","","`text /** * The originalURI to be passed to nsIDocShell.internalLoad. May be null. */`",498,null],[11,"SetOriginalURI","","`text /** * The originalURI to be passed to nsIDocShell.internalLoad. May be null. */`",498,null],[11,"GetResultPrincipalURI","","`text /** * Result principal URL from nsILoadInfo, may be null. Valid only if * the \"IsSome\" part is true (has the same meaning as isSome() * on mozilla::Maybe.) * * In C++ please use Get/SetMaybeResultPrincipalURI helper functions. */`",498,null],[11,"SetResultPrincipalURI","","`text /** * Result principal URL from nsILoadInfo, may be null. Valid only if * the \"IsSome\" part is true (has the same meaning as isSome() * on mozilla::Maybe.) * * In C++ please use Get/SetMaybeResultPrincipalURI helper functions. */`",498,null],[11,"GetResultPrincipalURIIsSome","","`attribute boolean resultPrincipalURIIsSome;`",498,null],[11,"SetResultPrincipalURIIsSome","","`attribute boolean resultPrincipalURIIsSome;`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLoadReplace","","`text /** * loadReplace flag to be passed to nsIDocShell.internalLoad. */`",498,null],[11,"SetLoadReplace","","`text /** * loadReplace flag to be passed to nsIDocShell.internalLoad. */`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTriggeringPrincipal","","`text /** The principal of the load, that is, the entity responsible for * causing the load to occur. In most cases the referrer and * the triggeringPrincipal's URI will be identical. */`",498,null],[11,"SetTriggeringPrincipal","","`text /** The principal of the load, that is, the entity responsible for * causing the load to occur. In most cases the referrer and * the triggeringPrincipal's URI will be identical. */`",498,null],[11,"GetInheritPrincipal","","`text /** If this attribute is true and no triggeringPrincipal is specified, * copy the principal from the referring document. */`",498,null],[11,"SetInheritPrincipal","","`text /** If this attribute is true and no triggeringPrincipal is specified, * copy the principal from the referring document. */`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrincipalIsExplicit","","`text /** If this attribute is true only ever use the principal specified * by the triggeringPrincipal and inheritPrincipal attributes. * If there are security reasons for why this is unsafe, such * as trying to use a systemprincipal as the triggeringPrincipal * for a content docshell the load fails. */`",498,null],[11,"SetPrincipalIsExplicit","","`text /** If this attribute is true only ever use the principal specified * by the triggeringPrincipal and inheritPrincipal attributes. * If there are security reasons for why this is unsafe, such * as trying to use a systemprincipal as the triggeringPrincipal * for a content docshell the load fails. */`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForceAllowDataURI","","`text /** * If this attribute is true, then a top-level navigation * to a data URI will be allowed. */`",498,null],[11,"SetForceAllowDataURI","","`text /** * If this attribute is true, then a top-level navigation * to a data URI will be allowed. */`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLoadType","","`text /** Contains a load type as specified by the load* constants */`",498,null],[11,"SetLoadType","","`text /** Contains a load type as specified by the load* constants */`",498,{"inputs":[{"name":"self"},{"name":"nsdocshellinfoloadtype"}],"output":{"name":"nsresult"}}],[11,"GetSHEntry","","`text /** SHEntry for this page */`",498,null],[11,"SetSHEntry","","`text /** SHEntry for this page */`",498,null],[11,"GetTarget","","`text /** Target for load, like _content, _blank etc. */`",498,null],[11,"SetTarget","","`text /** Target for load, like _content, _blank etc. */`",498,null],[11,"GetPostDataStream","","`text /** Post data */`",498,null],[11,"SetPostDataStream","","`text /** Post data */`",498,null],[11,"GetHeadersStream","","`text /** Additional headers */`",498,null],[11,"SetHeadersStream","","`text /** Additional headers */`",498,null],[11,"GetSendReferrer","","`text /** True if the referrer should be sent, false if it shouldn't be * sent, even if it's available. This attribute defaults to true. */`",498,null],[11,"SetSendReferrer","","`text /** True if the referrer should be sent, false if it shouldn't be * sent, even if it's available. This attribute defaults to true. */`",498,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetReferrerPolicy","","`text /** Referrer policy for the load. This attribute holds one of * the values (REFERRER_POLICY_*) defined in nsIHttpChannel. */`",498,null],[11,"SetReferrerPolicy","","`text /** Referrer policy for the load. This attribute holds one of * the values (REFERRER_POLICY_*) defined in nsIHttpChannel. */`",498,{"inputs":[{"name":"self"},{"name":"nsdocshellinforeferrerpolicy"}],"output":{"name":"nsresult"}}],[11,"GetIsSrcdocLoad","","`text /** True if the docshell has been created to load an iframe where the * srcdoc attribute has been set. Set when srcdocData is specified. */`",498,null],[11,"GetSrcdocData","","`text /** When set, the load will be interpreted as a srcdoc load, where contents * of this string will be loaded instead of the URI. Setting srcdocData * sets isSrcdocLoad to true */`",498,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSrcdocData","","`text /** When set, the load will be interpreted as a srcdoc load, where contents * of this string will be loaded instead of the URI. Setting srcdocData * sets isSrcdocLoad to true */`",498,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSourceDocShell","","`text /** When set, this is the Source Browsing Context for the navigation. */`",498,null],[11,"SetSourceDocShell","","`text /** When set, this is the Source Browsing Context for the navigation. */`",498,null],[11,"GetBaseURI","","`text /** * Used for srcdoc loads to give view-source knowledge of the load's base * URI as this information isn't embedded in the load's URI. */`",498,null],[11,"SetBaseURI","","`text /** * Used for srcdoc loads to give view-source knowledge of the load's base * URI as this information isn't embedded in the load's URI. */`",498,null],[11,"addref","","",499,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",499,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDateTimeInputArea` to one of its base interfaces.",499,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",499,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyInputElementValueChanged","","`text /** * Called from DOM/Layout when input element value has changed. */`",499,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyMinMaxStepAttrChanged","","`text /** * Called from DOM/Layout when input element min, max or step attribute has * changed. */`",499,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"FocusInnerTextBox","","`text /** * Called from DOM/Layout to set focus on inner text box. */`",499,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BlurInnerTextBox","","`text /** * Called from DOM/Layout to blur inner text box. */`",499,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HasBadInput","","`text /** * Called from DOM/Layout to know whether the current entered value is valid. */`",499,null],[11,"SetPickerState","","`text /** * Set the current state of the picker, true if it's opened, false otherwise. */`",499,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetEditAttribute","","`text /** * Set the attribute of the inner text boxes. Only \"tabindex\", \"readonly\", * and \"disabled\" are allowed. */`",499,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveEditAttribute","","`text /** * Remove the attribute of the inner text boxes. Only \"tabindex\", \"readonly\", * and \"disabled\" are allowed. */`",499,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",500,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",500,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageValueArray` to one of its base interfaces.",500,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",500,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"VALUE_TYPE_NULL","","`text /** * These type values are returned by getTypeOfIndex * to indicate what type of value is present at * a given column. */`",500,null],[18,"VALUE_TYPE_INTEGER","","",500,null],[18,"VALUE_TYPE_FLOAT","","",500,null],[18,"VALUE_TYPE_TEXT","","",500,null],[18,"VALUE_TYPE_BLOB","","",500,null],[11,"GetNumEntries","","`text /** * numEntries * * number of entries in the array (each corresponding to a column * in the database row) */`",500,null],[11,"GetTypeOfIndex","","`text /** * Returns the type of the value at the given column index; * one of VALUE_TYPE_NULL, VALUE_TYPE_INTEGER, VALUE_TYPE_FLOAT, * VALUE_TYPE_TEXT, VALUE_TYPE_BLOB. */`",500,null],[11,"GetInt32","","`text /** * Obtain a value for the given entry (column) index. * Due to SQLite's type conversion rules, any of these are valid * for any column regardless of the column's data type. However, * if the specific type matters, getTypeOfIndex should be used * first to identify the column type, and then the appropriate * get method should be called. * * If you ask for a string value for a NULL column, you will get an empty * string with IsVoid set to distinguish it from an explicitly set empty * string. */`",500,null],[11,"GetInt64","","`long long getInt64 (in unsigned long aIndex);`",500,null],[11,"GetDouble","","`double getDouble (in unsigned long aIndex);`",500,null],[11,"GetUTF8String","","`AUTF8String getUTF8String (in unsigned long aIndex);`",500,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetString","","`AString getString (in unsigned long aIndex);`",500,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBlob","","`void getBlob (in unsigned long aIndex, out unsigned long aDataSize, [array, size_is (aDataSize)] out octet aData);`",500,null],[11,"GetBlobAsString","","`AString getBlobAsString (in unsigned long aIndex);`",500,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBlobAsUTF8String","","`AUTF8String getBlobAsUTF8String (in unsigned long aIndex);`",500,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsNull","","`boolean getIsNull (in unsigned long aIndex);`",500,null],[11,"GetSharedUTF8String","","`text /** * Returns a shared string pointer */`",500,null],[11,"GetSharedString","","`[noscript] void getSharedString (in unsigned long aIndex, out unsigned long aLength, [shared, retval] out wstring aResult);`",500,null],[11,"addref","","",501,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",501,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandLineHandler` to one of its base interfaces.",501,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",501,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Handle","","`text /** * Process a command line. If this handler finds arguments that it * understands, it should perform the appropriate actions (such as opening * a window), and remove the arguments from the command-line array. * * @throw NS_ERROR_ABORT to immediately cease command-line handling * (if this is STATE_INITIAL_LAUNCH, quits the app). * All other exceptions are silently ignored. */`",501,null],[11,"GetHelpInfo","","`text /** * When the app is launched with the --help argument, this attribute * is retrieved and displayed to the user (on stdout). The text should * have embedded newlines which wrap at 76 columns, and should include * a newline at the end. By convention, the right column which contains flag * descriptions begins at the 24th character. */`",501,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",502,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",502,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPlaintextEditor` to one of its base interfaces.",502,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",502,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eEditorPlaintextMask","","",502,null],[18,"eEditorSingleLineMask","","",502,null],[18,"eEditorPasswordMask","","",502,null],[18,"eEditorReadonlyMask","","",502,null],[18,"eEditorDisabledMask","","",502,null],[18,"eEditorFilterInputMask","","",502,null],[18,"eEditorMailMask","","",502,null],[18,"eEditorEnableWrapHackMask","","",502,null],[18,"eEditorWidgetMask","","",502,null],[18,"eEditorNoCSSMask","","",502,null],[18,"eEditorAllowInteraction","","",502,null],[18,"eEditorDontEchoPassword","","",502,null],[18,"eEditorRightToLeft","","",502,null],[18,"eEditorLeftToRight","","",502,null],[18,"eEditorSkipSpellCheck","","",502,null],[18,"eNewlinesPasteIntact","","",502,null],[18,"eNewlinesPasteToFirst","","",502,null],[18,"eNewlinesReplaceWithSpaces","","",502,null],[18,"eNewlinesStrip","","",502,null],[18,"eNewlinesReplaceWithCommas","","",502,null],[18,"eNewlinesStripSurroundingWhitespace","","",502,null],[11,"GetTextLength","","`text /** * The length of the contents in characters. * XXX change this type to 'unsigned long' */`",502,null],[11,"GetMaxTextLength","","`text /** * The maximum number of characters allowed. * default: -1 (unlimited). */`",502,null],[11,"SetMaxTextLength","","`text /** * The maximum number of characters allowed. * default: -1 (unlimited). */`",502,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetWrapWidth","","`text /** Get and set the body wrap width. * * Special values: * 0 = wrap to window width * -1 = no wrap at all */`",502,null],[11,"SetWrapWidth","","`text /** Get and set the body wrap width. * * Special values: * 0 = wrap to window width * -1 = no wrap at all */`",502,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetWrapColumn","","`text /** * Similar to the setter for wrapWidth, but just sets the editor * internal state without actually changing the content being edited * to wrap at that column. This should only be used by callers who * are sure that their content is already set up correctly. */`",502,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetNewlineHandling","","`text /** Get and set newline handling. * * Values are the constants defined above. */`",502,null],[11,"SetNewlineHandling","","`text /** Get and set newline handling. * * Values are the constants defined above. */`",502,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InsertText","","`text /** * Inserts a string at the current location, * given by the selection. * If the selection is not collapsed, the selection is deleted * and the insertion takes place at the resulting collapsed selection. * * @param aString the string to be inserted */`",502,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetText","","`text /** * Replace existed string with a string. * This is fast path to replace all string when using single line control. * * @ param aString the string to be set */`",502,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InsertLineBreak","","`text /** * Insert a line break into the content model. * The interpretation of a break is up to the implementation: * it may enter a character, split a node in the tree, etc. * This may be more efficient than calling InsertText with a newline. */`",502,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",503,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",503,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookie2` to one of its base interfaces.",503,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",503,{"inputs":[{"name":"self"}],"output":{"name":"nsicookie"}}],[18,"SAMESITE_UNSET","","",503,null],[18,"SAMESITE_LAX","","",503,null],[18,"SAMESITE_STRICT","","",503,null],[11,"GetRawHost","","`text /** * the host (possibly fully qualified) of the cookie, * without a leading dot to represent if it is a * domain cookie. */`",503,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsSession","","`text /** * true if the cookie is a session cookie. * note that expiry time will also be honored * for session cookies (see below); thus, whichever is * the more restrictive of the two will take effect. */`",503,null],[11,"GetExpiry","","`text /** * the actual expiry time of the cookie, in seconds * since midnight (00:00:00), January 1, 1970 UTC. * * this is distinct from nsICookie::expires, which * has different and obsolete semantics. */`",503,null],[11,"GetIsHttpOnly","","`text /** * true if the cookie is an http only cookie */`",503,null],[11,"GetCreationTime","","`text /** * the creation time of the cookie, in microseconds * since midnight (00:00:00), January 1, 1970 UTC. */`",503,null],[11,"GetLastAccessed","","`text /** * the last time the cookie was accessed (i.e. created, * modified, or read by the server), in microseconds * since midnight (00:00:00), January 1, 1970 UTC. * * note that this time may be approximate. */`",503,null],[11,"GetSameSite","","`text /** * the sameSite attribute; this controls the cookie behavior for cross-site * requests as per * https://tools.ietf.org/html/draft-west-first-party-cookies-07 * * This should be one of: * - SAMESITE_UNSET - the SameSite attribute is not present * - SAMESITE_LAX - the SameSite attribute is present, but not strict * - SAMESITE_STRICT - the SameSite attribute is present and strict */`",503,null],[11,"addref","","",504,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",504,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `txINodeSet` to one of its base interfaces.",504,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",504,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Item","","`nsIDOMNode item (in unsigned long index);`",504,null],[11,"ItemAsNumber","","`double itemAsNumber (in unsigned long index);`",504,null],[11,"ItemAsString","","`DOMString itemAsString (in unsigned long index);`",504,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",504,null],[11,"Add","","`void add (in nsIDOMNode node);`",504,null],[11,"addref","","",505,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",505,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecretDecoderRing` to one of its base interfaces.",505,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",505,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EncryptString","","`text /** * Encrypt to Base64 output. * Note that the input must basically be a byte array (i.e. the code points * must be within the range [0, 255]). Hence, using this method directly to * encrypt passwords (or any text, really) won't work as expected. * Instead, use something like nsIScriptableUnicodeConverter to first convert * the desired password or text to UTF-8, then encrypt that. Remember to * convert back when calling decryptString(). * * @param text The text to encrypt. * @return The encrypted text, encoded as Base64. */`",505,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"DecryptString","","`text /** * Decrypt Base64 input. * See the encryptString() documentation - this method has basically the same * limitations. * * @param encryptedBase64Text Encrypted input text, encoded as Base64. * @return The decoded text. */`",505,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ChangePassword","","`text /** * Prompt the user to change the password on the SDR key. */`",505,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Logout","","`text /** * Logout of the security device that protects the SDR key. */`",505,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"LogoutAndTeardown","","`text /** * Logout of the security device that protects the SDR key and tear * down authenticated objects. */`",505,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",506,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",506,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIZipEntry` to one of its base interfaces.",506,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",506,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCompression","","`text /** * The type of compression used for the item. The possible values and * their meanings are defined in the zip file specification at * http://www.pkware.com/business_and_developers/developer/appnote/ */`",506,null],[11,"GetSize","","`text /** * The compressed size of the data in the item. */`",506,null],[11,"GetRealSize","","`text /** * The uncompressed size of the data in the item. */`",506,null],[11,"GetCRC32","","`text /** * The CRC-32 hash of the file in the entry. */`",506,null],[11,"GetIsDirectory","","`text /** * True if the name of the entry ends with '/' and false otherwise. */`",506,null],[11,"GetLastModifiedTime","","`text /** * The time at which this item was last modified. */`",506,null],[11,"GetIsSynthetic","","`text /** * Use this attribute to determine whether this item is an actual zip entry * or is one synthesized for part of a real entry's path. A synthesized * entry represents a directory within the zip file which has no * corresponding entry within the zip file. For example, the entry for the * directory foo/ in a zip containing exactly one entry for foo/bar.txt * is synthetic. If the zip file contains an actual entry for a directory, * this attribute will be false for the nsIZipEntry for that directory. * It is impossible for a file to be synthetic. */`",506,null],[11,"GetPermissions","","`text /** * The UNIX style file permissions of this item. */`",506,null],[11,"addref","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",507,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIZipReader` to one of its base interfaces.",507,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",507,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Open","","`text /** * Opens a zip file for reading. * It is allowed to open with another file, * but it needs to be closed first with close(). */`",507,null],[11,"OpenInner","","`text /** * Opens a zip file inside a zip file for reading. */`",507,null],[11,"OpenMemory","","`text /** * Opens a zip file stored in memory; the file attribute will be null. * * The ZipReader does not copy or take ownership of this memory; the * caller must ensure that it is valid and unmodified until the * ZipReader is closed or destroyed, and must free the memory as * appropriate afterwards. */`",507,null],[11,"GetFile","","`text /** * The file that represents the zip with which this zip reader was * initialized. This will be null if there is no underlying file. */`",507,null],[11,"Close","","`text /** * Closes a zip reader. Subsequent attempts to extract files or read from * its input stream will result in an error. * * Subsequent attempts to access a nsIZipEntry obtained from this zip * reader will cause unspecified behavior. */`",507,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Test","","`text /** * Tests the integrity of the archive by performing a CRC check * on each item expanded into memory. If an entry is specified * the integrity of only that item is tested. If null (javascript) * or EmptyCString() (c++) is passed in the integrity of all items * in the archive are tested. */`",507,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Extract","","`text /** * Extracts a zip entry into a local file specified by outFile. * The entry must be stored in the zip in either uncompressed or * DEFLATE-compressed format for the extraction to be successful. * If the entry is a directory, the directory will be extracted * non-recursively. */`",507,null],[11,"GetEntry","","`text /** * Returns a nsIZipEntry describing a specified zip entry. */`",507,null],[11,"HasEntry","","`text /** * Checks whether the zipfile contains an entry specified by entryName. */`",507,null],[11,"FindEntries","","`text /** * Returns a string enumerator containing the matching entry names. * * @param aPattern * A regular expression used to find matching entries in the zip file. * Set this parameter to null (javascript) or EmptyCString() (c++) or \"*\" * to get all entries; otherwise, use the * following syntax: * * o * matches anything * o ? matches one character * o $ matches the end of the string * o [abc] matches one occurrence of a, b, or c. The only character that * must be escaped inside the brackets is ]. ^ and - must never * appear in the first and second positions within the brackets, * respectively. (In the former case, the behavior specified for * '[^az]' will happen.) * o [a-z] matches any character between a and z. The characters a and z * must either both be letters or both be numbers, with the * character represented by 'a' having a lower ASCII value than * the character represented by 'z'. * o [^az] matches any character except a or z. If ] is to appear inside * the brackets as a character to not match, it must be escaped. * o pat~pat2 returns matches to the pattern 'pat' which do not also match * the pattern 'pat2'. This may be used to perform filtering * upon the results of one pattern to remove all matches which * also match another pattern. For example, because '*' * matches any string and '*z*' matches any string containing a * 'z', '*~*z*' will match all strings except those containing * a 'z'. Note that a pattern may not use '~' multiple times, * so a string such as '*~*z*~*y*' is not a valid pattern. * o (foo|bar) will match either the pattern foo or the pattern bar. * Neither of the patterns foo or bar may use the 'pat~pat2' * syntax described immediately above. * o \\ will escape a special character. Escaping is required for all * special characters unless otherwise specified. * o All other characters match case-sensitively. * * An aPattern not conforming to this syntax has undefined behavior. * * @throws NS_ERROR_ILLEGAL_VALUE on many but not all invalid aPattern * values. */`",507,null],[11,"GetInputStream","","`text /** * Returns an input stream containing the contents of the specified zip * entry. * @param zipEntry the name of the entry to open the stream from */`",507,null],[11,"GetInputStreamWithSpec","","`text /** * Returns an input stream containing the contents of the specified zip * entry. If the entry refers to a directory (ends with '/'), a directory stream * is opened, otherwise the contents of the file entry is returned. * @param aJarSpec the Spec of the URI for the JAR (only used for directory streams) * @param zipEntry the name of the entry to open the stream from */`",507,null],[11,"addref","","",508,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",508,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIZipReaderCache` to one of its base interfaces.",508,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",508,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initializes a new zip reader cache. * @param cacheSize - the number of released entries to maintain before * beginning to throw some out (note that the number of outstanding * entries can be much greater than this number -- this is the count * for those otherwise unused entries) */`",508,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetZip","","`text /** * Returns a (possibly shared) nsIZipReader for an nsIFile. * * If the zip reader for given file is not in the cache, a new zip reader * is created, initialized, and opened (see nsIZipReader::init and * nsIZipReader::open). Otherwise the previously created zip reader is * returned. * * @note If someone called close() on the shared nsIZipReader, this method * will return the closed zip reader. */`",508,null],[11,"GetZipIfCached","","`text /** * Like getZip(), returns a (possibly shared) nsIZipReader for an nsIFile, * but if a zip reader for the given file is not in the cache, returns * error NS_ERROR_CACHE_KEY_NOT_FOUND rather than creating a new reader. * * @note If someone called close() on the shared nsIZipReader, this method * will return the closed zip reader. */`",508,null],[11,"IsCached","","`text /** * returns true if this zipreader already has this file cached */`",508,null],[11,"GetInnerZip","","`text /** * Returns a (possibly shared) nsIZipReader for a zip inside another zip * * See getZip */`",508,null],[11,"addref","","",509,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",509,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULBrowserWindow` to one of its base interfaces.",509,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",509,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetJSStatus","","`text /** * Sets the status according to JS' version of status. */`",509,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetOverLink","","`text /** * Tells the object implementing this function what link we are currently * over. */`",509,null],[11,"OnBeforeLinkTraversal","","`text /** * Determines the appropriate target for a link. */`",509,null],[11,"ForceInitialBrowserRemote","","`text /** * Find the initial browser of the window and set its remote attributes. * This can be used to ensure that there is a browser in a new window of the * correct type when it first spawns. */`",509,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ForceInitialBrowserNonRemote","","`void forceInitialBrowserNonRemote (in mozIDOMWindowProxy openerWindow);`",509,null],[11,"ShouldLoadURI","","`text /** * Determines whether a load should continue. * * @param aDocShell * The docshell performing the load. * @param aURI * The URI being loaded. * @param aReferrer * The referrer of the load. * @param aHasPostData * True if the load which is being asked about has associated post data * which would be discarded if the load was redirected across process * boundaries. * @param aTriggeringPrincipal * The principal that initiated the load of aURI. */`",509,null],[11,"ShowTooltip","","`text /** * Show/hide a tooltip (when the user mouses over a link, say). */`",509,null],[11,"HideTooltip","","`void hideTooltip ();`",509,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetTabCount","","`text /** * Return the number of tabs in this window. */`",509,null],[11,"NavigateAndRestoreByIndex","","`text /** * Navigate the browser to the given history index after restoring the full history * from SessionStore. If the browser is currently in GroupedSHistory mode, it will * be reverted to a non-grouped history mode. If a process change is required to * perform the load, this will also occur. */`",509,null],[11,"addref","","",510,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",510,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIScriptedNotificationObserver` to one of its base interfaces.",510,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",510,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SizeAvailable","","`void sizeAvailable (in imgIRequest aRequest);`",510,null],[11,"FrameUpdate","","`void frameUpdate (in imgIRequest aRequest);`",510,null],[11,"FrameComplete","","`void frameComplete (in imgIRequest aRequest);`",510,null],[11,"LoadComplete","","`void loadComplete (in imgIRequest aRequest);`",510,null],[11,"DecodeComplete","","`void decodeComplete (in imgIRequest aRequest);`",510,null],[11,"Discard","","`void discard (in imgIRequest aRequest);`",510,null],[11,"IsAnimated","","`void isAnimated (in imgIRequest aRequest);`",510,null],[11,"HasTransparency","","`void hasTransparency (in imgIRequest aRequest);`",510,null],[11,"addref","","",511,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",511,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIASN1Sequence` to one of its base interfaces.",511,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",511,{"inputs":[{"name":"self"}],"output":{"name":"nsiasn1object"}}],[11,"GetASN1Objects","","`text /** * The array of objects stored in the sequence. */`",511,null],[11,"SetASN1Objects","","`text /** * The array of objects stored in the sequence. */`",511,null],[11,"GetIsValidContainer","","`text /** * Whether the node at this position in the ASN.1 data structure * sequence contains sub elements understood by the * application. */`",511,null],[11,"SetIsValidContainer","","`text /** * Whether the node at this position in the ASN.1 data structure * sequence contains sub elements understood by the * application. */`",511,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsExpanded","","`text /** * Whether the contained objects should be shown or hidden. * A UI implementation can use this flag to store the current * expansion state when shown in a tree widget. */`",511,null],[11,"SetIsExpanded","","`text /** * Whether the contained objects should be shown or hidden. * A UI implementation can use this flag to store the current * expansion state when shown in a tree widget. */`",511,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",512,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",512,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintSettings` to one of its base interfaces.",512,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",512,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kInitSaveOddEvenPages","","`text /** * PrintSettings to be Saved Navigation Constants */`",512,null],[18,"kInitSaveHeaderLeft","","",512,null],[18,"kInitSaveHeaderCenter","","",512,null],[18,"kInitSaveHeaderRight","","",512,null],[18,"kInitSaveFooterLeft","","",512,null],[18,"kInitSaveFooterCenter","","",512,null],[18,"kInitSaveFooterRight","","",512,null],[18,"kInitSaveBGColors","","",512,null],[18,"kInitSaveBGImages","","",512,null],[18,"kInitSavePaperSize","","",512,null],[18,"kInitSaveResolution","","",512,null],[18,"kInitSaveDuplex","","",512,null],[18,"kInitSavePaperData","","",512,null],[18,"kInitSaveUnwriteableMargins","","",512,null],[18,"kInitSaveEdges","","",512,null],[18,"kInitSaveReversed","","",512,null],[18,"kInitSaveInColor","","",512,null],[18,"kInitSaveOrientation","","",512,null],[18,"kInitSavePrinterName","","",512,null],[18,"kInitSavePrintToFile","","",512,null],[18,"kInitSaveToFileName","","",512,null],[18,"kInitSavePageDelay","","",512,null],[18,"kInitSaveMargins","","",512,null],[18,"kInitSaveNativeData","","",512,null],[18,"kInitSaveShrinkToFit","","",512,null],[18,"kInitSaveScaling","","",512,null],[18,"kInitSaveAll","","",512,null],[18,"kPrintOddPages","","",512,null],[18,"kPrintEvenPages","","",512,null],[18,"kEnableSelectionRB","","",512,null],[18,"kRangeAllPages","","",512,null],[18,"kRangeSpecifiedPageRange","","",512,null],[18,"kRangeSelection","","",512,null],[18,"kRangeFocusFrame","","",512,null],[18,"kJustLeft","","",512,null],[18,"kJustCenter","","",512,null],[18,"kJustRight","","",512,null],[18,"kUseInternalDefault","","`text /** * FrameSet Default Type Constants */`",512,null],[18,"kUseSettingWhenPossible","","",512,null],[18,"kPaperSizeNativeData","","`text /** * Page Size Type Constants */`",512,null],[18,"kPaperSizeDefined","","",512,null],[18,"kPaperSizeInches","","`text /** * Page Size Unit Constants */`",512,null],[18,"kPaperSizeMillimeters","","",512,null],[18,"kPortraitOrientation","","`text /** * Orientation Constants */`",512,null],[18,"kLandscapeOrientation","","",512,null],[18,"kNoFrames","","`text /** * Print Frame Constants */`",512,null],[18,"kFramesAsIs","","",512,null],[18,"kSelectedFrame","","",512,null],[18,"kEachFrameSep","","",512,null],[18,"kFrameEnableNone","","`text /** * How to Enable Frame Set Printing Constants */`",512,null],[18,"kFrameEnableAll","","",512,null],[18,"kFrameEnableAsIsAndEach","","",512,null],[18,"kOutputFormatNative","","`text /** * Output file format */`",512,null],[18,"kOutputFormatPS","","",512,null],[18,"kOutputFormatPDF","","",512,null],[11,"SetPrintOptions","","`text /** * Set PrintOptions */`",512,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintOptions","","`text /** * Get PrintOptions */`",512,null],[11,"GetPrintOptionsBits","","`text /** * Get PrintOptions Bit field */`",512,null],[11,"SetPrintOptionsBits","","`text /** * Set PrintOptions Bit field */`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetEffectivePageSize","","`text /** * Get the page size in twips, considering the * orientation (portrait or landscape). */`",512,null],[11,"Clone","","`text /** * Makes a new copy */`",512,null],[11,"Assign","","`text /** * Assigns the internal values from the \"in\" arg to the current object */`",512,null],[11,"GetPrintSession","","`text /** * Data Members */`",512,null],[11,"SetPrintSession","","`text /** * Data Members */`",512,null],[11,"GetStartPageRange","","`attribute long startPageRange;`",512,null],[11,"SetStartPageRange","","`attribute long startPageRange;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetEndPageRange","","`attribute long endPageRange;`",512,null],[11,"SetEndPageRange","","`attribute long endPageRange;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetEdgeTop","","`text /** * The edge measurements define the positioning of the headers * and footers on the page. They're measured as an offset from * the \"unwriteable margin\" (described below). */`",512,null],[11,"SetEdgeTop","","`text /** * The edge measurements define the positioning of the headers * and footers on the page. They're measured as an offset from * the \"unwriteable margin\" (described below). */`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetEdgeLeft","","`attribute double edgeLeft;`",512,null],[11,"SetEdgeLeft","","`attribute double edgeLeft;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetEdgeBottom","","`attribute double edgeBottom;`",512,null],[11,"SetEdgeBottom","","`attribute double edgeBottom;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetEdgeRight","","`attribute double edgeRight;`",512,null],[11,"SetEdgeRight","","`attribute double edgeRight;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMarginTop","","`text /** * The margins define the positioning of the content on the page. * They're treated as an offset from the \"unwriteable margin\" * (described below). */`",512,null],[11,"SetMarginTop","","`text /** * The margins define the positioning of the content on the page. * They're treated as an offset from the \"unwriteable margin\" * (described below). */`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMarginLeft","","`attribute double marginLeft;`",512,null],[11,"SetMarginLeft","","`attribute double marginLeft;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMarginBottom","","`attribute double marginBottom;`",512,null],[11,"SetMarginBottom","","`attribute double marginBottom;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMarginRight","","`attribute double marginRight;`",512,null],[11,"SetMarginRight","","`attribute double marginRight;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetUnwriteableMarginTop","","`text /** * The unwriteable margin defines the printable region of the paper, creating * an invisible border from which the edge and margin attributes are measured. */`",512,null],[11,"SetUnwriteableMarginTop","","`text /** * The unwriteable margin defines the printable region of the paper, creating * an invisible border from which the edge and margin attributes are measured. */`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetUnwriteableMarginLeft","","`attribute double unwriteableMarginLeft;`",512,null],[11,"SetUnwriteableMarginLeft","","`attribute double unwriteableMarginLeft;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetUnwriteableMarginBottom","","`attribute double unwriteableMarginBottom;`",512,null],[11,"SetUnwriteableMarginBottom","","`attribute double unwriteableMarginBottom;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetUnwriteableMarginRight","","`attribute double unwriteableMarginRight;`",512,null],[11,"SetUnwriteableMarginRight","","`attribute double unwriteableMarginRight;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetScaling","","`attribute double scaling;`",512,null],[11,"SetScaling","","`attribute double scaling;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetPrintBGColors","","`attribute boolean printBGColors;`",512,null],[11,"SetPrintBGColors","","`attribute boolean printBGColors;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintBGImages","","`attribute boolean printBGImages;`",512,null],[11,"SetPrintBGImages","","`attribute boolean printBGImages;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintRange","","`attribute short printRange;`",512,null],[11,"SetPrintRange","","`attribute short printRange;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`attribute AString title;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTitle","","`attribute AString title;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDocURL","","`attribute AString docURL;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDocURL","","`attribute AString docURL;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHeaderStrLeft","","`attribute AString headerStrLeft;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetHeaderStrLeft","","`attribute AString headerStrLeft;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHeaderStrCenter","","`attribute AString headerStrCenter;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetHeaderStrCenter","","`attribute AString headerStrCenter;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHeaderStrRight","","`attribute AString headerStrRight;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetHeaderStrRight","","`attribute AString headerStrRight;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFooterStrLeft","","`attribute AString footerStrLeft;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFooterStrLeft","","`attribute AString footerStrLeft;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFooterStrCenter","","`attribute AString footerStrCenter;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFooterStrCenter","","`attribute AString footerStrCenter;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFooterStrRight","","`attribute AString footerStrRight;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFooterStrRight","","`attribute AString footerStrRight;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHowToEnableFrameUI","","`attribute short howToEnableFrameUI;`",512,null],[11,"SetHowToEnableFrameUI","","`attribute short howToEnableFrameUI;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetIsCancelled","","`attribute boolean isCancelled;`",512,null],[11,"SetIsCancelled","","`attribute boolean isCancelled;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintFrameTypeUsage","","`attribute short printFrameTypeUsage;`",512,null],[11,"SetPrintFrameTypeUsage","","`attribute short printFrameTypeUsage;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetPrintFrameType","","`attribute short printFrameType;`",512,null],[11,"SetPrintFrameType","","`attribute short printFrameType;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetPrintSilent","","`attribute boolean printSilent;`",512,null],[11,"SetPrintSilent","","`attribute boolean printSilent;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShrinkToFit","","`attribute boolean shrinkToFit;`",512,null],[11,"SetShrinkToFit","","`attribute boolean shrinkToFit;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowPrintProgress","","`attribute boolean showPrintProgress;`",512,null],[11,"SetShowPrintProgress","","`attribute boolean showPrintProgress;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPaperName","","`attribute AString paperName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPaperName","","`attribute AString paperName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPaperData","","`attribute short paperData;`",512,null],[11,"SetPaperData","","`attribute short paperData;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetPaperWidth","","`attribute double paperWidth;`",512,null],[11,"SetPaperWidth","","`attribute double paperWidth;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetPaperHeight","","`attribute double paperHeight;`",512,null],[11,"SetPaperHeight","","`attribute double paperHeight;`",512,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetPaperSizeUnit","","`attribute short paperSizeUnit;`",512,null],[11,"SetPaperSizeUnit","","`attribute short paperSizeUnit;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetPrintReversed","","`attribute boolean printReversed;`",512,null],[11,"SetPrintReversed","","`attribute boolean printReversed;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintInColor","","`attribute boolean printInColor;`",512,null],[11,"SetPrintInColor","","`attribute boolean printInColor;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOrientation","","`attribute long orientation;`",512,null],[11,"SetOrientation","","`attribute long orientation;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetNumCopies","","`attribute long numCopies;`",512,null],[11,"SetNumCopies","","`attribute long numCopies;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetPrinterName","","`attribute AString printerName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPrinterName","","`attribute AString printerName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPrintToFile","","`attribute boolean printToFile;`",512,null],[11,"SetPrintToFile","","`attribute boolean printToFile;`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetToFileName","","`attribute AString toFileName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetToFileName","","`attribute AString toFileName;`",512,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOutputFormat","","`attribute short outputFormat;`",512,null],[11,"SetOutputFormat","","`attribute short outputFormat;`",512,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetPrintPageDelay","","`attribute long printPageDelay;`",512,null],[11,"SetPrintPageDelay","","`attribute long printPageDelay;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetResolution","","`attribute long resolution;`",512,null],[11,"SetResolution","","`attribute long resolution;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetDuplex","","`attribute long duplex;`",512,null],[11,"SetDuplex","","`attribute long duplex;`",512,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsInitializedFromPrinter","","`text /** * This attribute tracks whether the PS has been initialized * from a printer specified by the \"printerName\" attr. * If a different name is set into the \"printerName\" * attribute than the one it was initialized with the PS * will then get intialized from that printer. */`",512,null],[11,"SetIsInitializedFromPrinter","","`text /** * This attribute tracks whether the PS has been initialized * from a printer specified by the \"printerName\" attr. * If a different name is set into the \"printerName\" * attribute than the one it was initialized with the PS * will then get intialized from that printer. */`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsInitializedFromPrefs","","`text /** * This attribute tracks whether the PS has been initialized * from prefs. If a different name is set into the \"printerName\" * attribute than the one it was initialized with the PS * will then get intialized from prefs again. */`",512,null],[11,"SetIsInitializedFromPrefs","","`text /** * This attribute tracks whether the PS has been initialized * from prefs. If a different name is set into the \"printerName\" * attribute than the one it was initialized with the PS * will then get intialized from prefs again. */`",512,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetupSilentPrinting","","`text /** * We call this function so that anything that requires a run of the event loop * can do so safely. The print dialog runs the event loop but in silent printing * that doesn't happen. * * Either this or ShowPrintDialog (but not both) MUST be called by the print engine * before printing, otherwise printing can fail on some platforms. */`",512,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",513,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",513,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMUIEvent` to one of its base interfaces.",513,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",513,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SCROLL_PAGE_UP","","",513,null],[18,"SCROLL_PAGE_DOWN","","",513,null],[11,"GetView","","`readonly attribute mozIDOMWindowProxy view;`",513,null],[11,"GetDetail","","`readonly attribute long detail;`",513,null],[11,"InitUIEvent","","`void initUIEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in mozIDOMWindow viewArg, in long detailArg);`",513,null],[11,"GetLayerX","","`readonly attribute long layerX;`",513,null],[11,"GetLayerY","","`readonly attribute long layerY;`",513,null],[11,"GetPageX","","`readonly attribute long pageX;`",513,null],[11,"GetPageY","","`readonly attribute long pageY;`",513,null],[11,"GetWhich","","`readonly attribute unsigned long which;`",513,null],[11,"GetRangeParent","","`readonly attribute nsIDOMNode rangeParent;`",513,null],[11,"GetRangeOffset","","`readonly attribute long rangeOffset;`",513,null],[11,"addref","","",514,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",514,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISpellI18NUtil` to one of its base interfaces.",514,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",514,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kCheck","","",514,null],[18,"kSuggest","","",514,null],[11,"GetLanguage","","`text /** * The language being used to check spelling */`",514,null],[11,"GetRootForm","","`text /** * Given a word return a list of possible root forms of that word */`",514,null],[11,"FromRootForm","","`text /** * Given a word return a list of possible root forms of that word */`",514,null],[11,"FindNextWord","","`text /** * Given a unicode string and an offset, find the beginning and end of the * next word. begin and end are -1 if there are no words remaining in the * string. This should really be folded into the Line/WordBreaker. */`",514,null],[11,"addref","","",515,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",515,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIToolkitChromeRegistry` to one of its base interfaces.",515,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",515,{"inputs":[{"name":"self"}],"output":{"name":"nsixulchromeregistry"}}],[11,"CheckForOSAccessibility","","`text /** * If the OS has a \"high-visibility\" or \"disabled-friendly\" theme set, * we want to force mozilla into the classic theme, which (for the most part * obeys the system color/font settings. We cannot do this at initialization, * because it depends on the toolkit (GTK2) being initialized, which is * not the case in some embedding situations. Embedders have to manually * call this method during the startup process. */`",515,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetLocalesForPackage","","`text /** * Get a list of locales available for the specified package. */`",515,null],[11,"addref","","",516,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",516,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFCompositeDataSource` to one of its base interfaces.",516,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",516,{"inputs":[{"name":"self"}],"output":{"name":"nsirdfdatasource"}}],[11,"GetAllowNegativeAssertions","","`text /** * * Set this value to <code>true</code> if the composite datasource * may contains at least one datasource that has <em>negative</em> * assertions. (This is the default.) * * Set this value to <code>false</code> if none of the datasources * being composed contains a negative assertion. This allows the * composite datasource to perform some query optimizations. * * By default, this value is <code>true</true>. */`",516,null],[11,"SetAllowNegativeAssertions","","`text /** * * Set this value to <code>true</code> if the composite datasource * may contains at least one datasource that has <em>negative</em> * assertions. (This is the default.) * * Set this value to <code>false</code> if none of the datasources * being composed contains a negative assertion. This allows the * composite datasource to perform some query optimizations. * * By default, this value is <code>true</true>. */`",516,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCoalesceDuplicateArcs","","`text /** * Set to <code>true</code> if the composite datasource should * take care to coalesce duplicate arcs when returning values from * queries. (This is the default.) * * Set to <code>false</code> if the composite datasource shouldn't * bother to check for duplicates. This allows the composite * datasource to more efficiently answer queries. * * By default, this value is <code>true</code>. */`",516,null],[11,"SetCoalesceDuplicateArcs","","`text /** * Set to <code>true</code> if the composite datasource should * take care to coalesce duplicate arcs when returning values from * queries. (This is the default.) * * Set to <code>false</code> if the composite datasource shouldn't * bother to check for duplicates. This allows the composite * datasource to more efficiently answer queries. * * By default, this value is <code>true</code>. */`",516,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddDataSource","","`text /** * Add a datasource the the composite data source. * @param aDataSource the datasource to add to composite */`",516,null],[11,"RemoveDataSource","","`text /** * Remove a datasource from the composite data source. * @param aDataSource the datasource to remove from the composite */`",516,null],[11,"GetDataSources","","`text /** * Retrieve the datasources in the composite data source. * @return an nsISimpleEnumerator that will enumerate each * of the datasources in the composite */`",516,null],[11,"addref","","",517,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",517,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `rdfIDataSource` to one of its base interfaces.",517,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",517,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VisitAllSubjects","","`text /** * Visit all the subject resources in the datasource. The order is * intederminate and may change from one invocation to the next. * The subjects will be in the aSubject argument in calls into * aVisitor, aPredicate and aObject will be null. * @note Implementations may throw NS_ERROR_NOT_IMPLEMENTED for * this method, but in this case RDF serializations of this * datasource will not be possible. */`",517,null],[11,"VisitAllTriples","","`text /** * Visit all the triples in the datasource. The order is * intederminate and may change from one invocation to the next. * @note Implementations may throw NS_ERROR_NOT_IMPLEMENTED for * this method, but in this case RDF serializations of this * datasource will not be possible. */`",517,null],[11,"addref","","",518,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",518,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSConditionRule` to one of its base interfaces.",518,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",518,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssgroupingrule"}}],[11,"GetConditionText","","`attribute DOMString conditionText;`",518,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetConditionText","","`attribute DOMString conditionText;`",518,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",519,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",519,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIX509CertValidity` to one of its base interfaces.",519,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",519,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNotBefore","","`text /** * The earliest point in time where * a certificate is valid. */`",519,null],[11,"GetNotBeforeLocalTime","","`text /** * \"notBefore\" attribute formatted as a time string * according to the environment locale, * according to the environment time zone. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotBeforeLocalDay","","`text /** * The day portion of \"notBefore\" formatted as a time string * according to the environment locale, * according to the environment time zone. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotBeforeGMT","","`text /** * \"notBefore\" attribute formatted as a string * according to the environment locale, * displayed as GMT / UTC. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotAfter","","`text /** * The latest point in time where * a certificate is valid. */`",519,null],[11,"GetNotAfterLocalTime","","`text /** * \"notAfter\" attribute formatted as a time string * according to the environment locale, * according to the environment time zone. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotAfterLocalDay","","`text /** * The day portion of \"notAfter\" formatted as a time string * according to the environment locale, * according to the environment time zone. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotAfterGMT","","`text /** * \"notAfter\" attribute formatted as a time string * according to the environment locale, * displayed as GMT / UTC. */`",519,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",520,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",520,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocShellTreeItem` to one of its base interfaces.",520,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",520,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"typeChrome","","",520,null],[18,"typeContent","","",520,null],[18,"typeContentWrapper","","",520,null],[18,"typeChromeWrapper","","",520,null],[18,"typeAll","","",520,null],[11,"GetName","","`attribute AString name;`",520,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`attribute AString name;`",520,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NameEquals","","`text /** * Compares the provided name against the item's name and * returns the appropriate result. * * @return <CODE>PR_TRUE</CODE> if names match; * <CODE>PR_FALSE</CODE> otherwise. */`",520,null],[11,"GetItemType","","`attribute long itemType;`",520,null],[11,"SetItemType","","`attribute long itemType;`",520,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetParent","","`readonly attribute nsIDocShellTreeItem parent;`",520,null],[11,"GetSameTypeParent","","`readonly attribute nsIDocShellTreeItem sameTypeParent;`",520,null],[11,"GetRootTreeItem","","`readonly attribute nsIDocShellTreeItem rootTreeItem;`",520,null],[11,"GetSameTypeRootTreeItem","","`readonly attribute nsIDocShellTreeItem sameTypeRootTreeItem;`",520,null],[11,"FindItemWithName","","`nsIDocShellTreeItem findItemWithName (in AString name, in nsIDocShellTreeItem aRequestor, in nsIDocShellTreeItem aOriginalRequestor, in bool aSkipTabGroup);`",520,null],[11,"GetTreeOwner","","`readonly attribute nsIDocShellTreeOwner treeOwner;`",520,null],[11,"SetTreeOwner","","`[noscript] void setTreeOwner (in nsIDocShellTreeOwner treeOwner);`",520,null],[11,"GetChildCount","","`readonly attribute long childCount;`",520,null],[11,"AddChild","","`void addChild (in nsIDocShellTreeItem child);`",520,null],[11,"RemoveChild","","`void removeChild (in nsIDocShellTreeItem child);`",520,null],[11,"GetChildAt","","`text /** * Return the child at the index requested. This is 0-based. * * @throws NS_ERROR_UNEXPECTED if the index is out of range */`",520,null],[11,"FindChildWithName","","`nsIDocShellTreeItem findChildWithName (in AString aName, in boolean aRecurse, in boolean aSameType, in nsIDocShellTreeItem aRequestor, in nsIDocShellTreeItem aOriginalRequestor);`",520,null],[11,"addref","","",521,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",521,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISharingHandlerApp` to one of its base interfaces.",521,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",521,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[11,"Share","","`void share (in AString data, [optional] in AString title);`",521,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",522,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",522,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExternalSharingAppService` to one of its base interfaces.",522,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",522,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShareWithDefault","","`void shareWithDefault (in AString data, in AString mime, [optional] in AString title);`",522,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSharingApps","","`void getSharingApps (in AString aMIMEType, [optional] out unsigned long aLen, [array, size_is (aLen), retval] out nsISharingHandlerApp handlerApps);`",522,null],[11,"addref","","",523,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",523,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIImageDocument` to one of its base interfaces.",523,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",523,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetImageIsOverflowing","","`readonly attribute boolean imageIsOverflowing;`",523,null],[11,"GetImageIsResized","","`readonly attribute boolean imageIsResized;`",523,null],[11,"GetImageRequest","","`readonly attribute imgIRequest imageRequest;`",523,null],[11,"DOMShrinkToFit","","`[binaryname(DOMShrinkToFit)] void shrinkToFit ();`",523,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DOMRestoreImage","","`[binaryname(DOMRestoreImage)] void restoreImage ();`",523,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DOMRestoreImageTo","","`[binaryname(DOMRestoreImageTo)] void restoreImageTo (in long x, in long y);`",523,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"DOMToggleImageSize","","`[binaryname(DOMToggleImageSize)] void toggleImageSize ();`",523,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",524,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",524,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncInputStream` to one of its base interfaces.",524,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",524,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[18,"WAIT_CLOSURE_ONLY","","`text /** * If passed to asyncWait, this flag overrides the default behavior, * causing the OnInputStreamReady notification to be suppressed until the * stream becomes closed (either as a result of closeWithStatus/close being * called on the stream or possibly due to some error in the underlying * stream). */`",524,null],[11,"CloseWithStatus","","`text /** * This method closes the stream and sets its internal status. If the * stream is already closed, then this method is ignored. Once the stream * is closed, the stream's status cannot be changed. Any successful status * code passed to this method is treated as NS_BASE_STREAM_CLOSED, which * has an effect equivalent to nsIInputStream::close. * * NOTE: this method exists in part to support pipes, which have both an * input end and an output end. If the input end of a pipe is closed, then * writes to the output end of the pipe will fail. The error code returned * when an attempt is made to write to a \"broken\" pipe corresponds to the * status code passed in when the input end of the pipe was closed, which * greatly simplifies working with pipes in some cases. * * @param aStatus * The error that will be reported if this stream is accessed after * it has been closed. */`",524,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"AsyncWait","","`text /** * Asynchronously wait for the stream to be readable or closed. The * notification is one-shot, meaning that each asyncWait call will result * in exactly one notification callback. After the OnInputStreamReady event * is dispatched, the stream releases its reference to the * nsIInputStreamCallback object. It is safe to call asyncWait again from the * notification handler. * * This method may be called at any time (even if read has not been called). * In other words, this method may be called when the stream already has * data to read. It may also be called when the stream is closed. If the * stream is already readable or closed when AsyncWait is called, then the * OnInputStreamReady event will be dispatched immediately. Otherwise, the * event will be dispatched when the stream becomes readable or closed. * * @param aCallback * This object is notified when the stream becomes ready. This * parameter may be null to clear an existing callback. * @param aFlags * This parameter specifies optional flags passed in to configure * the behavior of this method. Pass zero to specify no flags. * @param aRequestedCount * Wait until at least this many bytes can be read. This is only * a suggestion to the underlying stream; it may be ignored. The * caller may pass zero to indicate no preference. * @param aEventTarget * Specify NULL to receive notification on ANY thread (possibly even * recursively on the calling thread -- i.e., synchronously), or * specify that the notification be delivered to a specific event * target. */`",524,null],[11,"addref","","",525,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",525,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputStreamCallback` to one of its base interfaces.",525,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",525,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnInputStreamReady","","`text /** * This is a companion interface for nsIAsyncInputStream::asyncWait. */ /** * Called to indicate that the stream is either readable or closed. * * @param aStream * The stream whose asyncWait method was called. */`",525,null],[11,"addref","","",526,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",526,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINamed` to one of its base interfaces.",526,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",526,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`readonly attribute AUTF8String name;`",526,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",527,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",527,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISystemProxySettings` to one of its base interfaces.",527,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",527,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMainThreadOnly","","`text /** * Whether or not it is appropriate to execute getProxyForURI off the main thread. * If that method can block (e.g. for WPAD as windows does) then it must be * not mainThreadOnly to avoid creating main thread jank. The main thread only option is * provided for implementations that do not block but use other main thread only * functions such as dbus. */`",527,null],[11,"GetPACURI","","`text /** * If non-empty, use this PAC file. If empty, call getProxyForURI instead. */`",527,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProxyForURI","","`text /** * See ProxyAutoConfig::getProxyForURI; this function behaves similarly except * a more relaxed return string is allowed that includes full urls instead of just * host:port syntax. e.g. \"PROXY http://www.foo.com:8080\" instead of * \"PROXY www.foo.com:8080\" */`",527,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"int32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",528,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",528,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProgressEventSink` to one of its base interfaces.",528,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",528,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnProgress","","`text /** * Called to notify the event sink that progress has occurred for the * given request. * * @param aRequest * the request being observed (may QI to nsIChannel). * @param aContext * if aRequest is a channel, then this parameter is the listener * context passed to nsIChannel::asyncOpen. * @param aProgress * numeric value in the range 0 to aProgressMax indicating the * number of bytes transfered thus far. * @param aProgressMax * numeric value indicating maximum number of bytes that will be * transfered (or -1 if total is unknown). */`",528,null],[11,"OnStatus","","`text /** * Called to notify the event sink with a status message for the given * request. * * @param aRequest * the request being observed (may QI to nsIChannel). * @param aContext * if aRequest is a channel, then this parameter is the listener * context passed to nsIChannel::asyncOpen. * @param aStatus * status code (not necessarily an error code) indicating the * state of the channel (usually the state of the underlying * transport). see nsISocketTransport for socket specific status * codes. * @param aStatusArg * status code argument to be used with the string bundle service * to convert the status message into localized, human readable * text. the meaning of this parameter is specific to the value * of the status code. for socket status codes, this parameter * indicates the host:port associated with the status code. */`",528,null],[11,"addref","","",529,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",529,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURL` to one of its base interfaces.",529,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",529,{"inputs":[{"name":"self"}],"output":{"name":"nsiuri"}}],[11,"GetDirectory","","`text /************************************************************************* * The URL path is broken down into the following principal components: * * attribute AUTF8String filePath; * attribute AUTF8String query; * * These are inherited from nsIURI. */ /************************************************************************* * The URL filepath is broken down into the following sub-components: */ /** * Returns the directory portion of a URL. If the URL denotes a path to a * directory and not a file, e.g. http://host/foo/bar/, then the Directory * attribute accesses the complete /foo/bar/ portion, and the FileName is * the empty string. If the trailing slash is omitted, then the Directory * is /foo/ and the file is bar (i.e. this is a syntactic, not a semantic * breakdown of the Path). And hence don't rely on this for something to * be a definitely be a file. But you can get just the leading directory * portion for sure. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDirectory","","`text /************************************************************************* * The URL path is broken down into the following principal components: * * attribute AUTF8String filePath; * attribute AUTF8String query; * * These are inherited from nsIURI. */ /************************************************************************* * The URL filepath is broken down into the following sub-components: */ /** * Returns the directory portion of a URL. If the URL denotes a path to a * directory and not a file, e.g. http://host/foo/bar/, then the Directory * attribute accesses the complete /foo/bar/ portion, and the FileName is * the empty string. If the trailing slash is omitted, then the Directory * is /foo/ and the file is bar (i.e. this is a syntactic, not a semantic * breakdown of the Path). And hence don't rely on this for something to * be a definitely be a file. But you can get just the leading directory * portion for sure. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileName","","`text /** * Returns the file name portion of a URL. If the URL denotes a path to a * directory and not a file, e.g. http://host/foo/bar/, then the Directory * attribute accesses the complete /foo/bar/ portion, and the FileName is * the empty string. Note that this is purely based on searching for the * last trailing slash. And hence don't rely on this to be a definite file. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetFileName","","`text /** * Returns the file name portion of a URL. If the URL denotes a path to a * directory and not a file, e.g. http://host/foo/bar/, then the Directory * attribute accesses the complete /foo/bar/ portion, and the FileName is * the empty string. Note that this is purely based on searching for the * last trailing slash. And hence don't rely on this to be a definite file. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileBaseName","","`text /************************************************************************* * The URL filename is broken down even further: */ /** * Returns the file basename portion of a filename in a url. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetFileBaseName","","`text /************************************************************************* * The URL filename is broken down even further: */ /** * Returns the file basename portion of a filename in a url. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileExtension","","`text /** * Returns the file extension portion of a filename in a url. If a file * extension does not exist, the empty string is returned. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetFileExtension","","`text /** * Returns the file extension portion of a filename in a url. If a file * extension does not exist, the empty string is returned. * * Some characters may be escaped. */`",529,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCommonBaseSpec","","`text /** * This method takes a uri and compares the two. The common uri portion * is returned as a string. The minimum common uri portion is the * protocol, and any of these if present: login, password, host and port * If no commonality is found, \"\" is returned. If they are identical, the * whole path with file/ref/etc. is returned. For file uris, it is * expected that the common spec would be at least \"file:///\" since '/' is * a shared common root. * * Examples: * this.spec aURIToCompare.spec result * 1) http://mozilla.org/ http://www.mozilla.org/ \"\" * 2) http://foo.com/bar/ ftp://foo.com/bar/ \"\" * 3) http://foo.com:8080/ http://foo.com/bar/ \"\" * 4) ftp://user@foo.com/ ftp://user:pw@foo.com/ \"\" * 5) ftp://foo.com/bar/ ftp://foo.com/bar ftp://foo.com/ * 6) ftp://foo.com/bar/ ftp://foo.com/bar/b.html ftp://foo.com/bar/ * 7) http://foo.com/a.htm#i http://foo.com/b.htm http://foo.com/ * 8) ftp://foo.com/c.htm#i ftp://foo.com/c.htm ftp://foo.com/c.htm * 9) file:///a/b/c.html file:///d/e/c.html file:/// */`",529,null],[11,"GetRelativeSpec","","`text /** * This method tries to create a string which specifies the location of the * argument relative to |this|. If the argument and |this| are equal, the * method returns \"\". If any of the URIs' scheme, host, userpass, or port * don't match, the method returns the full spec of the argument. * * Examples: * this.spec aURIToCompare.spec result * 1) http://mozilla.org/ http://www.mozilla.org/ http://www.mozilla.org/ * 2) http://mozilla.org/ http://www.mozilla.org http://www.mozilla.org/ * 3) http://foo.com/bar/ http://foo.com:80/bar/ \"\" * 4) http://foo.com/ http://foo.com/a.htm#b a.html#b * 5) http://foo.com/a/b/ http://foo.com/c ../../c */`",529,null],[11,"addref","","",530,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",530,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginReputationResult` to one of its base interfaces.",530,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",530,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNSPECIFIED","","",530,null],[18,"SAFE","","",530,null],[18,"LOW_REPUTATION","","",530,null],[18,"PHISHING","","",530,null],[11,"addref","","",531,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",531,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginReputationQuery` to one of its base interfaces.",531,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",531,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFormURI","","`readonly attribute nsIURI formURI;`",531,null],[11,"addref","","",532,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",532,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginReputationQueryCallback` to one of its base interfaces.",532,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",532,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnQueryComplete","","`void onQueryComplete (in uint16_t aResult);`",532,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",533,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",533,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginReputationService` to one of its base interfaces.",533,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",533,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`void init ();`",533,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"QueryReputationAsync","","`void queryReputationAsync (in nsIDOMHTMLInputElement aInput, in nsILoginReputationQueryCallback aCallback);`",533,null],[11,"QueryReputation","","`void queryReputation (in nsILoginReputationQuery aQuery, in nsILoginReputationQueryCallback aCallback);`",533,null],[11,"addref","","",534,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",534,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURLParser` to one of its base interfaces.",534,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",534,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ParseURL","","`text /** * The string to parse in the following methods may be given as a null * terminated string, in which case the length argument should be -1. * * Out parameters of the following methods are all optional (ie. the caller * may pass-in a NULL value if the corresponding results are not needed). * Signed out parameters may hold a value of -1 if the corresponding result * is not part of the string being parsed. * * The parsing routines attempt to be as forgiving as possible. */ /** * ParseSpec breaks the URL string up into its 3 major components: a scheme, * an authority section (hostname, etc.), and a path. * * spec = <scheme>://<authority><path> */`",534,null],[11,"ParseAuthority","","`text /** * ParseAuthority breaks the authority string up into its 4 components: * username, password, hostname, and hostport. * * auth = <username>:<password>@<hostname>:<port> */`",534,null],[11,"ParseUserInfo","","`text /** * userinfo = <username>:<password> */`",534,null],[11,"ParseServerInfo","","`text /** * serverinfo = <hostname>:<port> */`",534,null],[11,"ParsePath","","`text /** * ParsePath breaks the path string up into its 3 major components: a file path, * a query string, and a reference string. * * path = <filepath>?<query>#<ref> */`",534,null],[11,"ParseFilePath","","`text /** * ParseFilePath breaks the file path string up into: the directory portion, * file base name, and file extension. * * filepath = <directory><basename>.<extension> */`",534,null],[11,"ParseFileName","","`text /** * filename = <basename>.<extension> */`",534,null],[11,"addref","","",535,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",535,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCounter` to one of its base interfaces.",535,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",535,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIdentifier","","`readonly attribute DOMString identifier;`",535,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetListStyle","","`readonly attribute DOMString listStyle;`",535,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSeparator","","`readonly attribute DOMString separator;`",535,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",536,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",536,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITLSServerSocket` to one of its base interfaces.",536,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",536,{"inputs":[{"name":"self"}],"output":{"name":"nsiserversocket"}}],[18,"REQUEST_NEVER","","`text /** * Values for setRequestClientCertificate */`",536,null],[18,"REQUEST_FIRST_HANDSHAKE","","",536,null],[18,"REQUEST_ALWAYS","","",536,null],[18,"REQUIRE_FIRST_HANDSHAKE","","",536,null],[18,"REQUIRE_ALWAYS","","",536,null],[11,"GetServerCert","","`text /** * serverCert * * The server's certificate that is presented to the client during the TLS * handshake. This is required to be set before calling |asyncListen|. */`",536,null],[11,"SetServerCert","","`text /** * serverCert * * The server's certificate that is presented to the client during the TLS * handshake. This is required to be set before calling |asyncListen|. */`",536,null],[11,"SetSessionCache","","`text /** * setSessionCache * * Whether the server should use a session cache. Defaults to true. This * should be set before calling |asyncListen| if you wish to change the * default. */`",536,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetSessionTickets","","`text /** * setSessionTickets * * Whether the server should support session tickets. Defaults to true. This * should be set before calling |asyncListen| if you wish to change the * default. */`",536,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetRequestClientCertificate","","`text /** * setRequestClientCertificate * * Whether the server should request and/or require a client auth certificate * from the client. Defaults to REQUEST_NEVER. See the possible options * above. This should be set before calling |asyncListen| if you wish to * change the default. */`",536,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetCipherSuites","","`text /** * setCipherSuites * * The server's cipher suites that is used by the TLS handshake. * This is required to be set before calling |asyncListen|. */`",536,null],[11,"SetVersionRange","","`text /** * setVersionRange * * The server's TLS versions that is used by the TLS handshake. * This is required to be set before calling |asyncListen|. * * aMinVersion and aMaxVersion is a TLS version value from * |nsITLSClientStatus| constants. */`",536,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",537,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",537,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITLSClientStatus` to one of its base interfaces.",537,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",537,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SSL_VERSION_3","","`text /** * Values for tlsVersionUsed, as defined by TLS */`",537,null],[18,"TLS_VERSION_1","","",537,null],[18,"TLS_VERSION_1_1","","",537,null],[18,"TLS_VERSION_1_2","","",537,null],[18,"TLS_VERSION_1_3","","",537,null],[18,"TLS_VERSION_UNKNOWN","","",537,null],[11,"GetPeerCert","","`text /** * peerCert * * The client's certificate, if one was requested via |requestCertificate| * above and supplied by the client. */`",537,null],[11,"GetTlsVersionUsed","","`text /** * tlsVersionUsed * * The version of TLS used by the connection. See values above. */`",537,null],[11,"GetCipherName","","`text /** * cipherName * * Name of the cipher suite used, such as * \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\". * See security/nss/lib/ssl/sslinfo.c for the possible values. */`",537,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetKeyLength","","`text /** * keyLength * * The \"effective\" key size of the symmetric key in bits. */`",537,null],[11,"GetMacLength","","`text /** * macLength * * The size of the MAC in bits. */`",537,null],[11,"addref","","",538,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",538,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITLSServerConnectionInfo` to one of its base interfaces.",538,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",538,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetSecurityObserver","","`text /** * setSecurityObserver * * Set the security observer to be notified when the TLS handshake has * completed. */`",538,null],[11,"GetServerSocket","","`text /** * serverSocket * * The nsITLSServerSocket instance that accepted this client connection. */`",538,null],[11,"GetStatus","","`text /** * status * * Security summary for this TLS client connection. Note that the values of * this interface are not available until the TLS handshake has completed. * See |nsITLSClientStatus| above for more details. */`",538,null],[11,"addref","","",539,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",539,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITLSServerSecurityObserver` to one of its base interfaces.",539,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",539,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnHandshakeDone","","`text /** * onHandsakeDone * * This method is called once the TLS handshake is completed. This takes * place after |onSocketAccepted| has been called, which typically opens the * streams to keep things moving along. It's important to be aware that the * handshake has not completed at the point that |onSocketAccepted| is called, * so no security verification can be done until this method is called. */`",539,null],[11,"addref","","",540,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",540,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintProgress` to one of its base interfaces.",540,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",540,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebprogresslistener"}}],[11,"OpenProgressDialog","","`void openProgressDialog (in mozIDOMWindowProxy parent, in string dialogURL, in nsISupports parameters, in nsIObserver openDialogObserver, out boolean notifyOnOpen);`",540,null],[11,"CloseProgressDialog","","`void closeProgressDialog (in boolean forceClose);`",540,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RegisterListener","","`void registerListener (in nsIWebProgressListener listener);`",540,null],[11,"UnregisterListener","","`void unregisterListener (in nsIWebProgressListener listener);`",540,null],[11,"DoneIniting","","`void doneIniting ();`",540,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPrompter","","`nsIPrompt getPrompter ();`",540,null],[11,"GetProcessCanceledByUser","","`attribute boolean processCanceledByUser;`",540,null],[11,"SetProcessCanceledByUser","","`attribute boolean processCanceledByUser;`",540,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",541,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",541,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClassOfService` to one of its base interfaces.",541,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",541,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"Leader","","",541,null],[18,"Follower","","",541,null],[18,"Speculative","","",541,null],[18,"Background","","",541,null],[18,"Unblocked","","",541,null],[18,"Throttleable","","",541,null],[18,"UrgentStart","","",541,null],[18,"DontThrottle","","",541,null],[18,"Tail","","",541,null],[18,"TailAllowed","","",541,null],[18,"TailForbidden","","",541,null],[11,"GetClassFlags","","`attribute unsigned long classFlags;`",541,null],[11,"SetClassFlags","","`attribute unsigned long classFlags;`",541,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ClearClassFlags","","`void clearClassFlags (in unsigned long flags);`",541,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"AddClassFlags","","`void addClassFlags (in unsigned long flags);`",541,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",542,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",542,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGlobalPropertyInitializer` to one of its base interfaces.",542,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",542,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",543,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",543,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMSVGElement` to one of its base interfaces.",543,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",543,{"inputs":[{"name":"self"}],"output":{"name":"nsidomelement"}}],[11,"GetOwnerSVGElement","","`readonly attribute nsIDOMSVGElement ownerSVGElement;`",543,null],[11,"GetViewportElement","","`readonly attribute nsIDOMSVGElement viewportElement;`",543,null],[11,"GetSVGClassName","","`[binaryname(SVGClassName)] readonly attribute nsISupports className;`",543,null],[11,"GetStyle","","`readonly attribute nsIDOMCSSStyleDeclaration style;`",543,null],[11,"addref","","",544,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",544,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFTPChannelParentInternal` to one of its base interfaces.",544,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",544,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetErrorMsg","","`void setErrorMsg (in string msg, in boolean useUTF8);`",544,null],[11,"addref","","",545,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",545,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISpellI18NManager` to one of its base interfaces.",545,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",545,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetUtil","","`text /** * Get a mozISpellI18NUtil interface that best matches the given language. */`",545,null],[11,"addref","","",546,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",546,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirectoryEnumerator` to one of its base interfaces.",546,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",546,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNextFile","","`text /** * Retrieves the next file in the sequence. The \"nextFile\" element is the * first element upon the first call. This attribute is null if there is no * next element. */`",546,null],[11,"Close","","`text /** * Closes the directory being enumerated, releasing the system resource. * @throws NS_OK if the call succeeded and the directory was closed. * NS_ERROR_FAILURE if the directory close failed. * It is safe to call this function many times. */`",546,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",547,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",547,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowser` to one of its base interfaces.",547,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",547,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddWebBrowserListener","","`text /** * Registers a listener of the type specified by the iid to receive * callbacks. The browser stores a weak reference to the listener * to avoid any circular dependencies. * Typically this method will be called to register an object * to receive <CODE>nsIWebProgressListener</CODE> or * <CODE>nsISHistoryListener</CODE> notifications in which case the * the IID is that of the interface. * * @param aListener The listener to be added. * @param aIID The IID of the interface that will be called * on the listener as appropriate. * @return <CODE>NS_OK</CODE> for successful registration; * <CODE>NS_ERROR_INVALID_ARG</CODE> if aIID is not * supposed to be registered using this method; * <CODE>NS_ERROR_FAILURE</CODE> either aListener did not * expose the interface specified by the IID, or some * other internal error occurred. * * @see removeWebBrowserListener * @see nsIWeakReference * @see nsIWebProgressListener * @see nsISHistoryListener * * @return <CODE>NS_OK</CODE>, listener was successfully added; * <CODE>NS_ERROR_INVALID_ARG</CODE>, one of the arguments was * invalid or the object did not implement the interface * specified by the IID. */`",547,null],[11,"RemoveWebBrowserListener","","`text /** * Removes a previously registered listener. * * @param aListener The listener to be removed. * @param aIID The IID of the interface on the listener that will * no longer be called. * * @return <CODE>NS_OK</CODE>, listener was successfully removed; * <CODE>NS_ERROR_INVALID_ARG</CODE> arguments was invalid or * the object did not implement the interface specified by the IID. * * @see addWebBrowserListener * @see nsIWeakReference */`",547,null],[11,"GetContainerWindow","","`text /** * The chrome object associated with the browser instance. The embedder * must create one chrome object for <I>each</I> browser object * that is instantiated. The embedder must associate the two by setting * this property to point to the chrome object before creating the browser * window via the browser's <CODE>nsIBaseWindow</CODE> interface. * * The chrome object must also implement <CODE>nsIEmbeddingSiteWindow</CODE>. * * The chrome may optionally implement <CODE>nsIInterfaceRequestor</CODE>, * <CODE>nsIWebBrowserChromeFocus</CODE>, * <CODE>nsIContextMenuListener</CODE> and * <CODE>nsITooltipListener</CODE> to receive additional notifications * from the browser object. * * The chrome object may optionally implement <CODE>nsIWebProgressListener</CODE> * instead of explicitly calling <CODE>addWebBrowserListener</CODE> and * <CODE>removeWebBrowserListener</CODE> to register a progress listener * object. If the implementation does this, it must also implement * <CODE>nsIWeakReference</CODE>. * * @note The implementation should not refcount the supplied chrome * object; it should assume that a non <CODE>nullptr</CODE> value is * always valid. The embedder must explicitly set this value back * to nullptr if the chrome object is destroyed before the browser * object. * * @see nsIBaseWindow * @see nsIWebBrowserChrome * @see nsIEmbeddingSiteWindow * @see nsIInterfaceRequestor * @see nsIWebBrowserChromeFocus * @see nsIContextMenuListener * @see nsITooltipListener * @see nsIWeakReference * @see nsIWebProgressListener */`",547,null],[11,"SetContainerWindow","","`text /** * The chrome object associated with the browser instance. The embedder * must create one chrome object for <I>each</I> browser object * that is instantiated. The embedder must associate the two by setting * this property to point to the chrome object before creating the browser * window via the browser's <CODE>nsIBaseWindow</CODE> interface. * * The chrome object must also implement <CODE>nsIEmbeddingSiteWindow</CODE>. * * The chrome may optionally implement <CODE>nsIInterfaceRequestor</CODE>, * <CODE>nsIWebBrowserChromeFocus</CODE>, * <CODE>nsIContextMenuListener</CODE> and * <CODE>nsITooltipListener</CODE> to receive additional notifications * from the browser object. * * The chrome object may optionally implement <CODE>nsIWebProgressListener</CODE> * instead of explicitly calling <CODE>addWebBrowserListener</CODE> and * <CODE>removeWebBrowserListener</CODE> to register a progress listener * object. If the implementation does this, it must also implement * <CODE>nsIWeakReference</CODE>. * * @note The implementation should not refcount the supplied chrome * object; it should assume that a non <CODE>nullptr</CODE> value is * always valid. The embedder must explicitly set this value back * to nullptr if the chrome object is destroyed before the browser * object. * * @see nsIBaseWindow * @see nsIWebBrowserChrome * @see nsIEmbeddingSiteWindow * @see nsIInterfaceRequestor * @see nsIWebBrowserChromeFocus * @see nsIContextMenuListener * @see nsITooltipListener * @see nsIWeakReference * @see nsIWebProgressListener */`",547,null],[11,"GetParentURIContentListener","","`text /** * URI content listener parent. The embedder may set this property to * their own implementation if they intend to override or prevent * how certain kinds of content are loaded. * * @note If this attribute is set to an object that implements * nsISupportsWeakReference, the implementation should get the * nsIWeakReference and hold that. Otherwise, the implementation * should not refcount this interface; it should assume that a non * null value is always valid. In that case, the embedder should * explicitly set this value back to null if the parent content * listener is destroyed before the browser object. * * @see nsIURIContentListener */`",547,null],[11,"SetParentURIContentListener","","`text /** * URI content listener parent. The embedder may set this property to * their own implementation if they intend to override or prevent * how certain kinds of content are loaded. * * @note If this attribute is set to an object that implements * nsISupportsWeakReference, the implementation should get the * nsIWeakReference and hold that. Otherwise, the implementation * should not refcount this interface; it should assume that a non * null value is always valid. In that case, the embedder should * explicitly set this value back to null if the parent content * listener is destroyed before the browser object. * * @see nsIURIContentListener */`",547,null],[11,"GetContentDOMWindow","","`text /** * The top-level DOM window. The embedder may walk the entire * DOM starting from this value. * * @see nsIDOMWindow */`",547,null],[11,"GetIsActive","","`text /** * Whether this web browser is active. Active means that it's visible * enough that we want to avoid certain optimizations like discarding * decoded image data and throttling the refresh driver. In Firefox, * this corresponds to the visible tab. * * Defaults to true. For optimal performance, set it to false when * appropriate. */`",547,null],[11,"SetIsActive","","`text /** * Whether this web browser is active. Active means that it's visible * enough that we want to avoid certain optimizations like discarding * decoded image data and throttling the refresh driver. In Firefox, * this corresponds to the visible tab. * * Defaults to true. For optimal performance, set it to false when * appropriate. */`",547,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",548,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",548,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIOSPreferences` to one of its base interfaces.",548,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",548,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"dateTimeFormatStyleNone","","",548,null],[18,"dateTimeFormatStyleShort","","",548,null],[18,"dateTimeFormatStyleMedium","","",548,null],[18,"dateTimeFormatStyleLong","","",548,null],[18,"dateTimeFormatStyleFull","","",548,null],[11,"GetSystemLocales","","`text /** * Returns a list of locales used by the host environment for UI * localization. * * The result is a sorted list and we expect that the OS attempts to * use the top locale from the list for which it has data. * * Each element of the list is a valid locale ID that can be passed to ICU * and ECMA402 Intl APIs, * At the same time each element is a valid BCP47 language tag that can be * used for language negotiation. * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] * * (See OSPreferences.h for a more C++-friendly version of this.) */`",548,null],[11,"GetRegionalPrefsLocales","","`text /** * Returns a list of locales used by host environment for regional * preferences internationalization. * * The result is a sorted list and we expect that the OS attempts to * use the top locale from the list for which it has data. * * Each element of the list is a valid locale ID that can be passed to ICU * and ECMA402 Intl APIs, * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] * * (See OSPreferences.h for a more C++-friendly version of this.) */`",548,null],[11,"GetSystemLocale","","`text /** * Returns the best locale that the host environment is localized to. * * The result is a valid locale ID and it should be * used for all APIs that do not handle language negotiation. * * In any scenario involving language negotiation, GetSystemLocales should * be preferred over the single value. * * Example: \"zh-Hans-HK\" */`",548,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDateTimePattern","","`text /** * Returns the best possible date/time pattern for the host environment * taking into account date/time regional settings user defined in the OS * preferences. * * Notice, that depending on the OS it may take into account those settings * for all locales, or only if the locale matches the OS locale. * * It takes two integer arguments that must be valid `dateTimeFormatStyle*` * values (see constants defined above), and a string representing a * BCP47 locale. * * It returns a string with a LDML date/time pattern. * * If no pattern can be retrieved from the host environment, it will * lookup the best available pattern from ICU. * * Notice, this is a pretty unique method in this API in that it does * more than look up into host environment. * The reason for that is that constructing the right date/time pattern * requires a lot of OS-specific logic and it ends up being easier to just * handle all scenarios, including with cases where we fail to retrieve * anything from the OS, here. */`",548,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",549,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",549,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMutable` to one of its base interfaces.",549,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",549,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMutable","","`text /** * Control whether or not this object can be modified. If the flag is * false, no modification is allowed. Once the flag has been set to false, * it cannot be reset back to true -- attempts to do so throw * NS_ERROR_INVALID_ARG. */`",549,null],[11,"SetMutable","","`text /** * Control whether or not this object can be modified. If the flag is * false, no modification is allowed. Once the flag has been set to false, * it cannot be reset back to true -- attempts to do so throw * NS_ERROR_INVALID_ARG. */`",549,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",550,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",550,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrefLocalizedString` to one of its base interfaces.",550,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",550,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsstring"}}],[11,"addref","","",551,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",551,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintSettingsService` to one of its base interfaces.",551,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",551,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetGlobalPrintSettings","","`text /** * Returns a \"global\" PrintSettings object * Creates a new the first time, if one doesn't exist. * * Then returns the same object each time after that. * * Initializes the globalPrintSettings from the default printer */`",551,null],[11,"GetNewPrintSettings","","`text /** * Returns a new, unique PrintSettings object each time. * * For example, if each browser was to have its own unique * PrintSettings, then each browser window would call this to * create its own unique PrintSettings object. * * If each browse window was to use the same PrintSettings object * then it should use \"globalPrintSettings\" * * Initializes the newPrintSettings from the unprefixed printer * (Note: this may not happen if there is an OS specific implementation.) * */`",551,null],[11,"GetDefaultPrinterName","","`text /** * The name of the last printer used, or else the system default printer. */`",551,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitPrintSettingsFromPrinter","","`text /** * Initializes certain settings from the native printer into the PrintSettings * if aPrinterName is null then it uses the default printer name if it can * These settings include, but are not limited to: * Page Orientation * Page Size * Number of Copies */`",551,null],[11,"InitPrintSettingsFromPrefs","","`text /** * Reads PrintSettings values from Prefs, * the values to be read are indicated by the \"flags\" arg. * * aPrintSettings should be initialized with the name of a printer. First * it reads in the PrintSettings from the last print job. Then it uses the * PrinterName in the PrinterSettings to read any settings that were saved * just for that printer. * * aPS - PrintSettings to have its settings read * aUsePrinterNamePrefix - indicates whether to use the printer name as a prefix * aFlags - indicates which prefs to read, see nsIPrintSettings.idl for the * const values. * * Items not read: * startPageRange, endPageRange, scaling, printRange, title * docURL, howToEnableFrameUI, isCancelled, printFrameTypeUsage * printFrameType, printSilent, shrinkToFit, numCopies, * printerName * */`",551,null],[11,"SavePrintSettingsToPrefs","","`text /** * Writes PrintSettings values to Prefs, * the values to be written are indicated by the \"flags\" arg. * * If there is no PrinterName in the PrinterSettings * the values are saved as the \"generic\" values not associated with any printer. * If a PrinterName is there, then it saves the items qualified for that Printer * * aPS - PrintSettings to have its settings saved * aUsePrinterNamePrefix - indicates whether to use the printer name as a prefix * aFlags - indicates which prefs to save, see nsIPrintSettings.idl for the const values. * * Items not written: * startPageRange, endPageRange, scaling, printRange, title * docURL, howToEnableFrameUI, isCancelled, printFrameTypeUsage * printFrameType, printSilent, shrinkToFit, numCopies * */`",551,null],[11,"addref","","",552,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",552,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadPoolListener` to one of its base interfaces.",552,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",552,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnThreadCreated","","`text /** * Called when a new thread is created by the thread pool. The notification * happens on the newly-created thread. */`",552,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnThreadShuttingDown","","`text /** * Called when a thread is about to be destroyed by the thread pool. The * notification happens on the thread that is about to be destroyed. */`",552,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",553,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",553,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadPool` to one of its base interfaces.",553,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",553,{"inputs":[{"name":"self"}],"output":{"name":"nsieventtarget"}}],[11,"Shutdown","","`text /** * Shutdown the thread pool. This method may not be executed from any thread * in the thread pool. Instead, it is meant to be executed from another * thread (usually the thread that created this thread pool). When this * function returns, the thread pool and all of its threads will be shutdown, * and it will no longer be possible to dispatch tasks to the thread pool. * * As a side effect, events on the current thread will be processed. */`",553,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetThreadLimit","","`text /** * Get/set the maximum number of threads allowed at one time in this pool. */`",553,null],[11,"SetThreadLimit","","`text /** * Get/set the maximum number of threads allowed at one time in this pool. */`",553,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIdleThreadLimit","","`text /** * Get/set the maximum number of idle threads kept alive. */`",553,null],[11,"SetIdleThreadLimit","","`text /** * Get/set the maximum number of idle threads kept alive. */`",553,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIdleThreadTimeout","","`text /** * Get/set the amount of time in milliseconds before an idle thread is * destroyed. */`",553,null],[11,"SetIdleThreadTimeout","","`text /** * Get/set the amount of time in milliseconds before an idle thread is * destroyed. */`",553,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetThreadStackSize","","`text /** * Get/set the number of bytes reserved for the stack of all threads in * the pool. By default this is nsIThreadManager::DEFAULT_STACK_SIZE. */`",553,null],[11,"SetThreadStackSize","","`text /** * Get/set the number of bytes reserved for the stack of all threads in * the pool. By default this is nsIThreadManager::DEFAULT_STACK_SIZE. */`",553,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetListener","","`text /** * An optional listener that will be notified when a thread is created or * destroyed in the course of the thread pool's operation. * * A listener will only receive notifications about threads created after the * listener is set so it is recommended that the consumer set the listener * before dispatching the first event. A listener that receives an * onThreadCreated() notification is guaranteed to always receive the * corresponding onThreadShuttingDown() notification. * * The thread pool takes ownership of the listener and releases it when the * shutdown() method is called. Threads created after the listener is set will * also take ownership of the listener so that the listener will be kept alive * long enough to receive the guaranteed onThreadShuttingDown() notification. */`",553,null],[11,"SetListener","","`text /** * An optional listener that will be notified when a thread is created or * destroyed in the course of the thread pool's operation. * * A listener will only receive notifications about threads created after the * listener is set so it is recommended that the consumer set the listener * before dispatching the first event. A listener that receives an * onThreadCreated() notification is guaranteed to always receive the * corresponding onThreadShuttingDown() notification. * * The thread pool takes ownership of the listener and releases it when the * shutdown() method is called. Threads created after the listener is set will * also take ownership of the listener so that the listener will be kept alive * long enough to receive the guaranteed onThreadShuttingDown() notification. */`",553,null],[11,"SetName","","`text /** * Set the label for threads in the pool. All threads will be named * \"<aName> #<n>\", where <n> is a serial number. */`",553,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",554,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",554,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedPerson` to one of its base interfaces.",554,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",554,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedelementbase"}}],[11,"GetName","","`text /** * The name of the person. */`",554,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`text /** * The name of the person. */`",554,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetEmail","","`text /** * An email address associated with the person. */`",554,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetEmail","","`text /** * An email address associated with the person. */`",554,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUri","","`text /** * A URI associated with the person (e.g. a homepage). */`",554,null],[11,"SetUri","","`text /** * A URI associated with the person (e.g. a homepage). */`",554,null],[11,"addref","","",555,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",555,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketProvider` to one of its base interfaces.",555,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",555,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PROXY_RESOLVES_HOST","","`text /** * PROXY_RESOLVES_HOST * * This flag is set if the proxy is to perform hostname resolution instead * of the client. When set, the hostname parameter passed when in this * interface will be used instead of the address structure passed for a * later connect et al. request. */`",555,null],[18,"ANONYMOUS_CONNECT","","`text /** * When setting this flag, the socket will not apply any * credentials when establishing a connection. For example, * an SSL connection would not send any client-certificates * if this flag is set. */`",555,null],[18,"NO_PERMANENT_STORAGE","","`text /** * If set, indicates that the connection was initiated from a source * defined as being private in the sense of Private Browsing. Generally, * there should be no state shared between connections that are private * and those that are not; it is OK for multiple private connections * to share state with each other, and it is OK for multiple non-private * connections to share state with each other. */`",555,null],[18,"MITM_OK","","`text /** * This flag is an explicit opt-in that allows a normally secure socket * provider to use, at its discretion, an insecure algorithm. e.g. * a TLS socket without authentication. */`",555,null],[18,"BE_CONSERVATIVE","","`text /** * If set, do not use newer protocol features that might have interop problems * on the Internet. Intended only for use with critical infra like the updater. * default is false. */`",555,null],[11,"addref","","",556,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",556,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISessionStore` to one of its base interfaces.",556,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",556,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCanRestoreLastSession","","`text /** * Is it possible to restore the previous session. Will always be false when * in Private Browsing mode. */`",556,null],[11,"SetCanRestoreLastSession","","`text /** * Is it possible to restore the previous session. Will always be false when * in Private Browsing mode. */`",556,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RestoreLastSession","","`text /** * Restore the previous session if possible. This will not overwrite the * current session. Instead the previous session will be merged into the * current session. Current windows will be reused if they were windows that * pinned tabs were previously restored into. New windows will be opened as * needed. * * Note: This will throw if there is no previous state to restore. Check with * canRestoreLastSession first to avoid thrown errors. */`",556,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetBrowserState","","`text /** * Get the current browsing state. * @returns a JSON string representing the session state. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetBrowserState","","`text /** * Set the browsing state. * This will immediately restore the state of the whole application to the state * passed in, *replacing* the current session. * * @param aState is a JSON string representing the session state. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetWindowState","","`text /** * @param aWindow is the browser window whose state is to be returned. * * @returns a JSON string representing a session state with only one window. */`",556,null],[11,"SetWindowState","","`text /** * @param aWindow is the browser window whose state is to be set. * @param aState is a JSON string representing a session state. * @param aOverwrite boolean overwrite existing tabs */`",556,null],[11,"GetTabState","","`text /** * @param aTab is the tabbrowser tab whose state is to be returned. * * @returns a JSON string representing the state of the tab * (note: doesn't contain cookies - if you need them, use getWindowState instead). */`",556,null],[11,"SetTabState","","`text /** * @param aTab is the tabbrowser tab whose state is to be set. * @param aState is a JSON string representing a session state. */`",556,null],[11,"DuplicateTab","","`text /** * Duplicates a given tab as thoroughly as possible. * * @param aWindow is the browser window into which the tab will be duplicated. * @param aTab is the tabbrowser tab to duplicate (can be from a different window). * @param aDelta is the offset to the history entry to load in the duplicated tab. * @returns a reference to the newly created tab. */`",556,null],[11,"GetClosedTabCount","","`text /** * Get the number of restore-able tabs for a browser window */`",556,null],[11,"GetClosedTabData","","`text /** * Get closed tab data * * @param aWindow is the browser window for which to get closed tab data * @returns a JSON string representing the list of closed tabs. */`",556,null],[11,"UndoCloseTab","","`text /** * @param aWindow is the browser window to reopen a closed tab in. * @param aIndex is the index of the tab to be restored (FIFO ordered). * @returns a reference to the reopened tab. */`",556,null],[11,"ForgetClosedTab","","`text /** * @param aWindow is the browser window associated with the closed tab. * @param aIndex is the index of the closed tab to be removed (FIFO ordered). */`",556,null],[11,"GetClosedWindowCount","","`text /** * Get the number of restore-able windows */`",556,null],[11,"GetClosedWindowData","","`text /** * Get closed windows data * * @returns a JSON string representing the list of closed windows. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UndoCloseWindow","","`text /** * @param aIndex is the index of the windows to be restored (FIFO ordered). * @returns the nsIDOMWindow object of the reopened window */`",556,null],[11,"ForgetClosedWindow","","`text /** * @param aIndex is the index of the closed window to be removed (FIFO ordered). * * @throws NS_ERROR_INVALID_ARG * when aIndex does not map to a closed window */`",556,null],[11,"GetWindowValue","","`text /** * @param aWindow is the window to get the value for. * @param aKey is the value's name. * * @returns A string value or an empty string if none is set. */`",556,null],[11,"DeleteWindowValue","","`text /** * @param aWindow is the browser window to get the value for. * @param aKey is the value's name. */`",556,null],[11,"GetTabValue","","`text /** * @param aTab is the tabbrowser tab to get the value for. * @param aKey is the value's name. * * @returns A string value or an empty string if none is set. */`",556,null],[11,"DeleteTabValue","","`text /** * @param aTab is the tabbrowser tab to get the value for. * @param aKey is the value's name. */`",556,null],[11,"GetGlobalValue","","`text /** * @param aKey is the value's name. * * @returns A string value or an empty string if none is set. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"DeleteGlobalValue","","`text /** * @param aTab is the browser tab to get the value for. * @param aKey is the value's name. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PersistTabAttribute","","`text /** * @param aName is the name of the attribute to save/restore for all tabbrowser tabs. */`",556,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",557,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",557,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRandomGenerator` to one of its base interfaces.",557,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",557,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GenerateRandomBytes","","`text /** * Generates the specified amount of random bytes. * * @param aLength * The length of the data to generate. * @param aBuffer * A buffer that contains random bytes of size aLength. */`",557,null],[11,"addref","","",558,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",558,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozILocaleService` to one of its base interfaces.",558,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",558,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"langNegStrategyFiltering","","`text /** * List of language negotiation strategies to use. * For an example list of requested and available locales: * * Requested: ['es-MX', 'fr-FR'] * Available: ['fr', 'fr-CA', 'es', 'es-MX', 'it'] * DefaultLocale: ['en-US'] * * each of those strategies will build a different result: * * * filtering (default) - * Matches as many of the available locales as possible. * * Result: * Supported: ['es-MX', 'es', 'fr', 'fr-CA', 'en-US'] * * matching - * Matches the best match from the available locales for every requested * locale. * * Result: * Supported: ['es-MX', 'fr', 'en-US'] * * lookup - * Matches a single best locale. This strategy always returns a list * of the length 1 and requires a defaultLocale to be set. * * Result: * Supported: ['es-MX'] */`",558,null],[18,"langNegStrategyMatching","","",558,null],[18,"langNegStrategyLookup","","",558,null],[11,"GetDefaultLocale","","`text /** * Default locale of the browser. The locale we are guaranteed to have * resources for that should be used as a last resort fallack in cases * where requested locales do not match available locales. */`",558,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetLastFallbackLocale","","`text /** * Last fallback is the final fallback locale we're going to attempt if all * else fails in any language negotiation or locale resource retrieval situations. * * At the moment it returns `en-US`. */`",558,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppLocalesAsLangTags","","`text /** * Returns a list of locales that the application should be localized to. * * The result is a ordered list of valid locale IDs and it should be * used for all APIs that accept list of locales, like ECMA402 and L10n APIs. * * This API always returns at least one locale. * * When retrieving the locales for language negotiation and matching * to language resources, use the language tag form. * When retrieving the locales for Intl API or ICU locale settings, * use the BCP47 form. * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] * * (See LocaleService.h for a more C++-friendly version of this.) */`",558,null],[11,"GetAppLocalesAsBCP47","","`void getAppLocalesAsBCP47 ([optional] out unsigned long aCount, [array, size_is (aCount), retval] out string aLocales);`",558,null],[11,"GetRegionalPrefsLocales","","`text /** * Returns a list of locales to use for any regional specific operations * like date formatting, calendars, unit formatting etc. * * The result is a ordered list of valid locale IDs and it should be * used for all APIs that accept list of locales, like ECMA402 and L10n APIs. * * This API always returns at least one locale. * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] * * (See LocaleService.h for a more C++-friendly version of this.) */`",558,null],[11,"NegotiateLanguages","","`text /** * Negotiates the best locales out of a ordered list of requested locales and * a list of available locales. * * Internally it uses the following naming scheme: * * Requested - locales requested by the user * Available - locales for which the data is available * Supported - locales negotiated by the algorithm * * Additionally, if defaultLocale is provided, it adds it to the end of the * result list as a \"last resort\" locale. * * Strategy is one of the three strategies described at the top of this file. * * The result list is ordered according to the order of the requested locales. * * (See LocaleService.h for a more C++-friendly version of this.) */`",558,null],[11,"GetAppLocaleAsLangTag","","`text /** * Returns the best locale that the application should be localized to. * * The result is a valid locale ID and it should be * used for all APIs that do not handle language negotiation. * * When retrieving the locales for language negotiation and matching * to language resources, use the language tag form. * When retrieving the locales for Intl API or ICU locale settings, * use the BCP47 form. * * Where possible, getAppLocales*() should be preferred over this API and * all callsites should handle some form of \"best effort\" language * negotiation to respect user preferences in case the use case does * not have data for the first locale in the list. * * Example: \"zh-Hans-HK\" */`",558,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppLocaleAsBCP47","","`ACString getAppLocaleAsBCP47 ();`",558,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRequestedLocales","","`text /** * Returns a list of locales that the user requested the app to be * localized to. * * The result is an ordered list of locale IDs which should be * used as a requestedLocales input list for language negotiation. * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] */`",558,null],[11,"GetRequestedLocale","","`text /** * Returns the top-requested locale from the user, or an empty string if none is set. */`",558,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetRequestedLocales","","`text /** * Sets a list of locales that the user requested the app to be * localized to. * * The argument is an ordered list of locale IDs which should be * used as a requestedLocales input list for language negotiation. * * The current implementation is limited to handle at most one * locale passed to the API. In the future we'll transition to support * whole fallback chain. * * If an empty list is passed, the list of requested locales will * be picked from the operating system. * * Example: [\"de\"] */`",558,null],[11,"GetAvailableLocales","","`text /** * Returns a list of locales that the app can be localized to. * * The result is an unordered list of locale IDs which should be * used as a availableLocales input list for language negotiation. * * Example: [\"en-US\", \"de\", \"pl\", \"sr-Cyrl\", \"zh-Hans-HK\"] */`",558,null],[11,"GetIsAppLocaleRTL","","`text /** * Returns whether the current app locale is RTL. */`",558,null],[11,"addref","","",559,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",559,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMFocusEvent` to one of its base interfaces.",559,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",559,{"inputs":[{"name":"self"}],"output":{"name":"nsidomuievent"}}],[11,"GetRelatedTarget","","`readonly attribute nsIDOMEventTarget relatedTarget;`",559,null],[11,"addref","","",560,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",560,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULTextBoxElement` to one of its base interfaces.",560,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",560,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulcontrolelement"}}],[11,"GetInputField","","`readonly attribute nsIDOMNode inputField;`",560,null],[11,"GetTextLength","","`readonly attribute long textLength;`",560,null],[11,"GetMaxLength","","`attribute long maxLength;`",560,null],[11,"SetMaxLength","","`attribute long maxLength;`",560,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSize","","`attribute long size;`",560,null],[11,"SetSize","","`attribute long size;`",560,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectionStart","","`attribute long selectionStart;`",560,null],[11,"SetSelectionStart","","`attribute long selectionStart;`",560,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectionEnd","","`attribute long selectionEnd;`",560,null],[11,"SetSelectionEnd","","`attribute long selectionEnd;`",560,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`attribute DOMString value;`",560,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute DOMString value;`",560,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`attribute DOMString type;`",560,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetType","","`attribute DOMString type;`",560,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Select","","`void select ();`",560,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetSelectionRange","","`void setSelectionRange (in long selectionStart, in long selectionEnd);`",560,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",561,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",561,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolHandlerWithDynamicFlags` to one of its base interfaces.",561,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",561,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFlagsForURI","","`unsigned long getFlagsForURI (in nsIURI aURI);`",561,null],[11,"addref","","",562,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",562,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolHandler` to one of its base interfaces.",562,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",562,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"URI_STD","","`text /************************************************************************** * Constants for the protocol flags (the first is the default mask, the * others are deviations): * * NOTE: Implementation must ignore any flags they do not understand. */ /** * standard full URI with authority component and concept of relative * URIs (http, ftp, ...) */`",562,null],[18,"URI_NORELATIVE","","`text /** * no concept of relative URIs (about, javascript, finger, ...) */`",562,null],[18,"URI_NOAUTH","","`text /** * no authority component (file, ...) */`",562,null],[18,"ALLOWS_PROXY","","`text /** * This protocol handler can be proxied via a proxy (socks or http) * (e.g., irc, smtp, http, etc.). If the protocol supports transparent * proxying, the handler should implement nsIProxiedProtocolHandler. * * If it supports only HTTP proxying, then it need not support * nsIProxiedProtocolHandler, but should instead set the ALLOWS_PROXY_HTTP * flag (see below). * * @see nsIProxiedProtocolHandler */`",562,null],[18,"ALLOWS_PROXY_HTTP","","`text /** * This protocol handler can be proxied using a http proxy (e.g., http, * ftp, etc.). nsIIOService::newChannelFromURI will feed URIs from this * protocol handler to the HTTP protocol handler instead. This flag is * ignored if ALLOWS_PROXY is not set. */`",562,null],[18,"URI_INHERITS_SECURITY_CONTEXT","","`text /** * The URIs for this protocol have no inherent security context, so * documents loaded via this protocol should inherit the security context * from the document that loads them. */`",562,null],[18,"URI_FORBIDS_AUTOMATIC_DOCUMENT_REPLACEMENT","","`text /** * \"Automatic\" loads that would replace the document (e.g. <meta> refresh, * certain types of XLinks, possibly other loads that the application * decides are not user triggered) are not allowed if the originating (NOT * the target) URI has this protocol flag. Note that the decision as to * what constitutes an \"automatic\" load is made externally, by the caller * of nsIScriptSecurityManager::CheckLoadURI. See documentation for that * method for more information. * * A typical protocol that might want to set this flag is a protocol that * shows highly untrusted content in a viewing area that the user expects * to have a lot of control over, such as an e-mail reader. */`",562,null],[18,"URI_LOADABLE_BY_ANYONE","","`text /** * +-------------------------------------------------------------------+ * | | * | ALL PROTOCOL HANDLERS MUST SET ONE OF THE FOLLOWING FIVE FLAGS. | * | | * +-------------------------------------------------------------------+ * * These flags are used to determine who is allowed to load URIs for this * protocol. Note that if a URI is nested, only the flags for the * innermost URI matter. See nsINestedURI. * * If none of these five flags are set, the URI must be treated as if it * had the URI_LOADABLE_BY_ANYONE flag set, for compatibility with protocol * handlers written against Gecko 1.8 or earlier. In this case, there may * be run-time warning messages indicating that a \"default insecure\" * assumption is being made. At some point in the futures (Mozilla 2.0, * most likely), these warnings will become errors. */ /** * The URIs for this protocol can be loaded by anyone. For example, any * website should be allowed to trigger a load of a URI for this protocol. * Web-safe protocols like \"http\" should set this flag. */`",562,null],[18,"URI_DANGEROUS_TO_LOAD","","`text /** * The URIs for this protocol are UNSAFE if loaded by untrusted (web) * content and may only be loaded by privileged code (for example, code * which has the system principal). Various internal protocols should set * this flag. */`",562,null],[18,"URI_IS_UI_RESOURCE","","`text /** * The URIs for this protocol point to resources that are part of the * application's user interface. There are cases when such resources may * be made accessible to untrusted content such as web pages, so this is * less restrictive than URI_DANGEROUS_TO_LOAD but more restrictive than * URI_LOADABLE_BY_ANYONE. See the documentation for * nsIScriptSecurityManager::CheckLoadURI. */`",562,null],[18,"URI_IS_LOCAL_FILE","","`text /** * Loading of URIs for this protocol from other origins should only be * allowed if those origins should have access to the local filesystem. * It's up to the application to decide what origins should have such * access. Protocols like \"file\" that point to local data should set this * flag. */`",562,null],[18,"URI_LOADABLE_BY_SUBSUMERS","","`text /** * The URIs for this protocol can be loaded only by callers with a * principal that subsumes this uri. For example, privileged code and * websites that are same origin as this uri. */`",562,null],[18,"URI_DOES_NOT_RETURN_DATA","","`text /** * Channels using this protocol never call OnDataAvailable * on the listener passed to AsyncOpen and they therefore * do not return any data that we can use. */`",562,null],[18,"URI_IS_LOCAL_RESOURCE","","`text /** * URIs for this protocol are considered to be local resources. This could * be a local file (URI_IS_LOCAL_FILE), a UI resource (URI_IS_UI_RESOURCE), * or something else that would not hit the network. */`",562,null],[18,"URI_OPENING_EXECUTES_SCRIPT","","`text /** * URIs for this protocol execute script when they are opened. */`",562,null],[18,"URI_NON_PERSISTABLE","","`text /** * Loading channels from this protocol has side-effects that make * it unsuitable for saving to a local file. */`",562,null],[18,"URI_FORBIDS_COOKIE_ACCESS","","`text /** * This protocol handler forbids accessing cookies e.g. for mail related * protocols. */`",562,null],[18,"URI_CROSS_ORIGIN_NEEDS_WEBAPPS_PERM","","`text /** * URIs for this protocol require the webapps permission on the principal * when opening URIs for a different domain. See bug#773886 */`",562,null],[18,"URI_SYNC_LOAD_IS_OK","","`text /** * Channels for this protocol don't need to spin the event loop to handle * Open() and reads on the resulting stream. */`",562,null],[18,"URI_SAFE_TO_LOAD_IN_SECURE_CONTEXT","","`text /** * URI is secure to load in an https page and should not be blocked * by nsMixedContentBlocker */`",562,null],[18,"URI_FETCHABLE_BY_ANYONE","","`text /** * This URI may be fetched and the contents are visible to anyone. This is * semantically equivalent to the resource being served with all-access CORS * headers. */`",562,null],[18,"ORIGIN_IS_FULL_SPEC","","`text /** * If this flag is set, then the origin for this protocol is the full URI * spec, not just the scheme + host + port. * * Note: this is not supported in Firefox. It is currently only available * in Thunderbird and SeaMonkey. */`",562,null],[18,"URI_SCHEME_NOT_SELF_LINKABLE","","`text /** * If this flag is set, the URI does not always allow content using the same * protocol to link to it. */`",562,null],[18,"URI_LOADABLE_BY_EXTENSIONS","","`text /** * The URIs for this protocol can be loaded by extensions. */`",562,null],[11,"GetScheme","","`text /** * The scheme of this protocol (e.g., \"file\"). */`",562,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultPort","","`text /** * The default port is the port that this protocol normally uses. * If a port does not make sense for the protocol (e.g., \"about:\") * then -1 will be returned. */`",562,null],[11,"GetProtocolFlags","","`text /** * Returns the protocol specific flags (see flag definitions below). */`",562,null],[11,"NewURI","","`text /** * Makes a URI object that is suitable for loading by this protocol, * where the URI string is given as an UTF-8 string. The caller may * provide the charset from which the URI string originated, so that * the URI string can be translated back to that charset (if necessary) * before communicating with, for example, the origin server of the URI * string. (Many servers do not support UTF-8 IRIs at the present time, * so we must be careful about tracking the native charset of the origin * server.) * * @param aSpec - the URI string in UTF-8 encoding. depending * on the protocol implementation, unicode character * sequences may or may not be %xx escaped. * @param aOriginCharset - the charset of the document from which this URI * string originated. this corresponds to the * charset that should be used when communicating * this URI to an origin server, for example. if * null, then UTF-8 encoding is assumed (i.e., * no charset transformation from aSpec). * @param aBaseURI - if null, aSpec must specify an absolute URI. * otherwise, aSpec may be resolved relative * to aBaseURI, depending on the protocol. * If the protocol has no concept of relative * URI aBaseURI will simply be ignored. */`",562,null],[11,"NewChannel2","","`text /** * Constructs a new channel from the given URI for this protocol handler and * sets the loadInfo for the constructed channel. */`",562,null],[11,"NewChannel","","`text /** * Constructs a new channel from the given URI for this protocol handler. */`",562,null],[11,"AllowPort","","`text /** * Allows a protocol to override blacklisted ports. * * This method will be called when there is an attempt to connect to a port * that is blacklisted. For example, for most protocols, port 25 (Simple Mail * Transfer) is banned. When a URI containing this \"known-to-do-bad-things\" * port number is encountered, this function will be called to ask if the * protocol handler wants to override the ban. */`",562,null],[11,"addref","","",563,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",563,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIPlacesAutoComplete` to one of its base interfaces.",563,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",563,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MATCH_ANYWHERE","","`text /** * Match anywhere in each searchable term. */`",563,null],[18,"MATCH_BOUNDARY_ANYWHERE","","`text /** * Match first on word boundaries, and if we do not get enough results, then * match anywhere in each searchable term. */`",563,null],[18,"MATCH_BOUNDARY","","`text /** * Match on word boundaries in each searchable term. */`",563,null],[18,"MATCH_BEGINNING","","`text /** * Match only the beginning of each search term. */`",563,null],[18,"MATCH_ANYWHERE_UNMODIFIED","","`text /** * Match anywhere in each searchable term without doing any transformation * or stripping on the underlying data. */`",563,null],[18,"MATCH_BEGINNING_CASE_SENSITIVE","","`text /** * Match only the beginning of each search term using a case sensitive * comparator. */`",563,null],[18,"BEHAVIOR_HISTORY","","`text /** * Search through history. */`",563,null],[18,"BEHAVIOR_BOOKMARK","","`text /** * Search though bookmarks. */`",563,null],[18,"BEHAVIOR_TAG","","`text /** * Search through tags. */`",563,null],[18,"BEHAVIOR_TITLE","","`text /** * Search the title of pages. */`",563,null],[18,"BEHAVIOR_URL","","`text /** * Search the URL of pages. */`",563,null],[18,"BEHAVIOR_TYPED","","`text /** * Search for typed pages. */`",563,null],[18,"BEHAVIOR_JAVASCRIPT","","`text /** * Search javascript: URLs. */`",563,null],[18,"BEHAVIOR_OPENPAGE","","`text /** * Search for pages that have been marked as being opened, such as a tab * in a tabbrowser. */`",563,null],[18,"BEHAVIOR_RESTRICT","","`text /** * Use intersection between history, typed, bookmark, tag and openpage * instead of union, when the restrict bit is set. */`",563,null],[18,"BEHAVIOR_SEARCHES","","`text /** * Include search suggestions from the currently selected search provider. */`",563,null],[11,"RegisterOpenPage","","`text /** * Mark a page as being currently open. * * @note Pages will not be automatically unregistered when Private Browsing * mode is entered or exited. Therefore, consumers MUST unregister or * register themselves. * * @param aURI * The URI to register as an open page. * @param aUserContextId * The Container Id of the tab. */`",563,null],[11,"UnregisterOpenPage","","`text /** * Mark a page as no longer being open (either by closing the window or tab, * or by navigating away from that page). * * @note Pages will not be automatically unregistered when Private Browsing * mode is entered or exited. Therefore, consumers MUST unregister or * register themselves. * * @param aURI * The URI to unregister as an open page. * @param aUserContextId * The Container Id of the tab. */`",563,null],[11,"addref","","",564,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",564,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptableInputStream` to one of its base interfaces.",564,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",564,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Close","","`text /** * Closes the stream. */`",564,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * Wrap the given nsIInputStream with this nsIScriptableInputStream. * * @param aInputStream parameter providing the stream to wrap */`",564,null],[11,"Available","","`text /** * Return the number of bytes currently available in the stream * * @return the number of bytes * * @throws NS_BASE_STREAM_CLOSED if called after the stream has been closed */`",564,null],[11,"Read","","`text /** * Read data from the stream. * * WARNING: If the data contains a null byte, then this method will return * a truncated string. * * @param aCount the maximum number of bytes to read * * @return the data, which will be an empty string if the stream is at EOF. * * @throws NS_BASE_STREAM_CLOSED if called after the stream has been closed * @throws NS_ERROR_NOT_INITIALIZED if init was not called */`",564,null],[11,"ReadBytes","","`text /** * Read data from the stream, including NULL bytes. * * @param aCount the maximum number of bytes to read. * * @return the data from the stream, which will be an empty string if EOF * has been reached. * * @throws NS_BASE_STREAM_WOULD_BLOCK if reading from the input stream * would block the calling thread (non-blocking mode only). * @throws NS_ERROR_FAILURE if there are not enough bytes available to read * aCount amount of data. */`",564,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",565,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",565,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMenuBuilder` to one of its base interfaces.",565,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",565,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OpenContainer","","`text /** * Create the top level menu or a submenu. The implementation should create * a new context for this menu, so all subsequent methods will add new items * to this newly created menu. */`",565,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddItemFor","","`text /** * Add a new menu item. All menu item details can be obtained from * the element. This method is not called for hidden elements or elements * with no or empty label. The icon should be loaded only if aCanLoadIcon * is true. */`",565,null],[11,"AddSeparator","","`text /** * Create a new separator. */`",565,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UndoAddSeparator","","`text /** * Remove last added separator. * Sometimes it's needed to remove last added separator, otherwise it's not * possible to implement the postprocessing in one pass. * See http://www.whatwg.org/specs/web-apps/current-work/multipage/interactive-elements.html#building-menus-and-toolbars */`",565,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CloseContainer","","`text /** * Set the context to the parent menu. */`",565,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ToJSONString","","`text /** * Returns a JSON string representing the menu hierarchy. For a context menu, * it will be of the form: * { * type: \"menu\", * children: [ * { * type: \"menuitem\", * label: \"label\", * icon: \"image.png\" * }, * { * type: \"separator\", * }, * ]; */`",565,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Click","","`text /** * Invoke the action of the menuitem with assigned id aGeneratedItemId. * * @param aGeneratedItemId the menuitem id */`",565,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",566,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",566,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `txIEXSLTRegExFunctions` to one of its base interfaces.",566,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",566,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Match","","`txINodeSet match (in txIFunctionEvaluationContext aContext, in DOMString aString, in DOMString aRegEx, in DOMString aFlags);`",566,null],[11,"Replace","","`DOMString replace (in DOMString aString, in DOMString aRegEx, in DOMString aFlags, in DOMString aReplace);`",566,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Test","","`boolean test (in DOMString aString, in DOMString aRegEx, in DOMString aFlags);`",566,null],[11,"addref","","",567,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",567,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibilityService` to one of its base interfaces.",567,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",567,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetApplicationAccessible","","`text /** * Return application accessible. */`",567,null],[11,"GetAccessibleFor","","`text /** * Return an nsIAccessible for a DOM node in pres shell 0. * Create a new accessible of the appropriate type if necessary, * or use one from the accessibility cache if it already exists. * @param aNode The DOM node to get an accessible for. * @return The nsIAccessible for the given DOM node. */`",567,null],[11,"GetStringRole","","`text /** * Returns accessible role as a string. * * @param aRole - the accessible role constants. */`",567,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStringStates","","`text /** * Returns list which contains accessible states as a strings. * * @param aStates - accessible states. * @param aExtraStates - accessible extra states. */`",567,null],[11,"GetStringEventType","","`text /** * Get the type of accessible event as a string. * * @param aEventType - the accessible event type constant * @return - accessible event type presented as human readable string */`",567,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStringRelationType","","`text /** * Get the type of accessible relation as a string. * * @param aRelationType - the accessible relation type constant * @return - accessible relation type presented as human readable string */`",567,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAccessibleFromCache","","`text /** * Return an accessible for the given DOM node from the cache. * @note the method is intended for testing purposes * * @param aNode [in] the DOM node to get an accessible for * * @return cached accessible for the given DOM node if any */`",567,null],[11,"CreateAccessiblePivot","","`text /** * Create a new pivot for tracking a position and traversing a subtree. * * @param aRoot [in] the accessible root for the pivot * @return a new pivot */`",567,null],[11,"SetLogging","","`text /** * Enable logging for the given modules, all other modules aren't logged. * * @param aModules [in] list of modules, format is comma separated list * like 'docload,doccreate'. * @note Works on debug build only. * @see Logging.cpp for list of possible values. */`",567,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsLogged","","`text /** * Return true if the given module is logged. */`",567,null],[11,"GetConsumers","","`text /** * Get the current accessibility service consumers. * @returns a JSON string representing the accessibility service consumers. */`",567,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",568,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",568,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMClientRect` to one of its base interfaces.",568,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",568,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLeft","","`readonly attribute float left;`",568,null],[11,"GetTop","","`readonly attribute float top;`",568,null],[11,"GetRight","","`readonly attribute float right;`",568,null],[11,"GetBottom","","`readonly attribute float bottom;`",568,null],[11,"GetWidth","","`readonly attribute float width;`",568,null],[11,"GetHeight","","`readonly attribute float height;`",568,null],[11,"addref","","",569,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",569,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWellKnownOpportunisticUtils` to one of its base interfaces.",569,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",569,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Verify","","`[must_use] void verify (in ACString aJSON, in ACString aOrigin, in long aAlternatePort);`",569,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetValid","","`[must_use] readonly attribute bool valid;`",569,null],[11,"GetMixed","","`[must_use] readonly attribute bool mixed;`",569,null],[11,"GetLifetime","","`[must_use] readonly attribute long lifetime;`",569,null],[11,"addref","","",570,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",570,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserChromeFocus` to one of its base interfaces.",570,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",570,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FocusNextElement","","`text /** * Set the focus at the next focusable element in the chrome. If * aForDocumentNavigation is true, this was a document navigation, so * focus the parent window. */`",570,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"FocusPrevElement","","`text /** * Set the focus at the previous focusable element in the chrome. */`",570,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",571,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",571,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULRelatedElement` to one of its base interfaces.",571,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",571,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRelatedElement","","`text /** * Retrun an element associated with the given element. It's implemented * by container elements having relation between their items. For example, * this interface is implemented by XUL tabs and XUL tabpanels elements * and used to get XUL tab element by linked tab panel and vice versa. */`",571,null],[11,"addref","","",572,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",572,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISessionStoreUtilsFrameCallback` to one of its base interfaces.",572,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",572,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleFrame","","`text /** * handleFrame() will be called once for each non-dynamic child frame of the * given parent |frame|. The second argument is the |index| of the frame in * the list of all child frames. */`",572,null],[11,"addref","","",573,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",573,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISessionStoreUtils` to one of its base interfaces.",573,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",573,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ForEachNonDynamicChildFrame","","`text /** * Calls the given |callback| once for each non-dynamic child frame of the * given |window|. */`",573,null],[11,"CreateDynamicFrameEventFilter","","`text /** * Creates and returns an event listener that filters events from dynamic * docShells. It forwards those from non-dynamic docShells to the given * |listener|. * * This is implemented as a native filter, rather than a JS-based one, for * performance reasons. */`",573,null],[11,"addref","","",574,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",574,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSMozDocumentRule` to one of its base interfaces.",574,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",574,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssconditionrule"}}],[11,"addref","","",575,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",575,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConsoleAPIStorage` to one of its base interfaces.",575,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",575,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ClearEvents","","`text /** * Clear storage data for the given window. * * @param string [aId] * Optional, the inner window ID for which you want to clear the * messages. If this is not specified all of the cached messages are * cleared, from all window objects. */`",575,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",576,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",576,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDomainPolicy` to one of its base interfaces.",576,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",576,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBlacklist","","`readonly attribute nsIDomainSet blacklist;`",576,null],[11,"GetSuperBlacklist","","`readonly attribute nsIDomainSet superBlacklist;`",576,null],[11,"GetWhitelist","","`readonly attribute nsIDomainSet whitelist;`",576,null],[11,"GetSuperWhitelist","","`readonly attribute nsIDomainSet superWhitelist;`",576,null],[11,"Deactivate","","`void deactivate ();`",576,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",577,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",577,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDomainSet` to one of its base interfaces.",577,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",577,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`[noscript] readonly attribute uint32_t type;`",577,null],[11,"Add","","`void add (in nsIURI aDomain);`",577,null],[11,"Remove","","`void remove (in nsIURI aDomain);`",577,null],[11,"Clear","","`void clear ();`",577,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Contains","","`bool contains (in nsIURI aDomain);`",577,null],[11,"ContainsSuperDomain","","`bool containsSuperDomain (in nsIURI aDomain);`",577,null],[11,"addref","","",578,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",578,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMozWakeLockListener` to one of its base interfaces.",578,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",578,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`text /** * The callback will be called when a lock topic changes its lock * state. * * Possible states are: * * - \"unlocked\" - nobody holds the wake lock. * * - \"locked-foreground\" - at least one window holds the wake lock, * and it is visible. * * - \"locked-background\" - at least one window holds the wake lock, * but all of them are hidden. * * @param aTopic The resource name related to the wake lock. * @param aState The wake lock state */`",578,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",579,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",579,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationChannelDescription` to one of its base interfaces.",579,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",579,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_TCP","","",579,null],[18,"TYPE_DATACHANNEL","","",579,null],[11,"GetType","","`readonly attribute uint8_t type;`",579,null],[11,"GetTcpAddress","","`readonly attribute nsIArray tcpAddress;`",579,null],[11,"GetTcpPort","","`readonly attribute uint16_t tcpPort;`",579,null],[11,"GetDataChannelSDP","","`readonly attribute DOMString dataChannelSDP;`",579,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",580,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",580,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationControlChannelListener` to one of its base interfaces.",580,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",580,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnOffer","","`void onOffer (in nsIPresentationChannelDescription offer);`",580,null],[11,"OnAnswer","","`void onAnswer (in nsIPresentationChannelDescription answer);`",580,null],[11,"OnIceCandidate","","`void onIceCandidate (in DOMString candidate);`",580,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NotifyConnected","","`void notifyConnected ();`",580,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyDisconnected","","`void notifyDisconnected (in nsresult reason);`",580,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"NotifyReconnected","","`void notifyReconnected ();`",580,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",581,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",581,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationControlChannel` to one of its base interfaces.",581,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",581,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetListener","","`attribute nsIPresentationControlChannelListener listener;`",581,null],[11,"SetListener","","`attribute nsIPresentationControlChannelListener listener;`",581,null],[11,"SendOffer","","`void sendOffer (in nsIPresentationChannelDescription offer);`",581,null],[11,"SendAnswer","","`void sendAnswer (in nsIPresentationChannelDescription answer);`",581,null],[11,"SendIceCandidate","","`void sendIceCandidate (in DOMString candidate);`",581,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Launch","","`void launch (in DOMString presentationId, in DOMString url);`",581,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Terminate","","`void terminate (in DOMString presentationId);`",581,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Disconnect","","`void disconnect (in nsresult reason);`",581,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"Reconnect","","`void reconnect (in DOMString presentationId, in DOMString url);`",581,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",582,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",582,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentAddress` to one of its base interfaces.",582,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",582,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCountry","","`readonly attribute AString country;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAddressLine","","`readonly attribute nsIArray addressLine;`",582,null],[11,"GetRegion","","`readonly attribute AString region;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCity","","`readonly attribute AString city;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDependentLocality","","`readonly attribute AString dependentLocality;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPostalCode","","`readonly attribute AString postalCode;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSortingCode","","`readonly attribute AString sortingCode;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLanguageCode","","`readonly attribute AString languageCode;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOrganization","","`readonly attribute AString organization;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRecipient","","`readonly attribute AString recipient;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPhone","","`readonly attribute AString phone;`",582,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Init","","`void init (in AString aCountry, in nsIArray aAddressLine, in AString aRegion, in AString aCity, in AString aDependentLocality, in AString aPostalCode, in AString aSortingCode, in AString aLanguageCode, in AString aOrganization, in AString aRecipient, in AString aPhone);`",582,null],[11,"addref","","",583,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",583,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIObjectInputStream` to one of its base interfaces.",583,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",583,{"inputs":[{"name":"self"}],"output":{"name":"nsibinaryinputstream"}}],[11,"ReadObject","","`text /** * Read an object from this stream to satisfy a strong or weak reference * to one of its interfaces. If the interface was not along the primary * inheritance chain ending in the \"root\" or XPCOM-identity nsISupports, * readObject will QueryInterface from the deserialized object root to the * correct interface, which was specified when the object was serialized. * * @see nsIObjectOutputStream */`",583,null],[11,"ReadID","","`[notxpcom] nsresult readID (out nsID aID);`",583,null],[11,"GetBuffer","","`text /** * Optimized deserialization support -- see nsIStreamBufferAccess.idl. */`",583,null],[11,"PutBuffer","","`[notxpcom] void putBuffer (in charPtr aBuffer, in uint32_t aLength);`",583,null],[11,"addref","","",584,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",584,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFContainer` to one of its base interfaces.",584,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",584,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDataSource","","`readonly attribute nsIRDFDataSource DataSource;`",584,null],[11,"GetResource","","`readonly attribute nsIRDFResource Resource;`",584,null],[11,"Init","","`text /** * Initialize the container wrapper to the specified resource * using the specified datasource for context. */`",584,null],[11,"GetCount","","`text /** * Return the number of elements in the container. Note that this * may not always be accurate due to aggregation. */`",584,null],[11,"GetElements","","`text /** * Return an enumerator that can be used to enumerate the contents * of the container in ascending order. */`",584,null],[11,"AppendElement","","`text /** * Append an element to the container, assigning it the next * available ordinal. */`",584,null],[11,"RemoveElement","","`text /** * Remove the first occurence of the specified element from the * container. If aRenumber is 'true', then the underlying RDF graph * will be 're-numbered' to account for the removal. */`",584,null],[11,"InsertElementAt","","`text /** * Insert aElement at the specified index. If aRenumber is 'true', then * the underlying RDF graph will be 're-numbered' to accomodate the new * element. */`",584,null],[11,"RemoveElementAt","","`text /** * Remove the element at the specified index. If aRenumber is 'true', then * the underlying RDF graph will be 're-numbered' to account for the * removal. * * @return the element that was removed. */`",584,null],[11,"IndexOf","","`text /** * Determine the index of an element in the container. * * @return The index of the specified element in the container. If * the element is not contained in the container, this function * returns '-1'. */`",584,null],[11,"addref","","",585,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",585,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inIDeepTreeWalker` to one of its base interfaces.",585,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",585,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetShowAnonymousContent","","`attribute boolean showAnonymousContent;`",585,null],[11,"SetShowAnonymousContent","","`attribute boolean showAnonymousContent;`",585,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowSubDocuments","","`attribute boolean showSubDocuments;`",585,null],[11,"SetShowSubDocuments","","`attribute boolean showSubDocuments;`",585,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowDocumentsAsNodes","","`attribute boolean showDocumentsAsNodes;`",585,null],[11,"SetShowDocumentsAsNodes","","`attribute boolean showDocumentsAsNodes;`",585,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Init","","`void init (in nsIDOMNode aRoot, in unsigned long aWhatToShow);`",585,null],[11,"GetRoot","","`readonly attribute nsIDOMNode root;`",585,null],[11,"GetWhatToShow","","`readonly attribute unsigned long whatToShow;`",585,null],[11,"GetFilter","","`readonly attribute nsIDOMNodeFilter filter;`",585,null],[11,"GetCurrentNode","","`attribute nsIDOMNode currentNode;`",585,null],[11,"SetCurrentNode","","`attribute nsIDOMNode currentNode;`",585,null],[11,"ParentNode","","`nsIDOMNode parentNode ();`",585,null],[11,"FirstChild","","`nsIDOMNode firstChild ();`",585,null],[11,"LastChild","","`nsIDOMNode lastChild ();`",585,null],[11,"PreviousSibling","","`nsIDOMNode previousSibling ();`",585,null],[11,"NextSibling","","`nsIDOMNode nextSibling ();`",585,null],[11,"PreviousNode","","`nsIDOMNode previousNode ();`",585,null],[11,"NextNode","","`nsIDOMNode nextNode ();`",585,null],[11,"addref","","",586,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",586,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIResProtocolHandler` to one of its base interfaces.",586,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",586,{"inputs":[{"name":"self"}],"output":{"name":"nsisubstitutingprotocolhandler"}}],[11,"AllowContentToAccess","","`boolean allowContentToAccess (in nsIURI url);`",586,null],[11,"addref","","",587,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",587,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransportSecurityInfo` to one of its base interfaces.",587,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",587,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSecurityState","","`readonly attribute unsigned long securityState;`",587,null],[11,"GetErrorMessage","","`readonly attribute wstring errorMessage;`",587,null],[11,"GetErrorCode","","`[infallible] readonly attribute long errorCode;`",587,{"inputs":[{"name":"self"}],"output":{"name":"int32_t"}}],[11,"GetFailedCertChain","","`text /** * If certificate verification failed, this will be the peer certificate * chain provided in the handshake, so it can be used for error reporting. * If verification succeeded, this will be null. */`",587,null],[11,"addref","","",588,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",588,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboardHelper` to one of its base interfaces.",588,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",588,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CopyStringToClipboard","","`text /** * copy string to given clipboard * * @param aString, the string to copy to the clipboard * @param aClipboardID, the ID of the clipboard to copy to * (eg. kSelectionClipboard -- see nsIClipboard.idl) */`",588,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CopyString","","`text /** * copy string to (default) clipboard * * @param aString, the string to copy to the clipboard */`",588,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",589,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",589,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULCheckboxElement` to one of its base interfaces.",589,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",589,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxullabeledcontrolelement"}}],[18,"CHECKSTATE_UNCHECKED","","",589,null],[18,"CHECKSTATE_CHECKED","","",589,null],[18,"CHECKSTATE_MIXED","","",589,null],[11,"GetChecked","","`attribute boolean checked;`",589,null],[11,"SetChecked","","`attribute boolean checked;`",589,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCheckState","","`attribute long checkState;`",589,null],[11,"SetCheckState","","`attribute long checkState;`",589,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetAutoCheck","","`attribute boolean autoCheck;`",589,null],[11,"SetAutoCheck","","`attribute boolean autoCheck;`",589,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",590,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",590,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProperties` to one of its base interfaces.",590,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",590,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Get","","`text /** * Gets a property with a given name. * * @throws NS_ERROR_FAILURE if a property with that name doesn't exist. * @throws NS_ERROR_NO_INTERFACE if the found property fails to QI to the * given iid. */`",590,null],[11,"Set","","`text /** * Sets a property with a given name to a given value. */`",590,null],[11,"Has","","`text /** * Returns true if the property with the given name exists. */`",590,null],[11,"Undefine","","`text /** * Undefines a property. * @throws NS_ERROR_FAILURE if a property with that name doesn't * already exist. */`",590,null],[11,"GetKeys","","`text /** * Returns an array of the keys. */`",590,null],[11,"addref","","",591,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",591,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTable` to one of its base interfaces.",591,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",591,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCaption","","`text /** * Return the caption accessible for the table. For example, html:caption * element of html:table element. */`",591,null],[11,"GetSummary","","`text /** * Return summary description for the table. For example, @summary attribute * on html:table element. */`",591,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetColumnCount","","`text /** * Return columns count in the table. */`",591,null],[11,"GetRowCount","","`text /** * Return rows count in the table. */`",591,null],[11,"GetCellAt","","`text /** * Return the accessible object at the specified row and column in the table. * If both row and column index are valid then the corresponding accessible * object is returned that represents the requested cell regardless of whether * the cell is currently visible (on the screen). * * @param rowIndex [in] the row index to retrieve the cell at * @param columnIndex [in] the column index to retrieve the cell at */`",591,null],[11,"GetCellIndexAt","","`text /** * Translate the given row and column indices into the corresponding cell * index. * * @param rowIndex [in] the row index to return cell index at * @param columnIndex [in] the column index to return cell index at */`",591,null],[11,"GetColumnIndexAt","","`text /** * Translate the given cell index into the corresponding column index. * * @param cellIndex [in] index of the table cell to return column index for */`",591,null],[11,"GetRowIndexAt","","`text /** * Translate the given cell index into the corresponding row index. * * @param cellIndex [in] index of the table cell to return row index for */`",591,null],[11,"GetRowAndColumnIndicesAt","","`text /** * Translate the given cell index into the corresponding row and column * indices. * * @param cellIndex [in] cell index to return row and column indices for * @param rowIndex [out] row index at the given cell index * @param columnIndex [out] column index at the given cell index */`",591,null],[11,"GetColumnExtentAt","","`text /** * Return the number of columns occupied by the accessible cell at * the specified row and column in the table. The result differs from 1 if * the specified cell spans multiple columns. * * @param row [in] row index of the cell to return the column extent for * @param column [in] column index of the cell to return the column extent * for */`",591,null],[11,"GetRowExtentAt","","`text /** * Return the number of rows occupied by the accessible cell at the specified * row and column in the table. The result differs from 1 if the specified * cell spans multiple rows. * * @param row [in] row index of the cell to return the column extent for * @param column [in] column index of the cell to return the column extent * for */`",591,null],[11,"GetColumnDescription","","`text /** * Return the description text of the specified column in the table. * * @param columnIndex [in] the column index to retrieve description for */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRowDescription","","`text /** * Return the description text of the specified row in the table. * * @param rowIndex [in] the row index to retrieve description for */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IsColumnSelected","","`text /** * Return a boolean value indicating whether the specified column is * selected, i.e. all cells within the column are selected. * * @param columnIndex [in] the column index to determine if it's selected */`",591,null],[11,"IsRowSelected","","`text /** * Return a boolean value indicating whether the specified row is selected, * i.e. all cells within the row are selected. * * @param rowIndex [in] the row index to determine whether it's selected */`",591,null],[11,"IsCellSelected","","`text /** * Return a boolean value indicating whether the specified cell is selected. * * @param rowIndex [in] the row index of the cell * @param columnIndex [in] the column index of the cell */`",591,null],[11,"GetSelectedCellCount","","`text /** * Return the total number of selected cells. */`",591,null],[11,"GetSelectedColumnCount","","`text /** * Return the total number of selected columns. */`",591,null],[11,"GetSelectedRowCount","","`text /** * Return the total number of selected rows. */`",591,null],[11,"GetSelectedCells","","`text /** * Return an array of selected cells. */`",591,null],[11,"GetSelectedCellIndices","","`text /** * Return an array of cell indices currently selected. * * @param cellsArraySize [in] length of array * @param cellsArray [in] array of indexes of selected cells */`",591,null],[11,"GetSelectedColumnIndices","","`text /** * Return an array of column indices currently selected. * * @param columnsArraySize [in] length of array * @param columnsArray [in] array of indices of selected columns */`",591,null],[11,"GetSelectedRowIndices","","`text /** * Return an array of row indices currently selected. * * @param rowsArraySize [in] Length of array * @param rowsArray [in] array of indices of selected rows */`",591,null],[11,"SelectRow","","`text /** * Select a row and unselects all previously selected rows. * * @param rowIndex [in] the row index to select */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SelectColumn","","`text /** * Select a column and unselects all previously selected columns. * * @param columnIndex [in] the column index to select */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"UnselectRow","","`text /** * Unselect the given row, leaving other selected rows selected (if any). * * @param rowIndex [in] the row index to select */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"UnselectColumn","","`text /** * Unselect the given column, leaving other selected columns selected (if any). * * @param columnIndex [in] the column index to select */`",591,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"IsProbablyForLayout","","`text /** * Use heuristics to determine if table is most likely used for layout. */`",591,null],[11,"addref","","",592,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",592,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTableCell` to one of its base interfaces.",592,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",592,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTable","","`text /** * Return host table accessible. */`",592,null],[11,"GetColumnIndex","","`text /** * Return column index of this cell. */`",592,null],[11,"GetRowIndex","","`text /** * Return row index of this cell. */`",592,null],[11,"GetColumnExtent","","`text /** * Return the number of columns occupied by this cell. The result differs * from 1 if the specified cell spans multiple columns. */`",592,null],[11,"GetRowExtent","","`text /** * Return the number of rows occupied by this accessible cell. The result * differs from 1 if the specified cell spans multiple rows. */`",592,null],[11,"GetColumnHeaderCells","","`text /** * Return an array of column header cells for this cell. */`",592,null],[11,"GetRowHeaderCells","","`text /** * Return an array of row header cells for this cell. */`",592,null],[11,"IsSelected","","`text /** * Return a boolean value indicating whether this cell is selected. */`",592,null],[11,"addref","","",593,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",593,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSKeyframeRule` to one of its base interfaces.",593,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",593,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetKeyText","","`attribute DOMString keyText;`",593,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetKeyText","","`attribute DOMString keyText;`",593,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStyle","","`readonly attribute nsIDOMCSSStyleDeclaration style;`",593,null],[11,"addref","","",594,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",594,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolProxyCallback` to one of its base interfaces.",594,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",594,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnProxyAvailable","","`text /** * This method is called when proxy info is available or when an error * in the proxy resolution occurs. * * @param aRequest * The value returned from asyncResolve. * @param aChannel * The channel passed to asyncResolve. * @param aProxyInfo * The resulting proxy info or null if there is no associated proxy * info for aURI. As with the result of nsIProtocolProxyService's * resolve method, a null result implies that a direct connection * should be used. * @param aStatus * The status of the callback. This is a failure code if the request * could not be satisfied, in which case the value of aStatus * indicates the reason for the failure and aProxyInfo will be null. */`",594,null],[11,"addref","","",595,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",595,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequestObserverProxy` to one of its base interfaces.",595,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",595,{"inputs":[{"name":"self"}],"output":{"name":"nsirequestobserver"}}],[11,"Init","","`text /** * Initializes an nsIRequestObserverProxy. * * @param observer - receives observer notifications on the main thread * @param context - the context argument that will be passed to OnStopRequest * and OnStartRequest. This has to be stored permanently on * initialization because it sometimes can't be * AddRef/Release'd off-main-thread. */`",595,null],[11,"addref","","",596,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",596,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloader` to one of its base interfaces.",596,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",596,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Initialize this downloader * * @param observer * the observer to be notified when the download completes. * @param downloadLocation * the location where the stream contents should be written. * if null, the downloader will select a location and the * resulting file will be deleted (or otherwise made invalid) * when the downloader object is destroyed. if an explicit * download location is specified then the resulting file will * not be deleted, and it will be the callers responsibility * to keep track of the file, etc. */`",596,null],[11,"addref","","",597,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",597,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadObserver` to one of its base interfaces.",597,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",597,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDownloadComplete","","`text /** * Called to signal a download that has completed. */`",597,null],[11,"addref","","",598,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",598,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMIMEHeaderParam` to one of its base interfaces.",598,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",598,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetParameter","","`text /** * Given the value of a single header field (such as * Content-Disposition and Content-Type) and the name of a parameter * (e.g. filename, name, charset), returns the value of the parameter. * The value is obtained by decoding RFC 2231/5987-style encoding, * RFC 2047-style encoding, and converting to UniChar(UTF-16) * from charset specified in RFC 2231/2047 encoding, UTF-8, * <code>aFallbackCharset</code>, the locale charset as fallback if * <code>TryLocaleCharset</code> is set, and null-padding as last resort * if all else fails. * * <p> * This method internally invokes <code>getParameterInternal</code>, * However, it does not stop at decoding RFC 2231 (the task for * <code>getParameterInternal</code> but tries to cope * with several non-standard-compliant cases mentioned below. * * <p> * Note that a lot of MUAs put RFC 2047-encoded parameters. Unfortunately, * this includes Mozilla as of 2003-05-30. Even more standard-ignorant MUAs, * web servers and application servers put 'raw 8bit characters'. This will * try to cope with all these cases as gracefully as possible. Additionally, * it returns the language tag if the parameter is encoded per RFC 2231 and * includes lang. * * <p> * Note that GetParameterHTTP skips some of the workarounds used for * mail (MIME) header fields, and thus SHOULD be used from non-mail * code. * * * @param aHeaderVal a header string to get the value of a parameter * from. * @param aParamName the name of a MIME header parameter (e.g. * filename, name, charset). If empty, returns * the first (possibly) _unnamed_ 'parameter'. * @param aFallbackCharset fallback charset to try if the string after * RFC 2231/2047 decoding or the raw 8bit * string is not UTF-8 * @param aTryLocaleCharset If set, makes yet another attempt * with the locale charset. * @param aLang If non-null, assigns it to a pointer * to a string containing the value of language * obtained from RFC 2231 parsing. Caller has to * free it. * @return the value of <code>aParamName</code> in Unichar(UTF-16). */`",598,null],[11,"GetParameterHTTP","","`text /** * Like getParameter, but disabling encodings and workarounds specific to * MIME (as opposed to HTTP). */`",598,null],[11,"DecodeRFC5987Param","","`text /** * Given the value of a header field parameter using the encoding * defined in RFC 5987, decode the value into a Unicode string, and extract * the optional language parameter. * * <p> * This function is purposefully picky; it will abort for all (most?) * invalid inputs. This is by design. In particular, it does not support * any character encodings other than UTF-8, in order not to promote * non-interoperable usage. * * <p> * Code that parses HTTP header fields (as opposed to MIME header fields) * should use this function. * * @param aParamVal a header field parameter to decode. * @param aLang will be set to the language part (possibly * empty). * @return the decoded parameter value. */`",598,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParameterInternal","","`text /** * Given the value of a single header field (such as * Content-Disposition and Content-Type) and the name of a parameter * (e.g. filename, name, charset), returns the value of the parameter * after decoding RFC 2231-style encoding. * <p> * For <strong>internal use only</strong>. The only other place where * this needs to be invoked is |MimeHeaders_get_parameter| in * mailnews/mime/src/mimehdrs.cpp defined as * char * MimeHeaders_get_parameter (const char *header_value, * const char *parm_name, * char **charset, char **language) * * Otherwise, this method would have been made static. * * @param aHeaderVal a header string to get the value of a parameter from. * @param aParamName the name of a MIME header parameter (e.g. * filename, name, charset). If empty, returns * the first (possibly) _unnamed_ 'parameter'. * @param aCharset If non-null, it gets assigned a new pointer * to a string containing the value of charset obtained * from RFC 2231 parsing. Caller has to free it. * @param aLang If non-null, it gets assigned a new pointer * to a string containing the value of language obtained * from RFC 2231 parsing. Caller has to free it. * @return the value of <code>aParamName</code> after * RFC 2231 decoding but without charset conversion. */`",598,null],[11,"DecodeRFC2047Header","","`text /** * Given a header value, decodes RFC 2047-style encoding and * returns the decoded header value in UTF-8 if either it's * RFC-2047-encoded or aDefaultCharset is given. Otherwise, * returns the input header value (in whatever encoding) * as it is except that RFC 822 (using backslash) quotation and * CRLF (if aEatContinuation is set) are stripped away * <p> * For internal use only. The only other place where this needs to be * invoked is <code>MIME_DecodeMimeHeader</code> in * mailnews/mime/src/mimehdrs.cpp defined as * char * Mime_DecodeMimeHeader(char *header_val, const char *charset, * bool override, bool eatcontinuation) * * @param aHeaderVal a header value to decode * @param aDefaultCharset MIME charset to use in place of MIME charset * specified in RFC 2047 style encoding * when <code>aOverrideCharset</code> is set. * @param aOverrideCharset When set, overrides MIME charset specified * in RFC 2047 style encoding with <code>aDefaultCharset</code> * @param aEatContinuation When set, removes CR/LF * @return decoded header value */`",598,null],[11,"DecodeParameter","","`text /** * Given a header parameter, decodes RFC 2047 style encoding (if it's * not obtained from RFC 2231 encoding), converts it to * UTF-8 and returns the result in UTF-8 if an attempt to extract * charset info. from a few different sources succeeds. * Otherwise, returns the input header value (in whatever encoding) * as it is except that RFC 822 (using backslash) quotation is * stripped off. * <p> * For internal use only. The only other place where this needs to be * invoked is <code>mime_decode_filename</code> in * mailnews/mime/src/mimehdrs.cpp defined as * char * mime_decode_filename(char *name, const char *charset, * MimeDisplayOptions *opt) * * @param aParamValue the value of a parameter to decode and convert * @param aCharset charset obtained from RFC 2231 decoding in which * <code>aParamValue</code> is encoded. If null, * indicates that it needs to try RFC 2047, instead. * @param aDefaultCharset MIME charset to use when aCharset is null and * cannot be obtained per RFC 2047 (most likely * because 'bare' string is used.) Besides, it * overrides aCharset/MIME charset obtained from * RFC 2047 if <code>aOverrideCharset</code> is set. * @param aOverrideCharset When set, overrides MIME charset specified * in RFC 2047 style encoding with * <code>aDefaultCharset</code> * @return decoded parameter */`",598,null],[11,"addref","","",599,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",599,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICaptivePortalCallback` to one of its base interfaces.",599,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",599,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Prepare","","`text /** * Preparation for network interface before captive portal detection started. */`",599,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Complete","","`text /** * Invoke callbacks after captive portal detection finished. */`",599,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",600,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",600,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICaptivePortalDetector` to one of its base interfaces.",600,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",600,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CheckCaptivePortal","","`text /** * Perform captive portal detection on specific network interface. * @param ifname The name of network interface, exception will be thrwon * if the same interface has unfinished request. * @param callback Callbacks when detection procedure starts and finishes. */`",600,null],[11,"Abort","","`text /** * Abort captive portal detection for specific network interface * due to system failure, callback will not be invoked. * @param ifname The name of network interface. */`",600,null],[11,"CancelLogin","","`text /** * Cancel captive portal login procedure by user, callback will be invoked. * @param eventId Login event id provided in |captive-portal-login| event. */`",600,null],[11,"FinishPreparation","","`text /** * Notify prepare phase is finished, routing and dns must be ready for sending * out XMLHttpRequest. this is callback for CaptivePortalDetector API user. * @param ifname The name of network interface, must be unique. */`",600,null],[11,"addref","","",601,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",601,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `IJSDebugger` to one of its base interfaces.",601,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",601,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",602,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",602,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISearchSubmission` to one of its base interfaces.",602,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",602,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPostData","","`text /** * The POST data associated with a search submission, wrapped in a MIME * input stream. May be null. */`",602,null],[11,"GetUri","","`text /** * The URI to submit a search to. */`",602,null],[11,"addref","","",603,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",603,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISearchEngine` to one of its base interfaces.",603,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",603,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSubmission","","`text /** * Gets a nsISearchSubmission object that contains information about what to * send to the search engine, including the URI and postData, if applicable. * * @param data * Data to add to the submission object. * i.e. the search terms. * * @param responseType [optional] * The MIME type that we'd like to receive in response * to this submission. If null, will default to \"text/html\". * * @param purpose [optional] * A string meant to indicate the context of the search request. This * allows the search service to provide a different nsISearchSubmission * depending on e.g. where the search is triggered in the UI. * * @returns A nsISearchSubmission object that contains information about what * to send to the search engine. If no submission can be * obtained for the given responseType, returns null. */`",603,null],[11,"AddParam","","`text /** * Adds a parameter to the search engine's submission data. This should only * be called on engines created via addEngineWithDetails. * * @param name * The parameter's name. Must not be null. * * @param value * The value to pass. If value is \"{searchTerms}\", it will be * substituted with the user-entered data when retrieving the * submission. Must not be null. * * @param responseType * Since an engine can have several different request URLs, * differentiated by response types, this parameter selects * a request to add parameters to. If null, will default * to \"text/html\" * * @throws NS_ERROR_FAILURE if the search engine is read-only. * @throws NS_ERROR_INVALID_ARG if name or value are null. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SupportsResponseType","","`text /** * Determines whether the engine can return responses in the given * MIME type. Returns true if the engine spec has a URL with the * given responseType, false otherwise. * * @param responseType * The MIME type to check for */`",603,null],[11,"GetIconURLBySize","","`text /** * Returns a string with the URL to an engine's icon matching both width and * height. Returns null if icon with specified dimensions is not found. * * @param width * Width of the requested icon. * @param height * Height of the requested icon. */`",603,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAlias","","`text /** * An optional shortcut alias for the engine. * When non-null, this is a unique identifier. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAlias","","`text /** * An optional shortcut alias for the engine. * When non-null, this is a unique identifier. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDescription","","`text /** * A text description describing the engine. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHidden","","`text /** * Whether the engine should be hidden from the user. */`",603,null],[11,"SetHidden","","`text /** * Whether the engine should be hidden from the user. */`",603,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIconURI","","`text /** * A nsIURI corresponding to the engine's icon, stored locally. May be null. */`",603,null],[11,"GetName","","`text /** * The display name of the search engine. This is a unique identifier. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSearchForm","","`text /** * A URL string pointing to the engine's search form. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIdentifier","","`text /** * An optional unique identifier for this search engine within the context of * the distribution, as provided by the distributing entity. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetResultDomain","","`text /** * Gets a string representing the hostname from which search results for a * given responseType are returned, minus the leading \"www.\" (if present). * This can be specified as an url attribute in the engine description file, * but will default to host from the <Url>'s template otherwise. * * @param responseType [optional] * The MIME type to get resultDomain for. Defaults to \"text/html\". * * @return the resultDomain for the given responseType. */`",603,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",604,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",604,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISearchParseSubmissionResult` to one of its base interfaces.",604,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",604,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEngine","","`text /** * The search engine associated with the URL passed in to * nsISearchEngine::parseSubmissionURL, or null if the URL does not represent * a search submission. */`",604,null],[11,"GetTerms","","`text /** * String containing the sought terms. This can be an empty string in case no * terms were specified or the URL does not represent a search submission. */`",604,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTermsOffset","","`text /** * The offset of the string |terms| in the URL passed in to * nsISearchEngine::parseSubmissionURL, or -1 if the URL does not represent * a search submission. */`",604,null],[11,"GetTermsLength","","`text /** * The length of the |terms| in the original encoding of the URL passed in to * nsISearchEngine::parseSubmissionURL. If the search term in the original * URL is encoded then this will be bigger than |terms.length|. */`",604,null],[11,"addref","","",605,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",605,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISearchInstallCallback` to one of its base interfaces.",605,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",605,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ERROR_UNKNOWN_FAILURE","","",605,null],[18,"ERROR_DUPLICATE_ENGINE","","",605,null],[11,"OnSuccess","","`text /** * Called to indicate that the engine addition process succeeded. * * @param engine * The nsISearchEngine object that was added (will not be null). */`",605,null],[11,"OnError","","`text /** * Called to indicate that the engine addition process failed. * * @param errorCode * One of the ERROR_* values described above indicating the cause of * the failure. */`",605,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",606,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",606,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserSearchInitObserver` to one of its base interfaces.",606,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",606,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnInitComplete","","`text /** * Called once initialization of the browser search service is complete. * * @param aStatus The status of that service. */`",606,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",607,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",607,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserSearchService` to one of its base interfaces.",607,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",607,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Start asynchronous initialization. * * The callback is triggered once initialization is complete, which may be * immediately, if initialization has already been completed by some previous * call to this method. The callback is always invoked asynchronously. * * @param aObserver An optional object observing the end of initialization. */`",607,null],[11,"GetIsInitialized","","`text /** * Determine whether initialization has been completed. * * Clients of the service can use this attribute to quickly determine whether * initialization is complete, and decide to trigger some immediate treatment, * to launch asynchronous initialization or to bailout. * * Note that this attribute does not indicate that initialization has succeeded. * * @return |true| if the search service is now initialized, |false| if * initialization has not been triggered yet. */`",607,null],[11,"ResetToOriginalDefaultEngine","","`text /** * Resets the default engine to its original value. */`",607,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddEngine","","`text /** * Adds a new search engine from the file at the supplied URI, optionally * asking the user for confirmation first. If a confirmation dialog is * shown, it will offer the option to begin using the newly added engine * right away. * * @param engineURL * The URL to the search engine's description file. * * @param dataType * Obsolete, the value is ignored. * * @param iconURL * A URL string to an icon file to be used as the search engine's * icon. This value may be overridden by an icon specified in the * engine description file. * * @param confirm * A boolean value indicating whether the user should be asked for * confirmation before this engine is added to the list. If this * value is false, the engine will be added to the list upon successful * load, but it will not be selected as the current engine. * * @param callback * A nsISearchInstallCallback that will be notified when the * addition is complete, or if the addition fails. It will not be * called if addEngine throws an exception. * * @param extensionID [optional] * Optional: The correct extensionID if called by an add-on. * * @throws NS_ERROR_FAILURE if the description file cannot be successfully * loaded. */`",607,null],[11,"RestoreDefaultEngines","","`text /** * Un-hides all engines in the set of engines returned by getDefaultEngines. */`",607,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEngineByAlias","","`text /** * Returns an engine with the specified alias. * * @param alias * The search engine's alias. * @returns The corresponding nsISearchEngine object, or null if it doesn't * exist. */`",607,null],[11,"GetEngineByName","","`text /** * Returns an engine with the specified name. * * @param aEngineName * The name of the engine. * @returns The corresponding nsISearchEngine object, or null if it doesn't * exist. */`",607,null],[11,"GetEngines","","`text /** * Returns an array of all installed search engines. * * @returns an array of nsISearchEngine objects. */`",607,null],[11,"GetVisibleEngines","","`text /** * Returns an array of all installed search engines whose hidden attribute is * false. * * @returns an array of nsISearchEngine objects. */`",607,null],[11,"GetDefaultEngines","","`text /** * Returns an array of all default search engines. This includes all loaded * engines that aren't in the user's profile directory * (NS_APP_USER_SEARCH_DIR). * * @returns an array of nsISearchEngine objects. */`",607,null],[11,"GetEnginesByExtensionID","","`text /** * Returns an array of search engines installed by a given extension. * * @returns an array of nsISearchEngine objects. */`",607,null],[11,"MoveEngine","","`text /** * Moves a visible search engine. * * @param engine * The engine to move. * @param newIndex * The engine's new index in the set of visible engines. * * @throws NS_ERROR_FAILURE if newIndex is out of bounds, or if engine is * hidden. */`",607,null],[11,"RemoveEngine","","`text /** * Removes the search engine. If the search engine is installed in a global * location, this will just hide the engine. If the engine is in the user's * profile directory, it will be removed from disk. * * @param engine * The engine to remove. */`",607,null],[11,"GetOriginalDefaultEngine","","`text /** * The original Engine object that is the default for this region, * ignoring changes the user may have subsequently made. */`",607,null],[11,"GetDefaultEngine","","`text /** * Alias for the currentEngine attribute, kept for add-on compatibility. */`",607,null],[11,"SetDefaultEngine","","`text /** * Alias for the currentEngine attribute, kept for add-on compatibility. */`",607,null],[11,"GetCurrentEngine","","`text /** * The currently active search engine. * Unless the application doesn't ship any search plugin, this should never * be null. If the currently active engine is removed, this attribute will * fallback first to the original default engine if it's not hidden, then to * the first visible engine, and as a last resort it will unhide the original * default engine. */`",607,null],[11,"SetCurrentEngine","","`text /** * The currently active search engine. * Unless the application doesn't ship any search plugin, this should never * be null. If the currently active engine is removed, this attribute will * fallback first to the original default engine if it's not hidden, then to * the first visible engine, and as a last resort it will unhide the original * default engine. */`",607,null],[11,"ParseSubmissionURL","","`text /** * Determines if the provided URL represents results from a search engine, and * provides details about the match. * * The lookup mechanism checks whether the domain name and path of the * provided HTTP or HTTPS URL matches one of the known values for the visible * search engines. The match does not depend on which of the schemes is used. * The expected URI parameter for the search terms must exist in the query * string, but other parameters are ignored. * * @param url * String containing the URL to parse, for example * \"https://www.google.com/search?q=terms\". */`",607,null],[11,"addref","","",608,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",608,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDOMConstructor` to one of its base interfaces.",608,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",608,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ToString","","`AString toString ();`",608,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",609,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",609,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageBindingParamsArray` to one of its base interfaces.",609,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",609,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NewBindingParams","","`text /** * Creates a new mozIStorageBindingParams object that can be added to this * array. * * @return a mozIStorageBindingParams object that can be used to specify * parameters that need to be bound. */`",609,null],[11,"AddParams","","`text /** * Adds the parameters to the end of this array. * * @param aParameters * The parameters to add to this array. */`",609,null],[11,"GetLength","","`text /** * The number of mozIStorageBindingParams this object contains. */`",609,null],[11,"addref","","",610,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",610,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITCPDeviceInfo` to one of its base interfaces.",610,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",610,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`readonly attribute AUTF8String id;`",610,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAddress","","`readonly attribute AUTF8String address;`",610,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`readonly attribute uint16_t port;`",610,null],[11,"GetCertFingerprint","","`readonly attribute AUTF8String certFingerprint;`",610,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",611,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",611,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationControlServerListener` to one of its base interfaces.",611,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",611,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnServerReady","","`text /** * Callback while the server is ready or restarted. * @param aPort * The port of the server socket. * @param aCertFingerprint * The SHA-256 fingerprint of TLS server certificate. * Empty string represents server started without encryption. */`",611,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnServerStopped","","`text /** * Callback while the server is stopped or fails to start. * @param aResult * The error cause of server stopped or the reason of * start failure. * NS_OK means the server is stopped by close. */`",611,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"OnSessionRequest","","`text /** * Callback while the remote host is requesting to start a presentation session. * @param aDeviceInfo The device information related to the remote host. * @param aUrl The URL requested to open by remote device. * @param aPresentationId The Id for representing this session. * @param aControlChannel The control channel for this session. */`",611,null],[11,"OnTerminateRequest","","`text /** * Callback while the remote host is requesting to terminate a presentation session. * @param aDeviceInfo The device information related to the remote host. * @param aPresentationId The Id for representing this session. * @param aControlChannel The control channel for this session. * @param aIsFromReceiver true if termination is initiated by receiver. */`",611,null],[11,"OnReconnectRequest","","`text /** * Callback while the remote host is requesting to reconnect a presentation session. * @param aDeviceInfo The device information related to the remote host. * @param aUrl The URL requested to open by remote device. * @param aPresentationId The Id for representing this session. * @param aControlChannel The control channel for this session. */`",611,null],[11,"addref","","",612,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",612,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationControlService` to one of its base interfaces.",612,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",612,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartServer","","`text /** * This method initializes server socket. Caller should set listener and * monitor onServerReady event to get the correct server info. * @param aEncrypted * True for using TLS control channel. * @param aPort * The port of the server socket. Pass 0 or opt-out to indicate no * preference, and a port will be selected automatically. * @throws NS_ERROR_FAILURE if the server socket has been inited or the * server socket can not be inited. */`",612,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"Connect","","`text /** * Request connection to designated remote presentation control receiver. * @param aDeviceInfo * The remtoe device info for establish connection. * @returns The control channel for this session. * @throws NS_ERROR_FAILURE if the Id hasn't been inited. */`",612,null],[11,"IsCompatibleServer","","`text /** * Check the compatibility to remote presentation control server. * @param aVersion * The version of remote server. */`",612,null],[11,"Close","","`text /** * Close server socket and call |listener.onClose(NS_OK)| */`",612,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * Get the listen port of the TCP socket, valid after the server is ready. * 0 indicates the server socket is not ready or is closed. */`",612,null],[11,"GetVersion","","`text /** * The protocol version implemented by this server. */`",612,null],[11,"GetId","","`text /** * The id of the TCP presentation server. |requestSession| won't * work until the |id| is set. */`",612,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetId","","`text /** * The id of the TCP presentation server. |requestSession| won't * work until the |id| is set. */`",612,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCertFingerprint","","`text /** * The fingerprint of the TLS server certificate. * Empty string indicates the server is not ready or not encrypted. */`",612,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetCertFingerprint","","`text /** * The fingerprint of the TLS server certificate. * Empty string indicates the server is not ready or not encrypted. */`",612,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetListener","","`text /** * The listener for handling events of this presentation control server. * Listener must be provided before invoke |startServer| and |close|. */`",612,null],[11,"SetListener","","`text /** * The listener for handling events of this presentation control server. * Listener must be provided before invoke |startServer| and |close|. */`",612,null],[11,"addref","","",613,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",613,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowProvider` to one of its base interfaces.",613,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",613,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ProvideWindow","","",613,null],[11,"addref","","",614,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",614,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedProcessor` to one of its base interfaces.",614,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",614,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"GetListener","","`text /** * The listener that will respond to feed events. */`",614,null],[11,"SetListener","","`text /** * The listener that will respond to feed events. */`",614,null],[11,"ParseFromStream","","`text /** * Parse a feed from an nsIInputStream. * * @param stream The input stream. * @param uri The base URI. */`",614,null],[11,"ParseFromString","","`text /** * Parse a feed from a string. * * @param str The string to parse. * @param uri The base URI. */`",614,null],[11,"ParseAsync","","`text /** * Parse a feed asynchronously. The caller must then call the * nsIFeedProcessor's nsIStreamListener methods to drive the * parse. Do not call the other parse methods during an asynchronous * parse. * * @param requestObserver The observer to notify on start/stop. This * argument can be null. * @param uri The base URI. */`",614,null],[11,"addref","","",615,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",615,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebProgressListener` to one of its base interfaces.",615,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",615,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_START","","`text /** * State Transition Flags * * These flags indicate the various states that requests may transition * through as they are being loaded. These flags are mutually exclusive. * * For any given request, onStateChange is called once with the STATE_START * flag, zero or more times with the STATE_TRANSFERRING flag or once with the * STATE_REDIRECTING flag, and then finally once with the STATE_STOP flag. * NOTE: For document requests, a second STATE_STOP is generated (see the * description of STATE_IS_WINDOW for more details). * * STATE_START * This flag indicates the start of a request. This flag is set when a * request is initiated. The request is complete when onStateChange is * called for the same request with the STATE_STOP flag set. * * STATE_REDIRECTING * This flag indicates that a request is being redirected. The request * passed to onStateChange is the request that is being redirected. When a * redirect occurs, a new request is generated automatically to process the * new request. Expect a corresponding STATE_START event for the new * request, and a STATE_STOP for the redirected request. * * STATE_TRANSFERRING * This flag indicates that data for a request is being transferred to an * end consumer. This flag indicates that the request has been targeted, * and that the user may start seeing content corresponding to the request. * * STATE_NEGOTIATING * This flag is not used. * * STATE_STOP * This flag indicates the completion of a request. The aStatus parameter * to onStateChange indicates the final status of the request. */`",615,null],[18,"STATE_REDIRECTING","","",615,null],[18,"STATE_TRANSFERRING","","",615,null],[18,"STATE_NEGOTIATING","","",615,null],[18,"STATE_STOP","","",615,null],[18,"STATE_IS_REQUEST","","`text /** * State Type Flags * * These flags further describe the entity for which the state transition is * occuring. These flags are NOT mutually exclusive (i.e., an onStateChange * event may indicate some combination of these flags). * * STATE_IS_REQUEST * This flag indicates that the state transition is for a request, which * includes but is not limited to document requests. (See below for a * description of document requests.) Other types of requests, such as * requests for inline content (e.g., images and stylesheets) are * considered normal requests. * * STATE_IS_DOCUMENT * This flag indicates that the state transition is for a document request. * This flag is set in addition to STATE_IS_REQUEST. A document request * supports the nsIChannel interface and its loadFlags attribute includes * the nsIChannel::LOAD_DOCUMENT_URI flag. * * A document request does not complete until all requests associated with * the loading of its corresponding document have completed. This includes * other document requests (e.g., corresponding to HTML <iframe> elements). * The document corresponding to a document request is available via the * DOMWindow attribute of onStateChange's aWebProgress parameter. * * STATE_IS_NETWORK * This flag indicates that the state transition corresponds to the start * or stop of activity in the indicated nsIWebProgress instance. This flag * is accompanied by either STATE_START or STATE_STOP, and it may be * combined with other State Type Flags. * * Unlike STATE_IS_WINDOW, this flag is only set when activity within the * nsIWebProgress instance being observed starts or stops. If activity * only occurs in a child nsIWebProgress instance, then this flag will be * set to indicate the start and stop of that activity. * * For example, in the case of navigation within a single frame of a HTML * frameset, a nsIWebProgressListener instance attached to the * nsIWebProgress of the frameset window will receive onStateChange calls * with the STATE_IS_NETWORK flag set to indicate the start and stop of * said navigation. In other words, an observer of an outer window can * determine when activity, that may be constrained to a child window or * set of child windows, starts and stops. * * STATE_IS_WINDOW * This flag indicates that the state transition corresponds to the start * or stop of activity in the indicated nsIWebProgress instance. This flag * is accompanied by either STATE_START or STATE_STOP, and it may be * combined with other State Type Flags. * * This flag is similar to STATE_IS_DOCUMENT. However, when a document * request completes, two onStateChange calls with STATE_STOP are * generated. The document request is passed as aRequest to both calls. * The first has STATE_IS_REQUEST and STATE_IS_DOCUMENT set, and the second * has the STATE_IS_WINDOW flag set (and possibly the STATE_IS_NETWORK flag * set as well -- see above for a description of when the STATE_IS_NETWORK * flag may be set). This second STATE_STOP event may be useful as a way * to partition the work that occurs when a document request completes. * * STATE_IS_REDIRECTED_DOCUMENT * Same as STATE_IS_DOCUMENT, but sent only after a redirect has occured. * Introduced in order not to confuse existing code with extra state change * events. See |nsDocLoader::OnStartRequest| for more info. */`",615,null],[18,"STATE_IS_DOCUMENT","","",615,null],[18,"STATE_IS_NETWORK","","",615,null],[18,"STATE_IS_WINDOW","","",615,null],[18,"STATE_IS_REDIRECTED_DOCUMENT","","",615,null],[18,"STATE_RESTORING","","`text /** * State Modifier Flags * * These flags further describe the transition which is occuring. These * flags are NOT mutually exclusive (i.e., an onStateChange event may * indicate some combination of these flags). * * STATE_RESTORING * This flag indicates that the state transition corresponds to the start * or stop of activity for restoring a previously-rendered presentation. * As such, there is no actual network activity associated with this * request, and any modifications made to the document or presentation * when it was originally loaded will still be present. */`",615,null],[18,"STATE_IS_INSECURE","","`text /** * State Security Flags * * These flags describe the security state reported by a call to the * onSecurityChange method. These flags are mutually exclusive. * * STATE_IS_INSECURE * This flag indicates that the data corresponding to the request * was received over an insecure channel. * * STATE_IS_BROKEN * This flag indicates an unknown security state. This may mean that the * request is being loaded as part of a page in which some content was * received over an insecure channel. * * STATE_IS_SECURE * This flag indicates that the data corresponding to the request was * received over a secure channel. The degree of security is expressed by * STATE_SECURE_HIGH, STATE_SECURE_MED, or STATE_SECURE_LOW. */`",615,null],[18,"STATE_IS_BROKEN","","",615,null],[18,"STATE_IS_SECURE","","",615,null],[18,"STATE_BLOCKED_MIXED_ACTIVE_CONTENT","","`text /** * Mixed active content flags * * May be set in addition to the State Security Flags, to indicate that * mixed active content has been encountered. * * STATE_BLOCKED_MIXED_ACTIVE_CONTENT * Mixed active content has been blocked from loading. * * STATE_LOADED_MIXED_ACTIVE_CONTENT * Mixed active content has been loaded. State should be STATE_IS_BROKEN. */`",615,null],[18,"STATE_LOADED_MIXED_ACTIVE_CONTENT","","",615,null],[18,"STATE_BLOCKED_MIXED_DISPLAY_CONTENT","","`text /** * Mixed display content flags * * May be set in addition to the State Security Flags, to indicate that * mixed display content has been encountered. * * STATE_BLOCKED_MIXED_DISPLAY_CONTENT * Mixed display content has been blocked from loading. * * STATE_LOADED_MIXED_DISPLAY_CONTENT * Mixed display content has been loaded. State should be STATE_IS_BROKEN. */`",615,null],[18,"STATE_LOADED_MIXED_DISPLAY_CONTENT","","",615,null],[18,"STATE_BLOCKED_TRACKING_CONTENT","","`text /** * Safe Browsing blocking content flags * * May be set in addition to the State security Flags, to indicate that * tracking or unsafe content has been encountered. * * STATE_BLOCKED_TRACKING_CONTENT * Tracking content has been blocked from loading. * * STATE_LOADED_TRACKING_CONTENT * Tracking content has been loaded. * * STATE_BLOCKED_UNSAFE_CONTENT * Content which againts SafeBrowsing list has been blocked from loading. */`",615,null],[18,"STATE_LOADED_TRACKING_CONTENT","","",615,null],[18,"STATE_BLOCKED_UNSAFE_CONTENT","","",615,null],[18,"STATE_CERT_DISTRUST_IMMINENT","","`text /** * Diagnostic flags * * May be set in addition to other security state flags to indicate that * some state is countered that deserves a warning or error, but does not * change the top level security state of the connection. * * STATE_CERT_DISTRUST_IMMINENT * The certificate in use will be distrusted in the near future. */`",615,null],[18,"STATE_SECURE_HIGH","","`text /** * Security Strength Flags * * These flags describe the security strength and accompany STATE_IS_SECURE * in a call to the onSecurityChange method. These flags are mutually * exclusive. * * These flags are not meant to provide a precise description of data * transfer security. These are instead intended as a rough indicator that * may be used to, for example, color code a security indicator or otherwise * provide basic data transfer security feedback to the user. * * STATE_SECURE_HIGH * This flag indicates a high degree of security. * * STATE_SECURE_MED * This flag indicates a medium degree of security. * * STATE_SECURE_LOW * This flag indicates a low degree of security. */`",615,null],[18,"STATE_SECURE_MED","","",615,null],[18,"STATE_SECURE_LOW","","",615,null],[18,"STATE_IDENTITY_EV_TOPLEVEL","","`text /** * State bits for EV == Extended Validation == High Assurance * * These flags describe the level of identity verification * in a call to the onSecurityChange method. * * STATE_IDENTITY_EV_TOPLEVEL * The topmost document uses an EV cert. * NOTE: Available since Gecko 1.9 */`",615,null],[18,"STATE_USES_SSL_3","","`text /** * Broken state flags * * These flags describe the reason of the broken state. * * STATE_USES_SSL_3 * The topmost document uses SSL 3.0. * * STATE_USES_WEAK_CRYPTO * The topmost document uses a weak cipher suite such as RC4. * * STATE_CERT_USER_OVERRIDDEN * The user has added a security exception for the site. */`",615,null],[18,"STATE_USES_WEAK_CRYPTO","","",615,null],[18,"STATE_CERT_USER_OVERRIDDEN","","",615,null],[18,"LOCATION_CHANGE_SAME_DOCUMENT","","`text /** * Flags for onLocationChange * * LOCATION_CHANGE_SAME_DOCUMENT * This flag is on when |aWebProgress| did not load a new document. * For example, the location change is due to an anchor scroll or a * pushState/popState/replaceState. * * LOCATION_CHANGE_ERROR_PAGE * This flag is on when |aWebProgress| redirected from the requested * contents to an internal page to show error status, such as * <about:neterror>, <about:certerror> and so on. * * Generally speaking, |aURI| and |aRequest| are the original data. DOM * |window.location.href| is also the original location, while * |document.documentURI| is the redirected location. Sometimes |aURI| is * <about:blank> and |aRequest| is null when the original data does not + remain. * * |aWebProgress| does NOT set this flag when it did not try to load a new * document. In this case, it should set LOCATION_CHANGE_SAME_DOCUMENT. */`",615,null],[18,"LOCATION_CHANGE_ERROR_PAGE","","",615,null],[11,"OnStateChange","","`text /** * Notification indicating the state has changed for one of the requests * associated with aWebProgress. * * @param aWebProgress * The nsIWebProgress instance that fired the notification * @param aRequest * The nsIRequest that has changed state. * @param aStateFlags * Flags indicating the new state. This value is a combination of one * of the State Transition Flags and one or more of the State Type * Flags defined above. Any undefined bits are reserved for future * use. * @param aStatus * Error status code associated with the state change. This parameter * should be ignored unless aStateFlags includes the STATE_STOP bit. * The status code indicates success or failure of the request * associated with the state change. NOTE: aStatus may be a success * code even for server generated errors, such as the HTTP 404 error. * In such cases, the request itself should be queried for extended * error information (e.g., for HTTP requests see nsIHttpChannel). */`",615,null],[11,"OnProgressChange","","`text /** * Notification that the progress has changed for one of the requests * associated with aWebProgress. Progress totals are reset to zero when all * requests in aWebProgress complete (corresponding to onStateChange being * called with aStateFlags including the STATE_STOP and STATE_IS_WINDOW * flags). * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRequest * The nsIRequest that has new progress. * @param aCurSelfProgress * The current progress for aRequest. * @param aMaxSelfProgress * The maximum progress for aRequest. * @param aCurTotalProgress * The current progress for all requests associated with aWebProgress. * @param aMaxTotalProgress * The total progress for all requests associated with aWebProgress. * * NOTE: If any progress value is unknown, or if its value would exceed the * maximum value of type long, then its value is replaced with -1. * * NOTE: If the object also implements nsIWebProgressListener2 and the caller * knows about that interface, this function will not be called. Instead, * nsIWebProgressListener2::onProgressChange64 will be called. */`",615,null],[11,"OnLocationChange","","`text /** * Called when the location of the window being watched changes. This is not * when a load is requested, but rather once it is verified that the load is * going to occur in the given window. For instance, a load that starts in a * window might send progress and status messages for the new site, but it * will not send the onLocationChange until we are sure that we are loading * this new page here. * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRequest * The associated nsIRequest. This may be null in some cases. * @param aLocation * The URI of the location that is being loaded. * @param aFlags * This is a value which explains the situation or the reason why * the location has changed. */`",615,null],[11,"OnStatusChange","","`text /** * Notification that the status of a request has changed. The status message * is intended to be displayed to the user (e.g., in the status bar of the * browser). * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRequest * The nsIRequest that has new status. * @param aStatus * This value is not an error code. Instead, it is a numeric value * that indicates the current status of the request. This interface * does not define the set of possible status codes. NOTE: Some * status values are defined by nsITransport and nsISocketTransport. * @param aMessage * Localized text corresponding to aStatus. */`",615,null],[11,"OnSecurityChange","","`text /** * Notification called for security progress. This method will be called on * security transitions (eg HTTP -> HTTPS, HTTPS -> HTTP, FOO -> HTTPS) and * after document load completion. It might also be called if an error * occurs during network loading. * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRequest * The nsIRequest that has new security state. * @param aState * A value composed of the Security State Flags and the Security * Strength Flags listed above. Any undefined bits are reserved for * future use. * * NOTE: These notifications will only occur if a security package is * installed. */`",615,null],[11,"addref","","",616,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",616,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPILoadGroupInternal` to one of its base interfaces.",616,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",616,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnEndPageLoad","","`text /** * Called when the load group has loaded main page and * subresources. (i.e.essentially DOMComplete) * * @param aDefaultChanel * The request channel for the base apge */`",616,null],[11,"addref","","",617,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",617,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFontEnumerator` to one of its base interfaces.",617,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",617,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EnumerateAllFonts","","`text /** * Return a sorted array of the names of all installed fonts. * * @param aCount returns number of names returned * @param aResult returns array of names * @return void */`",617,null],[11,"EnumerateFonts","","`text /** * Return a sorted array of names of fonts that support the given language * group and are suitable for use as the given CSS generic font. * * @param aLangGroup language group * @param aGeneric CSS generic font * @param aCount returns number of names returned * @param aResult returns array of names * @return void */`",617,null],[11,"HaveFontFor","","`text /** @param aLangGroup language group @return bool do we have a font for this language group */`",617,null],[11,"GetDefaultFont","","`text /** * @param aLangGroup language group * @param aGeneric CSS generic font * @return suggested default font for this language group and generic family */`",617,null],[11,"UpdateFontList","","`text /** * update the global font list * return true if font list is changed */`",617,null],[11,"GetStandardFamilyName","","`text /** * get the standard family name on the system from given family * @param aName family name which may be alias * @return the standard family name on the system, if given name does not * exist, returns empty string */`",617,null],[11,"addref","","",618,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",618,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadRetargetableStreamListener` to one of its base interfaces.",618,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",618,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CheckListenerChain","","`text /** * Checks this listener and any next listeners it may have to verify that * they can receive OnDataAvailable off the main thread. It is the * responsibility of the implementing class to decide on the criteria to * determine if retargeted delivery of these methods is possible, but it must * check any and all nsIStreamListener objects that might be called in the * listener chain. * * An exception should be thrown if a listener in the chain does not * support retargeted delivery, i.e. if the next listener does not implement * nsIThreadRetargetableStreamListener, or a call to its checkListenerChain() * fails. */`",618,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",619,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",619,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISiteSecurityState` to one of its base interfaces.",619,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",619,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SECURITY_PROPERTY_UNSET","","",619,null],[18,"SECURITY_PROPERTY_SET","","",619,null],[18,"SECURITY_PROPERTY_KNOCKOUT","","",619,null],[18,"SECURITY_PROPERTY_NEGATIVE","","",619,null],[11,"GetHostname","","`[must_use] readonly attribute ACString hostname;`",619,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetExpireTime","","`[infallible] readonly attribute long long expireTime;`",619,{"inputs":[{"name":"self"}],"output":{"name":"int64_t"}}],[11,"GetSecurityPropertyState","","`[infallible] readonly attribute short securityPropertyState;`",619,{"inputs":[{"name":"self"}],"output":{"name":"int16_t"}}],[11,"GetIncludeSubdomains","","`[infallible] readonly attribute boolean includeSubdomains;`",619,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",620,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",620,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISiteHSTSState` to one of its base interfaces.",620,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",620,{"inputs":[{"name":"self"}],"output":{"name":"nsisitesecuritystate"}}],[11,"addref","","",621,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",621,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISiteHPKPState` to one of its base interfaces.",621,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",621,{"inputs":[{"name":"self"}],"output":{"name":"nsisitesecuritystate"}}],[11,"GetSha256Keys","","`[must_use] readonly attribute nsISimpleEnumerator sha256Keys;`",621,null],[11,"addref","","",622,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",622,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISiteSecurityService` to one of its base interfaces.",622,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",622,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"HEADER_HSTS","","",622,null],[18,"HEADER_HPKP","","",622,null],[18,"HEADER_OMS","","",622,null],[18,"Success","","",622,null],[18,"ERROR_UNKNOWN","","",622,null],[18,"ERROR_UNTRUSTWORTHY_CONNECTION","","",622,null],[18,"ERROR_COULD_NOT_PARSE_HEADER","","",622,null],[18,"ERROR_NO_MAX_AGE","","",622,null],[18,"ERROR_MULTIPLE_MAX_AGES","","",622,null],[18,"ERROR_INVALID_MAX_AGE","","",622,null],[18,"ERROR_MULTIPLE_INCLUDE_SUBDOMAINS","","",622,null],[18,"ERROR_INVALID_INCLUDE_SUBDOMAINS","","",622,null],[18,"ERROR_INVALID_PIN","","",622,null],[18,"ERROR_MULTIPLE_REPORT_URIS","","",622,null],[18,"ERROR_PINSET_DOES_NOT_MATCH_CHAIN","","",622,null],[18,"ERROR_NO_BACKUP_PIN","","",622,null],[18,"ERROR_COULD_NOT_SAVE_STATE","","",622,null],[18,"ERROR_ROOT_NOT_BUILT_IN","","",622,null],[18,"SOURCE_UNKNOWN","","`text /** * nsISiteSecurityService::IsSecureURI can optionally return a flag * indicating the source of the HSTS cache entry, if it comes from the * preload list, was seen naturally, or is a result of HSTS priming. */`",622,null],[18,"SOURCE_PRELOAD_LIST","","",622,null],[18,"SOURCE_ORGANIC_REQUEST","","",622,null],[18,"SOURCE_HSTS_PRIMING","","",622,null],[11,"ClearAll","","`text /** * Removes all non-preloaded security state by resetting to factory-original * settings. */`",622,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearPreloads","","`text /** * Removes all preloaded security state. */`",622,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetHSTSPreload","","`text /** * Set an HSTS preload entry for a host. The resulting entries will be * permanent and visible from private and non-private contexts. These * entries replace any already set by this mechanism or those built-in to * Gecko. * * @param aHost the hostname (punycode) that the entry applies to * @param aIncludeSubdomains whether this entry also applies to subdomains * @param aExpires the time this entry should expire (millis since epoch) */`",622,null],[11,"Enumerate","","`text /** * Returns an enumerator of the nsISiteSecurityService storage. Each item in * the enumeration is a nsISiteSecurityState that can be QueryInterfaced to * the appropriate nsISiteHSTSState or nsISiteHPKPState, depending on the * provided type. Doesn't include preloaded entries (either the hard-coded * ones or the preloaded-delivered-by-kinto ones). * * @param aType the type of security state in question. */`",622,null],[11,"addref","","",623,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",623,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPowerManagerService` to one of its base interfaces.",623,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",623,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddWakeLockListener","","`void addWakeLockListener (in nsIDOMMozWakeLockListener aListener);`",623,null],[11,"RemoveWakeLockListener","","`void removeWakeLockListener (in nsIDOMMozWakeLockListener aListener);`",623,null],[11,"GetWakeLockState","","`DOMString getWakeLockState (in DOMString aTopic);`",623,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NewWakeLock","","`text /** * Return a wake lock (MozWakeLock) object of aTopic associated with aWindow. * A wake lock without associated window, e.g. used in chrome, is * always considered invisible. */`",623,null],[11,"addref","","",624,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",624,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICancelable` to one of its base interfaces.",624,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",624,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Cancel","","`text /** * Call this method to request that this object abort whatever operation it * may be performing. * * @param aReason * Pass a failure code to indicate the reason why this operation is * being canceled. It is an error to pass a success code. */`",624,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",625,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",625,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIControllerCommandTable` to one of its base interfaces.",625,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",625,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"MakeImmutable","","`text /** * Make this command table immutable, so that commands cannot * be registered or unregistered. Some command tables are made * mutable after command registration so that they can be * used as singletons. */`",625,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RegisterCommand","","`text /** * Register and unregister commands with the command table. * * @param aCommandName the name of the command under which to register or * unregister the given command handler. * * @param aCommand the handler for this command. */`",625,null],[11,"UnregisterCommand","","`void unregisterCommand (in string aCommandName, in nsIControllerCommand aCommand);`",625,null],[11,"FindCommandHandler","","`text /** * Find the command handler which has been registered to handle the named command. * * @param aCommandName the name of the command to find the handler for. */`",625,null],[11,"IsCommandEnabled","","`text /** * Get whether the named command is enabled. * * @param aCommandName the name of the command to test * @param aCommandRefCon the command context data */`",625,null],[11,"UpdateCommandState","","`text /** * Tell the command to update its state (if it is a state updating command) * * @param aCommandName the name of the command to update * @param aCommandRefCon the command context data */`",625,null],[11,"SupportsCommand","","`text /** * Get whether the named command is supported. * * @param aCommandName the name of the command to test * @param aCommandRefCon the command context data */`",625,null],[11,"DoCommand","","`text /** * Execute the named command. * * @param aCommandName the name of the command to execute * @param aCommandRefCon the command context data */`",625,null],[11,"DoCommandParams","","`void doCommandParams (in string aCommandName, in nsICommandParams aParam, in nsISupports aCommandRefCon);`",625,null],[11,"GetCommandState","","`void getCommandState (in string aCommandName, in nsICommandParams aParam, in nsISupports aCommandRefCon);`",625,null],[11,"GetSupportedCommands","","`void getSupportedCommands (out unsigned long count, [array, size_is (count), retval] out string commands);`",625,null],[11,"addref","","",626,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",626,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionTransportCallback` to one of its base interfaces.",626,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",626,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyTransportReady","","`void notifyTransportReady ();`",626,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyTransportClosed","","`void notifyTransportClosed (in nsresult reason);`",626,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"NotifyData","","`void notifyData (in ACString data, in boolean isBinary);`",626,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",627,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",627,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionTransport` to one of its base interfaces.",627,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",627,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCallback","","`attribute nsIPresentationSessionTransportCallback callback;`",627,null],[11,"SetCallback","","`attribute nsIPresentationSessionTransportCallback callback;`",627,null],[11,"GetSelfAddress","","`readonly attribute nsINetAddr selfAddress;`",627,null],[11,"EnableDataNotification","","`void enableDataNotification ();`",627,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Send","","`void send (in DOMString data);`",627,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SendBinaryMsg","","`void sendBinaryMsg (in ACString data);`",627,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SendBlob","","`void sendBlob (in nsIDOMBlob blob);`",627,null],[11,"Close","","`void close (in nsresult reason);`",627,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",628,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",628,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMozNavigatorNetwork` to one of its base interfaces.",628,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",628,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetProperties","","`readonly attribute nsINetworkProperties properties;`",628,null],[11,"addref","","",629,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",629,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMStorageManager` to one of its base interfaces.",629,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",629,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PrecacheStorage","","`text /** * This starts async preloading of a storage cache for scope * defined by the principal. * * Because of how multi-e10s support was implemented in bug 1285898, the * StorageCache instance can no longer use a timer to keep itself alive. So a * Storage instance is returned if precaching believes the principal may have * localStorage data. (Previously the StorageCache would be brought into * existence and kept alive by the timer so that it could be returned if a * call to createStorage was made due to a request by the page.) */`",629,null],[11,"CreateStorage","","`text /** * Returns instance of DOM storage object for given principal. * A new object is always returned and it is ensured there is * a storage for the scope created. * * @param aWindow * The parent window. * @param aPrincipal * Principal to bound storage to. * @param aDocumentURI * URL of the demanding document, used for DOM storage event only. * @param aPrivate * Whether the demanding document is running in Private Browsing mode or not. */`",629,null],[11,"GetStorage","","`text /** * Returns instance of DOM storage object for given principal. * If there is no storage managed for the scope, then null is returned and * no object is created. Otherwise, an object (new) for the existing storage * scope is returned. * * @param aWindow * The parent window. * @param aPrincipal * Principal to bound storage to. * @param aPrivate * Whether the demanding document is running in Private Browsing mode or not. */`",629,null],[11,"CloneStorage","","`text /** * Clones given storage into this storage manager. * * @param aStorageToCloneFrom * The storage to copy all items from into this manager. Manager will then * return a new and independent object that contains snapshot of data from * the moment this method was called. Modification to this new object will * not affect the original storage content we cloned from and vice versa. */`",629,null],[11,"CheckStorage","","`text /** * Returns true if the storage belongs to the given principal and is managed * (i.e. has been created and is cached) by this storage manager. * * @param aPrincipal * Principal to check the storage against. * @param aStorage * The storage object to examine. * * @result * true when the storage object is bound with the principal and is managed * by this storage manager. * false otherwise */`",629,null],[11,"addref","","",630,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",630,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICrashService` to one of its base interfaces.",630,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",630,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PROCESS_TYPE_MAIN","","",630,null],[18,"PROCESS_TYPE_CONTENT","","",630,null],[18,"PROCESS_TYPE_PLUGIN","","",630,null],[18,"PROCESS_TYPE_GMPLUGIN","","",630,null],[18,"PROCESS_TYPE_GPU","","",630,null],[18,"CRASH_TYPE_CRASH","","",630,null],[18,"CRASH_TYPE_HANG","","",630,null],[11,"AddCrash","","`text /** * Records the occurrence of a crash. * * @param processType * One of the PROCESS_TYPE constants defined below. * @param crashType * One of the CRASH_TYPE constants defined below. * @param id * Crash ID. Likely a UUID. * * @return {Promise} A promise that resolves after the crash has been stored */`",630,null],[11,"addref","","",631,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",631,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFullHashMatch` to one of its base interfaces.",631,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",631,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTableName","","`readonly attribute ACString tableName;`",631,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFullHash","","`readonly attribute ACString fullHash;`",631,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCacheDuration","","`readonly attribute uint32_t cacheDuration;`",631,null],[11,"addref","","",632,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",632,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierHashCompleterCallback` to one of its base interfaces.",632,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",632,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CompletionV2","","`text /** * A complete hash has been found that matches the partial hash. * This method may be called 0-n times for a given * nsIUrlClassifierCompleter::complete() call. * * @param hash * The 256-bit hash that was discovered. * @param table * The name of the table that this hash belongs to. * @param chunkId * The database chunk that this hash belongs to. */`",632,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"CompletionV4","","`text /** * This will be called when a fullhash response is received and parsed * no matter if any full hash has been found. * * @param partialHash * The hash that was sent for completion. * @param table * The name of the table that this hash belongs to. * @param negativeCacheDuration * The negative cache duration in millisecond. * @param fullHashes * Array of fullhashes that match the prefix. */`",632,null],[11,"CompletionFinished","","`text /** * The completion is complete. This method is called once per * nsIUrlClassifierCompleter::complete() call, after all completion() * calls are finished. * * @param status * NS_OK if the request completed successfully, or an error code. */`",632,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",633,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",633,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierHashCompleter` to one of its base interfaces.",633,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",633,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * Request a completed hash from the given gethash url. * * @param partialHash * The 32-bit hash encountered by the url-classifier. * @param gethashUrl * The gethash url to use. * @param tableName * The table where we matched the partial hash. * @param callback * An nsIUrlClassifierCompleterCallback instance. */`",633,null],[11,"addref","","",634,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",634,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationRequestUIGlue` to one of its base interfaces.",634,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",634,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SendRequest","","`nsISupports sendRequest (in DOMString url, in DOMString sessionId, in nsIPresentationDevice device);`",634,null],[11,"addref","","",635,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",635,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULDescriptionElement` to one of its base interfaces.",635,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",635,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDisabled","","`attribute boolean disabled;`",635,null],[11,"SetDisabled","","`attribute boolean disabled;`",635,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCrop","","`attribute boolean crop;`",635,null],[11,"SetCrop","","`attribute boolean crop;`",635,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`attribute DOMString value;`",635,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute DOMString value;`",635,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",636,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",636,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthModule` to one of its base interfaces.",636,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",636,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REQ_DEFAULT","","`text /** * Default behavior. */`",636,null],[18,"REQ_MUTUAL_AUTH","","`text /** * Client and server will be authenticated. */`",636,null],[18,"REQ_DELEGATE","","`text /** * The server is allowed to impersonate the client. The REQ_MUTUAL_AUTH * flag may also need to be specified in order for this flag to take * effect. */`",636,null],[18,"REQ_PROXY_AUTH","","`text /** * The authentication is required for a proxy connection. */`",636,null],[18,"NTLM_MODULE_SAMBA_AUTH_PROXY","","`text /** * Flags used for telemetry. */`",636,null],[18,"NTLM_MODULE_SAMBA_AUTH_DIRECT","","",636,null],[18,"NTLM_MODULE_WIN_API_PROXY","","",636,null],[18,"NTLM_MODULE_WIN_API_DIRECT","","",636,null],[18,"NTLM_MODULE_GENERIC_PROXY","","",636,null],[18,"NTLM_MODULE_GENERIC_DIRECT","","",636,null],[18,"NTLM_MODULE_KERBEROS_PROXY","","",636,null],[18,"NTLM_MODULE_KERBEROS_DIRECT","","",636,null],[11,"Init","","`text /** Other flags may be defined in the future */ /** * Called to initialize an auth module. The other methods cannot be called * unless this method succeeds. * * @param aServiceName * the service name, which may be null if not applicable (e.g., for * NTLM, this parameter should be null). * @param aServiceFlags * a bitwise-or of the REQ_ flags defined above (pass REQ_DEFAULT * for default behavior). * @param aDomain * the authentication domain, which may be null if not applicable. * @param aUsername * the user's login name * @param aPassword * the user's password */`",636,null],[11,"GetNextToken","","`text /** * Called to get the next token in a sequence of authentication steps. * * @param aInToken * A buffer containing the input token (e.g., a challenge from a * server). This may be null. * @param aInTokenLength * The length of the input token. * @param aOutToken * If getNextToken succeeds, then aOutToken will point to a buffer * to be sent in response to the server challenge. The length of * this buffer is given by aOutTokenLength. The buffer at aOutToken * must be recycled with a call to free. * @param aOutTokenLength * If getNextToken succeeds, then aOutTokenLength contains the * length of the buffer (number of bytes) pointed to by aOutToken. */`",636,null],[11,"Wrap","","`text /** * Once a security context has been established through calls to GetNextToken() * it may be used to protect data exchanged between client and server. Calls * to Wrap() are used to protect items of data to be sent to the server. * * @param aInToken * A buffer containing the data to be sent to the server * @param aInTokenLength * The length of the input token * @param confidential * If set to true, Wrap() will encrypt the data, otherwise data will * just be integrity protected (checksummed) * @param aOutToken * A buffer containing the resulting data to be sent to the server * @param aOutTokenLength * The length of the output token buffer * * Wrap() may return NS_ERROR_NOT_IMPLEMENTED, if the underlying authentication * mechanism does not support security layers. */`",636,null],[11,"Unwrap","","`text /** * Unwrap() is used to unpack, decrypt, and verify the checksums on data * returned by a server when security layers are in use. * * @param aInToken * A buffer containing the data received from the server * @param aInTokenLength * The length of the input token * @param aOutToken * A buffer containing the plaintext data from the server * @param aOutTokenLength * The length of the output token buffer * * Unwrap() may return NS_ERROR_NOT_IMPLEMENTED, if the underlying * authentication mechanism does not support security layers. */`",636,null],[11,"addref","","",637,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",637,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIViewSourceChannel` to one of its base interfaces.",637,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",637,{"inputs":[{"name":"self"}],"output":{"name":"nsichannel"}}],[11,"GetOriginalContentType","","`text /** * The actual (MIME) content type of the data. * * nsIViewSourceChannel returns a content type of * \"application/x-view-source\" if you ask it for the contentType * attribute. * * However, callers interested in finding out or setting the * actual content type can utilize this attribute. */`",637,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetOriginalContentType","","`text /** * The actual (MIME) content type of the data. * * nsIViewSourceChannel returns a content type of * \"application/x-view-source\" if you ask it for the contentType * attribute. * * However, callers interested in finding out or setting the * actual content type can utilize this attribute. */`",637,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsSrcdocChannel","","`text /** * Whether the channel was created to view the source of a srcdoc document. */`",637,null],[11,"GetBaseURI","","`text /** * Set to indicate the base URI. If this channel is a srcdoc channel, it * returns the base URI provided by the embedded channel. It is used to * provide an indication of the base URI in circumstances where it isn't * otherwise recoverable. Returns null when it isn't set and isn't a * srcdoc channel. */`",637,null],[11,"SetBaseURI","","`text /** * Set to indicate the base URI. If this channel is a srcdoc channel, it * returns the base URI provided by the embedded channel. It is used to * provide an indication of the base URI in circumstances where it isn't * otherwise recoverable. Returns null when it isn't set and isn't a * srcdoc channel. */`",637,null],[11,"addref","","",638,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",638,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMediaManagerService` to one of its base interfaces.",638,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",638,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetActiveMediaCaptureWindows","","`readonly attribute nsIArray activeMediaCaptureWindows;`",638,null],[11,"MediaCaptureWindowState","","`void mediaCaptureWindowState (in nsIDOMWindow aWindow, out boolean aVideo, out boolean aAudio, [optional] out boolean aScreenShare, [optional] out boolean aWindowShare, [optional] out boolean aAppShare, [optional] out boolean aBrowserShare);`",638,null],[11,"SanitizeDeviceIds","","`void sanitizeDeviceIds (in long long sinceWhen);`",638,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",639,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",639,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISynthVoiceRegistry` to one of its base interfaces.",639,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",639,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddVoice","","`text /** * Register a speech synthesis voice. * * @param aService the service that provides this voice. * @param aUri a unique identifier for this voice. * @param aName human-readable name for this voice. * @param aLang a BCP 47 language tag. * @param aLocalService true if service does not require network. * @param aQueuesUtterances true if voice only speaks one utterance at a time */`",639,null],[11,"RemoveVoice","","`text /** * Remove a speech synthesis voice. * * @param aService the service that was used to add the voice. * @param aUri a unique identifier of an existing voice. */`",639,null],[11,"NotifyVoicesChanged","","`text /** * Notify content of voice availability changes. This allows content * to be notified of voice catalog changes in real time. */`",639,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetDefaultVoice","","`text /** * Set a voice as default. * * @param aUri a unique identifier of an existing voice. * @param aIsDefault true if this voice should be toggled as default. */`",639,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetVoiceCount","","`readonly attribute uint32_t voiceCount;`",639,null],[11,"GetVoice","","`AString getVoice (in uint32_t aIndex);`",639,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IsDefaultVoice","","`bool isDefaultVoice (in DOMString aUri);`",639,null],[11,"IsLocalVoice","","`bool isLocalVoice (in DOMString aUri);`",639,null],[11,"GetVoiceLang","","`AString getVoiceLang (in DOMString aUri);`",639,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVoiceName","","`AString getVoiceName (in DOMString aUri);`",639,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",640,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",640,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkActivityData` to one of its base interfaces.",640,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",640,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetHost","","`readonly attribute DOMString host;`",640,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`readonly attribute long port;`",640,null],[11,"GetRx","","`readonly attribute long rx;`",640,null],[11,"GetTx","","`readonly attribute long tx;`",640,null],[11,"GetFd","","`readonly attribute long fd;`",640,null],[11,"addref","","",641,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",641,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfileStartup` to one of its base interfaces.",641,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",641,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDirectory","","`text /** * The root directory of the semi-current profile, during profile migration. * After nsIProfileMigrator.migrate has returned, this object will not be * useful. */`",641,null],[11,"DoStartup","","`text /** * Do profile-startup by setting NS_APP_USER_PROFILE_50_DIR in the directory * service and notifying the profile-startup observer topics. */`",641,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",642,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",642,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfileMigrator` to one of its base interfaces.",642,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",642,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Migrate","","`text /** * Migrate data from an outside source, if possible. Does nothing * otherwise. * * When this method is called, a default profile has been created; * XPCOM has been initialized such that compreg.dat is in the * profile; the directory service does *not* return a key for * NS_APP_USER_PROFILE_50_DIR or any of the keys depending on an active * profile. To figure out the directory of the \"current\" profile, use * aStartup.directory. * * If your migrator needs to access services that use the profile (to * set profile prefs or bookmarks, for example), use aStartup.doStartup. * * @param aStartup nsIProfileStartup object to use during migration. * @param aKey optional key of a migrator to use to skip source selection. * @param aProfileName optional name of the profile to use for migration. * * @note The startup code ignores COM exceptions thrown from this method. */`",642,null],[11,"addref","","",643,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",643,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaUsageCallback` to one of its base interfaces.",643,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",643,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnUsageResult","","`void onUsageResult (in nsIQuotaUsageRequest aRequest);`",643,null],[11,"addref","","",644,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",644,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaCallback` to one of its base interfaces.",644,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",644,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnComplete","","`void onComplete (in nsIQuotaRequest aRequest);`",644,null],[11,"addref","","",645,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",645,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserSetup` to one of its base interfaces.",645,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",645,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SETUP_ALLOW_PLUGINS","","`text /** * Boolean. Enables/disables plugin support for this browser. * * @see setProperty */`",645,null],[18,"SETUP_ALLOW_JAVASCRIPT","","`text /** * Boolean. Enables/disables Javascript support for this browser. * * @see setProperty */`",645,null],[18,"SETUP_ALLOW_META_REDIRECTS","","`text /** * Boolean. Enables/disables meta redirect support for this browser. * Meta redirect timers will be ignored if this option is disabled. * * @see setProperty */`",645,null],[18,"SETUP_ALLOW_SUBFRAMES","","`text /** * Boolean. Enables/disables subframes within the browser * * @see setProperty */`",645,null],[18,"SETUP_ALLOW_IMAGES","","`text /** * Boolean. Enables/disables image loading for this browser * window. If you disable the images, load a page, then enable the images, * the page will *not* automatically load the images for the previously * loaded page. This flag controls the state of a webBrowser at load time * and does not automatically re-load a page when the state is toggled. * Reloading must be done by hand, or by walking through the DOM tree and * re-setting the src attributes. * * @see setProperty */`",645,null],[18,"SETUP_FOCUS_DOC_BEFORE_CONTENT","","`text /** * Boolean. Enables/disables whether the document as a whole gets focus before * traversing the document's content, or after traversing its content. * * NOTE: this property is obsolete and now has no effect * * @see setProperty */`",645,null],[18,"SETUP_USE_GLOBAL_HISTORY","","`text /** * Boolean. Enables/disables the use of global history in the browser. Visited * URLs will not be recorded in the global history when it is disabled. * * @see setProperty */`",645,null],[18,"SETUP_IS_CHROME_WRAPPER","","`text /** * Boolean. A value of PR_TRUE makes the browser a chrome wrapper. * Default is PR_FALSE. * * @since mozilla1.0 * * @see setProperty */`",645,null],[18,"SETUP_ALLOW_DNS_PREFETCH","","`text /** * Boolean. Enables/disables DNS prefetch for HTML anchors in this browser. * This takes effect starting with the next pageload after the property is * set. The default is to not allow DNS prefetch, for backwards * compatibility. * * @see setProperty */`",645,null],[11,"SetProperty","","`text /** * Sets an integer or boolean property on the new web browser object. * Only PR_TRUE and PR_FALSE are legal boolean values. * * @param aId The identifier of the property to be set. * @param aValue The value of the property. */`",645,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",646,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",646,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfileUnlocker` to one of its base interfaces.",646,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",646,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ATTEMPT_QUIT","","",646,null],[18,"FORCE_QUIT","","",646,null],[11,"Unlock","","`text /** * Try to unlock the specified profile by attempting or forcing the * process that currently holds the lock to quit. * * @param aSeverity either ATTEMPT_QUIT or FORCE_QUIT * @throws NS_ERROR_FAILURE if unlocking failed. */`",646,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",647,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",647,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInterfaceRequestor` to one of its base interfaces.",647,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",647,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInterface","","`text /** * Retrieves the specified interface pointer. * * @param uuid The IID of the interface being requested. * @param result [out] The interface pointer to be filled in if * the interface is accessible. * @throws NS_NOINTERFACE - interface not accessible. * @throws NS_ERROR* - method failure. */`",647,null],[11,"addref","","",648,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",648,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAppShellService` to one of its base interfaces.",648,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",648,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SIZE_TO_CONTENT","","`text /** * Create a window, which will be initially invisible. * @param aParent the parent window. Can be null. * @param aUrl the contents of the new window. * @param aChromeMask chrome flags affecting the kind of OS border * given to the window. see nsIBrowserWindow for * bit/flag definitions. * @param aCallbacks interface providing C++ hooks for window initialization * before the window is made visible. Can be null. * Deprecated. * @param aInitialWidth width, in pixels, of the window. Width of window * at creation. Can be overridden by the \"width\" * tag in the XUL. Set to NS_SIZETOCONTENT to force * the window to wrap to its contents. * @param aInitialHeight like aInitialWidth, but subtly different. * @param aOpeningTab The TabParent that requested that this window be opened. * Can be left null. * @param aOpenerWindow The Window Proxy which requested that this window be opened. * Can be left null. */`",648,null],[11,"CreateTopLevelWindow","","`nsIXULWindow createTopLevelWindow (in nsIXULWindow aParent, in nsIURI aUrl, in uint32_t aChromeMask, in long aInitialWidth, in long aInitialHeight, in nsITabParent aOpeningTab, in mozIDOMWindowProxy aOpenerWindow);`",648,null],[11,"CreateWindowlessBrowser","","`text /** * This is the constructor for creating an invisible DocShell. * It is used to simulate DOM windows without an actual physical * representation. * @param aIsChrome Set true if you want to use it for chrome content. */`",648,null],[11,"CreateHiddenWindow","","`[noscript] void createHiddenWindow ();`",648,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DestroyHiddenWindow","","`void destroyHiddenWindow ();`",648,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetScreenId","","`text /** * B2G multi-screen support. When open another top-level window on b2g, * a screen ID is needed for identifying which screen this window is * opened to. * @param aScreenId Differentiate screens of windows. It is platform- * specific due to the hardware limitation for now. */`",648,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetHiddenWindow","","`text /** * Return the (singleton) application hidden window, automatically created * and maintained by this AppShellService. * @param aResult the hidden window. Do not unhide hidden window. * Do not taunt hidden window. */`",648,null],[11,"GetHiddenDOMWindow","","`text /** * Return the (singleton) application hidden window, automatically created * and maintained by this AppShellService. * @param aResult the hidden window. Do not unhide hidden window. * Do not taunt hidden window. */`",648,null],[11,"GetHiddenPrivateWindow","","`text /** * Return the (singleton) application hidden private window, automatically * created and maintained by this AppShellService. This window is created * in private browsing mode. * @param aResult the hidden private window. Do not unhide hidden window. * Do not taunt hidden window. */`",648,null],[11,"GetHiddenPrivateDOMWindow","","`text /** * Return the (singleton) application hidden private window, automatically * created and maintained by this AppShellService. This window is created * in private browsing mode. * @param aResult the hidden private window. Do not unhide hidden window. * Do not taunt hidden window. */`",648,null],[11,"GetApplicationProvidedHiddenWindow","","`text /** * Return true if the application hidden window was provided by the * application. If it wasn't, the default hidden window was used. This will * usually be false on all non-mac platforms. */`",648,null],[11,"RegisterTopLevelWindow","","`text /** * Add a window to the application's registry of windows. These windows * are generally shown in the Windows taskbar, and the application * knows it can't quit until it's out of registered windows. * @param aWindow the window to register * @note When this method is successful, it fires the global notification * \"xul-window-registered\" */`",648,null],[11,"UnregisterTopLevelWindow","","`text /** * Remove a window from the application's window registry. Note that * this method won't automatically attempt to quit the app when * the last window is unregistered. For that, see Quit(). * @param aWindow you see the pattern */`",648,null],[11,"GetHasHiddenPrivateWindow","","`text /** * Whether the hidden private window has been lazily created. */`",648,null],[11,"StartEventLoopLagTracking","","`text /** * Start/stop tracking lags in the event loop. * If the event loop gets unresponsive, a \"event-loop-lag\" notification * is sent. Note that calling `startEventLoopLagTracking` when tracking * is already enabled has no effect. * @return true if tracking succeeded. */`",648,null],[11,"StopEventLoopLagTracking","","`void stopEventLoopLagTracking ();`",648,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",649,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",649,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationTerminateRequest` to one of its base interfaces.",649,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",649,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDevice","","`readonly attribute nsIPresentationDevice device;`",649,null],[11,"GetPresentationId","","`readonly attribute DOMString presentationId;`",649,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetControlChannel","","`readonly attribute nsIPresentationControlChannel controlChannel;`",649,null],[11,"GetIsFromReceiver","","`readonly attribute boolean isFromReceiver;`",649,null],[11,"addref","","",650,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",650,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMModalContentWindow` to one of its base interfaces.",650,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",650,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDialogArguments","","`text /** * Readonly attribute containing an arbitrary JS value passed by the * code that opened the modal content window. A security check is * performed at access time, per spec. */`",650,null],[11,"GetReturnValue","","`text /** * The return value that will be returned to the function that * opened the modal content window. */`",650,null],[11,"SetReturnValue","","`text /** * The return value that will be returned to the function that * opened the modal content window. */`",650,null],[11,"addref","","",651,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",651,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFindService` to one of its base interfaces.",651,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",651,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSearchString","","`attribute AString searchString;`",651,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSearchString","","`attribute AString searchString;`",651,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReplaceString","","`attribute AString replaceString;`",651,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetReplaceString","","`attribute AString replaceString;`",651,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFindBackwards","","`attribute boolean findBackwards;`",651,null],[11,"SetFindBackwards","","`attribute boolean findBackwards;`",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWrapFind","","`attribute boolean wrapFind;`",651,null],[11,"SetWrapFind","","`attribute boolean wrapFind;`",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEntireWord","","`attribute boolean entireWord;`",651,null],[11,"SetEntireWord","","`attribute boolean entireWord;`",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMatchCase","","`attribute boolean matchCase;`",651,null],[11,"SetMatchCase","","`attribute boolean matchCase;`",651,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",652,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",652,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIArrayBufferInputStream` to one of its base interfaces.",652,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",652,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"addref","","",653,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",653,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITooltipTextProvider` to one of its base interfaces.",653,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",653,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNodeText","","`text /** * Called to obtain the tooltip text for a node. * * @arg aNode The node to obtain the text from. * @arg aText The tooltip text. * @arg aDirection The text direction (ltr or rtl) to use * * @return <CODE>PR_TRUE</CODE> if tooltip text is associated * with the node and was returned in the aText argument; * <CODE>PR_FALSE</CODE> otherwise. */`",653,null],[11,"addref","","",654,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",654,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserFocus` to one of its base interfaces.",654,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",654,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Activate","","`text /** * MANDATORY * activate() is a mandatory call that must be made to the browser * when the embedding application's window is activated *and* the * browser area was the last thing in focus. This method can also be called * if the embedding application wishes to give the browser area focus, * without affecting the currently focused element within the browser. * * @note * If you fail to make this call, mozilla focus memory will not work * correctly. */`",654,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Deactivate","","`text /** * MANDATORY * deactivate() is a mandatory call that must be made to the browser * when the embedding application's window is deactivated *and* the * browser area was the last thing in focus. On non-windows platforms, * deactivate() should also be called when focus moves from the browser * to the embedding chrome. * * @note * If you fail to make this call, mozilla focus memory will not work * correctly. */`",654,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetFocusAtFirstElement","","`text /** * Give the first element focus within mozilla * (i.e. TAB was pressed and focus should enter mozilla) */`",654,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetFocusAtLastElement","","`text /** * Give the last element focus within mozilla * (i.e. SHIFT-TAB was pressed and focus should enter mozilla) */`",654,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetFocusedWindow","","`text /** * The currently focused nsDOMWindow when the browser is active, * or the last focused nsDOMWindow when the browser is inactive. */`",654,null],[11,"SetFocusedWindow","","`text /** * The currently focused nsDOMWindow when the browser is active, * or the last focused nsDOMWindow when the browser is inactive. */`",654,null],[11,"GetFocusedElement","","`text /** * The currently focused nsDOMElement when the browser is active, * or the last focused nsDOMElement when the browser is inactive. */`",654,null],[11,"SetFocusedElement","","`text /** * The currently focused nsDOMElement when the browser is active, * or the last focused nsDOMElement when the browser is inactive. */`",654,null],[11,"addref","","",655,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",655,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamConverter` to one of its base interfaces.",655,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",655,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Convert","","`text /** * <b>SYNCRONOUS VERSION</b> * Converts a stream of one type, to a stream of another type. * * Use this method when you have a stream you want to convert. * * @param aFromStream The stream representing the original/raw data. * @param aFromType The MIME type of aFromStream. * @param aToType The MIME type of the returned stream. * @param aCtxt Either an opaque context, or a converter specific context * (implementation specific). * @return The converted stream. NOTE: The returned stream may not * already be converted. An efficient stream converter * implementation will converter data on demand rather than * buffering the converted data until it is used. */`",655,null],[11,"AsyncConvertData","","`text /** * <b>ASYNCRONOUS VERSION</b> * Converts data arriving via the converter's nsIStreamListener::OnDataAvailable() * method from one type to another, pushing the converted data out to the caller * via aListener::OnDataAvailable(). * * Use this method when you want to proxy (and convert) nsIStreamListener callbacks * asynchronously. * * @param aFromType The MIME type of the original/raw data. * @param aToType The MIME type of the converted data. * @param aListener The listener who receives the converted data. * @param aCtxt Either an opaque context, or a converter specific context * (implementation specific). */`",655,null],[11,"addref","","",656,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",656,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIRepresentativeColorCallback` to one of its base interfaces.",656,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",656,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnComplete","","`text /** * Will be called when color analysis finishes. * * @param success * True if analysis was successful, false otherwise. * Analysis can fail if the image is transparent, imageURI doesn't * resolve to a valid image, or the image is too big. * * @param color * The representative color as an integer in RGB form. * e.g. 0xFF0102 == rgb(255,1,2) * If success is false, color is not provided. */`",656,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",657,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",657,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIColorAnalyzer` to one of its base interfaces.",657,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",657,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FindRepresentativeColor","","`text /** * Given an image URI, find the most representative color for that image * based on the frequency of each color. Preference is given to colors that * are more interesting. Avoids the background color if it can be * discerned. Ignores sufficiently transparent colors. * * This is intended to be used on favicon images. Larger images take longer * to process, especially those with a larger number of unique colors. If * imageURI points to an image that has more than 128^2 pixels, this method * will fail before analyzing it for performance reasons. * * @param imageURI * A URI pointing to the image - ideally a data: URI, but any scheme * that will load when setting the src attribute of a DOM img element * should work. * @param callback * Function to call when the representative color is found or an * error occurs. */`",657,null],[11,"addref","","",658,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",658,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSStyleRule` to one of its base interfaces.",658,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",658,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSelectorText","","`attribute DOMString selectorText;`",658,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSelectorText","","`attribute DOMString selectorText;`",658,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStyle","","`readonly attribute nsIDOMCSSStyleDeclaration style;`",658,null],[11,"addref","","",659,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",659,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdleServiceInternal` to one of its base interfaces.",659,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",659,{"inputs":[{"name":"self"}],"output":{"name":"nsiidleservice"}}],[11,"ResetIdleTimeOut","","`text /** * \"Resets the idle time to the value specified.\" * * @param idleDelta the time (in milliseconds) since the last user inter * action **/`",659,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",660,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",660,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRedirectResultListener` to one of its base interfaces.",660,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",660,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnRedirectResult","","`text /** * When an HTTP redirect has been processed (either successfully or not) * nsIHttpChannel will call this function if its callbacks implement this * interface. * * @param proceeding * Indicated whether the redirect will be proceeding, or not (i.e. * has been canceled, or failed). */`",660,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",661,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",661,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocumentLoader` to one of its base interfaces.",661,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",661,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Stop","","`void stop ();`",661,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetContainer","","`readonly attribute nsISupports container;`",661,null],[11,"GetLoadGroup","","`readonly attribute nsILoadGroup loadGroup;`",661,null],[11,"GetDocumentChannel","","`readonly attribute nsIChannel documentChannel;`",661,null],[11,"addref","","",662,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",662,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransport` to one of its base interfaces.",662,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",662,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"OPEN_BLOCKING","","`text /** * Open flags. */`",662,null],[18,"OPEN_UNBUFFERED","","",662,null],[18,"STATUS_READING","","`text /** * Generic nsITransportEventSink status codes. nsITransport * implementations may override these status codes with their own more * specific status codes (e.g., see nsISocketTransport). * * In C++, these constants have a type of uint32_t, so C++ callers must use * the NS_NET_STATUS_* constants defined below, which have a type of * nsresult. */`",662,null],[18,"STATUS_WRITING","","",662,null],[11,"OpenInputStream","","`text /** * Open an input stream on this transport. * * Flags have the following meaning: * * OPEN_BLOCKING * If specified, then the resulting stream will have blocking stream * semantics. This means that if the stream has no data and is not * closed, then reading from it will block the calling thread until * at least one byte is available or until the stream is closed. * If this flag is NOT specified, then the stream has non-blocking * stream semantics. This means that if the stream has no data and is * not closed, then reading from it returns NS_BASE_STREAM_WOULD_BLOCK. * In addition, in non-blocking mode, the stream is guaranteed to * support nsIAsyncInputStream. This interface allows the consumer of * the stream to be notified when the stream can again be read. * * OPEN_UNBUFFERED * If specified, the resulting stream may not support ReadSegments. * ReadSegments is only gauranteed to be implemented when this flag is * NOT specified. * * @param aFlags * optional transport specific flags. * @param aSegmentSize * if OPEN_UNBUFFERED is not set, then this parameter specifies the * size of each buffer segment (pass 0 to use default value). * @param aSegmentCount * if OPEN_UNBUFFERED is not set, then this parameter specifies the * maximum number of buffer segments (pass 0 to use default value). */`",662,null],[11,"OpenOutputStream","","`text /** * Open an output stream on this transport. * * Flags have the following meaning: * * OPEN_BLOCKING * If specified, then the resulting stream will have blocking stream * semantics. This means that if the stream is full and is not closed, * then writing to it will block the calling thread until ALL of the * data can be written or until the stream is closed. If this flag is * NOT specified, then the stream has non-blocking stream semantics. * This means that if the stream is full and is not closed, then writing * to it returns NS_BASE_STREAM_WOULD_BLOCK. In addition, in non- * blocking mode, the stream is guaranteed to support * nsIAsyncOutputStream. This interface allows the consumer of the * stream to be notified when the stream can again accept more data. * * OPEN_UNBUFFERED * If specified, the resulting stream may not support WriteSegments and * WriteFrom. WriteSegments and WriteFrom are only guaranteed to be * implemented when this flag is NOT specified. * * @param aFlags * optional transport specific flags. * @param aSegmentSize * if OPEN_UNBUFFERED is not set, then this parameter specifies the * size of each buffer segment (pass 0 to use default value). * @param aSegmentCount * if OPEN_UNBUFFERED is not set, then this parameter specifies the * maximum number of buffer segments (pass 0 to use default value). */`",662,null],[11,"Close","","`text /** * Close the transport and any open streams. * * @param aReason * the reason for closing the stream. */`",662,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"SetEventSink","","`text /** * Set the transport event sink. * * @param aSink * receives transport layer notifications * @param aEventTarget * indicates the event target to which the notifications should * be delivered. if NULL, then the notifications may occur on * any thread. */`",662,null],[11,"addref","","",663,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",663,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransportEventSink` to one of its base interfaces.",663,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",663,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnTransportStatus","","`text /** * Transport status notification. * * @param aTransport * the transport sending this status notification. * @param aStatus * the transport status (resolvable to a string using * nsIErrorService). See nsISocketTransport for socket specific * status codes and more comments. * @param aProgress * the amount of data either read or written depending on the value * of the status code. this value is relative to aProgressMax. * @param aProgressMax * the maximum amount of data that will be read or written. if * unknown, -1 will be passed. */`",663,null],[11,"addref","","",664,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",664,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCanvasRenderingContext2D` to one of its base interfaces.",664,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",664,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DRAWWINDOW_DRAW_CARET","","",664,null],[18,"DRAWWINDOW_DO_NOT_FLUSH","","",664,null],[18,"DRAWWINDOW_DRAW_VIEW","","",664,null],[18,"DRAWWINDOW_USE_WIDGET_LAYERS","","",664,null],[18,"DRAWWINDOW_ASYNC_DECODE_IMAGES","","",664,null],[11,"addref","","",665,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",665,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintProgressParams` to one of its base interfaces.",665,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",665,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDocTitle","","`attribute AString docTitle;`",665,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDocTitle","","`attribute AString docTitle;`",665,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDocURL","","`attribute AString docURL;`",665,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDocURL","","`attribute AString docURL;`",665,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",666,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",666,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadProgressListener` to one of its base interfaces.",666,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",666,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDocument","","`text /** * document * The document of the download manager frontend. */`",666,null],[11,"SetDocument","","`text /** * document * The document of the download manager frontend. */`",666,null],[11,"OnDownloadStateChange","","`text /** * Dispatched whenever the state of the download changes. * * @param aState The previous download sate. * @param aDownload The download object. * @see nsIDownloadManager for download states. */`",666,null],[11,"OnStateChange","","`void onStateChange (in nsIWebProgress aWebProgress, in nsIRequest aRequest, in unsigned long aStateFlags, in nsresult aStatus, in nsIDownload aDownload);`",666,null],[11,"OnProgressChange","","`void onProgressChange (in nsIWebProgress aWebProgress, in nsIRequest aRequest, in long long aCurSelfProgress, in long long aMaxSelfProgress, in long long aCurTotalProgress, in long long aMaxTotalProgress, in nsIDownload aDownload);`",666,null],[11,"OnSecurityChange","","`void onSecurityChange (in nsIWebProgress aWebProgress, in nsIRequest aRequest, in unsigned long aState, in nsIDownload aDownload);`",666,null],[11,"addref","","",667,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",667,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNode` to one of its base interfaces.",667,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",667,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ELEMENT_NODE","","`text /** * The nsIDOMNode interface is the primary datatype for the entire * Document Object Model. * It represents a single node in the document tree. * * For more information on this interface please see * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html */`",667,null],[18,"ATTRIBUTE_NODE","","",667,null],[18,"TEXT_NODE","","",667,null],[18,"CDATA_SECTION_NODE","","",667,null],[18,"ENTITY_REFERENCE_NODE","","",667,null],[18,"ENTITY_NODE","","",667,null],[18,"PROCESSING_INSTRUCTION_NODE","","",667,null],[18,"COMMENT_NODE","","",667,null],[18,"DOCUMENT_NODE","","",667,null],[18,"DOCUMENT_TYPE_NODE","","",667,null],[18,"DOCUMENT_FRAGMENT_NODE","","",667,null],[18,"NOTATION_NODE","","",667,null],[18,"DOCUMENT_POSITION_DISCONNECTED","","",667,null],[18,"DOCUMENT_POSITION_PRECEDING","","",667,null],[18,"DOCUMENT_POSITION_FOLLOWING","","",667,null],[18,"DOCUMENT_POSITION_CONTAINS","","",667,null],[18,"DOCUMENT_POSITION_CONTAINED_BY","","",667,null],[18,"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC","","",667,null],[11,"GetNodeName","","`readonly attribute DOMString nodeName;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNodeValue","","`attribute DOMString nodeValue;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetNodeValue","","`attribute DOMString nodeValue;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNodeType","","`readonly attribute unsigned short nodeType;`",667,null],[11,"GetParentNode","","`readonly attribute nsIDOMNode parentNode;`",667,null],[11,"GetChildNodes","","`readonly attribute nsIDOMNodeList childNodes;`",667,null],[11,"GetFirstChild","","`readonly attribute nsIDOMNode firstChild;`",667,null],[11,"GetLastChild","","`readonly attribute nsIDOMNode lastChild;`",667,null],[11,"GetPreviousSibling","","`readonly attribute nsIDOMNode previousSibling;`",667,null],[11,"GetNextSibling","","`readonly attribute nsIDOMNode nextSibling;`",667,null],[11,"GetOwnerDocument","","`readonly attribute nsIDOMDocument ownerDocument;`",667,null],[11,"RemoveChild","","`nsIDOMNode removeChild (in nsIDOMNode oldChild) raises (DOMException);`",667,null],[11,"HasChildNodes","","`boolean hasChildNodes ();`",667,null],[11,"GetNamespaceURI","","`readonly attribute DOMString namespaceURI;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPrefix","","`readonly attribute DOMString prefix;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLocalName","","`readonly attribute DOMString localName;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTextContent","","`attribute DOMString textContent;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTextContent","","`attribute DOMString textContent;`",667,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",668,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",668,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBinaryOutputStream` to one of its base interfaces.",668,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",668,{"inputs":[{"name":"self"}],"output":{"name":"nsioutputstream"}}],[11,"SetOutputStream","","`void setOutputStream (in nsIOutputStream aOutputStream);`",668,null],[11,"WriteBoolean","","`text /** * Write a boolean as an 8-bit char to the stream. */`",668,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Write8","","`void write8 (in uint8_t aByte);`",668,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"Write16","","`void write16 (in uint16_t a16);`",668,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"Write32","","`void write32 (in uint32_t a32);`",668,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Write64","","`void write64 (in uint64_t a64);`",668,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"WriteFloat","","`void writeFloat (in float aFloat);`",668,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"WriteDouble","","`void writeDouble (in double aDouble);`",668,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"WriteStringZ","","`text /** * Write an 8-bit pascal style string to the stream. * 32-bit length field, followed by length 8-bit chars. */`",668,null],[11,"WriteWStringZ","","`text /** * Write a 16-bit pascal style string to the stream. * 32-bit length field, followed by length PRUnichars. */`",668,null],[11,"WriteUtf8Z","","`text /** * Write an 8-bit pascal style string (UTF8-encoded) to the stream. * 32-bit length field, followed by length 8-bit chars. */`",668,null],[11,"WriteBytes","","`text /** * Write an opaque byte array to the stream. */`",668,null],[11,"WriteByteArray","","`text /** * Write an opaque byte array to the stream. */`",668,null],[11,"addref","","",669,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",669,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAddonPolicyService` to one of its base interfaces.",669,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",669,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBaseCSP","","`text /** * Returns the base content security policy, which is applied to all * extension documents, in addition to any custom policies. */`",669,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultCSP","","`text /** * Returns the default content security policy which applies to extension * documents which do not specify any custom policies. */`",669,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAddonCSP","","`text /** * Returns the content security policy which applies to documents belonging * to the extension with the given ID. This may be either a custom policy, * if one was supplied, or the default policy if one was not. */`",669,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetGeneratedBackgroundPageUrl","","`text /** * Returns the generated background page as a data-URI, if any. If the addon * does not have an auto-generated background page, an empty string is * returned. */`",669,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"AddonHasPermission","","`text /** * Returns true if the addon was granted the |aPerm| API permission. */`",669,null],[11,"AddonMayLoadURI","","`text /** * Returns true if unprivileged code associated with the given addon may load * data from |aURI|. If |aExplicit| is true, the <all_urls> permission and * permissive host globs are ignored when checking for a match. */`",669,null],[11,"GetExtensionName","","`text /** * Returns the name of the WebExtension with the given ID, or the ID string * if no matching add-on can be found. */`",669,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ExtensionURILoadableByAnyone","","`text /** * Returns true if a given extension:// URI is web-accessible. */`",669,null],[11,"ExtensionURIToAddonId","","`text /** * Maps an extension URI to the ID of the addon it belongs to. */`",669,null],[11,"addref","","",670,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",670,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAddonContentPolicy` to one of its base interfaces.",670,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",670,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ValidateAddonCSP","","`text /** * Checks a custom content security policy string, to ensure that it meets * minimum security requirements. Returns null for valid policies, or a * string describing the error for invalid policies. */`",670,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",671,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",671,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleStates` to one of its base interfaces.",671,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",671,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_UNAVAILABLE","","`text /** * MSAA State flags - used for bitfield. More than 1 allowed. */`",671,null],[18,"STATE_SELECTED","","",671,null],[18,"STATE_FOCUSED","","",671,null],[18,"STATE_PRESSED","","",671,null],[18,"STATE_CHECKED","","",671,null],[18,"STATE_MIXED","","",671,null],[18,"STATE_READONLY","","",671,null],[18,"STATE_HOTTRACKED","","",671,null],[18,"STATE_DEFAULT","","",671,null],[18,"STATE_EXPANDED","","",671,null],[18,"STATE_COLLAPSED","","",671,null],[18,"STATE_BUSY","","",671,null],[18,"STATE_FLOATING","","",671,null],[18,"STATE_MARQUEED","","",671,null],[18,"STATE_ANIMATED","","",671,null],[18,"STATE_INVISIBLE","","",671,null],[18,"STATE_OFFSCREEN","","",671,null],[18,"STATE_SIZEABLE","","",671,null],[18,"STATE_MOVEABLE","","",671,null],[18,"STATE_SELFVOICING","","",671,null],[18,"STATE_FOCUSABLE","","",671,null],[18,"STATE_SELECTABLE","","",671,null],[18,"STATE_LINKED","","",671,null],[18,"STATE_TRAVERSED","","",671,null],[18,"STATE_MULTISELECTABLE","","",671,null],[18,"STATE_EXTSELECTABLE","","",671,null],[18,"STATE_ALERT_LOW","","",671,null],[18,"STATE_ALERT_MEDIUM","","",671,null],[18,"STATE_ALERT_HIGH","","",671,null],[18,"STATE_PROTECTED","","",671,null],[18,"STATE_HASPOPUP","","",671,null],[18,"STATE_REQUIRED","","",671,null],[18,"STATE_IMPORTANT","","",671,null],[18,"STATE_INVALID","","",671,null],[18,"STATE_CHECKABLE","","",671,null],[18,"EXT_STATE_SUPPORTS_AUTOCOMPLETION","","`text /** * Extended state flags (for now non-MSAA, for Java and Gnome/ATK support) * \"Extended state flags\" has separate value space from \"MSAA State flags\". */`",671,null],[18,"EXT_STATE_DEFUNCT","","",671,null],[18,"EXT_STATE_SELECTABLE_TEXT","","",671,null],[18,"EXT_STATE_EDITABLE","","",671,null],[18,"EXT_STATE_ACTIVE","","",671,null],[18,"EXT_STATE_MODAL","","",671,null],[18,"EXT_STATE_MULTI_LINE","","",671,null],[18,"EXT_STATE_HORIZONTAL","","",671,null],[18,"EXT_STATE_OPAQUE","","",671,null],[18,"EXT_STATE_SINGLE_LINE","","",671,null],[18,"EXT_STATE_TRANSIENT","","",671,null],[18,"EXT_STATE_VERTICAL","","",671,null],[18,"EXT_STATE_STALE","","",671,null],[18,"EXT_STATE_ENABLED","","",671,null],[18,"EXT_STATE_SENSITIVE","","",671,null],[18,"EXT_STATE_EXPANDABLE","","",671,null],[18,"EXT_STATE_PINNED","","",671,null],[18,"EXT_STATE_CURRENT","","",671,null],[11,"addref","","",672,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",672,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransportProvider` to one of its base interfaces.",672,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",672,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetListener","","`[must_use] void setListener (in nsIHttpUpgradeListener listener);`",672,null],[11,"addref","","",673,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",673,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMEventListener` to one of its base interfaces.",673,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",673,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleEvent","","`text /** * The nsIDOMEventListener interface is a callback interface for * listening to events in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Events/ */ /** * This method is called whenever an event occurs of the type for which * the EventListener interface was registered. * * @param evt The Event contains contextual information about the * event. It also contains the stopPropagation and * preventDefault methods which are used in determining the * event's flow and default action. */`",673,null],[11,"addref","","",674,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",674,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserHistory` to one of its base interfaces.",674,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",674,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RemovePagesFromHost","","`text /** * Removes all global history information about pages for a given host. * * @param aHost * Hostname to be removed. * An empty host name means local files and anything else with no * hostname. You can also pass in the localized \"(local files)\" * title given to you from a history query to remove all * history information from local files. * @param aEntireDomain * If true, will also delete pages from sub hosts (so if * passed in \"microsoft.com\" will delete \"www.microsoft.com\", * \"msdn.microsoft.com\", etc.). * * @note The removal happens in a batch. */`",674,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemovePagesByTimeframe","","`text /** * Removes all pages for a given timeframe. * Limits are included: aBeginTime <= timeframe <= aEndTime * * @param aBeginTime * Microseconds from epoch, representing the initial time. * @param aEndTime * Microseconds from epoch, representing the final time. * * @note The removal happens in a batch. */`",674,{"inputs":[{"name":"self"},{"name":"prtime"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"addref","","",675,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",675,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScrollBoxObject` to one of its base interfaces.",675,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",675,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",676,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",676,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUUIDGenerator` to one of its base interfaces.",676,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",676,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GenerateUUID","","`text /** * Obtains a new UUID using appropriate platform-specific methods to * obtain a nsID that can be considered to be globally unique. * * @returns an nsID filled in with a new UUID. * * @throws NS_ERROR_FAILURE if a UUID cannot be generated (e.g. if * an underlying source of randomness is not available) */`",676,null],[11,"GenerateUUIDInPlace","","`text /** * Obtain a new UUID like the generateUUID method, but place it in * the provided nsID pointer instead of allocating a new nsID. * * @param id an existing nsID pointer where the UUID will be stored. * * @throws NS_ERROR_FAILURE if a UUID cannot be generated (e.g. if * an underlying source of randomness is not available) */`",676,null],[11,"addref","","",677,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",677,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPrimitive` to one of its base interfaces.",677,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",677,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_ID","","",677,null],[18,"TYPE_CSTRING","","",677,null],[18,"TYPE_STRING","","",677,null],[18,"TYPE_PRBOOL","","",677,null],[18,"TYPE_PRUINT8","","",677,null],[18,"TYPE_PRUINT16","","",677,null],[18,"TYPE_PRUINT32","","",677,null],[18,"TYPE_PRUINT64","","",677,null],[18,"TYPE_PRTIME","","",677,null],[18,"TYPE_CHAR","","",677,null],[18,"TYPE_PRINT16","","",677,null],[18,"TYPE_PRINT32","","",677,null],[18,"TYPE_PRINT64","","",677,null],[18,"TYPE_FLOAT","","",677,null],[18,"TYPE_DOUBLE","","",677,null],[18,"TYPE_INTERFACE_POINTER","","",677,null],[11,"GetType","","`readonly attribute unsigned short type;`",677,null],[11,"addref","","",678,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",678,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsID` to one of its base interfaces.",678,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",678,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute nsIDPtr data;`",678,null],[11,"SetData","","`attribute nsIDPtr data;`",678,null],[11,"ToString","","`string toString ();`",678,null],[11,"addref","","",679,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",679,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsCString` to one of its base interfaces.",679,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",679,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute ACString data;`",679,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetData","","`attribute ACString data;`",679,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",679,null],[11,"addref","","",680,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",680,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsString` to one of its base interfaces.",680,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",680,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute AString data;`",680,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetData","","`attribute AString data;`",680,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ToString","","`wstring toString ();`",680,null],[11,"addref","","",681,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",681,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRBool` to one of its base interfaces.",681,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",681,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute boolean data;`",681,null],[11,"SetData","","`attribute boolean data;`",681,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",681,null],[11,"addref","","",682,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",682,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRUint8` to one of its base interfaces.",682,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",682,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute uint8_t data;`",682,null],[11,"SetData","","`attribute uint8_t data;`",682,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",682,null],[11,"addref","","",683,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",683,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRUint16` to one of its base interfaces.",683,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",683,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute uint16_t data;`",683,null],[11,"SetData","","`attribute uint16_t data;`",683,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",683,null],[11,"addref","","",684,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",684,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRUint32` to one of its base interfaces.",684,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",684,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute uint32_t data;`",684,null],[11,"SetData","","`attribute uint32_t data;`",684,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",684,null],[11,"addref","","",685,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",685,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRUint64` to one of its base interfaces.",685,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",685,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute uint64_t data;`",685,null],[11,"SetData","","`attribute uint64_t data;`",685,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",685,null],[11,"addref","","",686,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",686,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRTime` to one of its base interfaces.",686,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",686,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute PRTime data;`",686,null],[11,"SetData","","`attribute PRTime data;`",686,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",686,null],[11,"addref","","",687,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",687,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsChar` to one of its base interfaces.",687,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",687,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute char data;`",687,null],[11,"SetData","","`attribute char data;`",687,{"inputs":[{"name":"self"},{"name":"c_char"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",687,null],[11,"addref","","",688,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",688,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRInt16` to one of its base interfaces.",688,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",688,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute int16_t data;`",688,null],[11,"SetData","","`attribute int16_t data;`",688,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",688,null],[11,"addref","","",689,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",689,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRInt32` to one of its base interfaces.",689,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",689,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute int32_t data;`",689,null],[11,"SetData","","`attribute int32_t data;`",689,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",689,null],[11,"addref","","",690,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",690,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPRInt64` to one of its base interfaces.",690,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",690,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute int64_t data;`",690,null],[11,"SetData","","`attribute int64_t data;`",690,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",690,null],[11,"addref","","",691,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",691,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsFloat` to one of its base interfaces.",691,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",691,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute float data;`",691,null],[11,"SetData","","`attribute float data;`",691,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",691,null],[11,"addref","","",692,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",692,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsDouble` to one of its base interfaces.",692,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",692,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute double data;`",692,null],[11,"SetData","","`attribute double data;`",692,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"ToString","","`string toString ();`",692,null],[11,"addref","","",693,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",693,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsInterfacePointer` to one of its base interfaces.",693,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",693,{"inputs":[{"name":"self"}],"output":{"name":"nsisupportsprimitive"}}],[11,"GetData","","`attribute nsISupports data;`",693,null],[11,"SetData","","`attribute nsISupports data;`",693,null],[11,"GetDataIID","","`attribute nsIDPtr dataIID;`",693,null],[11,"SetDataIID","","`attribute nsIDPtr dataIID;`",693,null],[11,"ToString","","`string toString ();`",693,null],[11,"addref","","",694,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",694,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPKCS11Module` to one of its base interfaces.",694,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",694,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`[must_use] readonly attribute AUTF8String name;`",694,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetLibName","","`[must_use] readonly attribute AUTF8String libName;`",694,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"FindSlotByName","","`[must_use] nsIPKCS11Slot findSlotByName (in AUTF8String name);`",694,null],[11,"ListSlots","","`[must_use] nsISimpleEnumerator listSlots ();`",694,null],[11,"addref","","",695,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",695,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIFixupInfo` to one of its base interfaces.",695,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",695,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetConsumer","","`text /** * Consumer that asked for fixed up URI. */`",695,null],[11,"SetConsumer","","`text /** * Consumer that asked for fixed up URI. */`",695,null],[11,"GetPreferredURI","","`text /** * Our best guess as to what URI the consumer will want. Might * be null if we couldn't salvage anything (for instance, because * the input was invalid as a URI and FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP * was not passed) */`",695,null],[11,"GetFixedURI","","`text /** * The fixed-up original input, *never* using a keyword search. * (might be null if the original input was not recoverable as * a URL, e.g. \"foo bar\"!) */`",695,null],[11,"GetKeywordProviderName","","`text /** * The name of the keyword search provider used to provide a keyword search; * empty string if no keyword search was done. */`",695,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetKeywordAsSent","","`text /** * The keyword as used for the search (post trimming etc.) * empty string if no keyword search was done. */`",695,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFixupChangedProtocol","","`text /** * Whether we changed the protocol instead of using one from the input as-is. */`",695,null],[11,"GetFixupCreatedAlternateURI","","`text /** * Whether we created an alternative URI. We might have added a prefix and/or * suffix, the contents of which are controlled by the * browser.fixup.alternate.prefix and .suffix prefs, with the defaults being * \"www.\" and \".com\", respectively. */`",695,null],[11,"GetOriginalInput","","`text /** * The original input */`",695,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",696,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",696,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIFixup` to one of its base interfaces.",696,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",696,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FIXUP_FLAG_NONE","","`text /** No fixup flags. */`",696,null],[18,"FIXUP_FLAG_ALLOW_KEYWORD_LOOKUP","","`text /** * Allow the fixup to use a keyword lookup service to complete the URI. * The fixup object implementer should honour this flag and only perform * any lengthy keyword (or search) operation if it is set. */`",696,null],[18,"FIXUP_FLAGS_MAKE_ALTERNATE_URI","","`text /** * Tell the fixup to make an alternate URI from the input URI, for example * to turn foo into www.foo.com. */`",696,null],[18,"FIXUP_FLAG_FIX_SCHEME_TYPOS","","",696,null],[11,"CreateExposableURI","","`text /** * Converts an internal URI (e.g. a wyciwyg URI) into one which we can * expose to the user, for example on the URL bar. * * @param aURI The URI to be converted * @return nsIURI The converted, exposable URI * @throws NS_ERROR_MALFORMED_URI when the exposable portion of aURI is malformed * @throws NS_ERROR_UNKNOWN_PROTOCOL when we can't get a protocol handler service * for the URI scheme. */`",696,null],[11,"CreateFixupURI","","`text /** * Converts the specified string into a URI, first attempting * to correct any errors in the syntax or other vagaries. Returns * a wellformed URI or nullptr if it can't. * * @param aURIText Candidate URI. * @param aFixupFlags Flags that govern ways the URI may be fixed up. * @param aPostData The POST data to submit with the returned * URI (see nsISearchSubmission). */`",696,null],[11,"GetFixupURIInfo","","`text /** * Same as createFixupURI, but returns information about what it corrected * (e.g. whether we could rescue the URI or \"just\" generated a keyword * search URI instead). * * @param aURIText Candidate URI. * @param aFixupFlags Flags that govern ways the URI may be fixed up. * @param aPostData The POST data to submit with the returned * URI (see nsISearchSubmission). */`",696,null],[11,"KeywordToURI","","`text /** * Converts the specified keyword string into a URI. Note that it's the * caller's responsibility to check whether keywords are enabled and * whether aKeyword is a sensible keyword. * * @param aKeyword The keyword string to convert into a URI * @param aPostData The POST data to submit to the returned URI * (see nsISearchSubmission). * * @throws NS_ERROR_FAILURE if the resulting URI requires submission of POST * data and aPostData is null. */`",696,null],[11,"IsDomainWhitelisted","","`text /** * Returns true if the specified domain is whitelisted and false otherwise. * A whitelisted domain is relevant when we have a single word and can't be * sure whether to treat the word as a host name or should instead be * treated as a search term. * * @param aDomain A domain name to query. * @param aDotPos The position of the first '.' character in aDomain, or * -1 if no '.' character exists. */`",696,null],[11,"addref","","",697,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",697,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebSocketChannel` to one of its base interfaces.",697,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",697,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"CLOSE_NORMAL","","",697,null],[18,"CLOSE_GOING_AWAY","","",697,null],[18,"CLOSE_PROTOCOL_ERROR","","",697,null],[18,"CLOSE_UNSUPPORTED_DATATYPE","","",697,null],[18,"CLOSE_NO_STATUS","","",697,null],[18,"CLOSE_ABNORMAL","","",697,null],[18,"CLOSE_INVALID_PAYLOAD","","",697,null],[18,"CLOSE_POLICY_VIOLATION","","",697,null],[18,"CLOSE_TOO_LARGE","","",697,null],[18,"CLOSE_EXTENSION_MISSING","","",697,null],[18,"CLOSE_INTERNAL_ERROR","","",697,null],[18,"CLOSE_TLS_FAILED","","",697,null],[11,"GetOriginalURI","","`text /** * The original URI used to construct the protocol connection. This is used * in the case of a redirect or URI \"resolution\" (e.g. resolving a * resource: URI to a file: URI) so that the original pre-redirect * URI can still be obtained. This is never null. */`",697,null],[11,"GetURI","","`text /** * The readonly URI corresponding to the protocol connection after any * redirections are completed. */`",697,null],[11,"GetNotificationCallbacks","","`text /** * The notification callbacks for authorization, etc.. */`",697,null],[11,"SetNotificationCallbacks","","`text /** * The notification callbacks for authorization, etc.. */`",697,null],[11,"GetSecurityInfo","","`text /** * Transport-level security information (if any) */`",697,null],[11,"GetLoadGroup","","`text /** * The load group of of the websocket */`",697,null],[11,"SetLoadGroup","","`text /** * The load group of of the websocket */`",697,null],[11,"GetLoadInfo","","`text /** * The load info of the websocket */`",697,null],[11,"SetLoadInfo","","`text /** * The load info of the websocket */`",697,null],[11,"GetProtocol","","`text /** * Sec-Websocket-Protocol value */`",697,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetProtocol","","`text /** * Sec-Websocket-Protocol value */`",697,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetExtensions","","`text /** * Sec-Websocket-Extensions response header value */`",697,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"InitLoadInfo","","`text /** * Init the WebSocketChannel with LoadInfo arguments. * @param aLoadingNode * @param aLoadingPrincipal * @param aTriggeringPrincipal * @param aSecurityFlags * @param aContentPolicyType * These will be used as values for the nsILoadInfo object on the * created channel. For details, see nsILoadInfo in nsILoadInfo.idl * @return reference to the new nsIChannel object * * Keep in mind that URIs coming from a webpage should *never* use the * systemPrincipal as the loadingPrincipal. * * Please note, if you provide both a loadingNode and a loadingPrincipal, * then loadingPrincipal must be equal to loadingNode->NodePrincipal(). * But less error prone is to just supply a loadingNode. */`",697,null],[11,"AsyncOpen","","`text /** * Asynchronously open the websocket connection. Received messages are fed * to the socket listener as they arrive. The socket listener's methods * are called on the thread that calls asyncOpen and are not called until * after asyncOpen returns. If asyncOpen returns successfully, the * protocol implementation promises to call at least onStop on the listener. * * NOTE: Implementations should throw NS_ERROR_ALREADY_OPENED if the * websocket connection is reopened. * * @param aURI the uri of the websocket protocol - may be redirected * @param aOrigin the uri of the originating resource * @param aInnerWindowID the inner window ID * @param aListener the nsIWebSocketListener implementation * @param aContext an opaque parameter forwarded to aListener's methods */`",697,null],[11,"Close","","`[must_use] void close (in unsigned short aCode, in AUTF8String aReason);`",697,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SendMsg","","`text /** * Use to send text message down the connection to WebSocket peer. * * @param aMsg the utf8 string to send */`",697,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SendBinaryMsg","","`text /** * Use to send binary message down the connection to WebSocket peer. * * @param aMsg the data to send */`",697,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SendBinaryStream","","`text /** * Use to send a binary stream (Blob) to Websocket peer. * * @param aStream The input stream to be sent. */`",697,null],[11,"GetPingInterval","","`text /** * This value determines how often (in seconds) websocket keepalive * pings are sent. If set to 0 (the default), no pings are ever sent. * * This value can currently only be set before asyncOpen is called, else * NS_ERROR_IN_PROGRESS is thrown. * * Be careful using this setting: ping traffic can consume lots of power and * bandwidth over time. */`",697,null],[11,"SetPingInterval","","`text /** * This value determines how often (in seconds) websocket keepalive * pings are sent. If set to 0 (the default), no pings are ever sent. * * This value can currently only be set before asyncOpen is called, else * NS_ERROR_IN_PROGRESS is thrown. * * Be careful using this setting: ping traffic can consume lots of power and * bandwidth over time. */`",697,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetPingTimeout","","`text /** * This value determines how long (in seconds) the websocket waits for * the server to reply to a ping that has been sent before considering the * connection broken. * * This value can currently only be set before asyncOpen is called, else * NS_ERROR_IN_PROGRESS is thrown. */`",697,null],[11,"SetPingTimeout","","`text /** * This value determines how long (in seconds) the websocket waits for * the server to reply to a ping that has been sent before considering the * connection broken. * * This value can currently only be set before asyncOpen is called, else * NS_ERROR_IN_PROGRESS is thrown. */`",697,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetSerial","","`text /** * Unique ID for this channel. It's not readonly because when the channel is * created via IPC, the serial number is received from the child process. */`",697,null],[11,"SetSerial","","`text /** * Unique ID for this channel. It's not readonly because when the channel is * created via IPC, the serial number is received from the child process. */`",697,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetServerParameters","","`text /** * Set a nsITransportProvider and negotated extensions to be used by this * channel. Calling this function also means that this channel will * implement the server-side part of a websocket connection rather than the * client-side part. */`",697,null],[11,"addref","","",698,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",698,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITraceableChannel` to one of its base interfaces.",698,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",698,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetNewListener","","`nsIStreamListener setNewListener (in nsIStreamListener aListener);`",698,null],[11,"addref","","",699,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",699,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIQuotaManagerService` to one of its base interfaces.",699,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",699,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initializes storage directory. This can be used in tests to verify * upgrade methods. * * If the dom.quotaManager.testing preference is not true the call will be * a no-op. */`",699,null],[11,"InitStoragesForPrincipal","","`text /** * Initializes storages for the given principal. This can be used in tests to * verify origin initialization. * * If the dom.quotaManager.testing preference is not true the call will be * a no-op. * * @param aPrincipal * A principal for the origin whose storages are to be initialized. * @param aPersistenceType * A string that tells what persistence type of storages will be * initialized. */`",699,null],[11,"GetUsage","","`text /** * Schedules an asynchronous callback that will inspect all origins and * return the total amount of disk space being used by storages for each * origin separately. * * @param aCallback * The callback that will be called when the usage is available. * @param aGetAll * An optional boolean to indicate inspection of all origins, * including internal ones. */`",699,null],[11,"GetUsageForPrincipal","","`text /** * Schedules an asynchronous callback that will return the total amount of * disk space being used by storages for the given origin. * * @param aPrincipal * A principal for the origin whose usage is being queried. * @param aCallback * The callback that will be called when the usage is available. * @param aGetGroupUsage * An optional flag to indicate whether getting group usage and limit * or origin usage and file usage. The default value is false. * Note: Origin usage here represents total usage of an origin. However, * group usage here represents only non-persistent usage of a group. */`",699,null],[11,"Clear","","`text /** * Removes all storages. The files may not be deleted immediately depending * on prohibitive concurrent operations. * Be careful, this removes *all* the data that has ever been stored! * * If the dom.quotaManager.testing preference is not true the call will be * a no-op. */`",699,null],[11,"ClearStoragesForPrincipal","","`text /** * Removes all storages stored for the given principal. The files may not be * deleted immediately depending on prohibitive concurrent operations. * * @param aPrincipal * A principal for the origin whose storages are to be cleared. * @param aPersistenceType * An optional string that tells what persistence type of storages * will be cleared. * @param aClearAll * An optional boolean to indicate clearing all storages under the * given origin. */`",699,null],[11,"Reset","","`text /** * Resets quota and storage management. This can be used to force * reinitialization of the temp storage, for example when the pref for * overriding the temp storage limit has changed. * Be carefull, this invalidates all live storages! * * If the dom.quotaManager.testing preference is not true the call will be * a no-op. */`",699,null],[11,"Persisted","","`text /** * Check if given origin is persisted. * * @param aPrincipal * A principal for the origin which we want to check. */`",699,null],[11,"Persist","","`text /** * Persist given origin. * * @param aPrincipal * A principal for the origin which we want to persist. */`",699,null],[11,"addref","","",700,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",700,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIControllers` to one of its base interfaces.",700,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",700,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetControllerForCommand","","`nsIController getControllerForCommand (in string command);`",700,null],[11,"InsertControllerAt","","`void insertControllerAt (in unsigned long index, in nsIController controller);`",700,null],[11,"RemoveControllerAt","","`nsIController removeControllerAt (in unsigned long index);`",700,null],[11,"GetControllerAt","","`nsIController getControllerAt (in unsigned long index);`",700,null],[11,"AppendController","","`void appendController (in nsIController controller);`",700,null],[11,"RemoveController","","`void removeController (in nsIController controller);`",700,null],[11,"GetControllerId","","`unsigned long getControllerId (in nsIController controller);`",700,null],[11,"GetControllerById","","`nsIController getControllerById (in unsigned long controllerID);`",700,null],[11,"GetControllerCount","","`unsigned long getControllerCount ();`",700,null],[11,"addref","","",701,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",701,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMScreen` to one of its base interfaces.",701,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",701,{"inputs":[{"name":"self"}],"output":{"name":"nsidomeventtarget"}}],[11,"GetTop","","`readonly attribute long top;`",701,null],[11,"GetAvailWidth","","`readonly attribute long availWidth;`",701,null],[11,"GetAvailHeight","","`readonly attribute long availHeight;`",701,null],[11,"GetAvailLeft","","`readonly attribute long availLeft;`",701,null],[11,"GetAvailTop","","`readonly attribute long availTop;`",701,null],[11,"addref","","",702,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",702,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputListAutoComplete` to one of its base interfaces.",702,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",702,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AutoCompleteSearch","","`text /** * Generate results for a form input autocomplete menu. */`",702,null],[11,"addref","","",703,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",703,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransaction` to one of its base interfaces.",703,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",703,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DoTransaction","","`text /** * Executes the transaction. */`",703,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UndoTransaction","","`text /** * Restores the state to what it was before the transaction was executed. */`",703,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RedoTransaction","","`text /** * Executes the transaction again. Can only be called on a transaction that * was previously undone. * <P> * In most cases, the redoTransaction() method will actually call the * doTransaction() method to execute the transaction again. */`",703,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsTransient","","`text /** * The transaction's transient state. This attribute is checked by * the transaction manager after the transaction's Execute() method is called. * If the transient state is false, a reference to the transaction is * held by the transaction manager so that the transactions' undoTransaction() * and redoTransaction() methods can be called. If the transient state is * true, the transaction manager returns immediately after the transaction's * doTransaction() method is called, no references to the transaction are * maintained. Transient transactions cannot be undone or redone by the * transaction manager. */`",703,null],[11,"Merge","","`text /** * Attempts to merge a transaction into \"this\" transaction. Both transactions * must be in their undo state, doTransaction() methods already called. The * transaction manager calls this method to coalesce a new transaction with * the transaction on the top of the undo stack. * This method returns a boolean value that indicates the merge result. * A true value indicates that the transactions were merged successfully, * a false value if the merge was not possible or failed. If true, * the transaction manager will Release() the new transacton instead of * pushing it on the undo stack. * @param aTransaction the previously executed transaction to merge. */`",703,null],[11,"addref","","",704,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",704,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFRemoteDataSource` to one of its base interfaces.",704,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",704,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLoaded","","`text /** * This value is <code>true</code> when the datasource has * fully loaded itself. */`",704,null],[11,"Init","","`text /** * Specify the URI for the data source: this is the prefix * that will be used to register the data source in the * data source registry. * @param aURI the URI to load */`",704,null],[11,"Refresh","","`text /** * Refresh the remote datasource, re-loading its contents * from the URI. * * @param aBlocking If <code>true</code>, the call will block * until the datasource has completely reloaded. */`",704,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Flush","","`text /** * Request that a data source write its contents out to * permanent storage, if applicable. */`",704,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"FlushTo","","`void FlushTo (in string aURI);`",704,null],[11,"addref","","",705,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",705,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRedirectHistoryEntry` to one of its base interfaces.",705,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",705,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrincipal","","`text /** * The principal of this redirect entry */`",705,null],[11,"GetReferrerURI","","`text /** * The referring URI of this redirect entry. This may be null. */`",705,null],[11,"GetRemoteAddress","","`text /** * The remote address of this redirect entry. */`",705,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",706,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",706,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGSettingsCollection` to one of its base interfaces.",706,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",706,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetString","","`void setString (in AUTF8String key, in AUTF8String value);`",706,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetBoolean","","`void setBoolean (in AUTF8String key, in boolean value);`",706,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetInt","","`void setInt (in AUTF8String key, in long value);`",706,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetString","","`AUTF8String getString (in AUTF8String key);`",706,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBoolean","","`boolean getBoolean (in AUTF8String key);`",706,null],[11,"GetInt","","`long getInt (in AUTF8String key);`",706,null],[11,"GetStringList","","`nsIArray getStringList (in AUTF8String key);`",706,null],[11,"addref","","",707,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",707,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGSettingsService` to one of its base interfaces.",707,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",707,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCollectionForSchema","","`nsIGSettingsCollection getCollectionForSchema (in AUTF8String schema);`",707,null],[11,"addref","","",708,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",708,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFile` to one of its base interfaces.",708,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",708,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NORMAL_FILE_TYPE","","`text /** * Create Types * * NORMAL_FILE_TYPE - A normal file. * DIRECTORY_TYPE - A directory/folder. */`",708,null],[18,"DIRECTORY_TYPE","","",708,null],[18,"OS_READAHEAD","","`text /** * Flag for openNSPRFileDesc(), to hint to the OS that the file will be * read sequentially with agressive readahead. */`",708,null],[18,"DELETE_ON_CLOSE","","`text /** * Flag for openNSPRFileDesc(). Deprecated and unreliable! * Instead use NS_OpenAnonymousTemporaryFile() to create a temporary * file which will be deleted upon close! */`",708,null],[11,"Append","","`text /** * append[Native] * * This function is used for constructing a descendent of the * current nsIFile. * * @param node * A string which is intended to be a child node of the nsIFile. * For the |appendNative| method, the node must be in the native * filesystem charset. */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendNative","","`[noscript] void appendNative (in ACString node);`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Normalize","","`text /** * Normalize the pathName (e.g. removing .. and . components on Unix). */`",708,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Create","","`text /** * create * * This function will create a new file or directory in the * file system. Any nodes that have not been created or * resolved, will be. If the file or directory already * exists create() will return NS_ERROR_FILE_ALREADY_EXISTS. * * @param type * This specifies the type of file system object * to be made. The only two types at this time * are file and directory which are defined above. * If the type is unrecongnized, we will return an * error (NS_ERROR_FILE_UNKNOWN_TYPE). * * @param permissions * The unix style octal permissions. This may * be ignored on systems that do not need to do * permissions. */`",708,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetLeafName","","`text /** * Accessor to the leaf name of the file itself. * For the |nativeLeafName| method, the nativeLeafName must * be in the native filesystem charset. */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetLeafName","","`text /** * Accessor to the leaf name of the file itself. * For the |nativeLeafName| method, the nativeLeafName must * be in the native filesystem charset. */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNativeLeafName","","`[noscript] attribute ACString nativeLeafName;`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetNativeLeafName","","`[noscript] attribute ACString nativeLeafName;`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"CopyTo","","`text /** * copyTo[Native] * * This will copy this file to the specified newParentDir. * If a newName is specified, the file will be renamed. * If 'this' is not created we will return an error * (NS_ERROR_FILE_TARGET_DOES_NOT_EXIST). * * copyTo may fail if the file already exists in the destination * directory. * * copyTo will NOT resolve aliases/shortcuts during the copy. * * @param newParentDir * This param is the destination directory. If the * newParentDir is null, copyTo() will use the parent * directory of this file. If the newParentDir is not * empty and is not a directory, an error will be * returned (NS_ERROR_FILE_DESTINATION_NOT_DIR). For the * |CopyToNative| method, the newName must be in the * native filesystem charset. * * @param newName * This param allows you to specify a new name for * the file to be copied. This param may be empty, in * which case the current leaf name will be used. */`",708,null],[11,"CopyToNative","","`[noscript] void CopyToNative (in nsIFile newParentDir, in ACString newName);`",708,null],[11,"CopyToFollowingLinks","","`text /** * copyToFollowingLinks[Native] * * This function is identical to copyTo with the exception that, * as the name implies, it follows symbolic links. The XP_UNIX * implementation always follow symbolic links when copying. For * the |CopyToFollowingLinks| method, the newName must be in the * native filesystem charset. */`",708,null],[11,"CopyToFollowingLinksNative","","`[noscript] void copyToFollowingLinksNative (in nsIFile newParentDir, in ACString newName);`",708,null],[11,"MoveTo","","`text /** * moveTo[Native] * * A method to move this file or directory to newParentDir. * If a newName is specified, the file or directory will be renamed. * If 'this' is not created we will return an error * (NS_ERROR_FILE_TARGET_DOES_NOT_EXIST). * If 'this' is a file, and the destination file already exists, moveTo * will replace the old file. * This object is updated to refer to the new file. * * moveTo will NOT resolve aliases/shortcuts during the copy. * moveTo will do the right thing and allow copies across volumes. * moveTo will return an error (NS_ERROR_FILE_DIR_NOT_EMPTY) if 'this' is * a directory and the destination directory is not empty. * moveTo will return an error (NS_ERROR_FILE_ACCESS_DENIED) if 'this' is * a directory and the destination directory is not writable. * * @param newParentDir * This param is the destination directory. If the * newParentDir is empty, moveTo() will rename the file * within its current directory. If the newParentDir is * not empty and does not name a directory, an error will * be returned (NS_ERROR_FILE_DESTINATION_NOT_DIR). For * the |moveToNative| method, the newName must be in the * native filesystem charset. * * @param newName * This param allows you to specify a new name for * the file to be moved. This param may be empty, in * which case the current leaf name will be used. */`",708,null],[11,"MoveToNative","","`[noscript] void moveToNative (in nsIFile newParentDir, in ACString newName);`",708,null],[11,"RenameTo","","`text /** * renameTo * * This method is identical to moveTo except that if this file or directory * is moved to a a different volume, it fails and returns an error * (NS_ERROR_FILE_ACCESS_DENIED). * This object will still point to the old location after renaming. */`",708,null],[11,"RenameToNative","","`[noscript] void renameToNative (in nsIFile newParentDir, in ACString newName);`",708,null],[11,"Remove","","`text /** * This will try to delete this file. The 'recursive' flag * must be PR_TRUE to delete directories which are not empty. * * This will not resolve any symlinks. */`",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPermissions","","`text /** * Attributes of nsIFile. */`",708,null],[11,"SetPermissions","","`text /** * Attributes of nsIFile. */`",708,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetPermissionsOfLink","","`attribute unsigned long permissionsOfLink;`",708,null],[11,"SetPermissionsOfLink","","`attribute unsigned long permissionsOfLink;`",708,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetLastModifiedTime","","`text /** * File Times are to be in milliseconds from * midnight (00:00:00), January 1, 1970 Greenwich Mean * Time (GMT). */`",708,null],[11,"SetLastModifiedTime","","`text /** * File Times are to be in milliseconds from * midnight (00:00:00), January 1, 1970 Greenwich Mean * Time (GMT). */`",708,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"GetLastModifiedTimeOfLink","","`attribute PRTime lastModifiedTimeOfLink;`",708,null],[11,"SetLastModifiedTimeOfLink","","`attribute PRTime lastModifiedTimeOfLink;`",708,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"GetFileSize","","`text /** * WARNING! On the Mac, getting/setting the file size with nsIFile * only deals with the size of the data fork. If you need to * know the size of the combined data and resource forks use the * GetFileSizeWithResFork() method defined on nsILocalFileMac. */`",708,null],[11,"SetFileSize","","`text /** * WARNING! On the Mac, getting/setting the file size with nsIFile * only deals with the size of the data fork. If you need to * know the size of the combined data and resource forks use the * GetFileSizeWithResFork() method defined on nsILocalFileMac. */`",708,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetFileSizeOfLink","","`readonly attribute int64_t fileSizeOfLink;`",708,null],[11,"GetTarget","","`text /** * target & path * * Accessor to the string path. The native version of these * strings are not guaranteed to be a usable path to pass to * NSPR or the C stdlib. There are problems that affect * platforms on which a path does not fully specify a file * because two volumes can have the same name (e.g., mac). * This is solved by holding \"private\", native data in the * nsIFile implementation. This native data is lost when * you convert to a string. * * DO NOT PASS TO USE WITH NSPR OR STDLIB! * * target * Find out what the symlink points at. Will give error * (NS_ERROR_FILE_INVALID_PATH) if not a symlink. * * path * Find out what the nsIFile points at. * * Note that the ACString attributes are returned in the * native filesystem charset. * */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNativeTarget","","`[noscript] readonly attribute ACString nativeTarget;`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPath","","`readonly attribute AString path;`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNativePath","","`[noscript] readonly attribute ACString nativePath;`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Exists","","`boolean exists ();`",708,null],[11,"IsWritable","","`boolean isWritable ();`",708,null],[11,"IsReadable","","`boolean isReadable ();`",708,null],[11,"IsExecutable","","`boolean isExecutable ();`",708,null],[11,"IsHidden","","`boolean isHidden ();`",708,null],[11,"IsDirectory","","`boolean isDirectory ();`",708,null],[11,"IsFile","","`boolean isFile ();`",708,null],[11,"IsSymlink","","`boolean isSymlink ();`",708,null],[11,"IsSpecial","","`text /** * Not a regular file, not a directory, not a symlink. */`",708,null],[11,"CreateUnique","","`text /** * createUnique * * This function will create a new file or directory in the * file system. Any nodes that have not been created or * resolved, will be. If this file already exists, we try * variations on the leaf name \"suggestedName\" until we find * one that did not already exist. * * If the search for nonexistent files takes too long * (thousands of the variants already exist), we give up and * return NS_ERROR_FILE_TOO_BIG. * * @param type * This specifies the type of file system object * to be made. The only two types at this time * are file and directory which are defined above. * If the type is unrecongnized, we will return an * error (NS_ERROR_FILE_UNKNOWN_TYPE). * * @param permissions * The unix style octal permissions. This may * be ignored on systems that do not need to do * permissions. */`",708,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Clone","","`text /** * clone() * * This function will allocate and initialize a nsIFile object to the * exact location of the |this| nsIFile. * * @param file * A nsIFile which this object will be initialize * with. * */`",708,null],[11,"Equals","","`text /** * Will determine if the inFile equals this. */`",708,null],[11,"Contains","","`text /** * Will determine if inFile is a descendant of this file. * This routine looks in subdirectories too. */`",708,null],[11,"GetParent","","`text /** * Parent will be null when this is at the top of the volume. */`",708,null],[11,"GetDirectoryEntries","","`text /** * Returns an enumeration of the elements in a directory. Each * element in the enumeration is an nsIFile. * * @throws NS_ERROR_FILE_NOT_DIRECTORY if the current nsIFile does * not specify a directory. */`",708,null],[11,"InitWithPath","","`text /** * initWith[Native]Path * * This function will initialize the nsIFile object. Any * internal state information will be reset. * * @param filePath * A string which specifies a full file path to a * location. Relative paths will be treated as an * error (NS_ERROR_FILE_UNRECOGNIZED_PATH). For * initWithNativePath, the filePath must be in the native * filesystem charset. */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitWithNativePath","","`[noscript] void initWithNativePath (in ACString filePath);`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"InitWithFile","","`text /** * initWithFile * * Initialize this object with another file * * @param aFile * the file this becomes equivalent to */`",708,null],[11,"GetFollowLinks","","`text /** * followLinks * * This attribute will determine if the nsLocalFile will auto * resolve symbolic links. By default, this value will be false * on all non unix systems. On unix, this attribute is effectively * a noop. */`",708,null],[11,"SetFollowLinks","","`text /** * followLinks * * This attribute will determine if the nsLocalFile will auto * resolve symbolic links. By default, this value will be false * on all non unix systems. On unix, this attribute is effectively * a noop. */`",708,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDiskSpaceAvailable","","`[must_use] readonly attribute int64_t diskSpaceAvailable;`",708,null],[11,"AppendRelativePath","","`text /** * appendRelative[Native]Path * * Append a relative path to the current path of the nsIFile object. * * @param relativeFilePath * relativeFilePath is a native relative path. For security reasons, * this cannot contain .. or cannot start with a directory separator. * For the |appendRelativeNativePath| method, the relativeFilePath * must be in the native filesystem charset. */`",708,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendRelativeNativePath","","`[noscript] void appendRelativeNativePath (in ACString relativeFilePath);`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPersistentDescriptor","","`text /** * Accessor to a null terminated string which will specify * the file in a persistent manner for disk storage. * * The character set of this attribute is undefined. DO NOT TRY TO * INTERPRET IT AS HUMAN READABLE TEXT! */`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPersistentDescriptor","","`text /** * Accessor to a null terminated string which will specify * the file in a persistent manner for disk storage. * * The character set of this attribute is undefined. DO NOT TRY TO * INTERPRET IT AS HUMAN READABLE TEXT! */`",708,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Reveal","","`text /** * reveal * * Ask the operating system to open the folder which contains * this file or folder. This routine only works on platforms which * support the ability to open a folder and is run async on Windows. * This routine must be called on the main. */`",708,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Launch","","`text /** * launch * * Ask the operating system to attempt to open the file. * this really just simulates \"double clicking\" the file on your platform. * This routine only works on platforms which support this functionality * and is run async on Windows. This routine must be called on the * main thread. */`",708,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRelativeDescriptor","","`text /** * getRelativeDescriptor * * Returns a relative file path in an opaque, XP format. It is therefore * not a native path. * * The character set of the string returned from this function is * undefined. DO NOT TRY TO INTERPRET IT AS HUMAN READABLE TEXT! * * @param fromFile * the file from which the descriptor is relative. * Throws if fromFile is null. */`",708,null],[11,"SetRelativeDescriptor","","`text /** * setRelativeDescriptor * * Initializes the file to the location relative to fromFile using * a string returned by getRelativeDescriptor. * * @param fromFile * the file to which the descriptor is relative * @param relative * the relative descriptor obtained from getRelativeDescriptor */`",708,null],[11,"GetRelativePath","","`text /** * getRelativePath * * Returns a relative file from 'fromFile' to this file as a UTF-8 string. * Going up the directory tree is represented via \"../\". '/' is used as * the path segment separator. This is not a native path, since it's UTF-8 * encoded. * * @param fromFile * the file from which the path is relative. * Throws if fromFile is null. */`",708,null],[11,"SetRelativePath","","`text /** * setRelativePath * * Initializes the file to the location relative to fromFile using * a string returned by getRelativePath. * * @param fromFile * the file from which the path is relative * @param relative * the relative path obtained from getRelativePath */`",708,null],[11,"addref","","",709,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",709,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMStyleSheetList` to one of its base interfaces.",709,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",709,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`text /** * The nsIDOMStyleSheetList interface is a datatype for a style sheet * list in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",709,null],[11,"SlowItem","","`[binaryname(SlowItem)] nsIDOMStyleSheet item (in unsigned long index);`",709,null],[11,"addref","","",710,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",710,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpActivityObserver` to one of its base interfaces.",710,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",710,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ACTIVITY_TYPE_SOCKET_TRANSPORT","","",710,null],[18,"ACTIVITY_TYPE_HTTP_TRANSACTION","","",710,null],[18,"ACTIVITY_SUBTYPE_REQUEST_HEADER","","",710,null],[18,"ACTIVITY_SUBTYPE_REQUEST_BODY_SENT","","",710,null],[18,"ACTIVITY_SUBTYPE_RESPONSE_START","","",710,null],[18,"ACTIVITY_SUBTYPE_RESPONSE_HEADER","","",710,null],[18,"ACTIVITY_SUBTYPE_RESPONSE_COMPLETE","","",710,null],[18,"ACTIVITY_SUBTYPE_TRANSACTION_CLOSE","","",710,null],[11,"ObserveActivity","","`text /** * observe activity from the http transport * * @param aHttpChannel * nsISupports interface for the the http channel that * generated this activity * @param aActivityType * The value of this aActivityType will be one of * ACTIVITY_TYPE_SOCKET_TRANSPORT or * ACTIVITY_TYPE_HTTP_TRANSACTION * @param aActivitySubtype * The value of this aActivitySubtype, will be depend * on the value of aActivityType. When aActivityType * is ACTIVITY_TYPE_SOCKET_TRANSPORT * aActivitySubtype will be one of the * nsISocketTransport::STATUS_???? values defined in * nsISocketTransport.idl * OR when aActivityType * is ACTIVITY_TYPE_HTTP_TRANSACTION * aActivitySubtype will be one of the * nsIHttpActivityObserver::ACTIVITY_SUBTYPE_???? values * defined below * @param aTimestamp * microseconds past the epoch of Jan 1, 1970 * @param aExtraSizeData * Any extra size data optionally available with * this activity * @param aExtraStringData * Any extra string data optionally available with * this activity */`",710,null],[11,"GetIsActive","","`text /** * This attribute is true when this interface is active and should * observe http activities. When false, observeActivity() should not * be called. It is present for compatibility reasons and should be * implemented only by nsHttpActivityDistributor. */`",710,null],[11,"addref","","",711,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",711,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpActivityDistributor` to one of its base interfaces.",711,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",711,{"inputs":[{"name":"self"}],"output":{"name":"nsihttpactivityobserver"}}],[11,"AddObserver","","`void addObserver (in nsIHttpActivityObserver aObserver);`",711,null],[11,"RemoveObserver","","`void removeObserver (in nsIHttpActivityObserver aObserver);`",711,null],[11,"addref","","",712,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",712,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowlessBrowser` to one of its base interfaces.",712,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",712,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebnavigation"}}],[11,"Close","","`text /** * \"Closes\" the windowless browser and destroys its associated nsIWebBrowser * and docshell. * * This method *must* be called for every windowless browser before its last * reference is released. */`",712,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",713,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",713,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPK11TokenDB` to one of its base interfaces.",713,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",713,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInternalKeyToken","","`nsIPK11Token getInternalKeyToken ();`",713,null],[11,"FindTokenByName","","`[must_use] nsIPK11Token findTokenByName (in AUTF8String tokenName);`",713,null],[11,"addref","","",714,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",714,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINotificationStorageCallback` to one of its base interfaces.",714,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",714,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Handle","","`text /** * Callback function used to pass single notification back * into C++ land for Notification.get return data. * * @param id: a uuid for this notification * @param title: the notification title * @param dir: the notification direction, * possible values are \"ltr\", \"rtl\", \"auto\" * @param lang: the notification language * @param body: the notification body * @param tag: the notification tag */`",714,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Done","","`text /** * Callback function used to notify C++ the we have returned * all notification objects for this Notification.get call. */`",714,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",715,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",715,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINotificationStorage` to one of its base interfaces.",715,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",715,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Put","","`text /** * Add/replace a notification to the persistence layer. * * @param origin: the origin/app of this notification * @param id: a uuid for this notification * @param title: the notification title * @param dir: the notification direction, * possible values are \"ltr\", \"rtl\", \"auto\" * @param lang: the notification language * @param body: the notification body * @param tag: notification tag, will replace any existing * notifications with same origin/tag pair * @param alertName: the alert identifier as used by system app. * Stored in the database to avoid re-computing * it. Built from origin and tag or id depending * whether there is a tag defined. * @param registrationID: Opaque string that identifies the service worker * registration this Notification is associated with. * May be empty. Only set for Notifications created by * showNotification(). */`",715,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Get","","`text /** * Retrieve a list of notifications. * * @param origin: the origin/app for which to fetch notifications from * @param tag: used to fetch only a specific tag * @param callback: nsINotificationStorageCallback, used for * returning notifications objects */`",715,null],[11,"GetByID","","`text /** * Retrieve a notification by ID. * * @param origin: the origin/app for which to fetch notifications. * @param id: the id of the notification. * @param callback: nsINotificationStorageCallback whose Handle method will * be called *at most once* if the notification with that ID is found. Not * called if that ID is not found. Done() will be called right after * Handle(). */`",715,null],[11,"Delete","","`text /** * Remove a notification from storage. * * @param origin: the origin/app to delete the notification from * @param id: the uuid for the notification to delete */`",715,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CanPut","","`text /** * Notifications are not supposed to be persistent, according to spec, at * least for now. But we want to be able to have this behavior on B2G. Thus, * this method will check if the origin sending the notifications is a valid * registered app with a manifest or not. Hence, a webpage that has none * will have its notification sent and available (via Notification.get()) * during the life time of the page. * * @param origin: Origin from which the notification is sent. * * @return boolean */`",715,null],[11,"addref","","",716,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",716,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPageThumbsStorageService` to one of its base interfaces.",716,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",716,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLeafNameForURL","","`text /** * Returns the leaf name of the file containing the screenshot for a given URL */`",716,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPath","","`text /** * Returns the path where the thumbnails are stored */`",716,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFilePathForURL","","`text /** * Returns the full file path containing the screenshot for a given URL */`",716,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",717,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",717,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPipe` to one of its base interfaces.",717,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",717,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * initialize this pipe * * @param nonBlockingInput * true specifies non-blocking input stream behavior * @param nonBlockingOutput * true specifies non-blocking output stream behavior * @param segmentSize * specifies the segment size in bytes (pass 0 to use default value) * @param segmentCount * specifies the max number of segments (pass 0 to use default * value). Passing UINT32_MAX here causes the pipe to have * \"infinite\" space. This mode can be useful in some cases, but * should always be used with caution. The default value for this * parameter is a finite value. */`",717,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetInputStream","","`text /** * The pipe's input end, which also implements nsISearchableInputStream. * Getting fails if the pipe hasn't been initialized. */`",717,null],[11,"GetOutputStream","","`text /** * The pipe's output end. Getting fails if the pipe hasn't been * initialized. */`",717,null],[11,"addref","","",718,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",718,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISearchableInputStream` to one of its base interfaces.",718,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",718,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Search","","`text /** * Searches for a string in the input stream. Since the stream has a notion * of EOF, it is possible that the string may at some time be in the * buffer, but is is not currently found up to some offset. Consequently, * both the found and not found cases return an offset: * if found, return offset where it was found * if not found, return offset of the first byte not searched * In the case the stream is at EOF and the string is not found, the first * byte not searched will correspond to the length of the buffer. */`",718,null],[11,"addref","","",719,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",719,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOSFileConstantsService` to one of its base interfaces.",719,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",719,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",720,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",720,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrivateModeCallback` to one of its base interfaces.",720,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",720,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback ();`",720,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",721,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",721,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookieManager` to one of its base interfaces.",721,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",721,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RemoveAll","","`text /** * Called to remove all cookies from the cookie list */`",721,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEnumerator","","`text /** * Called to enumerate through each cookie in the cookie list. * The objects enumerated over are of type nsICookie * This enumerator should only be used for non-private browsing cookies. * To retrieve an enumerator for private browsing cookies, use * getCookiesWithOriginAttributes. */`",721,null],[11,"GetSessionEnumerator","","`text /** * Called to enumerate through each session cookie in the cookie list. * The objects enumerated over are of type nsICookie * This enumerator should only be used for non-private browsing cookies. */`",721,null],[11,"CountCookiesFromHost","","`text /** * Count how many cookies exist within the base domain of 'aHost'. * Thus, for a host \"weather.yahoo.com\", the base domain would be \"yahoo.com\", * and any host or domain cookies for \"yahoo.com\" and its subdomains would be * counted. * * @param aHost * the host string to search for, e.g. \"google.com\". this should consist * of only the host portion of a URI. see @add for a description of * acceptable host strings. * * @return the number of cookies found. */`",721,null],[11,"ImportCookies","","`text /** * Import an old-style cookie file. Imported cookies will be added to the * existing database. If the database contains any cookies the same as those * being imported (i.e. domain, name, and path match), they will be replaced. * * @param aCookieFile the file to import, usually cookies.txt */`",721,null],[11,"GetCookiesWithOriginAttributes","","`text /** * Returns an enumerator of all cookies whose origin attributes matches aPattern * * @param aPattern origin attribute pattern in JSON format * * @param aHost * the host string to search for, e.g. \"google.com\". this should consist * of only the host portion of a URI. see @add for a description of * acceptable host strings. This attribute is optional. It will search * all hosts if this attribute is not given. */`",721,null],[11,"RemoveCookiesWithOriginAttributes","","`text /** * Remove all the cookies whose origin attributes matches aPattern * * @param aPattern origin attribute pattern in JSON format */`",721,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",722,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",722,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedContainer` to one of its base interfaces.",722,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",722,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedelementbase"}}],[11,"GetId","","`text /** * Many feeds contain an ID distinct from their URI, and * entries have standard fields for this in all major formats. */`",722,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetId","","`text /** * Many feeds contain an ID distinct from their URI, and * entries have standard fields for this in all major formats. */`",722,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFields","","`text /** * The fields found in the document. Common Atom * and RSS fields are normalized. This includes some namespaced * extensions such as dc:subject and content:encoded. * Consumers can avoid normalization by checking the feed type * and accessing specific fields. * * Common namespaces are accessed using prefixes, like get(\"dc:subject\");. * See nsIFeedResult::registerExtensionPrefix. */`",722,null],[11,"SetFields","","`text /** * The fields found in the document. Common Atom * and RSS fields are normalized. This includes some namespaced * extensions such as dc:subject and content:encoded. * Consumers can avoid normalization by checking the feed type * and accessing specific fields. * * Common namespaces are accessed using prefixes, like get(\"dc:subject\");. * See nsIFeedResult::registerExtensionPrefix. */`",722,null],[11,"GetTitle","","`text /** * Sometimes there's no title, or the title contains markup, so take * care in decoding the attribute. */`",722,null],[11,"SetTitle","","`text /** * Sometimes there's no title, or the title contains markup, so take * care in decoding the attribute. */`",722,null],[11,"GetLink","","`text /** * Returns the primary link for the feed or entry. */`",722,null],[11,"SetLink","","`text /** * Returns the primary link for the feed or entry. */`",722,null],[11,"GetLinks","","`text /** * Returns all links for a feed or entry. */`",722,null],[11,"SetLinks","","`text /** * Returns all links for a feed or entry. */`",722,null],[11,"GetCategories","","`text /** * Returns the categories found in a feed or entry. */`",722,null],[11,"SetCategories","","`text /** * Returns the categories found in a feed or entry. */`",722,null],[11,"GetRights","","`text /** * The rights or license associated with a feed or entry. */`",722,null],[11,"SetRights","","`text /** * The rights or license associated with a feed or entry. */`",722,null],[11,"GetAuthors","","`text /** * A list of nsIFeedPersons that authored the feed. */`",722,null],[11,"SetAuthors","","`text /** * A list of nsIFeedPersons that authored the feed. */`",722,null],[11,"GetContributors","","`text /** * A list of nsIFeedPersons that contributed to the feed. */`",722,null],[11,"SetContributors","","`text /** * A list of nsIFeedPersons that contributed to the feed. */`",722,null],[11,"GetUpdated","","`text /** * The date the feed was updated, in RFC822 form. Parsable by JS * and mail code. */`",722,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetUpdated","","`text /** * The date the feed was updated, in RFC822 form. Parsable by JS * and mail code. */`",722,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Normalize","","`text /** * Syncs a container's fields with its convenience attributes. */`",722,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",723,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",723,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIEditorTransaction` to one of its base interfaces.",723,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",723,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTxnDescription","","`readonly attribute DOMString txnDescription;`",723,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",724,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",724,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDragEvent` to one of its base interfaces.",724,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",724,{"inputs":[{"name":"self"}],"output":{"name":"nsidommouseevent"}}],[11,"GetDataTransfer","","`readonly attribute nsIDOMDataTransfer dataTransfer;`",724,null],[11,"addref","","",725,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",725,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDeviceRequest` to one of its base interfaces.",725,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",725,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetOrigin","","`readonly attribute DOMString origin;`",725,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRequestURLs","","`readonly attribute nsIArray requestURLs;`",725,null],[11,"GetChromeEventHandler","","`readonly attribute nsIDOMEventTarget chromeEventHandler;`",725,null],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",725,null],[11,"Select","","`void select (in nsIPresentationDevice device);`",725,null],[11,"Cancel","","`void cancel (in nsresult reason);`",725,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",726,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",726,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDevicePrompt` to one of its base interfaces.",726,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",726,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PromptDeviceSelection","","`void promptDeviceSelection (in nsIPresentationDeviceRequest request);`",726,null],[11,"addref","","",727,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",727,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeechGrammarCompilationCallback` to one of its base interfaces.",727,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",727,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",728,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",728,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeechRecognitionService` to one of its base interfaces.",728,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",728,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SoundEnd","","`void soundEnd ();`",728,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Abort","","`void abort ();`",728,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",729,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",729,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHapticFeedback` to one of its base interfaces.",729,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",729,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ShortPress","","",729,null],[18,"LongPress","","",729,null],[11,"PerformSimpleAction","","`text /** * Perform haptic feedback * * @param isLongPress * indicate whether feedback is for a long press (vs. short press) */`",729,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",730,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",730,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHstsPrimingCallback` to one of its base interfaces.",730,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",730,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",731,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",731,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoPositionCallback` to one of its base interfaces.",731,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",731,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleEvent","","`void handleEvent (in nsIDOMGeoPosition position);`",731,null],[11,"addref","","",732,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",732,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULSortService` to one of its base interfaces.",732,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",732,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SORT_COMPARECASE","","",732,null],[18,"SORT_INTEGER","","",732,null],[11,"Sort","","`text /** * Sort the contents of the widget containing <code>aNode</code> * using <code>aSortKey</code> as the comparison key, and * <code>aSortDirection</code> as the direction. * * @param aNode A node in the XUL widget whose children are to be sorted. * @param aSortKey The value to be used as the comparison key. * @param aSortHints One or more hints as to how to sort: * * ascending: to sort the contents in ascending order * descending: to sort the contents in descending order * comparecase: perform case sensitive comparisons * integer: treat values as integers, non-integers are compared as strings * twostate: don't allow the natural (unordered state) */`",732,null],[11,"addref","","",733,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",733,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInterceptedBodyCallback` to one of its base interfaces.",733,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",733,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"BodyComplete","","`void bodyComplete (in nsresult aRv);`",733,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",734,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",734,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInterceptedChannel` to one of its base interfaces.",734,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",734,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ResetInterception","","`text /** * Instruct a channel that has been intercepted to continue with the original * network request. */`",734,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SynthesizeStatus","","`text /** * Set the status and reason for the forthcoming synthesized response. * Multiple calls overwrite existing values. */`",734,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SynthesizeHeader","","`text /** * Attach a header name/value pair to the forthcoming synthesized response. * Overwrites any existing header value. */`",734,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"StartSynthesizedResponse","","`text /** * Instruct a channel that has been intercepted that a response is * starting to be synthesized. No further header modification is allowed * after this point. There are a few parameters: * - A body stream may be optionally passed. If nullptr, then an * empty body is assumed. * - A callback may be optionally passed. It will be invoked * when the body is complete. For a nullptr body this may be * synchronously on the current thread. Otherwise it will be invoked * asynchronously on the current thread. * - A cacheInfoChannel may be optionally passed. If the body stream is * from alternative data cache, this cacheInfoChannel provides needed * cache information. * - The caller may optionally pass a spec for a URL that this response * originates from; an empty string will cause the original * intercepted request's URL to be used instead. * - The responseRedirected flag is false will cause the channel do an * internal redirect when the original intercepted reauest's URL is * different from the response's URL. The flag is true will cause the * chaanel do a non-internal redirect when the URLs are different. */`",734,null],[11,"FinishSynthesizedResponse","","`text /** * Instruct a channel that has been intercepted that response synthesis * has completed and all outstanding resources can be closed. */`",734,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CancelInterception","","`text /** * Cancel the pending intercepted request. * @return NS_ERROR_FAILURE if the response has already been synthesized or * the original request has been instructed to continue. */`",734,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"GetChannel","","`text /** * The underlying channel object that was intercepted. */`",734,null],[11,"GetSecureUpgradedChannelURI","","`text /** * The URL of the underlying channel object, corrected for a potential * secure upgrade. */`",734,null],[11,"GetInternalContentPolicyType","","`text /** * Get the internal load type from the underlying channel. */`",734,null],[11,"GetConsoleReportCollector","","`[noscript] readonly attribute nsIConsoleReportCollector consoleReportCollector;`",734,null],[11,"SaveTimeStamps","","`[noscript] void SaveTimeStamps ();`",734,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetReleaseHandle","","`text /** * Allow the ServiceWorkerManager to set an RAII-style object on the * intercepted channel that should be released once the channel is * torn down. */`",734,null],[11,"addref","","",735,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",735,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkInterceptController` to one of its base interfaces.",735,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",735,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShouldPrepareForIntercept","","`text /** * Returns true if a channel should avoid initiating any network * requests until specifically instructed to do so. * * @param aURI the URI being requested by a channel * @param aIsNavigate True if the request is for a navigation, false for a fetch. */`",735,null],[11,"ChannelIntercepted","","`text /** * Notification when a given intercepted channel is prepared to accept a synthesized * response via the provided stream. * * @param aChannel the controlling interface for a channel that has been intercepted */`",735,null],[11,"addref","","",736,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",736,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSPageRule` to one of its base interfaces.",736,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",736,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStyle","","`readonly attribute nsIDOMCSSStyleDeclaration style;`",736,null],[11,"addref","","",737,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",737,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULWindow` to one of its base interfaces.",737,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",737,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"lowestZ","","",737,null],[18,"loweredZ","","",737,null],[18,"normalZ","","",737,null],[18,"raisedZ","","",737,null],[18,"highestZ","","",737,null],[11,"GetDocShell","","`text /** * The docshell owning the XUL for this window. */`",737,null],[11,"GetIntrinsicallySized","","`text /** * Indicates if this window is instrinsically sized. */`",737,null],[11,"SetIntrinsicallySized","","`text /** * Indicates if this window is instrinsically sized. */`",737,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrimaryContentShell","","`text /** * The primary content shell. * * Note that this is a docshell tree item and therefore can not be assured of * what object it is. It could be an editor, a docshell, or a browser object. * Or down the road any other object that supports being a DocShellTreeItem * Query accordingly to determine the capabilities. */`",737,null],[11,"GetPrimaryTabParent","","`text /** * In multiprocess case we may not have primaryContentShell but * primaryTabParent. */`",737,null],[11,"TabParentAdded","","`void tabParentAdded (in nsITabParent aTab, in boolean aPrimary);`",737,null],[11,"TabParentRemoved","","`void tabParentRemoved (in nsITabParent aTab);`",737,null],[11,"AddChildWindow","","`text /** * Tell this window that it has picked up a child XUL window * @param aChild the child window being added */`",737,null],[11,"RemoveChildWindow","","`text /** * Tell this window that it has lost a child XUL window * @param aChild the child window being removed */`",737,null],[11,"Center","","`text /** * Move the window to a centered position. * @param aRelative If not null, the window relative to which the window is * moved. See aScreen parameter for details. * @param aScreen PR_TRUE to center the window relative to the screen * containing aRelative if aRelative is not null. If * aRelative is null then relative to the screen of the * opener window if it was initialized by passing it to * nsWebShellWindow::Initialize. Failing that relative to * the main screen. * PR_FALSE to center it relative to aRelative itself. * @param aAlert PR_TRUE to move the window to an alert position, * generally centered horizontally and 1/3 down from the top. */`",737,null],[11,"ShowModal","","`text /** * Shows the window as a modal window. That is, ensures that it is visible * and runs a local event loop, exiting only once the window has been closed. */`",737,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetZLevel","","`attribute unsigned long zLevel;`",737,null],[11,"SetZLevel","","`attribute unsigned long zLevel;`",737,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetChromeFlags","","`attribute uint32_t chromeFlags;`",737,null],[11,"SetChromeFlags","","`attribute uint32_t chromeFlags;`",737,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"AssumeChromeFlagsAreFrozen","","`text /** * Begin assuming |chromeFlags| don't change hereafter, and assert * if they do change. The state change is one-way and idempotent. */`",737,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CreateNewWindow","","`text /** * Create a new window. * @param aChromeFlags see nsIWebBrowserChrome * @param aOpeningTab the TabParent that requested this new window be opened. * Can be left null. * @param aOpener The window which is requesting that this new window be opened. * @param aNextTabParentId The integer ID of the next tab parent actor to use. * 0 means there is no next tab parent actor to use. * @return the newly minted window */`",737,null],[11,"GetXULBrowserWindow","","`attribute nsIXULBrowserWindow XULBrowserWindow;`",737,null],[11,"SetXULBrowserWindow","","`attribute nsIXULBrowserWindow XULBrowserWindow;`",737,null],[11,"ApplyChromeFlags","","`text /** * Back-door method to force application of chrome flags at a particular * time. Do NOT call this unless you know what you're doing! In particular, * calling this when this XUL window doesn't yet have a document in its * docshell could cause problems. */`",737,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SizeShellToWithLimit","","`text /** * Given the dimensions of some content area held within this * XUL window, and assuming that that content area will change * its dimensions in linear proportion to the dimensions of this * XUL window, changes the size of the XUL window so that the * content area reaches a particular size. * * We need to supply the content area dimensions because sometimes * the child's nsDocShellTreeOwner needs to propagate a SizeShellTo * call to the parent. But the shellItem argument of the call will * not be available on the parent side. * * Note: this is an internal method, other consumers should never call this. * * @param aDesiredWidth * The desired width of the content area in device pixels. * @param aDesiredHeight * The desired height of the content area in device pixels. * @param shellItemWidth * The current width of the content area. * @param shellItemHeight * The current height of the content area. */`",737,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"c_void"}}],[11,"GetNextTabParentId","","`text /** * If the window was opened as a content window by script, this will return the * integer ID of the next TabParent actor to use. */`",737,null],[11,"addref","","",738,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",738,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMValidityState` to one of its base interfaces.",738,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",738,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetValueMissing","","`readonly attribute boolean valueMissing;`",738,null],[11,"GetTypeMismatch","","`readonly attribute boolean typeMismatch;`",738,null],[11,"GetPatternMismatch","","`readonly attribute boolean patternMismatch;`",738,null],[11,"GetTooLong","","`readonly attribute boolean tooLong;`",738,null],[11,"GetTooShort","","`readonly attribute boolean tooShort;`",738,null],[11,"GetRangeUnderflow","","`readonly attribute boolean rangeUnderflow;`",738,null],[11,"GetRangeOverflow","","`readonly attribute boolean rangeOverflow;`",738,null],[11,"GetStepMismatch","","`readonly attribute boolean stepMismatch;`",738,null],[11,"GetBadInput","","`readonly attribute boolean badInput;`",738,null],[11,"GetCustomError","","`readonly attribute boolean customError;`",738,null],[11,"GetValid","","`readonly attribute boolean valid;`",738,null],[11,"addref","","",739,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",739,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULMultiSelectControlElement` to one of its base interfaces.",739,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",739,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulselectcontrolelement"}}],[11,"GetSelType","","`attribute DOMString selType;`",739,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSelType","","`attribute DOMString selType;`",739,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCurrentItem","","`attribute nsIDOMXULSelectControlItemElement currentItem;`",739,null],[11,"SetCurrentItem","","`attribute nsIDOMXULSelectControlItemElement currentItem;`",739,null],[11,"GetCurrentIndex","","`attribute long currentIndex;`",739,null],[11,"SetCurrentIndex","","`attribute long currentIndex;`",739,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectedItems","","`readonly attribute nsIDOMNodeList selectedItems;`",739,null],[11,"AddItemToSelection","","`void addItemToSelection (in nsIDOMXULSelectControlItemElement item);`",739,null],[11,"RemoveItemFromSelection","","`void removeItemFromSelection (in nsIDOMXULSelectControlItemElement item);`",739,null],[11,"ToggleItemSelection","","`void toggleItemSelection (in nsIDOMXULSelectControlItemElement item);`",739,null],[11,"SelectItem","","`void selectItem (in nsIDOMXULSelectControlItemElement item);`",739,null],[11,"SelectItemRange","","`void selectItemRange (in nsIDOMXULSelectControlItemElement startItem, in nsIDOMXULSelectControlItemElement item);`",739,null],[11,"SelectAll","","`void selectAll ();`",739,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InvertSelection","","`void invertSelection ();`",739,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearSelection","","`void clearSelection ();`",739,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSelectedCount","","`readonly attribute long selectedCount;`",739,null],[11,"MultiGetSelectedItem","","`[binaryname(MultiGetSelectedItem)] nsIDOMXULSelectControlItemElement getSelectedItem (in long index);`",739,null],[11,"addref","","",740,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",740,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISandboxSettings` to one of its base interfaces.",740,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",740,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEffectiveContentSandboxLevel","","`readonly attribute long effectiveContentSandboxLevel;`",740,null],[11,"addref","","",741,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",741,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTextRange` to one of its base interfaces.",741,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",741,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EndPoint_Start","","`text /** * The two endpoints of the range (starting and ending). */`",741,null],[18,"EndPoint_End","","",741,null],[18,"FormatUnit","","",741,null],[18,"WordUnit","","",741,null],[18,"LineUnit","","",741,null],[18,"ParagraphUnit","","",741,null],[18,"PageUnit","","",741,null],[18,"DocumentUnit","","",741,null],[18,"AnimationStyleAttr","","`text /** * Text attributes. Used in conjunction with findAttrs(). */`",741,null],[18,"AnnotationObjectsAttr","","",741,null],[18,"AnnotationTypesAttr","","",741,null],[18,"BackgroundColorAttr","","",741,null],[18,"BulletStyleAttr","","",741,null],[18,"CapStyleAttr","","",741,null],[18,"CaretBidiModeAttr","","",741,null],[18,"CaretPositionAttr","","",741,null],[18,"CultureAttr","","",741,null],[18,"FontNameAttr","","",741,null],[18,"FontSizeAttr","","",741,null],[18,"FontWeightAttr","","",741,null],[18,"ForegroundColorAttr","","",741,null],[18,"HorizontalTextAlignmentAttr","","",741,null],[18,"IndentationFirstLineAttr","","",741,null],[18,"IndentationLeadingAttr","","",741,null],[18,"IndentationTrailingAttr","","",741,null],[18,"IsActiveAttr","","",741,null],[18,"IsHiddenAttr","","",741,null],[18,"IsItalicAttr","","",741,null],[18,"IsReadOnlyAttr","","",741,null],[18,"IsSubscriptAttr","","",741,null],[18,"IsSuperscriptAttr","","",741,null],[18,"LinkAttr","","",741,null],[18,"MarginBottomAttr","","",741,null],[18,"MarginLeadingAttr","","",741,null],[18,"MarginTopAttr","","",741,null],[18,"MarginTrailingAttr","","",741,null],[18,"OutlineStylesAttr","","",741,null],[18,"OverlineColorAttr","","",741,null],[18,"OverlineStyleAttr","","",741,null],[18,"SelectionActiveEndAttr","","",741,null],[18,"StrikethroughColorAttr","","",741,null],[18,"StrikethroughStyleAttr","","",741,null],[18,"StyleIdAttr","","",741,null],[18,"StyleNameAttr","","",741,null],[18,"TabsAttr","","",741,null],[18,"TextFlowDirectionsAttr","","",741,null],[18,"UnderlineColorAttr","","",741,null],[18,"UnderlineStyleAttr","","",741,null],[18,"AlignToTop","","",741,null],[18,"AlignToBottom","","",741,null],[11,"GetStartContainer","","`readonly attribute nsIAccessibleText startContainer;`",741,null],[11,"GetStartOffset","","`readonly attribute long startOffset;`",741,null],[11,"GetEndContainer","","`readonly attribute nsIAccessibleText endContainer;`",741,null],[11,"GetEndOffset","","`readonly attribute long endOffset;`",741,null],[11,"GetContainer","","`text /** * Return an accessible containing the whole range */`",741,null],[11,"GetEmbeddedChildren","","`text /** * Return embedded children within the range. */`",741,null],[11,"Compare","","`text /** * Return true if this range has the same end points of the given range. */`",741,null],[11,"CompareEndPoints","","`text /** * Compare this and given ranges end points. * * @return -1/0/1 if this range end point is before/equal/after the given * range end point. */`",741,null],[11,"GetText","","`text /** * Return text within the range. */`",741,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBounds","","`text /** * Return list of rects of the range. */`",741,null],[11,"Move","","`text /** * Move the boundary(ies) by the given number of the unit. */`",741,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"MoveStart","","`void moveStart (in unsigned long aUnit, in long aCount);`",741,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"MoveEnd","","`void moveEnd (in unsigned long aUnit, in long aCount);`",741,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Normalize","","`text /** * Normalize the range to the closest unit of the given type. */`",741,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Crop","","`text /** * Crops the range by the given accessible element. */`",741,null],[11,"FindText","","`text /** * Return range enclosing the found text. */`",741,null],[11,"FindAttr","","`text /** * Return range enslosing the text having requested attribute. */`",741,null],[11,"AddToSelection","","`text /** * Add/remove the text range from selection. */`",741,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveFromSelection","","`void removeFromSelection ();`",741,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Select","","`void select ();`",741,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ScrollIntoView","","`text /** * Scroll the range into view. */`",741,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",742,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",742,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICategoryManager` to one of its base interfaces.",742,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",742,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCategoryEntry","","`text /** * Get the value for the given category's entry. * @param aCategory The name of the category (\"protocol\") * @param aEntry The entry you're looking for (\"http\") * @return The value. */`",742,null],[11,"AddCategoryEntry","","`text /** * Add an entry to a category. * @param aCategory The name of the category (\"protocol\") * @param aEntry The entry to be added (\"http\") * @param aValue The value for the entry (\"moz.httprulez.1\") * @param aPersist Should this data persist between invocations? * @param aReplace Should we replace an existing entry? * @return Previous entry, if any */`",742,null],[11,"DeleteCategoryEntry","","`text /** * Delete an entry from the category. * @param aCategory The name of the category (\"protocol\") * @param aEntry The entry to be added (\"http\") * @param aPersist Delete persistent data from registry, if present? */`",742,null],[11,"DeleteCategory","","`text /** * Delete a category and all entries. * @param aCategory The category to be deleted. */`",742,null],[11,"EnumerateCategory","","`text /** * Enumerate the entries in a category. * @param aCategory The category to be enumerated. * @return a simple enumerator, each result QIs to * nsISupportsCString. */`",742,null],[11,"EnumerateCategories","","`text /** * Enumerate all existing categories * @param aCategory The category to be enumerated. * @return a simple enumerator, each result QIs to * nsISupportsCString. */`",742,null],[11,"addref","","",743,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",743,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBufferedInputStream` to one of its base interfaces.",743,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",743,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"Init","","`text /** * @param fillFromStream - add buffering to this stream * @param bufferSize - specifies the maximum buffer size */`",743,null],[11,"GetData","","`text /** * Get the wrapped data stream */`",743,null],[11,"addref","","",744,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",744,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBufferedOutputStream` to one of its base interfaces.",744,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",744,{"inputs":[{"name":"self"}],"output":{"name":"nsioutputstream"}}],[11,"Init","","`text /** * @param sinkToStream - add buffering to this stream * @param bufferSize - specifies the maximum buffer size */`",744,null],[11,"GetData","","`text /** * Get the wrapped data stream */`",744,null],[11,"addref","","",745,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",745,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSRecord` to one of its base interfaces.",745,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",745,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCanonicalName","","`text /** * @return the canonical hostname for this record. this value is empty if * the record was not fetched with the RESOLVE_CANONICAL_NAME flag. * * e.g., www.mozilla.org --> rheet.mozilla.org */`",745,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetScriptableNextAddr","","`text /** * this function returns the value of the next IP address as a * scriptable address and increments the internal address iterator. * * @param aPort * A port number to initialize the nsINetAddr with. * * @throws NS_ERROR_NOT_AVAILABLE if there is not another IP address in * the record. */`",745,null],[11,"GetNextAddrAsString","","`text /** * this function returns the value of the next IP address as a * string and increments the internal address iterator. * * @throws NS_ERROR_NOT_AVAILABLE if there is not another IP address in * the record. */`",745,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"HasMore","","`text /** * this function returns true if there is another address in the record. */`",745,null],[11,"Rewind","","`text /** * this function resets the internal address iterator to the first * address in the record. */`",745,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ReportUnusable","","`text /** * This function indicates that the last address obtained via getNextAddr*() * was not usuable and should be skipped in future uses of this * record if other addresses are available. * * @param aPort is the port number associated with the failure, if any. * It may be zero if not applicable. */`",745,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",746,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",746,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebContentHandlerRegistrar` to one of its base interfaces.",746,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",746,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RegisterContentHandler","","`text /** * See documentation in Navigator.webidl * The additional contentWindow param for both methods represents the dom * content window from which the method has been called. */`",746,null],[11,"RegisterProtocolHandler","","`void registerProtocolHandler (in DOMString protocol, in DOMString uri, in DOMString title, in nsISupports windowOrBrowser);`",746,null],[11,"addref","","",747,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",747,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXMLHttpRequestEventTarget` to one of its base interfaces.",747,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",747,{"inputs":[{"name":"self"}],"output":{"name":"nsidomeventtarget"}}],[11,"addref","","",748,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",748,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXMLHttpRequestUpload` to one of its base interfaces.",748,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",748,{"inputs":[{"name":"self"}],"output":{"name":"nsixmlhttprequesteventtarget"}}],[11,"addref","","",749,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",749,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXMLHttpRequest` to one of its base interfaces.",749,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",749,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNSENT","","`text /** * The state of the request. * * Possible values: * 0 UNSENT open() has not been called yet. * 1 OPENED send() has not been called yet. * 2 HEADERS_RECEIVED * send() has been called, headers and status are available. * 3 LOADING Downloading, responseText holds the partial data. * 4 DONE Finished with all operations. */`",749,null],[18,"OPENED","","",749,null],[18,"HEADERS_RECEIVED","","",749,null],[18,"LOADING","","",749,null],[18,"DONE","","",749,null],[11,"GetChannel","","`text /** * The request uses a channel in order to perform the * request. This attribute represents the channel used * for the request. NULL if the channel has not yet been * created. * * Mozilla only. Requires elevated privileges to access. */`",749,null],[11,"GetResponseXML","","`text /** * The response to the request is parsed as if it were a * text/xml stream. This attributes represents the response as * a DOM Document object. NULL if the request is unsuccessful or * has not yet been sent. */`",749,null],[11,"GetResponseText","","`text /** * The response to the request as text. * NULL if the request is unsuccessful or * has not yet been sent. */`",749,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetResponseType","","`text /** * Determine a response format which response attribute returns. * empty string (initial value) or \"text\": as text. * \"arraybuffer\": as a typed array ArrayBuffer. * \"blob\": as a File API Blob. * \"document\": as a DOM Document object. */`",749,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetResponseType","","`text /** * Determine a response format which response attribute returns. * empty string (initial value) or \"text\": as text. * \"arraybuffer\": as a typed array ArrayBuffer. * \"blob\": as a File API Blob. * \"document\": as a DOM Document object. */`",749,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStatus","","`text /** * The status of the response to the request for HTTP requests. */`",749,null],[11,"GetStatusText","","`text /** * The string representing the status of the response for * HTTP requests. */`",749,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SlowAbort","","`text /** * If the request has been sent already, this method will * abort the request. */`",749,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAllResponseHeaders","","`text /** * Returns all of the response headers as a string for HTTP * requests. * * @returns A string containing all of the response headers. * The empty string if the response has not yet been received. */`",749,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetResponseHeader","","`text /** * Returns the text of the header with the specified name for * HTTP requests. * * @param header The name of the header to retrieve * @returns A string containing the text of the header specified. * NULL if the response has not yet been received or the * header does not exist in the response. */`",749,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Send","","`text /** * Sends the request. If the request is asynchronous, returns * immediately after sending the request. If it is synchronous * returns only after the response has been received. * * All event listeners must be set before calling send(). * * After the initial response, all event listeners will be cleared. * // XXXbz what does that mean, exactly? * * @param body Either an instance of nsIDOMDocument, nsIInputStream * or a string (nsISupportsString in the native calling * case). This is used to populate the body of the * HTTP request if the HTTP request method is \"POST\". * If the parameter is a nsIDOMDocument, it is serialized. * If the parameter is a nsIInputStream, then it must be * compatible with nsIUploadChannel.setUploadStream, and a * Content-Length header will be added to the HTTP request * with a value given by nsIInputStream.available. Any * headers included at the top of the stream will be * treated as part of the message body. The MIME type of * the stream should be specified by setting the Content- * Type header via the setRequestHeader method before * calling send. */`",749,null],[11,"SetRequestHeader","","`text /** * Sets a HTTP request header for HTTP requests. You must call open * before setting the request headers. * * @param header The name of the header to set in the request. * @param value The body of the header. */`",749,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTimeout","","`text /** * The amount of milliseconds a request can take before being terminated. * Initially zero. Zero means there is no timeout. */`",749,null],[11,"SetTimeout","","`text /** * The amount of milliseconds a request can take before being terminated. * Initially zero. Zero means there is no timeout. */`",749,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetReadyState","","`readonly attribute unsigned short readyState;`",749,null],[11,"SlowOverrideMimeType","","`text /** * Override the mime type returned by the server (if any). This may * be used, for example, to force a stream to be treated and parsed * as text/xml, even if the server does not report it as such. This * must be done before the <code>send</code> method is invoked. * * @param mimetype The type used to override that returned by the server * (if any). */`",749,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMozBackgroundRequest","","`text /** * Set to true if this is a background service request. This will * prevent a load group being associated with the request, and * suppress any security dialogs from being shown * to the user. * In the cases where one of those dialogs would be shown, the request * will simply fail instead. */`",749,null],[11,"SetMozBackgroundRequest","","`text /** * Set to true if this is a background service request. This will * prevent a load group being associated with the request, and * suppress any security dialogs from being shown * to the user. * In the cases where one of those dialogs would be shown, the request * will simply fail instead. */`",749,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWithCredentials","","`text /** * When set to true attempts to make cross-site Access-Control requests * with credentials such as cookies and authorization headers. * * Never affects same-site requests. * * Defaults to false. */`",749,null],[11,"SetWithCredentials","","`text /** * When set to true attempts to make cross-site Access-Control requests * with credentials such as cookies and authorization headers. * * Never affects same-site requests. * * Defaults to false. */`",749,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * Initialize the object for use from C++ code with the principal, script * context, and owner window that should be used. * * @param principal The principal to use for the request. This must not be * null. * @param globalObject The associated global for the request. Can be the * outer window, a sandbox, or a backstage pass. * May be null, but then the request cannot create a * document. * @param baseURI The base URI to use when resolving relative URIs. May be * null. * @param loadGroup An optional load group to use when performing the request. * This will be used even if the global has a window with a * load group. */`",749,null],[11,"GetUpload","","`text /** * Upload process can be tracked by adding event listener to |upload|. */`",749,null],[11,"GetMozAnon","","`text /** * If true, the request will be sent without cookie and authentication * headers. */`",749,null],[11,"GetMozSystem","","`text /** * If true, the same origin policy will not be enforced on the request. */`",749,null],[11,"addref","","",750,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",750,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXHRSendable` to one of its base interfaces.",750,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",750,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSendInfo","","`void getSendInfo (out nsIInputStream body, out uint64_t contentLength, out ACString contentTypeWithCharset, out ACString charset);`",750,null],[11,"addref","","",751,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",751,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDeviceManager` to one of its base interfaces.",751,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",751,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDeviceAvailable","","`readonly attribute boolean deviceAvailable;`",751,null],[11,"AddDeviceProvider","","`void addDeviceProvider (in nsIPresentationDeviceProvider provider);`",751,null],[11,"RemoveDeviceProvider","","`void removeDeviceProvider (in nsIPresentationDeviceProvider provider);`",751,null],[11,"ForceDiscovery","","`void forceDiscovery ();`",751,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAvailableDevices","","`nsIArray getAvailableDevices ([optional] in nsIArray presentationUrls);`",751,null],[11,"addref","","",752,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",752,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOutputStream` to one of its base interfaces.",752,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",752,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Close","","`text /** * nsIOutputStream * * An interface describing a writable stream of data. An output stream may be * \"blocking\" or \"non-blocking\" (see the IsNonBlocking method). A blocking * output stream may suspend the calling thread in order to satisfy a call to * Close, Flush, Write, WriteFrom, or WriteSegments. A non-blocking output * stream, on the other hand, must not block the calling thread of execution. * * NOTE: blocking output streams are often written to on a background thread to * avoid locking up the main application thread. For this reason, it is * generally the case that a blocking output stream should be implemented using * thread- safe AddRef and Release. */ /** * Close the stream. Forces the output stream to flush any buffered data. * * @throws NS_BASE_STREAM_WOULD_BLOCK if unable to flush without blocking * the calling thread (non-blocking mode only) */`",752,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Flush","","`text /** * Flush the stream. * * @throws NS_BASE_STREAM_WOULD_BLOCK if unable to flush without blocking * the calling thread (non-blocking mode only) */`",752,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Write","","`text /** * Write data into the stream. * * @param aBuf the buffer containing the data to be written * @param aCount the maximum number of bytes to be written * * @return number of bytes written (may be less than aCount) * * @throws NS_BASE_STREAM_WOULD_BLOCK if writing to the output stream would * block the calling thread (non-blocking mode only) * @throws <other-error> on failure */`",752,null],[11,"WriteFrom","","`text /** * Writes data into the stream from an input stream. * * @param aFromStream the stream containing the data to be written * @param aCount the maximum number of bytes to be written * * @return number of bytes written (may be less than aCount) * * @throws NS_BASE_STREAM_WOULD_BLOCK if writing to the output stream would * block the calling thread (non-blocking mode only). This failure * means no bytes were transferred. * @throws <other-error> on failure * * NOTE: This method is defined by this interface in order to allow the * output stream to efficiently copy the data from the input stream into * its internal buffer (if any). If this method was provided as an external * facility, a separate char* buffer would need to be used in order to call * the output stream's other Write method. */`",752,null],[11,"IsNonBlocking","","`text /** * @return true if stream is non-blocking * * NOTE: writing to a blocking output stream will block the calling thread * until all given data can be consumed by the stream. * * NOTE: a non-blocking output stream may implement nsIAsyncOutputStream to * provide consumers with a way to wait for the stream to accept more data * once its write method is unable to accept any data without blocking. */`",752,null],[11,"addref","","",753,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",753,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCrypto` to one of its base interfaces.",753,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",753,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`[notxpcom] void init (in nsIGlobalObject parent);`",753,null],[11,"addref","","",754,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",754,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITreeBoxObject` to one of its base interfaces.",754,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",754,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetColumns","","`text /** * Obtain the columns. */`",754,null],[11,"GetView","","`text /** * The view that backs the tree and that supplies it with its data. * It is dynamically settable, either using a view attribute on the * tree tag or by setting this attribute to a new value. */`",754,null],[11,"SetView","","`text /** * The view that backs the tree and that supplies it with its data. * It is dynamically settable, either using a view attribute on the * tree tag or by setting this attribute to a new value. */`",754,null],[11,"GetFocused","","`text /** * Whether or not we are currently focused. */`",754,null],[11,"SetFocused","","`text /** * Whether or not we are currently focused. */`",754,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTreeBody","","`text /** * Obtain the treebody content node */`",754,null],[11,"GetRowHeight","","`text /** * Obtain the height of a row. */`",754,null],[11,"GetRowWidth","","`text /** * Obtain the width of a row. */`",754,null],[11,"GetHorizontalPosition","","`text /** * Get the pixel position of the horizontal scrollbar. */`",754,null],[11,"GetSelectionRegion","","`text /** * Return the region for the visible parts of the selection, in device pixels. */`",754,null],[11,"GetFirstVisibleRow","","`text /** * Get the index of the first visible row. */`",754,null],[11,"GetLastVisibleRow","","`text /** * Get the index of the last visible row. */`",754,null],[11,"GetPageLength","","`text /** * Gets the number of possible visible rows. */`",754,null],[11,"EnsureRowIsVisible","","`text /** * Ensures that a row at a given index is visible. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"EnsureCellIsVisible","","`text /** * Ensures that a given cell in the tree is visible. */`",754,null],[11,"ScrollToRow","","`text /** * Scrolls such that the row at index is at the top of the visible view. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollByLines","","`text /** * Scroll the tree up or down by numLines lines. Positive * values move down in the tree. Prevents scrolling off the * end of the tree. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollByPages","","`text /** * Scroll the tree up or down by numPages pages. A page * is considered to be the amount displayed by the tree. * Positive values move down in the tree. Prevents scrolling * off the end of the tree. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollToCell","","`text /** * Scrolls such that a given cell is visible (if possible) * at the top left corner of the visible view. */`",754,null],[11,"ScrollToColumn","","`text /** * Scrolls horizontally so that the specified column is * at the left of the view (if possible). */`",754,null],[11,"ScrollToHorizontalPosition","","`text /** * Scroll to a specific horizontal pixel position. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Invalidate","","`text /** * Invalidation methods for fine-grained painting control. */`",754,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InvalidateColumn","","`void invalidateColumn (in nsITreeColumn col);`",754,null],[11,"InvalidateRow","","`void invalidateRow (in long index);`",754,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InvalidateCell","","`void invalidateCell (in long row, in nsITreeColumn col);`",754,null],[11,"InvalidateRange","","`void invalidateRange (in long startIndex, in long endIndex);`",754,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InvalidateColumnRange","","`void invalidateColumnRange (in long startIndex, in long endIndex, in nsITreeColumn col);`",754,null],[11,"GetRowAt","","`text /** * A hit test that can tell you what row the mouse is over. * returns -1 for invalid mouse coordinates. * * The coordinate system is the client coordinate system for the * document this boxObject lives in, and the units are CSS pixels. */`",754,null],[11,"GetCellAt","","`text /** * A hit test that can tell you what cell the mouse is over. Row is the row index * hit, returns -1 for invalid mouse coordinates. ColID is the column hit. * ChildElt is the pseudoelement hit: this can have values of * \"cell\", \"twisty\", \"image\", and \"text\". * * The coordinate system is the client coordinate system for the * document this boxObject lives in, and the units are CSS pixels. */`",754,null],[11,"GetCoordsForCellItem","","`text /** * Find the coordinates of an element within a specific cell. */`",754,null],[11,"IsCellCropped","","`text /** * Determine if the text of a cell is being cropped or not. */`",754,null],[11,"RowCountChanged","","`text /** * The view is responsible for calling these notification methods when * rows are added or removed. Index is the position at which the new * rows were added or at which rows were removed. For * non-contiguous additions/removals, this method should be called multiple times. */`",754,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"BeginUpdateBatch","","`text /** * Notify the tree that the view is about to perform a batch * update, that is, add, remove or invalidate several rows at once. * This must be followed by calling endUpdateBatch(), otherwise the tree * will get out of sync. */`",754,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndUpdateBatch","","`text /** * Notify the tree that the view has completed a batch update. */`",754,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearStyleAndImageCaches","","`text /** * Called on a theme switch to flush out the tree's style and image caches. */`",754,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveImageCacheEntry","","`text /** * Remove an image source from the image cache to allow its invalidation. * * @note This only affects images supplied by the view, not the ones supplied * through the styling context, like twisties or checkboxes. */`",754,null],[11,"addref","","",755,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",755,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandManager` to one of its base interfaces.",755,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",755,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddCommandObserver","","`void addCommandObserver (in nsIObserver aCommandObserver, in string aCommandToObserve);`",755,null],[11,"RemoveCommandObserver","","`void removeCommandObserver (in nsIObserver aCommandObserver, in string aCommandObserved);`",755,null],[11,"IsCommandSupported","","`boolean isCommandSupported (in string aCommandName, in mozIDOMWindowProxy aTargetWindow);`",755,null],[11,"IsCommandEnabled","","`boolean isCommandEnabled (in string aCommandName, in mozIDOMWindowProxy aTargetWindow);`",755,null],[11,"GetCommandState","","`void getCommandState (in string aCommandName, in mozIDOMWindowProxy aTargetWindow, in nsICommandParams aCommandParams);`",755,null],[11,"DoCommand","","`void doCommand (in string aCommandName, in nsICommandParams aCommandParams, in mozIDOMWindowProxy aTargetWindow);`",755,null],[11,"addref","","",756,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",756,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStructuredCloneContainer` to one of its base interfaces.",756,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",756,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"InitFromBase64","","`text /** * Initialize this structured clone container from a base-64-encoded byte * stream, stored in aData. aFormatVersion should be the version of the * structured clone algorithm which was used to generate aData. */`",756,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDataAsBase64","","`text /** * Get this structured clone container's data as a base-64-encoded string. */`",756,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSerializedNBytes","","`text /** * Get the size in bytes of this container's serialized data. */`",756,null],[11,"GetFormatVersion","","`text /** * Get the version of the structured clone algorithm which was used to * generate this container's serialized buffer. */`",756,null],[11,"addref","","",757,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",757,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIINIParser` to one of its base interfaces.",757,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",757,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSections","","`text /** * Enumerates the [section]s available in the INI file. */`",757,null],[11,"GetKeys","","`text /** * Enumerates the keys available within a section. */`",757,null],[11,"GetString","","`text /** * Get the value of a string for a particular section and key. */`",757,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",758,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",758,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIINIParserWriter` to one of its base interfaces.",758,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",758,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"WRITE_UTF16","","`text /** * Windows and the NSIS installer code sometimes expect INI files to be in * UTF-16 encoding. On Windows only, this flag to writeFile can be used to * change the encoding from its default UTF-8. */`",758,null],[11,"SetString","","`text /** * Set the value of a string for a particular section and key. */`",758,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"WriteFile","","`text /** * Write to the INI file. */`",758,null],[11,"addref","","",759,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",759,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIINIParserFactory` to one of its base interfaces.",759,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",759,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateINIParser","","`text /** * Create an iniparser instance from a local file. */`",759,null],[11,"addref","","",760,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",760,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleStateChangeEvent` to one of its base interfaces.",760,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",760,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetState","","`text /** * Returns the state of accessible (see constants declared * in nsIAccessibleStates). */`",760,null],[11,"GetIsExtraState","","`text /** * Returns true if the state is extra state. */`",760,null],[11,"GetIsEnabled","","`text /** * Returns true if the state is turned on. */`",760,null],[11,"addref","","",761,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",761,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadHistory` to one of its base interfaces.",761,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",761,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddDownload","","`text /** * Adds a download to history. This will also notify observers that the * URI aSource is visited with the topic NS_LINK_VISITED_EVENT_TOPIC if * aSource has not yet been visited. * * @param aSource * The source of the download we are adding to history. This cannot be * null. * @param aReferrer * [optional] The referrer of source URI. * @param aStartTime * [optional] The time the download was started. If the start time * is not given, the current time is used. * @param aDestination * [optional] The target where the download is to be saved on the local * filesystem. * @throws NS_ERROR_NOT_AVAILABLE * In a situation where a history implementation is not available, * where 'history implementation' refers to something like * nsIGlobalHistory and friends. * @note This addition is not guaranteed to be synchronous, since it delegates * the actual addition to the underlying history implementation. If you * need to observe the completion of the addition, use the underlying * history implementation's notifications system (e.g. nsINavHistoryObserver * for toolkit's implementation of this interface). */`",761,null],[11,"RemoveAllDownloads","","`text /** * Remove all downloads from history. * * @note This removal is not guaranteed to be synchronous, since it delegates * the actual removal to the underlying history implementation. If you * need to observe the completion of the removal, use the underlying * history implementation's notifications system (e.g. nsINavHistoryObserver * for toolkit's implementation of this interface). */`",761,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",762,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",762,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIMozIntlHelper` to one of its base interfaces.",762,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",762,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",763,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",763,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserChrome` to one of its base interfaces.",763,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",763,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATUS_SCRIPT","","",763,null],[18,"STATUS_LINK","","",763,null],[18,"CHROME_DEFAULT","","`text /** * Definitions for the chrome flags */`",763,null],[18,"CHROME_WINDOW_BORDERS","","",763,null],[18,"CHROME_WINDOW_CLOSE","","",763,null],[18,"CHROME_WINDOW_RESIZE","","",763,null],[18,"CHROME_MENUBAR","","",763,null],[18,"CHROME_TOOLBAR","","",763,null],[18,"CHROME_LOCATIONBAR","","",763,null],[18,"CHROME_STATUSBAR","","",763,null],[18,"CHROME_PERSONAL_TOOLBAR","","",763,null],[18,"CHROME_SCROLLBARS","","",763,null],[18,"CHROME_TITLEBAR","","",763,null],[18,"CHROME_EXTRA","","",763,null],[18,"CHROME_WITH_SIZE","","",763,null],[18,"CHROME_WITH_POSITION","","",763,null],[18,"CHROME_WINDOW_MIN","","",763,null],[18,"CHROME_WINDOW_POPUP","","",763,null],[18,"CHROME_PRIVATE_WINDOW","","",763,null],[18,"CHROME_NON_PRIVATE_WINDOW","","",763,null],[18,"CHROME_PRIVATE_LIFETIME","","",763,null],[18,"CHROME_REMOTE_WINDOW","","",763,null],[18,"CHROME_SUPPRESS_ANIMATION","","",763,null],[18,"CHROME_WINDOW_RAISED","","",763,null],[18,"CHROME_WINDOW_LOWERED","","",763,null],[18,"CHROME_CENTER_SCREEN","","",763,null],[18,"CHROME_DEPENDENT","","",763,null],[18,"CHROME_MODAL","","",763,null],[18,"CHROME_OPENAS_DIALOG","","",763,null],[18,"CHROME_OPENAS_CHROME","","",763,null],[18,"CHROME_ALL","","",763,null],[11,"SetStatus","","`text /** * Called when the status text in the chrome needs to be updated. * @param statusType indicates what is setting the text * @param status status string. null is an acceptable value meaning * no status. */`",763,null],[11,"GetWebBrowser","","`text /** * The currently loaded WebBrowser. The browser chrome may be * told to set the WebBrowser object to a new object by setting this * attribute. In this case the implementer is responsible for taking the * new WebBrowser object and doing any necessary initialization or setup * as if it had created the WebBrowser itself. This includes positioning * setting up listeners etc. */`",763,null],[11,"SetWebBrowser","","`text /** * The currently loaded WebBrowser. The browser chrome may be * told to set the WebBrowser object to a new object by setting this * attribute. In this case the implementer is responsible for taking the * new WebBrowser object and doing any necessary initialization or setup * as if it had created the WebBrowser itself. This includes positioning * setting up listeners etc. */`",763,null],[11,"GetChromeFlags","","`text /** * The chrome flags for this browser chrome. The implementation should * reflect the value of this attribute by hiding or showing its chrome * appropriately. */`",763,null],[11,"SetChromeFlags","","`text /** * The chrome flags for this browser chrome. The implementation should * reflect the value of this attribute by hiding or showing its chrome * appropriately. */`",763,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DestroyBrowserWindow","","`text /** * Asks the implementer to destroy the window associated with this * WebBrowser object. */`",763,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SizeBrowserTo","","`text /** * Tells the chrome to size itself such that the browser will be the * specified size. * @param aCX new width of the browser * @param aCY new height of the browser */`",763,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ShowAsModal","","`text /** * Shows the window as a modal window. * @return (the function error code) the status value specified by * in exitModalEventLoop. */`",763,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsWindowModal","","`text /** * Is the window modal (that is, currently executing a modal loop)? * @return true if it's a modal window */`",763,null],[11,"ExitModalEventLoop","","`text /** * Exit a modal event loop if we're in one. The implementation * should also exit out of the loop if the window is destroyed. * @param aStatus - the result code to return from showAsModal */`",763,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",764,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",764,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMComment` to one of its base interfaces.",764,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",764,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcharacterdata"}}],[11,"addref","","",765,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",765,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamTransportService` to one of its base interfaces.",765,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",765,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateInputTransport","","`text /** * CreateInputTransport * * @param aStream * The input stream that will be read on a background thread. * This stream must implement \"blocking\" stream semantics. * @param aCloseWhenDone * Specify this flag to have the input stream closed once its * contents have been completely read. * * @return nsITransport instance. */`",765,null],[11,"InputAvailable","","`void InputAvailable (in nsIInputStream aStream, in nsIInputAvailableCallback aCallback);`",765,null],[11,"addref","","",766,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",766,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputAvailableCallback` to one of its base interfaces.",766,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",766,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnInputAvailableComplete","","`void onInputAvailableComplete (in unsigned long long available, in nsresult available_return_code);`",766,{"inputs":[{"name":"self"},{"name":"uint64_t"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",767,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",767,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULButtonElement` to one of its base interfaces.",767,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",767,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxullabeledcontrolelement"}}],[18,"CHECKSTATE_UNCHECKED","","",767,null],[18,"CHECKSTATE_CHECKED","","",767,null],[18,"CHECKSTATE_MIXED","","",767,null],[11,"GetType","","`attribute DOMString type;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetType","","`attribute DOMString type;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDlgType","","`attribute DOMString dlgType;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDlgType","","`attribute DOMString dlgType;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOpen","","`attribute boolean open;`",767,null],[11,"SetOpen","","`attribute boolean open;`",767,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetChecked","","`attribute boolean checked;`",767,null],[11,"SetChecked","","`attribute boolean checked;`",767,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCheckState","","`attribute long checkState;`",767,null],[11,"SetCheckState","","`attribute long checkState;`",767,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetAutoCheck","","`attribute boolean autoCheck;`",767,null],[11,"SetAutoCheck","","`attribute boolean autoCheck;`",767,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetGroup","","`attribute DOMString group;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetGroup","","`attribute DOMString group;`",767,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",768,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",768,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerDebuggerListener` to one of its base interfaces.",768,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",768,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnClose","","`void onClose ();`",768,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnError","","`void onError (in DOMString filename, in unsigned long lineno, in DOMString message);`",768,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"OnMessage","","`void onMessage (in DOMString message);`",768,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",769,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",769,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWorkerDebugger` to one of its base interfaces.",769,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",769,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_DEDICATED","","",769,null],[18,"TYPE_SHARED","","",769,null],[18,"TYPE_SERVICE","","",769,null],[11,"GetIsClosed","","`readonly attribute bool isClosed;`",769,null],[11,"GetIsChrome","","`readonly attribute bool isChrome;`",769,null],[11,"GetIsInitialized","","`readonly attribute bool isInitialized;`",769,null],[11,"GetParent","","`readonly attribute nsIWorkerDebugger parent;`",769,null],[11,"GetType","","`readonly attribute unsigned long type;`",769,null],[11,"GetUrl","","`readonly attribute DOMString url;`",769,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetWindow","","`readonly attribute mozIDOMWindow window;`",769,null],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",769,null],[11,"GetServiceWorkerID","","`readonly attribute unsigned long serviceWorkerID;`",769,null],[11,"Initialize","","`void initialize (in DOMString url);`",769,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PostMessageMoz","","`[binaryname(PostMessageMoz)] void postMessage (in DOMString message);`",769,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddListener","","`void addListener (in nsIWorkerDebuggerListener listener);`",769,null],[11,"RemoveListener","","`void removeListener (in nsIWorkerDebuggerListener listener);`",769,null],[11,"addref","","",770,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",770,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBackgroundChannelRegistrar` to one of its base interfaces.",770,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",770,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",771,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",771,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPermissionManager` to one of its base interfaces.",771,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",771,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNKNOWN_ACTION","","`text /** * Predefined return values for the testPermission method and for * the permission param of the add method * NOTE: UNKNOWN_ACTION (0) is reserved to represent the * default permission when no entry is found for a host, and * should not be used by consumers to indicate otherwise. */`",771,null],[18,"ALLOW_ACTION","","",771,null],[18,"DENY_ACTION","","",771,null],[18,"PROMPT_ACTION","","",771,null],[18,"EXPIRE_NEVER","","`text /** * Predefined expiration types for permissions. Permissions can be permanent * (never expire), expire at the end of the session, or expire at a specified * time. Permissions that expire at the end of a session may also have a * specified expiration time. */`",771,null],[18,"EXPIRE_SESSION","","",771,null],[18,"EXPIRE_TIME","","",771,null],[11,"Add","","`text /** * Add permission information for a given URI and permission type. This * operation will cause the type string to be registered if it does not * currently exist. If a permission already exists for a given type, it * will be modified. * * @param uri the uri to add the permission for * @param type a case-sensitive ASCII string, identifying the consumer. * Consumers should choose this string to be unique, with * respect to other consumers. * @param permission an integer representing the desired action (e.g. allow * or deny). The interpretation of this number is up to the * consumer, and may represent different actions for different * types. Consumers may use one of the enumerated permission * actions defined above, for convenience. * NOTE: UNKNOWN_ACTION (0) is reserved to represent the * default permission when no entry is found for a host, and * should not be used by consumers to indicate otherwise. * @param expiretype a constant defining whether this permission should * never expire (EXPIRE_NEVER), expire at the end of the * session (EXPIRE_SESSION), or expire at a specified time * (EXPIRE_TIME). * @param expiretime an integer representation of when this permission * should be forgotten (milliseconds since Jan 1 1970 0:00:00). */`",771,null],[11,"GetAllForURI","","`text /** * Get all custom permissions for a given URI. This will return * an enumerator of all permissions which are not set to default * and which belong to the matching prinicpal of the given URI. * * @param uri the URI to get all permissions for */`",771,null],[11,"AddFromPrincipal","","`text /** * Add permission information for a given principal. * It is internally calling the other add() method using the nsIURI from the * principal. * Passing a system principal will be a no-op because they will always be * granted permissions. */`",771,null],[11,"Remove","","`text /** * Remove permission information for a given URI and permission type. This will * remove the permission for the entire host described by the uri, acting as the * opposite operation to the add() method. * * @param uri the uri to remove the permission for * @param type a case-sensitive ASCII string, identifying the consumer. * The type must have been previously registered using the * add() method. */`",771,null],[11,"RemoveFromPrincipal","","`text /** * Remove permission information for a given principal. * This is internally calling remove() with the host from the principal's URI. * Passing system principal will be a no-op because we never add them to the * database. */`",771,null],[11,"RemovePermission","","`text /** * Remove the given permission from the permission manager. * * @param perm a permission obtained from the permission manager. */`",771,null],[11,"RemoveAll","","`text /** * Clear permission information for all websites. */`",771,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveAllSince","","`text /** * Clear all permission information added since the specified time. */`",771,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"TestPermission","","`text /** * Test whether a website has permission to perform the given action. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. * @param uri the uri to be tested * @param type a case-sensitive ASCII string, identifying the consumer * @param return see add(), param permission. returns UNKNOWN_ACTION when * there is no stored permission for this uri and / or type. */`",771,null],[11,"TestPermissionFromPrincipal","","`text /** * Test whether the principal has the permission to perform a given action. * System principals will always have permissions granted. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. */`",771,null],[11,"TestPermissionFromWindow","","`text /** * Test whether the principal associated with the window's document has the * permission to perform a given action. System principals will always * have permissions granted. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. */`",771,null],[11,"TestExactPermission","","`text /** * Test whether a website has permission to perform the given action. * This requires an exact hostname match, subdomains are not a match. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. * @param uri the uri to be tested * @param type a case-sensitive ASCII string, identifying the consumer * @param return see add(), param permission. returns UNKNOWN_ACTION when * there is no stored permission for this uri and / or type. */`",771,null],[11,"TestExactPermissionFromPrincipal","","`text /** * See testExactPermission() above. * System principals will always have permissions granted. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. */`",771,null],[11,"TestExactPermanentPermission","","`text /** * Test whether a website has permission to perform the given action * ignoring active sessions. * System principals will always have permissions granted. * This function will perform a pref lookup to permissions.default.<type> * if the specific permission type is part of the whitelist for that functionality. * * @param principal the principal * @param type a case-sensitive ASCII string, identifying the consumer * @param return see add(), param permission. returns UNKNOWN_ACTION when * there is no stored permission for this uri and / or type. */`",771,null],[11,"GetPermissionObjectForURI","","`text /** * Get the permission object associated with the given URI and action. * @param uri The URI * @param type A case-sensitive ASCII string identifying the consumer * @param exactHost If true, only the specific host will be matched, * @see testExactPermission. If false, subdomains will * also be searched, @see testPermission. * @returns The matching permission object, or null if no matching object * was found. No matching object is equivalent to UNKNOWN_ACTION. * @note Clients in general should prefer the test* methods unless they * need to know the specific stored details. * @note This method will always return null for the system principal. */`",771,null],[11,"GetPermissionObject","","`text /** * Get the permission object associated with the given principal and action. * @param principal The principal * @param type A case-sensitive ASCII string identifying the consumer * @param exactHost If true, only the specific host will be matched, * @see testExactPermission. If false, subdomains will * also be searched, @see testPermission. * @returns The matching permission object, or null if no matching object * was found. No matching object is equivalent to UNKNOWN_ACTION. * @note Clients in general should prefer the test* methods unless they * need to know the specific stored details. * @note This method will always return null for the system principal. */`",771,null],[11,"GetEnumerator","","`text /** * Allows enumeration of all stored permissions * @return an nsISimpleEnumerator interface that allows access to * nsIPermission objects */`",771,null],[11,"RemovePermissionsWithAttributes","","`text /** * Remove all permissions that will match the origin pattern. */`",771,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UpdateExpireTime","","`text /** * If the current permission is set to expire, reset the expiration time. If * there is no permission or the current permission does not expire, this * method will silently return. * * @param sessionExpiretime an integer representation of when this permission * should be forgotten (milliseconds since * Jan 1 1970 0:00:00), if it is currently * EXPIRE_SESSION. * @param sessionExpiretime an integer representation of when this permission * should be forgotten (milliseconds since * Jan 1 1970 0:00:00), if it is currently * EXPIRE_TIME. */`",771,null],[11,"BroadcastPermissionsForPrincipalToAllContentProcesses","","`text /** * Broadcasts permissions for the given principal to all content processes. * * DO NOT USE THIS METHOD if you can avoid it. It was added in bug XXX to * handle the current temporary implementation of ServiceWorker debugging. It * will be removed when service worker debugging is fixed. * * @param aPrincipal The principal to broadcast permissions for. */`",771,null],[11,"WhenPermissionsAvailable","","`text /** * Add a callback which should be run when all permissions are available for * the given nsIPrincipal. This method invokes the callback runnable * synchronously when the permissions are already available. Otherwise the * callback will be run asynchronously in SystemGroup when all permissions * are available in the future. * * NOTE: This method will not request the permissions be sent by the parent * process. This should only be used to wait for permissions which may not * have arrived yet in order to ensure they are present. * * @param aPrincipal The principal to wait for permissions to be available for. * @param aRunnable The runnable to run when permissions are available for the * given principal. */`",771,null],[11,"GetHasPreloadPermissions","","`text /** * True if any \"preload\" permissions are present. This is used to avoid making * potentially expensive permissions checks in nsContentBlocker. */`",771,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",772,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",772,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHelperAppLauncherDialog` to one of its base interfaces.",772,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",772,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_CANTHANDLE","","`text /** * This request is passed to the helper app dialog because Gecko can not * handle content of this type. */`",772,null],[18,"REASON_SERVERREQUEST","","`text /** * The server requested external handling. */`",772,null],[18,"REASON_TYPESNIFFED","","`text /** * Gecko detected that the type sent by the server (e.g. text/plain) does * not match the actual type. */`",772,null],[11,"Show","","`text /** * Show confirmation dialog for launching application (or \"save to * disk\") for content specified by aLauncher. * * @param aLauncher * A nsIHelperAppLauncher to be invoked when a file is selected. * @param aWindowContext * Window associated with action. * @param aReason * One of the constants from above. It indicates why the dialog is * shown. Implementors should treat unknown reasons like * REASON_CANTHANDLE. */`",772,null],[11,"PromptForSaveToFileAsync","","`text /** * Async invoke a save-to-file dialog instead of the full fledged helper app * dialog. When the file is chosen (or the dialog is closed), the callback * in aLauncher (aLauncher.saveDestinationAvailable) is called with the * selected file. * * @param aLauncher * A nsIHelperAppLauncher to be invoked when a file is selected. * @param aWindowContext * Window associated with action. * @param aDefaultFileName * Default file name to provide (can be null) * @param aSuggestedFileExtension * Sugested file extension * @param aForcePrompt * Set to true to force prompting the user for thet file * name/location, otherwise perferences may control if the user is * prompted. */`",772,null],[11,"addref","","",773,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",773,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISerializable` to one of its base interfaces.",773,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",773,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Read","","`text /** * Initialize the object implementing nsISerializable, which must have * been freshly constructed via CreateInstance. All data members that * can't be set to default values must have been serialized by write, * and should be read from aInputStream in the same order by this method. */`",773,null],[11,"Write","","`text /** * Serialize the object implementing nsISerializable to aOutputStream, by * writing each data member that must be recovered later to reconstitute * a working replica of this object, in a canonical member and byte order, * to aOutputStream. * * NB: a class that implements nsISerializable *must* also implement * nsIClassInfo, in particular nsIClassInfo::GetClassID. */`",773,null],[11,"addref","","",774,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",774,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTMLAbsPosEditor` to one of its base interfaces.",774,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",774,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSelectionContainerAbsolutelyPositioned","","`text /** * true if the selection container is absolutely positioned */`",774,null],[11,"GetPositionedElement","","`text /** * this contains the absolutely positioned element currently edited * or null */`",774,null],[11,"GetAbsolutePositioningEnabled","","`text /** * true if Absolute Positioning handling is enabled in the editor */`",774,null],[11,"SetAbsolutePositioningEnabled","","`text /** * true if Absolute Positioning handling is enabled in the editor */`",774,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSnapToGridEnabled","","`text /** * true if Snap To Grid is enabled in the editor. */`",774,null],[11,"SetSnapToGridEnabled","","`text /** * true if Snap To Grid is enabled in the editor. */`",774,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetGridSize","","`text /** * sets the grid size in pixels. * @param aSizeInPixels [IN] the size of the grid in pixels */`",774,null],[11,"SetGridSize","","`text /** * sets the grid size in pixels. * @param aSizeInPixels [IN] the size of the grid in pixels */`",774,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetAbsolutelyPositionedSelectionContainer","","`text /** * returns the deepest absolutely positioned container of the selection * if it exists or null. */`",774,null],[11,"AbsolutePositionSelection","","`text /** * extracts the selection from the normal flow of the document and * positions it. * @param aEnabled [IN] true to absolutely position the selection, * false to put it back in the normal flow */`",774,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RelativeChangeZIndex","","`text /** * adds aChange to the z-index of the currently positioned element. * @param aChange [IN] relative change to apply to current z-index */`",774,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"AbsolutelyPositionElement","","`text /** * extracts an element from the normal flow of the document and * positions it, and puts it back in the normal flow. * @param aElement [IN] the element * @param aEnabled [IN] true to absolutely position the element, * false to put it back in the normal flow */`",774,null],[11,"SetElementPosition","","`text /** * sets the position of an element; warning it does NOT check if the * element is already positioned or not and that's on purpose. * @param aElement [IN] the element * @param aX [IN] the x position in pixels. * @param aY [IN] the y position in pixels. */`",774,null],[11,"GetElementZIndex","","`text /** * returns the absolute z-index of a positioned element. Never returns 'auto'. * @return the z-index of the element * @param aElement [IN] the element. */`",774,null],[11,"SetElementZIndex","","`text /** * sets the z-index of an element. * @param aElement [IN] the element * @param aZorder [IN] the z-index */`",774,null],[11,"RelativeChangeElementZIndex","","`text /** * adds aChange to the z-index of an arbitrary element. * @return the new z-index of the element * @param aElement [IN] the element * @param aChange [IN] relative change to apply to current z-index of * the element */`",774,null],[11,"ShowGrabberOnElement","","`text /** * shows a grabber attached to an arbitrary element. The grabber is an image * positioned on the left hand side of the top border of the element. Dragging * and dropping it allows to change the element's absolute position in the * document. See chrome://editor/content/images/grabber.gif * @param aElement [IN] the element */`",774,null],[11,"HideGrabber","","`text /** * hide the grabber if it shown. */`",774,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RefreshGrabber","","`text /** * refreshes the grabber if it shown, possibly updating its position or * even hiding it. */`",774,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",775,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",775,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextScroll` to one of its base interfaces.",775,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",775,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ScrollByLines","","`text /** * Scroll the view up or down by aNumLines lines. positive * values move down in the view. Prevents scrolling off the * end of the view. * @param numLines number of lines to scroll the view by */`",775,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollByPages","","`text /** * Scroll the view up or down by numPages pages. a page * is considered to be the amount displayed by the clip view. * positive values move down in the view. Prevents scrolling * off the end of the view. * @param numPages number of pages to scroll the view by */`",775,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",776,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",776,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMTimeEvent` to one of its base interfaces.",776,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",776,{"inputs":[{"name":"self"}],"output":{"name":"nsidomevent"}}],[11,"GetDetail","","`readonly attribute long detail;`",776,null],[11,"addref","","",777,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",777,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamListener` to one of its base interfaces.",777,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",777,{"inputs":[{"name":"self"}],"output":{"name":"nsirequestobserver"}}],[11,"OnDataAvailable","","`text /** * Called when the next chunk of data (corresponding to the request) may * be read without blocking the calling thread. The onDataAvailable impl * must read exactly |aCount| bytes of data before returning. * * @param aRequest request corresponding to the source of the data * @param aContext user defined context * @param aInputStream input stream containing the data chunk * @param aOffset * Number of bytes that were sent in previous onDataAvailable calls * for this request. In other words, the sum of all previous count * parameters. * @param aCount number of bytes available in the stream * * NOTE: The aInputStream parameter must implement readSegments. * * An exception thrown from onDataAvailable has the side-effect of * causing the request to be canceled. */`",777,null],[11,"addref","","",778,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",778,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirIndex` to one of its base interfaces.",778,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",778,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_UNKNOWN","","`text /** * Entry's type is unknown */`",778,null],[18,"TYPE_DIRECTORY","","`text /** * Entry is a directory */`",778,null],[18,"TYPE_FILE","","`text /** * Entry is a file */`",778,null],[18,"TYPE_SYMLINK","","`text /** * Entry is a symlink */`",778,null],[11,"GetType","","`text /** * The type of the entry - one of the constants above */`",778,null],[11,"SetType","","`text /** * The type of the entry - one of the constants above */`",778,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetContentType","","`text /** * The content type - may be null if it is unknown. * Unspecified for directories */`",778,null],[11,"SetContentType","","`text /** * The content type - may be null if it is unknown. * Unspecified for directories */`",778,null],[11,"GetLocation","","`text /** * The fully qualified filename, expressed as a uri * * This is encoded with the encoding specified in * the nsIDirIndexParser, and is also escaped. */`",778,null],[11,"SetLocation","","`text /** * The fully qualified filename, expressed as a uri * * This is encoded with the encoding specified in * the nsIDirIndexParser, and is also escaped. */`",778,null],[11,"GetDescription","","`text /** * A description for the filename, which should be * displayed by a viewer */`",778,null],[11,"SetDescription","","`text /** * A description for the filename, which should be * displayed by a viewer */`",778,null],[11,"GetSize","","`text /** * File size, with -1 meaning \"unknown\" */`",778,null],[11,"SetSize","","`text /** * File size, with -1 meaning \"unknown\" */`",778,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetLastModified","","`text /** * Last-modified time in seconds-since-epoch. * -1 means unknown - this is valid, because there were no * ftp servers in 1969 */`",778,null],[11,"SetLastModified","","`text /** * Last-modified time in seconds-since-epoch. * -1 means unknown - this is valid, because there were no * ftp servers in 1969 */`",778,{"inputs":[{"name":"self"},{"name":"prtime"}],"output":{"name":"nsresult"}}],[11,"addref","","",779,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",779,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXPathResult` to one of its base interfaces.",779,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",779,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ANY_TYPE","","",779,null],[18,"NUMBER_TYPE","","",779,null],[18,"STRING_TYPE","","",779,null],[18,"BOOLEAN_TYPE","","",779,null],[18,"UNORDERED_NODE_ITERATOR_TYPE","","",779,null],[18,"ORDERED_NODE_ITERATOR_TYPE","","",779,null],[18,"UNORDERED_NODE_SNAPSHOT_TYPE","","",779,null],[18,"ORDERED_NODE_SNAPSHOT_TYPE","","",779,null],[18,"ANY_UNORDERED_NODE_TYPE","","",779,null],[18,"FIRST_ORDERED_NODE_TYPE","","",779,null],[11,"addref","","",780,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",780,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentViewerEdit` to one of its base interfaces.",780,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",780,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"COPY_IMAGE_TEXT","","",780,null],[18,"COPY_IMAGE_HTML","","",780,null],[18,"COPY_IMAGE_DATA","","",780,null],[18,"COPY_IMAGE_ALL","","",780,null],[11,"ClearSelection","","`void clearSelection ();`",780,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectAll","","`void selectAll ();`",780,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CopySelection","","`void copySelection ();`",780,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetCopyable","","`readonly attribute boolean copyable;`",780,null],[11,"CopyLinkLocation","","`void copyLinkLocation ();`",780,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetInLink","","`readonly attribute boolean inLink;`",780,null],[11,"CopyImage","","`void copyImage (in long aCopyFlags);`",780,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetInImage","","`readonly attribute boolean inImage;`",780,null],[11,"GetContents","","`AString getContents (in string aMimeType, in boolean aSelectionOnly);`",780,null],[11,"GetCanGetContents","","`readonly attribute boolean canGetContents;`",780,null],[11,"SetCommandNode","","`void setCommandNode (in nsIDOMNode aNode);`",780,null],[11,"addref","","",781,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",781,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDOMRequest` to one of its base interfaces.",781,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",781,{"inputs":[{"name":"self"}],"output":{"name":"nsidomeventtarget"}}],[11,"GetReadyState","","`readonly attribute DOMString readyState;`",781,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetError","","`readonly attribute nsISupports error;`",781,null],[11,"addref","","",782,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",782,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMRequestService` to one of its base interfaces.",782,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",782,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateRequest","","`nsIDOMDOMRequest createRequest (in mozIDOMWindow window);`",782,null],[11,"CreateCursor","","`nsIDOMDOMCursor createCursor (in mozIDOMWindow window, in nsICursorContinueCallback aCallback);`",782,null],[11,"FireError","","`void fireError (in nsIDOMDOMRequest request, in DOMString error);`",782,null],[11,"FireDetailedError","","`void fireDetailedError (in nsIDOMDOMRequest request, in nsISupports error);`",782,null],[11,"FireErrorAsync","","`void fireErrorAsync (in nsIDOMDOMRequest request, in DOMString error);`",782,null],[11,"FireDone","","`void fireDone (in nsIDOMDOMCursor cursor);`",782,null],[11,"addref","","",783,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",783,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleRole` to one of its base interfaces.",783,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",783,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ROLE_NOTHING","","`text /** * Used when accessible hans't strong defined role. */`",783,null],[18,"ROLE_TITLEBAR","","`text /** * Represents a title or caption bar for a window. It is used by MSAA only, * supported automatically by MS Windows. */`",783,null],[18,"ROLE_MENUBAR","","`text /** * Represents the menu bar (positioned beneath the title bar of a window) * from which menus are selected by the user. The role is used by * xul:menubar or role=\"menubar\". */`",783,null],[18,"ROLE_SCROLLBAR","","`text /** * Represents a vertical or horizontal scroll bar, which is part of the client * area or used in a control. */`",783,null],[18,"ROLE_GRIP","","`text /** * Represents a special mouse pointer, which allows a user to manipulate user * interface elements such as windows. For example, a user clicks and drags * a sizing grip in the lower-right corner of a window to resize it. */`",783,null],[18,"ROLE_SOUND","","`text /** * Represents a system sound, which is associated with various system events. */`",783,null],[18,"ROLE_CURSOR","","`text /** * Represents the system mouse pointer. */`",783,null],[18,"ROLE_CARET","","`text /** * Represents the system caret. The role is supported for caret. */`",783,null],[18,"ROLE_ALERT","","`text /** * Represents an alert or a condition that a user should be notified about. * Assistive Technologies typically respond to the role by reading the entire * onscreen contents of containers advertising this role. Should be used for * warning dialogs, etc. The role is used by xul:browsermessage, * role=\"alert\". */`",783,null],[18,"ROLE_WINDOW","","`text /** * Represents the window frame, which contains child objects such as * a title bar, client, and other objects contained in a window. The role * is supported automatically by MS Windows. */`",783,null],[18,"ROLE_INTERNAL_FRAME","","`text /** * A sub-document (<frame> or <iframe>) */`",783,null],[18,"ROLE_MENUPOPUP","","`text /** * Represents a menu, which presents a list of options from which the user can * make a selection to perform an action. It is used for role=\"menu\". */`",783,null],[18,"ROLE_MENUITEM","","`text /** * Represents a menu item, which is an entry in a menu that a user can choose * to carry out a command, select an option. It is used for xul:menuitem, * role=\"menuitem\". */`",783,null],[18,"ROLE_TOOLTIP","","`text /** * Represents a ToolTip that provides helpful hints. */`",783,null],[18,"ROLE_APPLICATION","","`text /** * Represents a main window for an application. It is used for * role=\"application\". Also refer to ROLE_APP_ROOT */`",783,null],[18,"ROLE_DOCUMENT","","`text /** * Represents a document window. A document window is always contained within * an application window. It is used for role=\"document\". */`",783,null],[18,"ROLE_PANE","","`text /** * Represents a pane within a frame or document window. Users can navigate * between panes and within the contents of the current pane, but cannot * navigate between items in different panes. Thus, panes represent a level * of grouping lower than frame windows or documents, but above individual * controls. It is used for the first child of a <frame> or <iframe>. */`",783,null],[18,"ROLE_CHART","","`text /** * Represents a graphical image used to represent data. */`",783,null],[18,"ROLE_DIALOG","","`text /** * Represents a dialog box or message box. It is used for xul:dialog, * role=\"dialog\". */`",783,null],[18,"ROLE_BORDER","","`text /** * Represents a window border. */`",783,null],[18,"ROLE_GROUPING","","`text /** * Logically groups other objects. There is not always a parent-child * relationship between the grouping object and the objects it contains. It * is used for html:textfield, xul:groupbox, role=\"group\". */`",783,null],[18,"ROLE_SEPARATOR","","`text /** * Used to visually divide a space into two regions, such as a separator menu * item or a bar that divides split panes within a window. It is used for * xul:separator, html:hr, role=\"separator\". */`",783,null],[18,"ROLE_TOOLBAR","","`text /** * Represents a toolbar, which is a grouping of controls (push buttons or * toggle buttons) that provides easy access to frequently used features. It * is used for xul:toolbar, role=\"toolbar\". */`",783,null],[18,"ROLE_STATUSBAR","","`text /** * Represents a status bar, which is an area at the bottom of a window that * displays information about the current operation, state of the application, * or selected object. The status bar has multiple fields, which display * different kinds of information. It is used for xul:statusbar. */`",783,null],[18,"ROLE_TABLE","","`text /** * Represents a table that contains rows and columns of cells, and optionally, * row headers and column headers. It is used for html:table, * role=\"grid\". Also refer to the following roles: ROLE_COLUMNHEADER, * ROLE_ROWHEADER, ROLE_COLUMN, ROLE_ROW, ROLE_CELL. */`",783,null],[18,"ROLE_COLUMNHEADER","","`text /** * Represents a column header, providing a visual label for a column in * a table. It is used for XUL tree column headers, html:th, * role=\"colheader\". Also refer to ROLE_TABLE. */`",783,null],[18,"ROLE_ROWHEADER","","`text /** * Represents a row header, which provides a visual label for a table row. * It is used for role=\"rowheader\". Also, see ROLE_TABLE. */`",783,null],[18,"ROLE_COLUMN","","`text /** * Represents a column of cells within a table. Also, see ROLE_TABLE. */`",783,null],[18,"ROLE_ROW","","`text /** * Represents a row of cells within a table. Also, see ROLE_TABLE. */`",783,null],[18,"ROLE_CELL","","`text /** * Represents a cell within a table. It is used for html:td, * xul:tree cell and xul:listcell. Also, see ROLE_TABLE. */`",783,null],[18,"ROLE_LINK","","`text /** * Represents a link to something else. This object might look like text or * a graphic, but it acts like a button. It is used for * xul:label@class=\"text-link\", html:a, html:area. */`",783,null],[18,"ROLE_HELPBALLOON","","`text /** * Displays a Help topic in the form of a ToolTip or Help balloon. */`",783,null],[18,"ROLE_CHARACTER","","`text /** * Represents a cartoon-like graphic object, such as Microsoft Office * Assistant, which is displayed to provide help to users of an application. */`",783,null],[18,"ROLE_LIST","","`text /** * Represents a list box, allowing the user to select one or more items. It * is used for xul:listbox, html:select@size, role=\"list\". See also * ROLE_LIST_ITEM. */`",783,null],[18,"ROLE_LISTITEM","","`text /** * Represents an item in a list. See also ROLE_LIST. */`",783,null],[18,"ROLE_OUTLINE","","`text /** * Represents an outline or tree structure, such as a tree view control, * that displays a hierarchical list and allows the user to expand and * collapse branches. Is is used for role=\"tree\". */`",783,null],[18,"ROLE_OUTLINEITEM","","`text /** * Represents an item in an outline or tree structure. It is used for * role=\"treeitem\". */`",783,null],[18,"ROLE_PAGETAB","","`text /** * Represents a page tab, it is a child of a page tab list. It is used for * xul:tab, role=\"treeitem\". Also refer to ROLE_PAGETABLIST. */`",783,null],[18,"ROLE_PROPERTYPAGE","","`text /** * Represents a property sheet. It is used for xul:tabpanel, * role=\"tabpanel\". */`",783,null],[18,"ROLE_INDICATOR","","`text /** * Represents an indicator, such as a pointer graphic, that points to the * current item. */`",783,null],[18,"ROLE_GRAPHIC","","`text /** * Represents a picture. Is is used for xul:image, html:img. */`",783,null],[18,"ROLE_STATICTEXT","","`text /** * Represents read-only text, such as labels for other controls or * instructions in a dialog box. Static text cannot be modified or selected. * Is is used for xul:label, xul:description, html:label, role=\"label\". */`",783,null],[18,"ROLE_TEXT_LEAF","","`text /** * Represents selectable text that allows edits or is designated read-only. */`",783,null],[18,"ROLE_PUSHBUTTON","","`text /** * Represents a push button control. It is used for xul:button, html:button, * role=\"button\". */`",783,null],[18,"ROLE_CHECKBUTTON","","`text /** * Represents a check box control. It is used for xul:checkbox, * html:input@type=\"checkbox\", role=\"checkbox\". */`",783,null],[18,"ROLE_RADIOBUTTON","","`text /** * Represents an option button, also called a radio button. It is one of a * group of mutually exclusive options. All objects sharing a single parent * that have this attribute are assumed to be part of single mutually * exclusive group. It is used for xul:radio, html:input@type=\"radio\", * role=\"radio\". */`",783,null],[18,"ROLE_COMBOBOX","","`text /** * Represents a combo box; a popup button with an associated list box that * provides a set of predefined choices. It is used for html:select with a * size of 1 and xul:menulist. See also ROLE_EDITCOMBOBOX. */`",783,null],[18,"ROLE_DROPLIST","","`text /** * Represents the calendar control. */`",783,null],[18,"ROLE_PROGRESSBAR","","`text /** * Represents a progress bar, dynamically showing the user the percent * complete of an operation in progress. It is used for xul:progressmeter, * role=\"progressbar\". */`",783,null],[18,"ROLE_DIAL","","`text /** * Represents a dial or knob whose purpose is to allow a user to set a value. */`",783,null],[18,"ROLE_HOTKEYFIELD","","`text /** * Represents a hot-key field that allows the user to enter a combination or * sequence of keystrokes. */`",783,null],[18,"ROLE_SLIDER","","`text /** * Represents a slider, which allows the user to adjust a setting in given * increments between minimum and maximum values. It is used by xul:scale, * role=\"slider\". */`",783,null],[18,"ROLE_SPINBUTTON","","`text /** * Represents a spin box, which is a control that allows the user to increment * or decrement the value displayed in a separate \"buddy\" control associated * with the spin box. It is used for xul:spinbuttons. */`",783,null],[18,"ROLE_DIAGRAM","","`text /** * Represents a graphical image used to diagram data. It is used for svg:svg. */`",783,null],[18,"ROLE_ANIMATION","","`text /** * Represents an animation control, which contains content that changes over * time, such as a control that displays a series of bitmap frames. */`",783,null],[18,"ROLE_EQUATION","","`text /** * Represents a mathematical equation. It is used by MATHML, where there is a * rich DOM subtree for an equation. Use ROLE_FLAT_EQUATION for <img role=\"math\" alt=\"[TeX]\"/> */`",783,null],[18,"ROLE_BUTTONDROPDOWN","","`text /** * Represents a button that drops down a list of items. */`",783,null],[18,"ROLE_BUTTONMENU","","`text /** * Represents a button that drops down a menu. */`",783,null],[18,"ROLE_BUTTONDROPDOWNGRID","","`text /** * Represents a button that drops down a grid. It is used for xul:colorpicker. */`",783,null],[18,"ROLE_WHITESPACE","","`text /** * Represents blank space between other objects. */`",783,null],[18,"ROLE_PAGETABLIST","","`text /** * Represents a container of page tab controls. Is it used for xul:tabs, * DHTML: role=\"tabs\". Also refer to ROLE_PAGETAB. */`",783,null],[18,"ROLE_CLOCK","","`text /** * Represents a control that displays time. */`",783,null],[18,"ROLE_SPLITBUTTON","","`text /** * Represents a button on a toolbar that has a drop-down list icon directly * adjacent to the button. */`",783,null],[18,"ROLE_IPADDRESS","","`text /** * Represents an edit control designed for an Internet Protocol (IP) address. * The edit control is divided into sections for the different parts of the * IP address. */`",783,null],[18,"ROLE_ACCEL_LABEL","","`text /** * Represents a label control that has an accelerator. */`",783,null],[18,"ROLE_ARROW","","`text /** * Represents an arrow in one of the four cardinal directions. */`",783,null],[18,"ROLE_CANVAS","","`text /** * Represents a control that can be drawn into and is used to trap events. * It is used for html:canvas. */`",783,null],[18,"ROLE_CHECK_MENU_ITEM","","`text /** * Represents a menu item with a check box. */`",783,null],[18,"ROLE_COLOR_CHOOSER","","`text /** * Represents a specialized dialog that lets the user choose a color. */`",783,null],[18,"ROLE_DATE_EDITOR","","`text /** * Represents control whose purpose is to allow a user to edit a date. */`",783,null],[18,"ROLE_DESKTOP_ICON","","`text /** * An iconified internal frame in an ROLE_DESKTOP_PANE. Also refer to * ROLE_INTERNAL_FRAME. */`",783,null],[18,"ROLE_DESKTOP_FRAME","","`text /** * A desktop pane. A pane that supports internal frames and iconified * versions of those internal frames. */`",783,null],[18,"ROLE_DIRECTORY_PANE","","`text /** * A directory pane. A pane that allows the user to navigate through * and select the contents of a directory. May be used by a file chooser. * Also refer to ROLE_FILE_CHOOSER. */`",783,null],[18,"ROLE_FILE_CHOOSER","","`text /** * A file chooser. A specialized dialog that displays the files in the * directory and lets the user select a file, browse a different directory, * or specify a filename. May use the directory pane to show the contents of * a directory. Also refer to ROLE_DIRECTORY_PANE. */`",783,null],[18,"ROLE_FONT_CHOOSER","","`text /** * A font chooser. A font chooser is a component that lets the user pick * various attributes for fonts. */`",783,null],[18,"ROLE_CHROME_WINDOW","","`text /** * Frame role. A top level window with a title bar, border, menu bar, etc. * It is often used as the primary window for an application. */`",783,null],[18,"ROLE_GLASS_PANE","","`text /** * A glass pane. A pane that is guaranteed to be painted on top of all * panes beneath it. Also refer to ROLE_ROOT_PANE. */`",783,null],[18,"ROLE_HTML_CONTAINER","","`text /** * A document container for HTML, whose children represent the document * content. */`",783,null],[18,"ROLE_ICON","","`text /** * A small fixed size picture, typically used to decorate components. */`",783,null],[18,"ROLE_LABEL","","`text /** * Presents an icon or short string in an interface. */`",783,null],[18,"ROLE_LAYERED_PANE","","`text /** * A layered pane. A specialized pane that allows its children to be drawn * in layers, providing a form of stacking order. This is usually the pane * that holds the menu bar as well as the pane that contains most of the * visual components in a window. Also refer to ROLE_GLASS_PANE and * ROLE_ROOT_PANE. */`",783,null],[18,"ROLE_OPTION_PANE","","`text /** * A specialized pane whose primary use is inside a dialog. */`",783,null],[18,"ROLE_PASSWORD_TEXT","","`text /** * A text object uses for passwords, or other places where the text content * is not shown visibly to the user. */`",783,null],[18,"ROLE_POPUP_MENU","","`text /** * A temporary window that is usually used to offer the user a list of * choices, and then hides when the user selects one of those choices. */`",783,null],[18,"ROLE_RADIO_MENU_ITEM","","`text /** * A radio button that is a menu item. */`",783,null],[18,"ROLE_ROOT_PANE","","`text /** * A root pane. A specialized pane that has a glass pane and a layered pane * as its children. Also refer to ROLE_GLASS_PANE and ROLE_LAYERED_PANE. */`",783,null],[18,"ROLE_SCROLL_PANE","","`text /** * A scroll pane. An object that allows a user to incrementally view a large * amount of information. Its children can include scroll bars and a * viewport. Also refer to ROLE_VIEW_PORT. */`",783,null],[18,"ROLE_SPLIT_PANE","","`text /** * A split pane. A specialized panel that presents two other panels at the * same time. Between the two panels is a divider the user can manipulate to * make one panel larger and the other panel smaller. */`",783,null],[18,"ROLE_TABLE_COLUMN_HEADER","","`text /** * The header for a column of a table. * XXX: it looks this role is dupe of ROLE_COLUMNHEADER. */`",783,null],[18,"ROLE_TABLE_ROW_HEADER","","`text /** * The header for a row of a table. * XXX: it looks this role is dupe of ROLE_ROWHEADER */`",783,null],[18,"ROLE_TEAR_OFF_MENU_ITEM","","`text /** * A menu item used to tear off and reattach its menu. */`",783,null],[18,"ROLE_TERMINAL","","`text /** * Represents an accessible terminal. */`",783,null],[18,"ROLE_TEXT_CONTAINER","","`text /** * Collection of objects that constitute a logical text entity. */`",783,null],[18,"ROLE_TOGGLE_BUTTON","","`text /** * A toggle button. A specialized push button that can be checked or * unchecked, but does not provide a separate indicator for the current state. */`",783,null],[18,"ROLE_TREE_TABLE","","`text /** * Representas a control that is capable of expanding and collapsing rows as * well as showing multiple columns of data. * XXX: it looks like this role is dupe of ROLE_OUTLINE. */`",783,null],[18,"ROLE_VIEWPORT","","`text /** * A viewport. An object usually used in a scroll pane. It represents the * portion of the entire data that the user can see. As the user manipulates * the scroll bars, the contents of the viewport can change. Also refer to * ROLE_SCROLL_PANE. */`",783,null],[18,"ROLE_HEADER","","`text /** * Header of a document page. Also refer to ROLE_FOOTER. */`",783,null],[18,"ROLE_FOOTER","","`text /** * Footer of a document page. Also refer to ROLE_HEADER. */`",783,null],[18,"ROLE_PARAGRAPH","","`text /** * A paragraph of text. */`",783,null],[18,"ROLE_RULER","","`text /** * A ruler such as those used in word processors. */`",783,null],[18,"ROLE_AUTOCOMPLETE","","`text /** * A text entry having dialog or list containing items for insertion into * an entry widget, for instance a list of words for completion of a * text entry. It is used for xul:textbox@autocomplete */`",783,null],[18,"ROLE_EDITBAR","","`text /** * An editable text object in a toolbar. */`",783,null],[18,"ROLE_ENTRY","","`text /** * An control whose textual content may be entered or modified by the user. */`",783,null],[18,"ROLE_CAPTION","","`text /** * A caption describing another object. */`",783,null],[18,"ROLE_DOCUMENT_FRAME","","`text /** * A visual frame or container which contains a view of document content. * Document frames may occur within another Document instance, in which case * the second document may be said to be embedded in the containing instance. * HTML frames are often ROLE_DOCUMENT_FRAME. Either this object, or a * singleton descendant, should implement the Document interface. */`",783,null],[18,"ROLE_HEADING","","`text /** * Heading. */`",783,null],[18,"ROLE_PAGE","","`text /** * An object representing a page of document content. It is used in documents * which are accessed by the user on a page by page basis. */`",783,null],[18,"ROLE_SECTION","","`text /** * A container of document content. An example of the use of this role is to * represent an html:div. */`",783,null],[18,"ROLE_REDUNDANT_OBJECT","","`text /** * An object which is redundant with another object in the accessible * hierarchy. ATs typically ignore objects with this role. */`",783,null],[18,"ROLE_FORM","","`text /** * A container of form controls. An example of the use of this role is to * represent an html:form. */`",783,null],[18,"ROLE_IME","","`text /** * An object which is used to allow input of characters not found on a * keyboard, such as the input of Chinese characters on a Western keyboard. */`",783,null],[18,"ROLE_APP_ROOT","","`text /** * XXX: document this. */`",783,null],[18,"ROLE_PARENT_MENUITEM","","`text /** * Represents a menu item, which is an entry in a menu that a user can choose * to display another menu. */`",783,null],[18,"ROLE_CALENDAR","","`text /** * A calendar that allows the user to select a date. */`",783,null],[18,"ROLE_COMBOBOX_LIST","","`text /** * A list of items that is shown by combobox. */`",783,null],[18,"ROLE_COMBOBOX_OPTION","","`text /** * A item of list that is shown by combobox; */`",783,null],[18,"ROLE_IMAGE_MAP","","`text /** * An image map -- has child links representing the areas */`",783,null],[18,"ROLE_OPTION","","`text /** * An option in a listbox */`",783,null],[18,"ROLE_RICH_OPTION","","`text /** * A rich option in a listbox, it can have other widgets as children */`",783,null],[18,"ROLE_LISTBOX","","`text /** * A list of options */`",783,null],[18,"ROLE_FLAT_EQUATION","","`text /** * Represents a mathematical equation in the accessible name */`",783,null],[18,"ROLE_GRID_CELL","","`text /** * Represents a cell within a grid. It is used for role=\"gridcell\". Unlike * ROLE_CELL, it allows the calculation of the accessible name from subtree. * Also, see ROLE_TABLE. */`",783,null],[18,"ROLE_EMBEDDED_OBJECT","","`text /** * Represents an embedded object. It is used for html:object or html:embed. */`",783,null],[18,"ROLE_NOTE","","`text /** * A note. Originally intended to be hidden until activated, but now also used * for things like html 'aside'. */`",783,null],[18,"ROLE_FIGURE","","`text /** * A figure. Used for things like HTML5 figure element. */`",783,null],[18,"ROLE_CHECK_RICH_OPTION","","`text /** * Represents a rich item with a check box. */`",783,null],[18,"ROLE_DEFINITION_LIST","","`text /** * An HTML definition list <dl> */`",783,null],[18,"ROLE_TERM","","`text /** * An HTML definition term <dt> */`",783,null],[18,"ROLE_DEFINITION","","`text /** * An HTML definition <dd> */`",783,null],[18,"ROLE_KEY","","`text /** * A keyboard or keypad key. */`",783,null],[18,"ROLE_SWITCH","","`text /** * A switch control widget. */`",783,null],[18,"ROLE_MATHML_MATH","","`text /** * A block of MathML code (math). */`",783,null],[18,"ROLE_MATHML_IDENTIFIER","","`text /** * A MathML identifier (mi in MathML). */`",783,null],[18,"ROLE_MATHML_NUMBER","","`text /** * A MathML number (mn in MathML). */`",783,null],[18,"ROLE_MATHML_OPERATOR","","`text /** * A MathML operator (mo in MathML). */`",783,null],[18,"ROLE_MATHML_TEXT","","`text /** * A MathML text (mtext in MathML). */`",783,null],[18,"ROLE_MATHML_STRING_LITERAL","","`text /** * A MathML string literal (ms in MathML). */`",783,null],[18,"ROLE_MATHML_GLYPH","","`text /** * A MathML glyph (mglyph in MathML). */`",783,null],[18,"ROLE_MATHML_ROW","","`text /** * A MathML row (mrow in MathML). */`",783,null],[18,"ROLE_MATHML_FRACTION","","`text /** * A MathML fraction (mfrac in MathML). */`",783,null],[18,"ROLE_MATHML_SQUARE_ROOT","","`text /** * A MathML square root (msqrt in MathML). */`",783,null],[18,"ROLE_MATHML_ROOT","","`text /** * A MathML root (mroot in MathML). */`",783,null],[18,"ROLE_MATHML_FENCED","","`text /** * A MathML fenced element (mfenced in MathML). */`",783,null],[18,"ROLE_MATHML_ENCLOSED","","`text /** * A MathML enclosed element (menclose in MathML). */`",783,null],[18,"ROLE_MATHML_STYLE","","`text /** * A MathML styling element (mstyle in MathML). */`",783,null],[18,"ROLE_MATHML_SUB","","`text /** * A MathML subscript (msub in MathML). */`",783,null],[18,"ROLE_MATHML_SUP","","`text /** * A MathML superscript (msup in MathML). */`",783,null],[18,"ROLE_MATHML_SUB_SUP","","`text /** * A MathML subscript and superscript (msubsup in MathML). */`",783,null],[18,"ROLE_MATHML_UNDER","","`text /** * A MathML underscript (munder in MathML). */`",783,null],[18,"ROLE_MATHML_OVER","","`text /** * A MathML overscript (mover in MathML). */`",783,null],[18,"ROLE_MATHML_UNDER_OVER","","`text /** * A MathML underscript and overscript (munderover in MathML). */`",783,null],[18,"ROLE_MATHML_MULTISCRIPTS","","`text /** * A MathML multiple subscript and superscript element (mmultiscripts in * MathML). */`",783,null],[18,"ROLE_MATHML_TABLE","","`text /** * A MathML table (mtable in MathML). */`",783,null],[18,"ROLE_MATHML_LABELED_ROW","","`text /** * A MathML labelled table row (mlabeledtr in MathML). */`",783,null],[18,"ROLE_MATHML_TABLE_ROW","","`text /** * A MathML table row (mtr in MathML). */`",783,null],[18,"ROLE_MATHML_CELL","","`text /** * A MathML table entry or cell (mtd in MathML). */`",783,null],[18,"ROLE_MATHML_ACTION","","`text /** * A MathML interactive element (maction in MathML). */`",783,null],[18,"ROLE_MATHML_ERROR","","`text /** * A MathML error message (merror in MathML). */`",783,null],[18,"ROLE_MATHML_STACK","","`text /** * A MathML stacked (rows of numbers) element (mstack in MathML). */`",783,null],[18,"ROLE_MATHML_LONG_DIVISION","","`text /** * A MathML long division element (mlongdiv in MathML). */`",783,null],[18,"ROLE_MATHML_STACK_GROUP","","`text /** * A MathML stack group (msgroup in MathML). */`",783,null],[18,"ROLE_MATHML_STACK_ROW","","`text /** * A MathML stack row (msrow in MathML). */`",783,null],[18,"ROLE_MATHML_STACK_CARRIES","","`text /** * MathML carries, borrows, or crossouts for a row (mscarries in MathML). */`",783,null],[18,"ROLE_MATHML_STACK_CARRY","","`text /** * A MathML carry, borrow, or crossout for a column (mscarry in MathML). */`",783,null],[18,"ROLE_MATHML_STACK_LINE","","`text /** * A MathML line in a stack (msline in MathML). */`",783,null],[18,"ROLE_RADIO_GROUP","","`text /** * A group containing radio buttons */`",783,null],[18,"ROLE_TEXT","","`text /** * A text container exposing brief amount of information. See related * TEXT_CONTAINER role. */`",783,null],[18,"ROLE_DETAILS","","`text /** * A text container exposing brief amount of information. See related * DETAILS role. */`",783,null],[18,"ROLE_SUMMARY","","`text /** * A text container exposing brief amount of information. See related * SUMMARY role. */`",783,null],[18,"ROLE_LANDMARK","","`text /** * An ARIA landmark. See related NAVIGATION role. */`",783,null],[18,"ROLE_NAVIGATION","","`text /** * A specific type of ARIA landmark. The ability to distinguish navigation * landmarks from other types of landmarks is needed because macOS has a * specific AXSubrole and AXRoleDescription for navigation landmarks. */`",783,null],[18,"ROLE_FOOTNOTE","","`text /** * An object that contains the text of a footnote. */`",783,null],[18,"ROLE_ARTICLE","","`text /** * A complete or self-contained composition in a document, page, application, * or site and that is, in principle, independently distributable or reusable, * e.g. in syndication. */`",783,null],[18,"ROLE_REGION","","`text /** * A perceivable section containing content that is relevant to a specific, * author-specified purpose and sufficiently important that users will likely * want to be able to navigate to the section easily and to have it listed in * a summary of the page. */`",783,null],[18,"ROLE_EDITCOMBOBOX","","`text /** * Represents a control with a text input and a popup with a set of predefined * choices. It is used for ARIA's combobox role. See also ROLE_COMBOBOX. */`",783,null],[11,"addref","","",784,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",784,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICompressConvStats` to one of its base interfaces.",784,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",784,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDecodedDataLength","","`readonly attribute uint64_t decodedDataLength;`",784,null],[11,"addref","","",785,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",785,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDOMImplementation` to one of its base interfaces.",785,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",785,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HasFeature","","`text /** * The nsIDOMDOMImplementation interface provides a number of methods for * performing operations that are independent of any particular instance * of the document object model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",785,null],[11,"CreateDocumentType","","`nsIDOMDocumentType createDocumentType (in DOMString qualifiedName, in DOMString publicId, in DOMString systemId) raises (DOMException);`",785,null],[11,"CreateDocument","","`nsIDOMDocument createDocument (in DOMString namespaceURI, in DOMString qualifiedName, in nsIDOMDocumentType doctype) raises (DOMException);`",785,null],[11,"CreateHTMLDocument","","`text /** * Returns an HTML document with a basic DOM already constructed and with an * appropriate title element. * * @param title the title of the Document * @see <http://www.whatwg.org/html/#creating-documents> */`",785,null],[11,"addref","","",786,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",786,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginManagerCrypto` to one of its base interfaces.",786,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",786,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ENCTYPE_BASE64","","",786,null],[18,"ENCTYPE_SDR","","",786,null],[11,"Encrypt","","`text /** * encrypt * * @param plainText * The string to be encrypted. * * Encrypts the specified string, returning the ciphertext value. * * NOTE: The current implemention of this inferface simply uses NSS/PSM's * \"Secret Decoder Ring\" service. It is not recommended for general * purpose encryption/decryption. * * Can throw if the user cancels entry of their master password. */`",786,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Decrypt","","`text /** * decrypt * * @param cipherText * The string to be decrypted. * * Decrypts the specified string, returning the plaintext value. * * Can throw if the user cancels entry of their master password, or if the * cipherText value can not be successfully decrypted (eg, if it was * encrypted with some other key). */`",786,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUiBusy","","`text /** * uiBusy * * True when a master password prompt is being displayed. */`",786,null],[11,"GetIsLoggedIn","","`text /** * isLoggedIn * * Current login state of the token used for encryption. If the user is * not logged in, performing a crypto operation will result in a master * password prompt. */`",786,null],[11,"GetDefaultEncType","","`text /** * defaultEncType * * Default encryption type used by an implementation of this interface. */`",786,null],[11,"addref","","",787,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",787,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandLine` to one of its base interfaces.",787,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",787,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_INITIAL_LAUNCH","","",787,null],[18,"STATE_REMOTE_AUTO","","",787,null],[18,"STATE_REMOTE_EXPLICIT","","",787,null],[11,"GetLength","","`text /** * Number of arguments in the command line. The application name is not * part of the command line. */`",787,null],[11,"GetArgument","","`text /** * Get an argument from the array of command-line arguments. * * On windows, flags of the form /flag are normalized to -flag. /flag:param * are normalized to -flag param. * * On *nix and mac flags of the form --flag are normalized to -flag. --flag=param * are normalized to the form -flag param. * * @param aIndex The argument to retrieve. This index is 0-based, and does * not include the application name. * @return The indexth argument. * @throws NS_ERROR_INVALID_ARG if aIndex is out of bounds. */`",787,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"FindFlag","","`text /** * Find a command-line flag. * * @param aFlag The flag name to locate. Do not include the initial * hyphen. * @param aCaseSensitive Whether to do case-sensitive comparisons. * @return The position of the flag in the command line. */`",787,null],[11,"RemoveArguments","","`text /** * Remove arguments from the command line. This normally occurs after * a handler has processed the arguments. * * @param aStart Index to begin removing. * @param aEnd Index to end removing, inclusive. */`",787,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"HandleFlag","","`text /** * A helper method which will find a flag and remove it in one step. * * @param aFlag The flag name to find and remove. * @param aCaseSensitive Whether to do case-sensitive comparisons. * @return Whether the flag was found. */`",787,null],[11,"HandleFlagWithParam","","`text /** * Find a flag with a parameter and remove both. This is a helper * method that combines \"findFlag\" and \"removeArguments\" in one step. * * @return null (a void astring) if the flag is not found. The parameter value * if found. Note that null and the empty string are not the same. * @throws NS_ERROR_INVALID_ARG if the flag exists without a parameter * * @param aFlag The flag name to find and remove. * @param aCaseSensitive Whether to do case-sensitive flag search. */`",787,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetState","","`text /** * The type of command line being processed. * * STATE_INITIAL_LAUNCH is the first launch of the application instance. * STATE_REMOTE_AUTO is a remote command line automatically redirected to * this instance. * STATE_REMOTE_EXPLICIT is a remote command line explicitly redirected to * this instance using xremote/windde/appleevents. */`",787,null],[11,"GetPreventDefault","","`text /** * There may be a command-line handler which performs a default action if * there was no explicit action on the command line (open a default browser * window, for example). This flag allows the default action to be prevented. */`",787,null],[11,"SetPreventDefault","","`text /** * There may be a command-line handler which performs a default action if * there was no explicit action on the command line (open a default browser * window, for example). This flag allows the default action to be prevented. */`",787,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWorkingDirectory","","`text /** * The working directory for this command line. Use this property instead * of the working directory for the current process, since a redirected * command line may have had a different working directory. */`",787,null],[11,"GetWindowContext","","`text /** * A window to be targeted by this command line. In most cases, this will * be null (xremote will sometimes set this attribute). */`",787,null],[11,"ResolveFile","","`text /** * Resolve a file-path argument into an nsIFile. This method gracefully * handles relative or absolute file paths, according to the working * directory of this command line. * * @param aArgument The command-line argument to resolve. */`",787,null],[11,"ResolveURI","","`text /** * Resolves a URI argument into a URI. This method has platform-specific * logic for converting an absolute URI or a relative file-path into the * appropriate URI object; it gracefully handles win32 C:\\ paths which would * confuse the ioservice if passed directly. * * @param aArgument The command-line argument to resolve. */`",787,null],[11,"addref","","",788,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",788,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHashable` to one of its base interfaces.",788,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",788,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Equals","","`text /** * Is this object the equivalent of the other object? */`",788,null],[11,"GetHashCode","","`text /** * A generated hashcode for this object. Objects that are equivalent * must have the same hash code. Getting this property should never * throw an exception! */`",788,null],[11,"addref","","",789,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",789,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionTransportBuilderListener` to one of its base interfaces.",789,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",789,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSessionTransport","","`void onSessionTransport (in nsIPresentationSessionTransport transport);`",789,null],[11,"OnError","","`void onError (in nsresult reason);`",789,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"SendOffer","","`void sendOffer (in nsIPresentationChannelDescription offer);`",789,null],[11,"SendAnswer","","`void sendAnswer (in nsIPresentationChannelDescription answer);`",789,null],[11,"SendIceCandidate","","`void sendIceCandidate (in DOMString candidate);`",789,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Close","","`void close (in nsresult reason);`",789,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",790,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",790,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationSessionTransportBuilder` to one of its base interfaces.",790,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",790,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",791,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",791,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationTransportBuilderConstructor` to one of its base interfaces.",791,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",791,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateTransportBuilder","","`nsIPresentationSessionTransportBuilder createTransportBuilder (in uint8_t type);`",791,null],[11,"addref","","",792,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",792,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationTCPSessionTransportBuilder` to one of its base interfaces.",792,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",792,{"inputs":[{"name":"self"}],"output":{"name":"nsipresentationsessiontransportbuilder"}}],[11,"BuildTCPSenderTransport","","`text /** * The following creation functions will trigger |listener.onSessionTransport| * if the session transport is successfully built, |listener.onError| if some * error occurs during building session transport. */`",792,null],[11,"BuildTCPReceiverTransport","","`void buildTCPReceiverTransport (in nsIPresentationChannelDescription aDescription, in nsIPresentationSessionTransportBuilderListener aListener);`",792,null],[11,"addref","","",793,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",793,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDataChannelSessionTransportBuilder` to one of its base interfaces.",793,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",793,{"inputs":[{"name":"self"}],"output":{"name":"nsipresentationsessiontransportbuilder"}}],[11,"BuildDataChannelTransport","","`text /** * The following creation function will trigger |listener.onSessionTransport| * if the session transport is successfully built, |listener.onError| if some * error occurs during creating session transport. The |notifyConnected| of * |aControlChannel| should be called before calling * |buildDataChannelTransport|. */`",793,null],[11,"OnOffer","","`void onOffer (in nsIPresentationChannelDescription offer);`",793,null],[11,"OnAnswer","","`void onAnswer (in nsIPresentationChannelDescription answer);`",793,null],[11,"OnIceCandidate","","`void onIceCandidate (in DOMString candidate);`",793,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NotifyDisconnected","","`void notifyDisconnected (in nsresult reason);`",793,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",794,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",794,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintStatusFeedback` to one of its base interfaces.",794,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",794,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowStatusString","","`void showStatusString (in wstring status);`",794,null],[11,"StartMeteors","","`void startMeteors ();`",794,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StopMeteors","","`void stopMeteors ();`",794,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ShowProgress","","`void showProgress (in long percent);`",794,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetDocShell","","`[noscript] void setDocShell (in nsIDocShell shell, in mozIDOMWindowProxy window);`",794,null],[11,"CloseWindow","","`void closeWindow ();`",794,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",795,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",795,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedResult` to one of its base interfaces.",795,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",795,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBozo","","`text /** * The Feed parser will set the bozo bit when a feed triggers a fatal * error during XML parsing. There may be entries and feed metadata * that were parsed before the error. Thanks to Tim Bray for * suggesting this terminology. * <http://www.tbray.org/ongoing/When/200x/2004/01/11/PostelPilgrim> */`",795,null],[11,"SetBozo","","`text /** * The Feed parser will set the bozo bit when a feed triggers a fatal * error during XML parsing. There may be entries and feed metadata * that were parsed before the error. Thanks to Tim Bray for * suggesting this terminology. * <http://www.tbray.org/ongoing/When/200x/2004/01/11/PostelPilgrim> */`",795,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDoc","","`text /** * The parsed feed or entry. * * Will be null if a non-feed is processed. */`",795,null],[11,"SetDoc","","`text /** * The parsed feed or entry. * * Will be null if a non-feed is processed. */`",795,null],[11,"GetUri","","`text /** * The address from which the feed was fetched. */`",795,null],[11,"SetUri","","`text /** * The address from which the feed was fetched. */`",795,null],[11,"GetVersion","","`text /** * Feed Version: * atom, rss2, rss09, rss091, rss091userland, rss092, rss1, atom03, * atomEntry, rssItem * * Will be null if a non-feed is processed. */`",795,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetVersion","","`text /** * Feed Version: * atom, rss2, rss09, rss091, rss091userland, rss092, rss1, atom03, * atomEntry, rssItem * * Will be null if a non-feed is processed. */`",795,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStylesheet","","`text /** * An XSLT stylesheet available to transform the source of the * feed. Some feeds include this information in a processing * instruction. It's generally intended for clients with specific * feed capabilities. */`",795,null],[11,"SetStylesheet","","`text /** * An XSLT stylesheet available to transform the source of the * feed. Some feeds include this information in a processing * instruction. It's generally intended for clients with specific * feed capabilities. */`",795,null],[11,"GetHeaders","","`text /** * HTTP response headers that accompanied the feed. */`",795,null],[11,"SetHeaders","","`text /** * HTTP response headers that accompanied the feed. */`",795,null],[11,"RegisterExtensionPrefix","","`text /** * Registers a prefix used to access an extension in the feed/entry */`",795,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",796,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",796,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntryDoomCallback` to one of its base interfaces.",796,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",796,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnCacheEntryDoomed","","`text /** * Callback invoked after an entry or entries has/have been * doomed from the cache. */`",796,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",797,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",797,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebPageDescriptor` to one of its base interfaces.",797,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",797,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DISPLAY_AS_SOURCE","","",797,null],[18,"DISPLAY_NORMAL","","",797,null],[11,"LoadPage","","`text /** * Tells the object to load the page specified by the page descriptor * * @throws NS_ERROR_FAILURE - */`",797,null],[11,"GetCurrentDescriptor","","`text /** * Retrieves the page descriptor for the curent document. */`",797,null],[11,"addref","","",798,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",798,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIKeygenThread` to one of its base interfaces.",798,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",798,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartKeyGeneration","","`text /** * startKeyGeneration - run the thread * A user interface using this interface needs to * call this method as soon as the status information * is displaying. This will trigger key generation. * To allow the closure of the status information, * the thread needs a handle to an observer. * * observer will be called on the UI thread. * When the key generation is done, the observe method will * be called with a topic of \"keygen-finished\" and null data * and subject. */`",798,null],[11,"UserCanceled","","`text /** * userCanceled - notify the thread * If the user canceled, the thread is no longer allowed to * close the dialog. However, if the thread already closed * it, we are not allowed to close it. */`",798,null],[11,"addref","","",799,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",799,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRaceCacheWithNetwork` to one of its base interfaces.",799,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",799,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Test_triggerNetwork","","",799,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Test_delayCacheEntryOpeningBy","","`text /** * Normally a HTTP channel would immediately call AsyncOpenURI leading to the * cache storage to lookup the cache entry and return it. In order to * simmulate real life conditions where fetching a cache entry takes a long * time, we set a timer to delay the operation. * Can only be called on the main thread. * * @param timeout * - the delay in milliseconds until the cache open will be triggered. */`",799,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Test_triggerDelayedOpenCacheEntry","","`text /** * Immediatelly triggers AsyncOpenURI if the timer hasn't fired. * Can only be called on the main thread. * This is only called in tests to reliably trigger the opening of the cache * entry. * @throws NS_ERROR_NOT_AVAILABLE if opening the cache wasn't delayed. */`",799,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",800,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",800,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrompt` to one of its base interfaces.",800,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",800,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"BUTTON_POS_0","","",800,null],[18,"BUTTON_POS_1","","",800,null],[18,"BUTTON_POS_2","","",800,null],[18,"BUTTON_TITLE_OK","","",800,null],[18,"BUTTON_TITLE_CANCEL","","",800,null],[18,"BUTTON_TITLE_YES","","",800,null],[18,"BUTTON_TITLE_NO","","",800,null],[18,"BUTTON_TITLE_SAVE","","",800,null],[18,"BUTTON_TITLE_DONT_SAVE","","",800,null],[18,"BUTTON_TITLE_REVERT","","",800,null],[18,"BUTTON_TITLE_IS_STRING","","",800,null],[18,"BUTTON_POS_0_DEFAULT","","",800,null],[18,"BUTTON_POS_1_DEFAULT","","",800,null],[18,"BUTTON_POS_2_DEFAULT","","",800,null],[18,"BUTTON_DELAY_ENABLE","","",800,null],[18,"STD_OK_CANCEL_BUTTONS","","",800,null],[18,"STD_YES_NO_BUTTONS","","",800,null],[11,"Alert","","`void alert (in wstring dialogTitle, in wstring text);`",800,null],[11,"AlertCheck","","`void alertCheck (in wstring dialogTitle, in wstring text, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"Confirm","","`boolean confirm (in wstring dialogTitle, in wstring text);`",800,null],[11,"ConfirmCheck","","`boolean confirmCheck (in wstring dialogTitle, in wstring text, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"ConfirmEx","","`int32_t confirmEx (in wstring dialogTitle, in wstring text, in unsigned long buttonFlags, in wstring button0Title, in wstring button1Title, in wstring button2Title, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"Prompt","","`boolean prompt (in wstring dialogTitle, in wstring text, inout wstring value, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"PromptPassword","","`boolean promptPassword (in wstring dialogTitle, in wstring text, inout wstring password, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"PromptUsernameAndPassword","","`boolean promptUsernameAndPassword (in wstring dialogTitle, in wstring text, inout wstring username, inout wstring password, in wstring checkMsg, inout boolean checkValue);`",800,null],[11,"Select","","`boolean select (in wstring dialogTitle, in wstring text, in uint32_t count, [array, size_is (count)] in wstring selectList, out long outSelection);`",800,null],[11,"addref","","",801,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",801,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCDATASection` to one of its base interfaces.",801,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",801,{"inputs":[{"name":"self"}],"output":{"name":"nsidomtext"}}],[11,"addref","","",802,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",802,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageBindingParams` to one of its base interfaces.",802,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",802,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"BindByName","","`text /** * Binds aValue to the parameter with the name aName. * * @param aName * The name of the parameter to bind aValue to. * @param aValue * The value to bind. */`",802,null],[11,"BindUTF8StringByName","","`[noscript] void bindUTF8StringByName (in AUTF8String aName, in AUTF8String aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"BindStringByName","","`[noscript] void bindStringByName (in AUTF8String aName, in AString aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"BindDoubleByName","","`[noscript] void bindDoubleByName (in AUTF8String aName, in double aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"BindInt32ByName","","`[noscript] void bindInt32ByName (in AUTF8String aName, in long aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"BindInt64ByName","","`[noscript] void bindInt64ByName (in AUTF8String aName, in long long aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"BindNullByName","","`[noscript] void bindNullByName (in AUTF8String aName);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"BindBlobByName","","`void bindBlobByName (in AUTF8String aName, [array, size_is (aValueSize), const] in octet aValue, in unsigned long aValueSize);`",802,null],[11,"BindStringAsBlobByName","","`void bindStringAsBlobByName (in AUTF8String aName, in AString aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"BindUTF8StringAsBlobByName","","`void bindUTF8StringAsBlobByName (in AUTF8String aName, in AUTF8String aValue);`",802,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"BindAdoptedBlobByName","","`[noscript] void bindAdoptedBlobByName (in AUTF8String aName, [array, size_is (aValueSize)] in octet aValue, in unsigned long aValueSize);`",802,null],[11,"BindByIndex","","`text /** * Binds aValue to the parameter with the index aIndex. * * @param aIndex * The zero-based index of the parameter to bind aValue to. * @param aValue * The value to bind. */`",802,null],[11,"BindUTF8StringByIndex","","`[noscript] void bindUTF8StringByIndex (in unsigned long aIndex, in AUTF8String aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"BindStringByIndex","","`[noscript] void bindStringByIndex (in unsigned long aIndex, in AString aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"BindDoubleByIndex","","`[noscript] void bindDoubleByIndex (in unsigned long aIndex, in double aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"BindInt32ByIndex","","`[noscript] void bindInt32ByIndex (in unsigned long aIndex, in long aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"BindInt64ByIndex","","`[noscript] void bindInt64ByIndex (in unsigned long aIndex, in long long aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"BindNullByIndex","","`[noscript] void bindNullByIndex (in unsigned long aIndex);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"BindBlobByIndex","","`void bindBlobByIndex (in unsigned long aIndex, [array, size_is (aValueSize), const] in octet aValue, in unsigned long aValueSize);`",802,null],[11,"BindStringAsBlobByIndex","","`void bindStringAsBlobByIndex (in unsigned long aIndex, in AString aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"BindUTF8StringAsBlobByIndex","","`void bindUTF8StringAsBlobByIndex (in unsigned long aIndex, in AUTF8String aValue);`",802,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"BindAdoptedBlobByIndex","","`[noscript] void bindAdoptedBlobByIndex (in unsigned long aIndex, [array, size_is (aValueSize)] in octet aValue, in unsigned long aValueSize);`",802,null],[11,"addref","","",803,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",803,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageBaseStatement` to one of its base interfaces.",803,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",803,{"inputs":[{"name":"self"}],"output":{"name":"mozistoragebindingparams"}}],[18,"MOZ_STORAGE_STATEMENT_INVALID","","`text /** * The statement is not usable, either because it failed to initialize or * was explicitly finalized. */`",803,null],[18,"MOZ_STORAGE_STATEMENT_READY","","`text /** * The statement is usable. */`",803,null],[18,"MOZ_STORAGE_STATEMENT_EXECUTING","","`text /** * Indicates that the statement is executing and the row getters may be used. * * @note This is only relevant for mozIStorageStatement instances being used * in a synchronous fashion. */`",803,null],[11,"Finalize","","`text /** * Finalizes a statement so you can successfully close a database connection. * Once a statement has been finalized it can no longer be used for any * purpose. * * Statements are implicitly finalized when their reference counts hits zero. * If you are a native (C++) caller this is accomplished by setting all of * your nsCOMPtr instances to be NULL. If you are operating from JavaScript * code then you cannot rely on this behavior because of the involvement of * garbage collection. * * When finalizing an asynchronous statement you do not need to worry about * whether the statement has actually been executed by the asynchronous * thread; you just need to call finalize after your last call to executeAsync * involving the statement. However, you do need to use asyncClose instead of * close on the connection if any statements have been used asynchronously. */`",803,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BindParameters","","`text /** * Binds the array of parameters to the statement. When executeAsync is * called, all the parameters in aParameters are bound and then executed. * * @param aParameters * The array of parameters to bind to the statement upon execution. * * @note This is only works on statements being used asynchronously. */`",803,null],[11,"NewBindingParamsArray","","`text /** * Creates a new mozIStorageBindingParamsArray that can be used to bind * multiple sets of data to a statement with bindParameters. * * @return a mozIStorageBindingParamsArray that multiple sets of parameters * can be bound to. * * @note This is only useful for statements being used asynchronously. */`",803,null],[11,"ExecuteAsync","","`text /** * Execute a query asynchronously using any currently bound parameters. This * statement can be reused immediately, and reset does not need to be called. * * @note If you have any custom defined functions, they must be re-entrant * since they can be called on multiple threads. * * @param aCallback [optional] * The callback object that will be notified of progress, errors, and * completion. * @return an object that can be used to cancel the statements execution. */`",803,null],[11,"GetState","","`text /** * Find out whether the statement is usable (has not been finalized). */`",803,null],[11,"EscapeStringForLIKE","","`text /** * Escape a string for SQL LIKE search. * * @note Consumers will have to use same escape char when doing statements * such as: ...LIKE '?1' ESCAPE '/'... * * @param aValue * The string to escape for SQL LIKE. * @param aEscapeChar * The escape character. * @return an AString of an escaped version of aValue * (%, _ and the escape char are escaped with the escape char) * For example, we will convert \"foo/bar_baz%20cheese\" * into \"foo//bar/_baz/%20cheese\" (if the escape char is '/'). */`",803,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int16_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",804,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",804,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirectoryServiceProvider` to one of its base interfaces.",804,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",804,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFile","","`text /** * getFile * * Directory Service calls this when it gets the first request for * a prop or on every request if the prop is not persistent. * * @param prop The symbolic name of the file. * @param persistent TRUE - The returned file will be cached by Directory * Service. Subsequent requests for this prop will * bypass the provider and use the cache. * FALSE - The provider will be asked for this prop * each time it is requested. * * @return The file represented by the property. * */`",804,null],[11,"addref","","",805,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",805,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirectoryServiceProvider2` to one of its base interfaces.",805,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",805,{"inputs":[{"name":"self"}],"output":{"name":"nsidirectoryserviceprovider"}}],[11,"GetFiles","","`text /** * getFiles * * Directory Service calls this when it gets a request for * a prop and the requested type is nsISimpleEnumerator. * * @param prop The symbolic name of the file list. * * @return An enumerator for a list of file locations. * The elements in the enumeration are nsIFile * @returnCode NS_SUCCESS_AGGREGATE_RESULT if this result should be * aggregated with other \"lower\" providers. */`",805,null],[11,"addref","","",806,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",806,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirectoryService` to one of its base interfaces.",806,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",806,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * init * * Must be called. Used internally by XPCOM initialization. * */`",806,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RegisterProvider","","`text /** * registerProvider * * Register a provider with the service. * * @param prov The service will keep a strong reference * to this object. It will be released when * the service is released. * */`",806,null],[11,"UnregisterProvider","","`text /** * unregisterProvider * * Unregister a provider with the service. * * @param prov * */`",806,null],[11,"addref","","",807,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",807,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptSecurityManager` to one of its base interfaces.",807,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",807,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STANDARD","","`text /** * Default CheckLoadURI permissions */`",807,null],[18,"LOAD_IS_AUTOMATIC_DOCUMENT_REPLACEMENT","","",807,null],[18,"ALLOW_CHROME","","",807,null],[18,"DISALLOW_INHERIT_PRINCIPAL","","",807,null],[18,"DISALLOW_SCRIPT_OR_DATA","","",807,null],[18,"DISALLOW_SCRIPT","","",807,null],[18,"DONT_REPORT_ERRORS","","",807,null],[18,"NO_APP_ID","","",807,null],[18,"UNKNOWN_APP_ID","","",807,null],[18,"DEFAULT_USER_CONTEXT_ID","","",807,null],[11,"CheckLoadURIWithPrincipal","","`text /** * Check that content with principal aPrincipal can load \"uri\". * * Will return error code NS_ERROR_DOM_BAD_URI if the load request * should be denied. * * @param aPrincipal the principal identifying the actor causing the load * @param uri the URI that is being loaded * @param flags the permission set, see above */`",807,null],[11,"CheckLoadURIStrWithPrincipal","","`text /** * Similar to checkLoadURIWithPrincipal but there are two differences: * * 1) The URI is a string, not a URI object. * 2) This function assumes that the URI may still be subject to fixup (and * hence will check whether fixed-up versions of the URI are allowed to * load as well); if any of the versions of this URI is not allowed, this * function will return error code NS_ERROR_DOM_BAD_URI. */`",807,null],[11,"InFileURIWhitelist","","`text /** * Returns true if the URI is from a domain that is white-listed through * prefs to be allowed to use file:// URIs. * @param aUri the URI to be tested */`",807,null],[11,"GetSystemPrincipal","","`text /** * Return the all-powerful system principal. */`",807,null],[11,"GetLoadContextCodebasePrincipal","","`text /** * Returns a principal that has the OriginAttributes of the load context. * @param loadContext to get the OriginAttributes from. */`",807,null],[11,"GetDocShellCodebasePrincipal","","`text /** * Returns a principal that has the OriginAttributes of the docshell. * @param docShell to get the OriginAttributes from. */`",807,null],[11,"CreateCodebasePrincipalFromOrigin","","`text /** * Returns a principal whose origin is the one we pass in. * See nsIPrincipal.idl for a description of origin attributes, and * ChromeUtils.webidl for a list of origin attributes and their defaults. */`",807,null],[11,"CheckSameOriginURI","","`text /** * Returns OK if aSourceURI and target have the same \"origin\" * (scheme, host, and port). * ReportError flag suppresses error reports for functions that * don't need reporting. */`",807,null],[11,"GetChannelResultPrincipal","","`text /** * Get the principal for the given channel. This will typically be the * channel owner if there is one, and the codebase principal for the * channel's URI otherwise. aChannel must not be null. */`",807,null],[11,"GetChannelURIPrincipal","","`text /** * Get the codebase principal for the channel's URI. * aChannel must not be null. */`",807,null],[11,"IsSystemPrincipal","","`text /** * Check whether a given principal is a system principal. This allows us * to avoid handing back the system principal to script while allowing * script to check whether a given principal is system. */`",807,null],[11,"ActivateDomainPolicy","","`text /** * Per-domain controls to enable and disable script. This system is designed * to be used by at most one consumer, and enforces this with its semantics. * * Initially, domainPolicyActive is false. When activateDomainPolicy() is * invoked, domainPolicyActive becomes true, and subsequent calls to * activateDomainPolicy() will fail until deactivate() is invoked on the * nsIDomainPolicy returned from activateDomainPolicy(). At this point, * domainPolicyActive becomes false again, and a new consumer may acquire * control of the system by invoking activateDomainPolicy(). */`",807,null],[11,"GetDomainPolicyActive","","`readonly attribute boolean domainPolicyActive;`",807,null],[11,"ActivateDomainPolicyInternal","","`text /** * Only the parent process can directly access domain policies, child * processes only have a read-only mirror to the one in the parent. * For child processes the mirror is updated via messages * and ContentChild will hold the DomainPolicy by calling * ActivateDomainPolicyInternal directly. New consumer to this * function should not be addded. */`",807,null],[11,"PolicyAllowsScript","","`text /** * Query mechanism for the above policy. * * If domainPolicyEnabled is false, this simply returns the current value * of javascript.enabled. Otherwise, it returns the same value, but taking * the various blacklist/whitelist exceptions into account. */`",807,null],[11,"addref","","",808,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",808,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheVisitor` to one of its base interfaces.",808,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",808,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VisitDevice","","`text /** * Called to provide information about a cache device. * * @param deviceID - specifies the device being visited. * @param deviceInfo - specifies information about this device. * * @return true to start visiting all entries for this device. * @return false to advance to the next device. */`",808,null],[11,"VisitEntry","","`text /** * Called to provide information about a cache entry. * * @param deviceID - specifies the device being visited. * @param entryInfo - specifies information about this entry. * * @return true to visit the next entry on the current device, or if the * end of the device has been reached, advance to the next device. * @return false to advance to the next device. */`",808,null],[11,"addref","","",809,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",809,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheDeviceInfo` to one of its base interfaces.",809,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",809,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDescription","","`text /** * Get a human readable description of the cache device. */`",809,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUsageReport","","`text /** * Get a usage report, statistics, miscellaneous data about * the cache device. */`",809,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetEntryCount","","`text /** * Get the number of stored cache entries. */`",809,null],[11,"GetTotalSize","","`text /** * Get the total size of the stored cache entries. */`",809,null],[11,"GetMaximumSize","","`text /** * Get the upper limit of the size of the data the cache can store. */`",809,null],[11,"addref","","",810,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",810,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheEntryInfo` to one of its base interfaces.",810,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",810,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClientID","","`text /** * Get the client id associated with this cache entry. */`",810,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDeviceID","","`text /** * Get the id for the device that stores this cache entry. */`",810,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetKey","","`text /** * Get the key identifying the cache entry. */`",810,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFetchCount","","`text /** * Get the number of times the cache entry has been opened. */`",810,null],[11,"GetLastFetched","","`text /** * Get the last time the cache entry was opened (in seconds since the Epoch). */`",810,null],[11,"GetLastModified","","`text /** * Get the last time the cache entry was modified (in seconds since the Epoch). */`",810,null],[11,"GetExpirationTime","","`text /** * Get the expiration time of the cache entry (in seconds since the Epoch). */`",810,null],[11,"GetDataSize","","`text /** * Get the cache entry data size. */`",810,null],[11,"IsStreamBased","","`text /** * Find out whether or not the cache entry is stream based. */`",810,null],[11,"addref","","",811,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",811,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGlobalHistory2` to one of its base interfaces.",811,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",811,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddURI","","`text /** * Add a URI to global history * * @param aURI the URI of the page * @param aRedirect whether the URI was redirected to another location; * this is 'true' for the original URI which is * redirected. * @param aToplevel whether the URI is loaded in a top-level window * @param aReferrer the URI of the referring page * * @note Docshell will not filter out URI schemes like chrome: data: * about: and view-source:. Embedders should consider filtering out * these schemes and others, e.g. mailbox: for the main URI and the * referrer. */`",811,null],[11,"IsVisited","","`text /** * Checks to see whether the given URI is in history. * * @param aURI the uri to the page * @return true if a URI has been visited */`",811,null],[11,"SetPageTitle","","`text /** * Set the page title for the given uri. URIs that are not already in * global history will not be added. * * @param aURI the URI for which to set to the title * @param aTitle the page title */`",811,null],[11,"addref","","",812,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",812,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormAutoComplete` to one of its base interfaces.",812,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",812,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AutoCompleteSearchAsync","","`text /** * Generate results for a form input autocomplete menu asynchronously. */`",812,null],[11,"StopAutoCompleteSearch","","`text /** * If a search is in progress, stop it. Otherwise, do nothing. This is used * to cancel an existing search, for example, in preparation for a new search. */`",812,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",813,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",813,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormAutoCompleteObserver` to one of its base interfaces.",813,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",813,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSearchCompletion","","`void onSearchCompletion (in nsIAutoCompleteResult result);`",813,null],[11,"addref","","",814,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",814,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULRuntime` to one of its base interfaces.",814,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",814,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PROCESS_TYPE_DEFAULT","","`text /** * The legal values of processType. */`",814,null],[18,"PROCESS_TYPE_PLUGIN","","",814,null],[18,"PROCESS_TYPE_CONTENT","","",814,null],[18,"PROCESS_TYPE_IPDLUNITTEST","","",814,null],[18,"PROCESS_TYPE_GMPLUGIN","","",814,null],[18,"PROCESS_TYPE_GPU","","",814,null],[18,"PROCESS_TYPE_PDFIUM","","",814,null],[18,"E10S_MULTI_EXPERIMENT","","`text /** * The current e10s-multi experiment number. Set dom.ipc.multiOptOut to (at * least) this to disable it until the next experiment. */`",814,null],[11,"GetInSafeMode","","`text /** * Whether the application was launched in safe mode. */`",814,null],[11,"GetLogConsoleErrors","","`text /** * Whether to write console errors to a log file. If a component * encounters startup errors that might prevent the app from showing * proper UI, it should set this flag to \"true\". */`",814,null],[11,"SetLogConsoleErrors","","`text /** * Whether to write console errors to a log file. If a component * encounters startup errors that might prevent the app from showing * proper UI, it should set this flag to \"true\". */`",814,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOS","","`text /** * A string tag identifying the current operating system. This is taken * from the OS_TARGET configure variable. It will always be available. */`",814,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetXPCOMABI","","`text /** * A string tag identifying the binary ABI of the current processor and * compiler vtable. This is taken from the TARGET_XPCOM_ABI configure * variable. It may not be available on all platforms, especially * unusual processor or compiler combinations. * * The result takes the form <processor>-<compilerABI>, for example: * x86-msvc * ppc-gcc3 * * This value should almost always be used in combination with \"OS\". * * @throw NS_ERROR_NOT_AVAILABLE if not available. */`",814,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetWidgetToolkit","","`text /** * A string tag identifying the target widget toolkit in use. * This is taken from the MOZ_WIDGET_TOOLKIT configure variable. */`",814,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProcessType","","`text /** * The type of the caller's process. Returns one of the values above. */`",814,null],[11,"GetProcessID","","`text /** * The system process ID of the caller's process. */`",814,null],[11,"GetUniqueProcessID","","`text /** * A globally unique and non-recycled ID of the caller's process. */`",814,null],[11,"GetRemoteType","","`text /** * The type of remote content process we're running in. * null if we're in the parent/chrome process. */`",814,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBrowserTabsRemoteAutostart","","`text /** * If true, browser tabs may be opened by default in a different process * from the main browser UI. */`",814,null],[11,"GetMaxWebProcessCount","","`text /** * Returns the number of content processes to use for normal web pages. If * this value is > 1, then e10s-multi should be considered to be \"on\". * * NB: If browserTabsRemoteAutostart is false, then this value has no * meaning and e10s should be considered to be \"off\"! */`",814,null],[11,"GetAccessibilityEnabled","","`text /** * If true, the accessibility service is running. */`",814,null],[11,"GetAccessibleHandlerUsed","","`text /** * If true, the AccessibleHandler dll is used. */`",814,null],[11,"GetAccessibilityInstantiator","","`text /** * Executable of Windows service that activated accessibility. */`",814,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetShouldBlockIncompatJaws","","`text /** * Temporary, do not use. Indicates if an incompat version of JAWS * screen reader software is loaded in our process space. */`",814,null],[11,"GetIs64Bit","","`text /** * Indicates whether the current Firefox build is 64-bit. */`",814,null],[11,"InvalidateCachesOnRestart","","`text /** * Signal the apprunner to invalidate caches on the next restart. * This will cause components to be autoregistered and all * fastload data to be re-created. */`",814,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnsureContentProcess","","`text /** * Starts a child process. This method is intented to pre-start a * content child process so that when it is actually needed, it is * ready to go. * * @throw NS_ERROR_NOT_AVAILABLE if not available. */`",814,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetReplacedLockTime","","`text /** * Modification time of the profile lock before the profile was locked on * this startup. Used to know the last time the profile was used and not * closed cleanly. This is set to 0 if there was no existing profile lock. */`",814,null],[11,"GetIsReleaseOrBeta","","`text /** * True if this is RELEASE_OR_BETA. */`",814,null],[11,"GetIsOfficialBranding","","`text /** * True if this build uses official branding (MOZ_OFFICIAL_BRANDING). */`",814,null],[11,"GetDefaultUpdateChannel","","`text /** * The default update channel (MOZ_UPDATE_CHANNEL). */`",814,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDistributionID","","`text /** * The distribution ID for this build (MOZ_DISTRIBUTION_ID). */`",814,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetWindowsDLLBlocklistStatus","","`text /** * True if Windows DLL blocklist initialized correctly. This is * primarily for automated testing purposes. */`",814,null],[11,"addref","","",815,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",815,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransfer` to one of its base interfaces.",815,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",815,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebprogresslistener2"}}],[11,"Init","","`text /** * Initializes the transfer with certain properties. This function must * be called prior to accessing any properties on this interface. * * @param aSource The source URI of the transfer. Must not be null. * * @param aTarget The target URI of the transfer. Must not be null. * * @param aDisplayName The user-readable description of the transfer. * Can be empty. * * @param aMIMEInfo The MIME info associated with the target, * including MIME type and helper app when appropriate. * This parameter is optional. * * @param startTime Time when the download started (ie, when the first * response from the server was received) * XXX presumably wbp and exthandler do this differently * * @param aTempFile The location of a temporary file; i.e. a file in which * the received data will be stored, but which is not * equal to the target file. (will be moved to the real * target by the caller, when the download is finished) * May be null. * * @param aCancelable An object that can be used to abort the download. * Must not be null. * Implementations are expected to hold a strong * reference to this object until the download is * finished, at which point they should release the * reference. * * @param aIsPrivate Used to determine the privacy status of the new transfer. * If true, indicates that the transfer was initiated from * a source that desires privacy. */`",815,null],[11,"SetSha256Hash","","`void setSha256Hash (in ACString aHash);`",815,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetSignatureInfo","","`void setSignatureInfo (in nsIArray aSignatureInfo);`",815,null],[11,"SetRedirects","","`void setRedirects (in nsIArray aRedirects);`",815,null],[11,"addref","","",816,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",816,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamConverterService` to one of its base interfaces.",816,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",816,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CanConvert","","`text /** * Tests whether conversion between the two specified types is possible. * This is cheaper than calling convert()/asyncConvertData(); it is not * necessary to call this function before calling one of those, though. */`",816,null],[11,"Convert","","`text /** * <b>SYNCHRONOUS VERSION</b> * Converts a stream of one type, to a stream of another type. * * Use this method when you have a stream you want to convert. * * @param aFromStream The stream representing the original/raw data. * @param aFromType The MIME type of aFromStream. * @param aToType The MIME type of the returned stream. * @param aContext Either an opaque context, or a converter specific * context (implementation specific). * @return The converted stream. NOTE: The returned stream * may not already be converted. An efficient stream * converter implementation will convert data on * demand rather than buffering the converted data * until it is used. */`",816,null],[11,"AsyncConvertData","","`text /** * <b>ASYNCHRONOUS VERSION</b> * Retrieves a nsIStreamListener that receives the original/raw data via its * nsIStreamListener::OnDataAvailable() callback, then converts and pushes * the data to aListener. * * Use this method when you want to proxy (and convert) nsIStreamListener * callbacks asynchronously. * * @param aFromType The MIME type of the original/raw data. * @param aToType The MIME type of the converted data. * @param aListener The listener that receives the converted data. * @param aCtxt Either an opaque context, or a converter specific * context (implementation specific). * @return A nsIStreamListener that receives data via its * OnDataAvailable() method. */`",816,null],[11,"addref","","",817,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",817,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIX509Cert` to one of its base interfaces.",817,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",817,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNKNOWN_CERT","","`text /** * Constants to classify the type of a certificate. */`",817,null],[18,"CA_CERT","","",817,null],[18,"USER_CERT","","",817,null],[18,"EMAIL_CERT","","",817,null],[18,"SERVER_CERT","","",817,null],[18,"ANY_CERT","","",817,null],[18,"CMS_CHAIN_MODE_CertOnly","","`text /** * Constants for specifying the chain mode when exporting a certificate */`",817,null],[18,"CMS_CHAIN_MODE_CertChain","","",817,null],[18,"CMS_CHAIN_MODE_CertChainWithRoot","","",817,null],[11,"GetEmailAddress","","`text /** * The primary email address of the certificate, if present. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIsBuiltInRoot","","`text /** * Did this certificate ship with the platform as a built-in root? */`",817,null],[11,"GetEmailAddresses","","`text /** * Obtain a list of all email addresses * contained in the certificate. * * @param length The number of strings in the returned array. * @return An array of email addresses. */`",817,null],[11,"ContainsEmailAddress","","`text /** * Check whether a given address is contained in the certificate. * The comparison will convert the email address to lowercase. * The behaviour for non ASCII characters is undefined. * * @param aEmailAddress The address to search for. * * @return True if the address is contained in the certificate. */`",817,null],[11,"GetSubjectName","","`text /** * The subject owning the certificate. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCommonName","","`text /** * The subject's common name. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOrganization","","`text /** * The subject's organization. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOrganizationalUnit","","`text /** * The subject's organizational unit. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSha256Fingerprint","","`text /** * The fingerprint of the certificate's DER encoding, * calculated using the SHA-256 algorithm. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSha1Fingerprint","","`text /** * The fingerprint of the certificate's DER encoding, * calculated using the SHA1 algorithm. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTokenName","","`text /** * A human readable name identifying the hardware or * software token the certificate is stored on. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIssuerName","","`text /** * The subject identifying the issuer certificate. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSerialNumber","","`text /** * The serial number the issuer assigned to this certificate. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIssuerCommonName","","`text /** * The issuer subject's common name. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIssuerOrganization","","`text /** * The issuer subject's organization. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIssuerOrganizationUnit","","`text /** * The issuer subject's organizational unit. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIssuer","","`text /** * The certificate used by the issuer to sign this certificate. */`",817,null],[11,"GetValidity","","`text /** * This certificate's validity period. */`",817,null],[11,"GetDbKey","","`text /** * A unique identifier of this certificate within the local storage. */`",817,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayName","","`text /** * A human readable identifier to label this certificate. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCertType","","`text /** * Type of this certificate */`",817,null],[11,"GetIsSelfSigned","","`text /** * True if the certificate is self-signed. CA issued * certificates are always self-signed. */`",817,null],[11,"GetChain","","`text /** * Obtain a list of certificates that contains this certificate * and the issuing certificates of all involved issuers, * up to the root issuer. * * @return The chain of certifficates including the issuers. */`",817,null],[11,"GetKeyUsages","","`text /** * A comma separated list of localized strings representing the contents of * the certificate's key usage extension, if present. The empty string if the * certificate doesn't have the key usage extension, or has an empty extension. */`",817,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetASN1Structure","","`text /** * This is the attribute which describes the ASN1 layout * of the certificate. This can be used when doing a * \"pretty print\" of the certificate's ASN1 structure. */`",817,null],[11,"GetRawDER","","`text /** * Obtain a raw binary encoding of this certificate * in DER format. * * @param length The number of bytes in the binary encoding. * @param data The bytes representing the DER encoded certificate. */`",817,null],[11,"Equals","","`text /** * Test whether two certificate instances represent the * same certificate. * * @return Whether the certificates are equal */`",817,null],[11,"GetSha256SubjectPublicKeyInfoDigest","","`text /** * The base64 encoding of the DER encoded public key info using the specified * digest. */`",817,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ExportAsCMS","","`text /** * Obtain the certificate wrapped in a PKCS#7 SignedData structure, * with or without the certificate chain * * @param chainMode Whether to include the chain (with or without the root), see CMS_CHAIN_MODE constants. * @param length The number of bytes of the PKCS#7 data. * @param data The bytes representing the PKCS#7 wrapped certificate. */`",817,null],[11,"MarkForPermDeletion","","`text /** * Either delete the certificate from all cert databases, * or mark it as untrusted. */`",817,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",818,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",818,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULMenuListElement` to one of its base interfaces.",818,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",818,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulselectcontrolelement"}}],[11,"GetEditable","","`attribute boolean editable;`",818,null],[11,"SetEditable","","`attribute boolean editable;`",818,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOpen","","`attribute boolean open;`",818,null],[11,"SetOpen","","`attribute boolean open;`",818,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLabel","","`readonly attribute DOMString label;`",818,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCrop","","`attribute DOMString crop;`",818,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCrop","","`attribute DOMString crop;`",818,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImage","","`attribute DOMString image;`",818,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetImage","","`attribute DOMString image;`",818,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetInputField","","`readonly attribute nsIDOMNode inputField;`",818,null],[11,"addref","","",819,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",819,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStringBundle` to one of its base interfaces.",819,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",819,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStringFromID","","`AString GetStringFromID (in long aID);`",819,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStringFromAUTF8Name","","`[binaryname(GetStringFromAUTF8Name)] AString GetStringFromName (in AUTF8String aName);`",819,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStringFromName","","`[binaryname(GetStringFromName),noscript] AString GetStringFromNameCpp (in string aName);`",819,null],[11,"FormatStringFromID","","`AString formatStringFromID (in long aID, [array, size_is (length)] in wstring params, in unsigned long length);`",819,null],[11,"FormatStringFromAUTF8Name","","`[binaryname(FormatStringFromAUTF8Name)] AString formatStringFromName (in AUTF8String aName, [array, size_is (length)] in wstring params, in unsigned long length);`",819,null],[11,"FormatStringFromName","","`[binaryname(FormatStringFromName),noscript] AString formatStringFromNameCpp (in string aName, [array, size_is (length)] in wstring params, in unsigned long length);`",819,null],[11,"GetSimpleEnumeration","","`nsISimpleEnumerator getSimpleEnumeration ();`",819,null],[11,"AsyncPreload","","`void asyncPreload ();`",819,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",820,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",820,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStringBundleService` to one of its base interfaces.",820,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",820,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateBundle","","`nsIStringBundle createBundle (in string aURLSpec);`",820,null],[11,"CreateExtensibleBundle","","`nsIStringBundle createExtensibleBundle (in string aRegistryKey);`",820,null],[11,"FormatStatusMessage","","`text /** * Formats a message string from a status code and status arguments. * @param aStatus - The status code. This is mapped into a string ID and * and used in the string lookup process (see nsIErrorService). * @param aStatusArg - The status message argument(s). Multiple arguments * can be separated by newline ('\\n') characters. * @return the formatted message */`",820,null],[11,"FlushBundles","","`text /** * flushes the string bundle cache - useful when the locale changes or * when we need to get some extra memory back * * at some point, we might want to make this flush all the bundles, * because any bundles that are floating around when the locale changes * will suddenly contain bad data * */`",820,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",821,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",821,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStackFrame` to one of its base interfaces.",821,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",821,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSourceLine","","`readonly attribute AUTF8String sourceLine;`",821,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",822,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",822,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIException` to one of its base interfaces.",822,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",822,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMessageMoz","","`[binaryname(MessageMoz)] readonly attribute AUTF8String message;`",822,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetResult","","`readonly attribute nsresult result;`",822,null],[11,"GetName","","`readonly attribute AUTF8String name;`",822,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetColumnNumber","","`readonly attribute uint32_t columnNumber;`",822,null],[11,"GetLocation","","`readonly attribute nsIStackFrame location;`",822,null],[11,"GetData","","`readonly attribute nsISupports data;`",822,null],[11,"addref","","",823,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",823,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFlavorDataProvider` to one of its base interfaces.",823,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",823,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFlavorData","","`text /** * Retrieve the data from this data provider. * * @param aTransferable (in parameter) the transferable we're being called for. * @param aFlavor (in parameter) the flavor of data to retrieve * @param aData the data. Some variant of class in nsISupportsPrimitives.idl * @param aDataLen the length of the data */`",823,null],[11,"addref","","",824,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",824,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITransferable` to one of its base interfaces.",824,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",824,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kFlavorHasDataProvider","","",824,null],[11,"Init","","`text /** * Initializes a transferable object. This should be called on all * transferable objects. Failure to do so will result in fatal assertions in * debug builds. * * The load context is used to track whether the transferable is storing privacy- * sensitive information. For example, we try to delete data that you copy * to the clipboard when you close a Private Browsing window. * * To get the appropriate load context in Javascript callers, one needs to get * to the document that the transferable corresponds to, and then get the load * context from the document like this: * * var loadContext = doc.defaultView.QueryInterface(Ci.nsIInterfaceRequestor) * .getInterface(Ci.nsIWebNavigation) * .QueryInterface(Ci.nsILoadContext); * * In C++ callers, if you have the corresponding document, you can just call * nsIDocument::GetLoadContext to get to the load context object. * * @param aContext the load context associated with the transferable object. * This can be set to null if a load context is not available. */`",824,null],[11,"FlavorsTransferableCanExport","","`text /** * Computes a list of flavors (mime types as nsISupportsCString) that the transferable * can export, either through intrinsic knowledge or output data converters. * * @param aDataFlavorList fills list with supported flavors. This is a copy of * the internal list, so it may be edited w/out affecting the transferable. */`",824,null],[11,"GetTransferData","","`text /** * Given a flavor retrieve the data. * * @param aFlavor (in parameter) the flavor of data to retrieve * @param aData the data. Some variant of class in nsISupportsPrimitives.idl * @param aDataLen the length of the data */`",824,null],[11,"GetAnyTransferData","","`text /** * Returns the best flavor in the transferable, given those that have * been added to it with |AddFlavor()| * * @param aFlavor (out parameter) the flavor of data that was retrieved * @param aData the data. Some variant of class in nsISupportsPrimitives.idl * @param aDataLen the length of the data */`",824,null],[11,"IsLargeDataSet","","`text /** * Returns true if the data is large. */`",824,null],[11,"FlavorsTransferableCanImport","","`text /** * Computes a list of flavors (mime types as nsISupportsCString) that the transferable can * accept into it, either through intrinsic knowledge or input data converters. * * @param outFlavorList fills list with supported flavors. This is a copy of * the internal list, so it may be edited w/out affecting the transferable. */`",824,null],[11,"SetTransferData","","`text /** * Sets the data in the transferable with the specified flavor. The transferable * will maintain its own copy the data, so it is not necessary to do that beforehand. * * @param aFlavor the flavor of data that is being set * @param aData the data, either some variant of class in nsISupportsPrimitives.idl, * an nsIFile, or an nsIFlavorDataProvider (see above) * @param aDataLen the length of the data, or 0 if passing a nsIFlavorDataProvider */`",824,null],[11,"AddDataFlavor","","`text /** * Add the data flavor, indicating that this transferable * can receive this type of flavor * * @param aDataFlavor a new data flavor to handle */`",824,null],[11,"RemoveDataFlavor","","`text /** * Removes the data flavor matching the given one (string compare) and the data * that goes along with it. * * @param aDataFlavor a data flavor to remove */`",824,null],[11,"GetConverter","","`attribute nsIFormatConverter converter;`",824,null],[11,"SetConverter","","`attribute nsIFormatConverter converter;`",824,null],[11,"GetIsPrivateData","","`text /** * Use of the SetIsPrivateData() method generated by isPrivateData attribute should * be avoided as much as possible because the value set may not reflect the status * of the context in which the transferable was created. */`",824,null],[11,"SetIsPrivateData","","`text /** * Use of the SetIsPrivateData() method generated by isPrivateData attribute should * be avoided as much as possible because the value set may not reflect the status * of the context in which the transferable was created. */`",824,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetRequestingPrincipal","","`text /** * The principal of the source dom node this transferable was * created from and the contentPolicyType for the transferable. * Note, currently only used on Windows for network principal and * contentPolicyType information in clipboard and drag operations. */`",824,null],[11,"SetRequestingPrincipal","","`text /** * The principal of the source dom node this transferable was * created from and the contentPolicyType for the transferable. * Note, currently only used on Windows for network principal and * contentPolicyType information in clipboard and drag operations. */`",824,null],[11,"GetContentPolicyType","","`[noscript] attribute nsContentPolicyType contentPolicyType;`",824,null],[11,"SetContentPolicyType","","`[noscript] attribute nsContentPolicyType contentPolicyType;`",824,{"inputs":[{"name":"self"},{"name":"nscontentpolicytype"}],"output":{"name":"nsresult"}}],[11,"addref","","",825,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",825,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavBookmarkObserver` to one of its base interfaces.",825,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",825,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSkipTags","","`readonly attribute boolean skipTags;`",825,null],[11,"GetSkipDescendantsOnItemRemoval","","`readonly attribute boolean skipDescendantsOnItemRemoval;`",825,null],[11,"OnBeginUpdateBatch","","`text /** * Notifies that a batch transaction has started. * Other notifications will be sent during the batch, but the observer is * guaranteed that onEndUpdateBatch() will be called at its completion. * During a batch the observer should do its best to reduce the work done to * handle notifications, since multiple changes are going to happen in a short * timeframe. */`",825,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnEndUpdateBatch","","`text /** * Notifies that a batch transaction has ended. */`",825,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnItemAdded","","`text /** * Notifies that an item (any type) was added. Called after the actual * addition took place. * When a new item is created, all the items following it in the same folder * will have their index shifted down, but no additional notifications will * be sent. * * @param aItemId * The id of the item that was added. * @param aParentId * The id of the folder to which the item was added. * @param aIndex * The item's index in the folder. * @param aItemType * The type of the added item (see TYPE_* constants below). * @param aURI * The URI of the added item if it was TYPE_BOOKMARK, null otherwise. * @param aTitle * The title of the added item. * @param aDateAdded * The stored date added value, in microseconds from the epoch. * @param aGuid * The unique ID associated with the item. * @param aParentGuid * The unique ID associated with the item's parent. * @param aSource * A change source constant from nsINavBookmarksService::SOURCE_*, * passed to the method that notifies the observer. */`",825,null],[11,"OnItemRemoved","","`text /** * Notifies that an item was removed. Called after the actual remove took * place. * When an item is removed, all the items following it in the same folder * will have their index shifted down, but no additional notifications will * be sent. * * @param aItemId * The id of the item that was removed. * @param aParentId * The id of the folder from which the item was removed. * @param aIndex * The bookmark's index in the folder. * @param aItemType * The type of the item to be removed (see TYPE_* constants below). * @param aURI * The URI of the added item if it was TYPE_BOOKMARK, null otherwise. * @param aGuid * The unique ID associated with the item. * @param aParentGuid * The unique ID associated with the item's parent. * @param aSource * A change source constant from nsINavBookmarksService::SOURCE_*, * passed to the method that notifies the observer. */`",825,null],[11,"OnItemChanged","","`text /** * Notifies that an item's information has changed. This will be called * whenever any attributes like \"title\" are changed. * * @param aItemId * The id of the item that was changed. * @param aProperty * The property which changed. Can be null for the removal of all of * the annotations, in this case aIsAnnotationProperty is true. * @param aIsAnnotationProperty * Whether or not aProperty is the name of an annotation. If true * aNewValue is always an empty string. * @param aNewValue * For certain properties, this is set to the new value of the * property (see the list below). * @param aLastModified * The updated last-modified value. * @param aItemType * The type of the item to be removed (see TYPE_* constants below). * @param aParentId * The id of the folder containing the item. * @param aGuid * The unique ID associated with the item. * @param aParentGuid * The unique ID associated with the item's parent. * @param aOldValue * For certain properties, this is set to the new value of the * property (see the list below). * @param aSource * A change source constant from nsINavBookmarksService::SOURCE_*, * passed to the method that notifies the observer. * * @note List of values that may be associated with properties: * aProperty | aNewValue * ===================================================================== * guid | The new bookmark guid. * cleartime | Empty string (all visits to this item were removed). * title | The new title. * favicon | The \"moz-anno\" URL of the new favicon. * uri | new URL. * tags | Empty string (tags for this item changed) * dateAdded | PRTime (as string) when the item was first added. * lastModified | PRTime (as string) when the item was last modified. * * aProperty | aOldValue * ===================================================================== * guid | The old bookmark guid. * cleartime | Empty string (currently unused). * title | Empty string (currently unused). * favicon | Empty string (currently unused). * uri | old URL. * tags | Empty string (currently unused). * dateAdded | Empty string (currently unused). * lastModified | Empty string (currently unused). */`",825,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"bool"},{"name":"nsacstring"},{"name":"prtime"},{"name":"uint16_t"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"OnItemVisited","","`text /** * Notifies that the item was visited. Can be invoked only for TYPE_BOOKMARK * items. * * @param aItemId * The id of the bookmark that was visited. * @param aVisitId * The id of the visit. * @param aTime * The time of the visit. * @param aTransitionType * The transition for the visit. See nsINavHistoryService::TRANSITION_* * constants for a list of possible values. * @param aURI * The nsIURI for this bookmark. * @param aParentId * The id of the folder containing the item. * @param aGuid * The unique ID associated with the item. * @param aParentGuid * The unique ID associated with the item's parent. * * @see onItemChanged with property = \"cleartime\" for when all visits to an * item are removed. * * @note The reported time is the time of the visit that was added, which may * be well in the past since the visit time can be specified. This * means that the visit the observer is told about may not be the most * recent visit for that page. */`",825,null],[11,"OnItemMoved","","`text /** * Notifies that an item has been moved. * * @param aItemId * The id of the item that was moved. * @param aOldParentId * The id of the old parent. * @param aOldIndex * The old index inside the old parent. * @param aNewParentId * The id of the new parent. * @param aNewIndex * The index inside the new parent. * @param aItemType * The type of the item to be removed (see TYPE_* constants below). * @param aGuid * The unique ID associated with the item. * @param aOldParentGuid * The unique ID associated with the old item's parent. * @param aNewParentGuid * The unique ID associated with the new item's parent. * @param aSource * A change source constant from nsINavBookmarksService::SOURCE_*, * passed to the method that notifies the observer. */`",825,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"int64_t"},{"name":"int32_t"},{"name":"int64_t"},{"name":"int32_t"},{"name":"uint16_t"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",826,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",826,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINavBookmarksService` to one of its base interfaces.",826,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",826,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DEFAULT_INDEX","","`text /** * This value should be used for APIs that allow passing in an index * where an index is not known, or not required to be specified. * e.g.: When appending an item to a folder. */`",826,null],[18,"TYPE_BOOKMARK","","",826,null],[18,"TYPE_FOLDER","","",826,null],[18,"TYPE_SEPARATOR","","",826,null],[18,"TYPE_DYNAMIC_CONTAINER","","",826,null],[18,"SOURCE_DEFAULT","","",826,null],[18,"SOURCE_SYNC","","",826,null],[18,"SOURCE_IMPORT","","",826,null],[18,"SOURCE_IMPORT_REPLACE","","",826,null],[18,"SOURCE_SYNC_REPARENT_REMOVED_FOLDER_CHILDREN","","",826,null],[18,"SYNC_STATUS_UNKNOWN","","`text /** * Sync status flags. */`",826,null],[18,"SYNC_STATUS_NEW","","",826,null],[18,"SYNC_STATUS_NORMAL","","",826,null],[11,"GetPlacesRoot","","`text /** * The item ID of the Places root. */`",826,null],[11,"GetBookmarksMenuFolder","","`text /** * The item ID of the bookmarks menu folder. */`",826,null],[11,"GetTagsFolder","","`text /** * The item ID of the top-level folder that contain the tag \"folders\". */`",826,null],[11,"GetUnfiledBookmarksFolder","","`text /** * The item ID of the unfiled-bookmarks folder. */`",826,null],[11,"GetToolbarFolder","","`text /** * The item ID of the personal toolbar folder. */`",826,null],[11,"GetMobileFolder","","`text /** * The item ID of the mobile bookmarks folder. */`",826,null],[11,"InsertBookmark","","`text /** * Inserts a child bookmark into the given folder. * * @param aParentId * The id of the parent folder * @param aURI * The URI to insert * @param aIndex * The index to insert at, or DEFAULT_INDEX to append * @param aTitle * The title for the new bookmark * @param [optional] aGuid * The GUID to be set for the new item. If not set, a new GUID is * generated. Unless you've a very sound reason, such as an undo * manager implementation, do not pass this argument. * @param [optional] aSource * The change source. This is forwarded to all bookmark observers, * allowing them to distinguish between insertions from different * callers. Defaults to SOURCE_DEFAULT if omitted. * @return The ID of the newly-created bookmark. * * @note aTitle will be truncated to TITLE_LENGTH_MAX and * aURI will be truncated to URI_LENGTH_MAX. * @throws if aGuid is malformed. */`",826,null],[11,"RemoveItem","","`text /** * Removes a child item. Used to delete a bookmark or separator. * @param aItemId * The child item to remove * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"CreateFolder","","`text /** * Creates a new child folder and inserts it under the given parent. * @param aParentFolder * The id of the parent folder * @param aName * The name of the new folder * @param aIndex * The index to insert at, or DEFAULT_INDEX to append * @param [optional] aGuid * The GUID to be set for the new item. If not set, a new GUID is * generated. Unless you've a very sound reason, such as an undo * manager implementation, do not pass this argument. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * @return The ID of the newly-inserted folder. * @throws if aGuid is malformed. */`",826,null],[11,"GetRemoveFolderTransaction","","`text /** * Gets an undo-able transaction for removing a folder from the bookmarks * tree. * @param aItemId * The id of the folder to remove. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * @return An object implementing nsITransaction that can be used to undo * or redo the action. * * This method exists because complex delete->undo operations rely on * recreated folders to have the same ID they had before they were deleted, * so that any other items deleted in different transactions can be * re-inserted correctly. This provides a safe encapsulation of this * functionality without exposing the ability to recreate folders with * specific IDs (potentially dangerous if abused by other code!) in the * public API. */`",826,null],[11,"RemoveFolderChildren","","`text /** * Convenience function for container services. Removes * all children of the given folder. * @param aItemId * The id of the folder to remove children from. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"MoveItem","","`text /** * Moves an item to a different container, preserving its contents. * @param aItemId * The id of the item to move * @param aNewParentId * The id of the new parent * @param aIndex * The index under aNewParent, or DEFAULT_INDEX to append * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * * NOTE: When moving down in the same container we take into account the * removal of the original item. If you want to move from index X to * index Y > X you must use moveItem(id, folder, Y + 1) */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"int64_t"},{"name":"int32_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"InsertSeparator","","`text /** * Inserts a bookmark separator into the given folder at the given index. * The separator can be removed using removeChildAt(). * @param aParentId * The id of the parent folder * @param aIndex * The separator's index under folder, or DEFAULT_INDEX to append * @param [optional] aGuid * The GUID to be set for the new item. If not set, a new GUID is * generated. Unless you've a very sound reason, such as an undo * manager implementation, do not pass this argument. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * @return The ID of the new separator. * @throws if aGuid is malformed. */`",826,null],[11,"GetIdForItemAt","","`text /** * Get the itemId given the containing folder and the index. * @param aParentId * The id of the diret parent folder of the item * @param aIndex * The index of the item within the parent folder. * Pass DEFAULT_INDEX for the last item. * @return The ID of the found item, -1 if the item does not exists. */`",826,null],[11,"SetItemTitle","","`text /** * Set the title for an item. * @param aItemId * The id of the item whose title should be updated. * @param aTitle * The new title for the bookmark. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * * @note aTitle will be truncated to TITLE_LENGTH_MAX. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetItemTitle","","`text /** * Get the title for an item. * * If no item title is available it will return a void string (null in JS). * * @param aItemId * The id of the item whose title should be retrieved * @return The title of the item. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetItemDateAdded","","`text /** * Set the date added time for an item. * * @param aItemId * the id of the item whose date added time should be updated. * @param aDateAdded * the new date added value in microseconds. Note that it is rounded * down to milliseconds precision. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"prtime"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetItemDateAdded","","`text /** * Get the date added time for an item. * * @param aItemId * the id of the item whose date added time should be retrieved. * * @return the date added value in microseconds. */`",826,null],[11,"SetItemLastModified","","`text /** * Set the last modified time for an item. * * @param aItemId * the id of the item whose last modified time should be updated. * @param aLastModified * the new last modified value in microseconds. Note that it is * rounded down to milliseconds precision. * @param [optional] aSource * The change source, forwarded to all bookmark observers. Defaults * to SOURCE_DEFAULT. * * @note This is the only method that will send an itemChanged notification * for the property. lastModified will still be updated in * any other method that changes an item property, but we will send * the corresponding itemChanged notification instead. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"prtime"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetItemLastModified","","`text /** * Get the last modified time for an item. * * @param aItemId * the id of the item whose last modified time should be retrieved. * * @return the date added value in microseconds. * * @note When an item is added lastModified is set to the same value as * dateAdded. */`",826,null],[11,"GetBookmarkURI","","`text /** * Get the URI for a bookmark item. */`",826,null],[11,"GetItemIndex","","`text /** * Get the index for an item. */`",826,null],[11,"SetItemIndex","","`text /** * Changes the index for a item. This method does not change the indices of * any other items in the same folder, so ensure that the new index does not * already exist, or change the index of other items accordingly, otherwise * the indices will become corrupted. * * WARNING: This is API is intended for scenarios such as folder sorting, * where the caller manages the indices of *all* items in the folder. * You must always ensure each index is unique after a reordering. * * @param aItemId The id of the item to modify * @param aNewIndex The new index * @param aSource The optional change source, forwarded to all bookmark * observers. Defaults to SOURCE_DEFAULT. * * @throws If aNewIndex is out of bounds. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"int32_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetItemType","","`text /** * Get an item's type (bookmark, separator, folder). * The type is one of the TYPE_* constants defined above. */`",826,null],[11,"ChangeBookmarkURI","","`text /** * Change the bookmarked URI for a bookmark. * This changes which \"place\" the bookmark points at, * which means all annotations, etc are carried along. */`",826,null],[11,"GetFolderIdForItem","","`text /** * Get the parent folder's id for an item. */`",826,null],[11,"GetBookmarkIdsForURI","","`text /** * Returns the list of bookmark ids that contain the given URI. */`",826,null],[11,"SetKeywordForBookmark","","`text /** * Associates the given keyword with the given bookmark. * * Use an empty keyword to clear the keyword associated with the URI. * In both of these cases, succeeds but does nothing if the URL/keyword is not found. * * @deprecated Use PlacesUtils.keywords.insert() API instead. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsastring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetKeywordForBookmark","","`text /** * Retrieves the keyword for the given bookmark. Will be void string * (null in JS) if no such keyword is found. * * @deprecated Use PlacesUtils.keywords.fetch() API instead. */`",826,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddObserver","","`text /** * Adds a bookmark observer. If ownsWeak is false, the bookmark service will * keep an owning reference to the observer. If ownsWeak is true, then * aObserver must implement nsISupportsWeakReference, and the bookmark * service will keep a weak reference to the observer. */`",826,null],[11,"RemoveObserver","","`text /** * Removes a bookmark observer. */`",826,null],[11,"GetObservers","","`text /** * Gets an array of registered nsINavBookmarkObserver objects. */`",826,null],[11,"RunInBatchMode","","`text /** * Runs the passed callback inside of a database transaction. * Use this when a lot of things are about to change, for example * adding or deleting a large number of bookmark items. Calls can * be nested. Observers are notified when batches begin and end, via * nsINavBookmarkObserver.onBeginUpdateBatch/onEndUpdateBatch. * * @param aCallback * nsINavHistoryBatchCallback interface to call. * @param aUserData * Opaque parameter passed to nsINavBookmarksBatchCallback */`",826,null],[11,"addref","","",827,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",827,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookieTransactionCallback` to one of its base interfaces.",827,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",827,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback ();`",827,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",828,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",828,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookieService` to one of its base interfaces.",828,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",828,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"BEHAVIOR_ACCEPT","","",828,null],[18,"BEHAVIOR_REJECT_FOREIGN","","",828,null],[18,"BEHAVIOR_REJECT","","",828,null],[18,"BEHAVIOR_LIMIT_FOREIGN","","",828,null],[18,"ACCEPT_NORMALLY","","",828,null],[18,"ACCEPT_SESSION","","",828,null],[18,"ACCEPT_FOR_N_DAYS","","",828,null],[11,"GetCookieString","","`string getCookieString (in nsIURI aURI, in nsIChannel aChannel);`",828,null],[11,"GetCookieStringFromHttp","","`string getCookieStringFromHttp (in nsIURI aURI, in nsIURI aFirstURI, in nsIChannel aChannel);`",828,null],[11,"SetCookieString","","`void setCookieString (in nsIURI aURI, in nsIPrompt aPrompt, in string aCookie, in nsIChannel aChannel);`",828,null],[11,"SetCookieStringFromHttp","","`void setCookieStringFromHttp (in nsIURI aURI, in nsIURI aFirstURI, in nsIPrompt aPrompt, in string aCookie, in string aServerTime, in nsIChannel aChannel);`",828,null],[11,"RunInTransaction","","`void runInTransaction (in nsICookieTransactionCallback aCallback);`",828,null],[11,"addref","","",829,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",829,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIColorPickerShownCallback` to one of its base interfaces.",829,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",829,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Update","","`text /** * Callback called when the color picker requests a color update. * This callback can not be called after done() was called. * When this callback is used, the consumer can assume that the color value has * changed. * * @param color The new selected color value following the format specifed on * top of this file. */`",829,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Done","","`text /** * Callback called when the color picker is dismissed. * When this callback is used, the color might have changed or could stay the * same. * If the color has not changed, the color parameter will be the empty string. * * @param color The new selected color value following the format specifed on * top of this file or the empty string. */`",829,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",830,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",830,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIColorPicker` to one of its base interfaces.",830,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",830,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize the color picker widget. The color picker will not be shown until * open() is called. * If the backend doesn't support setting a title to the native color picker * widget, the title parameter might be ignored. * If the initialColor parameter does not follow the format specified on top of * this file, the behavior will be unspecified. The initialColor could be the * one used by the underlying backend or an arbitrary one. The backend could * also assert. * * @param parent nsIDOMWindow parent. This dialog will be dependent * on this parent. parent must be non-null. * @param title The title for the color picker widget. * @param initialColor The color to show when the widget is opened. The * parameter has to follow the format specified on top * of this file. */`",830,null],[11,"Open","","`text /** * Opens the color dialog asynchrounously. * The results are provided via the callback object. */`",830,null],[11,"addref","","",831,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",831,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheListener` to one of its base interfaces.",831,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",831,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnCacheEntryAvailable","","`text /** * Called when the requested access (or appropriate subset) is * acquired. The status parameter equals NS_OK on success. * See nsICacheService.idl for accessGranted values. */`",831,null],[11,"OnCacheEntryDoomed","","`text /** * Called when nsCacheSession::DoomEntry() is completed. The status * parameter is NS_OK when the entry was doomed, or NS_ERROR_NOT_AVAILABLE * when there is no such entry. */`",831,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",832,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",832,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentSniffer` to one of its base interfaces.",832,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",832,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMIMETypeFromContent","","`text /** * Given a chunk of data, determines a MIME type. Information from the given * request may be used in order to make a better decision. * * @param aRequest The request where this data came from. May be null. * @param aData Data to check * @param aLength Length of the data * * @return The content type * * @throw NS_ERROR_NOT_AVAILABLE if no MIME type could be determined. * * @note Implementations should consider the request read-only. Especially, * they should not attempt to set the content type property that subclasses of * nsIRequest might offer. */`",832,null],[11,"addref","","",833,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",833,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPISocketTransportService` to one of its base interfaces.",833,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",833,{"inputs":[{"name":"self"}],"output":{"name":"nsiroutedsockettransportservice"}}],[11,"Init","","`text /** * init/shutdown routines. */`",833,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Shutdown","","`void shutdown (in bool aXpcomShutdown);`",833,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSendBufferSize","","`text /** * controls the TCP sender window clamp */`",833,null],[11,"GetOffline","","`text /** * Controls whether the socket transport service is offline. * Setting it offline will cause non-local socket detachment. */`",833,null],[11,"SetOffline","","`text /** * Controls whether the socket transport service is offline. * Setting it offline will cause non-local socket detachment. */`",833,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetKeepaliveIdleTime","","`text /** * Controls the default timeout (in seconds) for sending keepalive probes. */`",833,null],[11,"GetKeepaliveRetryInterval","","`text /** * Controls the default interval (in seconds) between retrying keepalive probes. */`",833,null],[11,"GetKeepaliveProbeCount","","`text /** * Controls the default retransmission count for keepalive probes. */`",833,null],[11,"addref","","",834,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",834,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEventListenerChange` to one of its base interfaces.",834,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",834,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTarget","","`readonly attribute nsIDOMEventTarget target;`",834,null],[11,"GetCountOfEventListenerChangesAffectingAccessibility","","`[noscript] readonly attribute uint32_t countOfEventListenerChangesAffectingAccessibility;`",834,null],[11,"addref","","",835,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",835,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIListenerChangeListener` to one of its base interfaces.",835,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",835,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ListenersChanged","","`void listenersChanged (in nsIArray aEventListenerChanges);`",835,null],[11,"addref","","",836,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",836,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEventListenerInfo` to one of its base interfaces.",836,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",836,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * The type of the event for which the listener was added. * Null if the listener is for all the events. */`",836,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCapturing","","`readonly attribute boolean capturing;`",836,null],[11,"GetAllowsUntrusted","","`readonly attribute boolean allowsUntrusted;`",836,null],[11,"GetInSystemEventGroup","","`readonly attribute boolean inSystemEventGroup;`",836,null],[11,"ToSource","","`text /** * Tries to serialize event listener to a string. * Returns null if serialization isn't possible * (for example with C++ listeners). */`",836,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",837,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",837,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEventListenerService` to one of its base interfaces.",837,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",837,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetListenerInfoFor","","`text /** * Returns an array of nsIEventListenerInfo objects. * If aEventTarget doesn't have any listeners, this returns null. */`",837,null],[11,"GetEventTargetChainFor","","`text /** * Returns an array of event targets. * aEventTarget will be at index 0. * The objects are the ones that would be used as DOMEvent.currentTarget while * dispatching an event to aEventTarget * @note Some events, especially 'load', may actually have a shorter * event target chain than what this methods returns. */`",837,null],[11,"HasListenersFor","","`text /** * Returns true if a event target has any listener for the given type. */`",837,null],[11,"AddSystemEventListener","","`text /** * Add a system-group eventlistener to a event target. */`",837,null],[11,"RemoveSystemEventListener","","`text /** * Remove a system-group eventlistener from a event target. */`",837,null],[11,"AddListenerForAllEvents","","`void addListenerForAllEvents (in nsIDOMEventTarget target, in nsIDOMEventListener listener, [optional] in boolean aUseCapture, [optional] in boolean aWantsUntrusted, [optional] in boolean aSystemEventGroup);`",837,null],[11,"RemoveListenerForAllEvents","","`void removeListenerForAllEvents (in nsIDOMEventTarget target, in nsIDOMEventListener listener, [optional] in boolean aUseCapture, [optional] in boolean aSystemEventGroup);`",837,null],[11,"AddListenerChangeListener","","`void addListenerChangeListener (in nsIListenerChangeListener aListener);`",837,null],[11,"RemoveListenerChangeListener","","`void removeListenerChangeListener (in nsIListenerChangeListener aListener);`",837,null],[11,"addref","","",838,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",838,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINSSErrorsService` to one of its base interfaces.",838,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",838,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ERROR_CLASS_SSL_PROTOCOL","","",838,null],[18,"ERROR_CLASS_BAD_CERT","","",838,null],[18,"NSS_SEC_ERROR_BASE","","`text /** * The following values define the range of NSPR error codes used by NSS. * NSS remains the authorative source for these numbers, as a result, * the values might change in the future. * The security module will perform a runtime check and assertion * to ensure the values are in synch with NSS. */`",838,null],[18,"NSS_SEC_ERROR_LIMIT","","",838,null],[18,"NSS_SSL_ERROR_BASE","","",838,null],[18,"NSS_SSL_ERROR_LIMIT","","",838,null],[18,"MOZILLA_PKIX_ERROR_BASE","","`text /** * The error codes within each module must fit in 16 bits. We want these * errors to fit in the same module as the NSS errors but not overlap with * any of them. Converting an NSS SEC, NSS SSL, or mozilla::pkix error to * an NS error involves negating the value of the error and then * synthesizing an error in the NS_ERROR_MODULE_SECURITY module. Hence, * mozilla::pkix errors will start at a negative value that both doesn't * overlap with the current value ranges for NSS errors and that will fit * in 16 bits when negated. * * Keep these in sync with pkixnss.h. */`",838,null],[18,"MOZILLA_PKIX_ERROR_LIMIT","","",838,null],[11,"IsNSSErrorCode","","`text /** * @param aNSPRCode An error code obtained using PR_GetError() * @return True if it is error code defined by the NSS library */`",838,null],[11,"GetXPCOMFromNSSError","","`text /** * Function will fail if aNSPRCode is not an NSS error code. * @param aNSPRCode An error code obtained using PR_GetError() * @return The result of the conversion, an XPCOM error code */`",838,null],[11,"GetErrorMessage","","`text /** * Function will fail if aXPCOMErrorCode is not an NSS error code. * @param aXPCOMErrorCode An error code obtained using getXPCOMFromNSSError * return A localized human readable error explanation. */`",838,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetErrorClass","","`text /** * Function will fail if aXPCOMErrorCode is not an NSS error code. * @param aXPCOMErrorCode An error code obtained using getXPCOMFromNSSError * return the error class of the code, either ERROR_CLASS_BAD_CERT * or ERROR_CLASS_SSL_PROTOCOL */`",838,null],[11,"addref","","",839,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",839,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIRequest` to one of its base interfaces.",839,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",839,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[18,"STATUS_NONE","","`text /** * Bits set in the return value from imageStatus * @name statusflags * * Meanings: * * STATUS_NONE: Nothing to report. * * STATUS_SIZE_AVAILABLE: We received enough image data * from the network or filesystem that we know the width * and height of the image, and have thus called SetSize() * on the container. * * STATUS_LOAD_COMPLETE: The data has been fully loaded * to memory, but not necessarily fully decoded. * * STATUS_ERROR: An error occurred loading the image. * * STATUS_FRAME_COMPLETE: The first frame has been * completely decoded. * * STATUS_DECODE_COMPLETE: The whole image has been decoded. * * STATUS_IS_ANIMATED: The image is animated. * * STATUS_HAS_TRANSPARENCY: The image is partially or completely transparent. */`",839,null],[18,"STATUS_SIZE_AVAILABLE","","",839,null],[18,"STATUS_LOAD_COMPLETE","","",839,null],[18,"STATUS_ERROR","","",839,null],[18,"STATUS_FRAME_COMPLETE","","",839,null],[18,"STATUS_DECODE_COMPLETE","","",839,null],[18,"STATUS_IS_ANIMATED","","",839,null],[18,"STATUS_HAS_TRANSPARENCY","","",839,null],[18,"CORS_NONE","","`text /** * CORS modes images can be loaded with. * * By default, all images are loaded with CORS_NONE and cannot be used * cross-origin in context like WebGL. * * If an HTML img element has the crossorigin attribute set, the imgIRequest * will be validated for cross-origin usage with CORS, and, if successful, * will have its CORS mode set to the relevant type. */`",839,null],[18,"CORS_ANONYMOUS","","",839,null],[18,"CORS_USE_CREDENTIALS","","",839,null],[18,"CATEGORY_FRAME_INIT","","`text /** * Request loading priority boost to requested category, each category * of request increases priority only one time.. * * CATEGORY_FRAME_INIT: increase priority when the imgRequest is associated * with an nsImageFrame. * * CATEGORY_SIZE_QUERY: increase priority when size decoding is necessary to * determine the layout size of the associated nsImageFrame. * * CATEGORY_DISPLAY: increase priority when the image is about to be displayed * in the viewport. */`",839,null],[18,"CATEGORY_SIZE_QUERY","","",839,null],[18,"CATEGORY_DISPLAY","","",839,null],[11,"GetImage","","`text /** * the image container... * @return the image object associated with the request. * @attention NEED DOCS */`",839,null],[11,"GetImageStatus","","`text /** * Status flags of the STATUS_* variety. */`",839,null],[11,"GetImageErrorCode","","`[noscript] readonly attribute nsresult imageErrorCode;`",839,null],[11,"GetURI","","`text /** * The URI the image load was started with. Note that this might not be the * actual URI for the image (e.g. if HTTP redirects happened during the * load). */`",839,null],[11,"GetFinalURI","","`text /** * The URI of the resource we ended up loading after all redirects, etc. */`",839,null],[11,"GetNotificationObserver","","`readonly attribute imgINotificationObserver notificationObserver;`",839,null],[11,"GetMimeType","","`readonly attribute string mimeType;`",839,null],[11,"Clone","","`text /** * Clone this request; the returned request will have aObserver as the * observer. aObserver will be notified synchronously (before the clone() * call returns) with all the notifications that have already been dispatched * for this image load. */`",839,null],[11,"GetImagePrincipal","","`text /** * The principal gotten from the channel the image was loaded from. */`",839,null],[11,"GetMultipart","","`text /** * Whether the request is multipart (ie, multipart/x-mixed-replace) */`",839,null],[11,"GetCORSMode","","`text /** * The CORS mode that this image was loaded with. */`",839,null],[11,"CancelAndForgetObserver","","`text /** * Cancels this request as in nsIRequest::Cancel(); further, also nulls out * decoderObserver so it gets no further notifications from us. * * NOTE: You should not use this in any new code; instead, use cancel(). Note * that cancel() is asynchronous, which means that some time after you call * it, the listener/observer will get an OnStopRequest(). This means that, if * you're the observer, you can't call cancel() from your destructor. */`",839,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"StartDecoding","","`text /** * Requests a synchronous decode for the image. * * imgIContainer has a startDecoding() method, but callers may want to request * a decode before the container has necessarily been instantiated. Calling * startDecoding() on the imgIRequest simply forwards along the request if the * container already exists, or calls it once the container becomes available * if it does not yet exist. */`",839,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"StartDecodingWithResult","","`text /** * Exactly like startDecoding above except returns whether the current frame * of the image is complete or not. */`",839,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"bool"}}],[11,"LockImage","","`text /** * Locks an image. If the image does not exist yet, locks it once it becomes * available. The lock persists for the lifetime of the imgIRequest (until * unlockImage is called) even if the underlying image changes. * * If you don't call unlockImage() by the time this imgIRequest goes away, it * will be called for you automatically. * * @see imgIContainer::lockImage for documentation of the underlying call. */`",839,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UnlockImage","","`text /** * Unlocks an image. * * @see imgIContainer::unlockImage for documentation of the underlying call. */`",839,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RequestDiscard","","`text /** * If this image is unlocked, discard the image's decoded data. If the image * is locked or is already discarded, do nothing. */`",839,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetStaticRequest","","`text /** * If this request is for an animated image, the method creates a new * request which contains the current frame of the image. * Otherwise returns the same request. */`",839,null],[11,"IncrementAnimationConsumers","","`text /** * Requests that the image animate (if it has an animation). * * @see Image::IncrementAnimationConsumers for documentation of the * underlying call. */`",839,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DecrementAnimationConsumers","","`text /** * Tell the image it can forget about a request that the image animate. * * @see Image::DecrementAnimationConsumers for documentation of the * underlying call. */`",839,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BoostPriority","","`void boostPriority (in uint32_t aCategory);`",839,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",840,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",840,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUDPSocketChild` to one of its base interfaces.",840,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",840,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLocalPort","","`readonly attribute unsigned short localPort;`",840,null],[11,"GetLocalAddress","","`readonly attribute AUTF8String localAddress;`",840,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFilterName","","`attribute AUTF8String filterName;`",840,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetFilterName","","`attribute AUTF8String filterName;`",840,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetBackgroundSpinsEvents","","`[noscript] void setBackgroundSpinsEvents ();`",840,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Bind","","`void bind (in nsIUDPSocketInternal socket, in nsIPrincipal principal, in AUTF8String host, in unsigned short port, in bool addressReuse, in bool loopback, in uint32_t recvBufferSize, in uint32_t sendBufferSize, [optional] in nsIEventTarget mainThreadTarget);`",840,null],[11,"Connect","","`void connect (in nsIUDPSocketInternal socket, in AUTF8String host, in unsigned short port);`",840,null],[11,"Send","","`void send (in AUTF8String host, in unsigned short port, [array, size_is (byteLength), const] in uint8_t bytes, in unsigned long byteLength);`",840,null],[11,"SendWithAddr","","`void sendWithAddr (in nsINetAddr addr, [array, size_is (byteLength), const] in uint8_t bytes, in unsigned long byteLength);`",840,null],[11,"SendBinaryStream","","`void sendBinaryStream (in AUTF8String host, in unsigned short port, in nsIInputStream stream);`",840,null],[11,"Close","","`void close ();`",840,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"JoinMulticast","","`void joinMulticast (in AUTF8String multicastAddress, in AUTF8String iface);`",840,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"LeaveMulticast","","`void leaveMulticast (in AUTF8String multicastAddress, in AUTF8String iface);`",840,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",841,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",841,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUDPSocketInternal` to one of its base interfaces.",841,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",841,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CallListenerOpened","","`void callListenerOpened ();`",841,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CallListenerConnected","","`void callListenerConnected ();`",841,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CallListenerClosed","","`void callListenerClosed ();`",841,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CallListenerReceivedData","","`void callListenerReceivedData (in AUTF8String host, in unsigned short port, [array, size_is (dataLength), const] in uint8_t data, in unsigned long dataLength);`",841,null],[11,"CallListenerError","","`void callListenerError (in AUTF8String message, in AUTF8String filename, in uint32_t lineNumber);`",841,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",842,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",842,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIChildChannel` to one of its base interfaces.",842,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",842,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConnectParent","","`text /** * Create the chrome side of the IPC protocol and join an existing 'real' * channel on the parent process. The id is provided by * nsIRedirectChannelRegistrar on the chrome process and pushed to the child * protocol as an argument to event starting a redirect. * * Primarilly used in HttpChannelChild::Redirect1Begin on a newly created * child channel, where the new channel is intended to be created on the * child process. */`",842,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"CompleteRedirectSetup","","`text /** * As AsyncOpen is called on the chrome process for redirect target channels, * we have to inform the child side of the protocol of that fact by a special * method. */`",842,null],[11,"addref","","",843,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",843,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULStore` to one of its base interfaces.",843,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",843,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetValue","","`text /** * Sets a value in the store. * * @param doc - document URI * @param id - identifier of the node * @param attr - attribute to store * @param value - value of the attribute */`",843,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"HasValue","","`text /** * Returns true if the store contains a value for attr. * * @param doc - URI of the document * @param id - identifier of the node * @param attr - attribute */`",843,null],[11,"GetValue","","`text /** * Retrieves a value in the store, or an empty string if it does not exist. * * @param doc - document URI * @param id - identifier of the node * @param attr - attribute to retrieve * * @returns the value of the attribute */`",843,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveValue","","`text /** * Removes a value in the store. * * @param doc - document URI * @param id - identifier of the node * @param attr - attribute to remove */`",843,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIDsEnumerator","","`text /** * Iterates over all of the ids associated with a given document uri that * have stored data. * * @param doc - document URI */`",843,null],[11,"GetAttributeEnumerator","","`text /** * Iterates over all of the attributes associated with a given document uri * and id that have stored data. * * @param doc - document URI * @param id - identifier of the node */`",843,null],[11,"addref","","",844,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",844,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTMLEditor` to one of its base interfaces.",844,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",844,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eLeft","","",844,null],[18,"eCenter","","",844,null],[18,"eRight","","",844,null],[18,"eJustify","","",844,null],[11,"SetInlineProperty","","`text /** * SetInlineProperty() sets the aggregate properties on the current selection * * @param aProperty the property to set on the selection * @param aAttribute the attribute of the property, if applicable. * May be null. * Example: aProperty=\"font\", aAttribute=\"color\" * @param aValue if aAttribute is not null, the value of the attribute. * May be null. * Example: aProperty=\"font\", aAttribute=\"color\", * aValue=\"0x00FFFF\" */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetInlineProperty","","`text /** * getInlineProperty() gets aggregate properties of the current selection. * All object in the current selection are scanned and their attributes are * represented in a list of Property object. * * @param aProperty the property to get on the selection * @param aAttribute the attribute of the property, if applicable. * May be null. * Example: aProperty=\"font\", aAttribute=\"color\" * @param aValue if aAttribute is not null, the value of the attribute. * May be null. * Example: aProperty=\"font\", aAttribute=\"color\", * aValue=\"0x00FFFF\" * @param aFirst [OUT] PR_TRUE if the first text node in the * selection has the property * @param aAny [OUT] PR_TRUE if any of the text nodes in the * selection have the property * @param aAll [OUT] PR_TRUE if all of the text nodes in the * selection have the property */`",844,null],[11,"GetInlinePropertyWithAttrValue","","`AString getInlinePropertyWithAttrValue (in AString aProperty, in AString aAttribute, in AString aValue, out boolean aFirst, out boolean aAny, out boolean aAll);`",844,null],[11,"RemoveAllInlineProperties","","`text /** * removeAllInlineProperties() deletes all the inline properties from all * text in the current selection. */`",844,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveInlineProperty","","`text /** * removeInlineProperty() deletes the properties from all text in the current * selection. If aProperty is not set on the selection, nothing is done. * * @param aProperty the property to remove from the selection * All atoms are for normal HTML tags (e.g.: * nsIEditorProperty::font) except when you want to * remove just links and not named anchors. * For that, use nsIEditorProperty::href * @param aAttribute the attribute of the property, if applicable. * May be null. * Example: aProperty=nsIEditorProptery::font, * aAttribute=\"color\" * nsIEditProperty::allAttributes is special. * It indicates that all content-based text properties * are to be removed from the selection. */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"IncreaseFontSize","","`text /** * Increase font size for text in selection by 1 HTML unit * All existing text is scanned for existing <FONT SIZE> attributes * so they will be incremented instead of inserting new <FONT> tag */`",844,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DecreaseFontSize","","`text /** * Decrease font size for text in selection by 1 HTML unit * All existing text is scanned for existing <FONT SIZE> attributes * so they will be decreased instead of inserting new <FONT> tag */`",844,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NodeIsBlock","","`text /** * Tests if a node is a BLOCK element according the the HTML 4.0 DTD. * This does NOT consider CSS effect on display type * * @param aNode the node to test */`",844,null],[11,"InsertHTML","","`text /** * Insert some HTML source at the current location * * @param aInputString the string to be inserted */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PasteNoFormatting","","`text /** * Paste the text in the OS clipboard at the cursor position, replacing * the selected text (if any), but strip out any HTML styles and formatting */`",844,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"RebuildDocumentFromSource","","`text /** * Rebuild the entire document from source HTML * Needed to be able to edit HEAD and other outside-of-BODY content * * @param aSourceString HTML source string of the entire new document */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InsertHTMLWithContext","","`text /** * Insert some HTML source, interpreting * the string argument according to the given context. * * @param aInputString the string to be inserted * @param aContextStr Context of insertion * @param aInfoStr Related info to aInputString * @param aFlavor Transferable flavor, can be \"\" * @param aSourceDoc document where input was dragged from (may be null) * @param aDestinationNode location for insertion (such as when dropped) * @param aDestinationOffset used with aDestNode to determine insert location * @param aDeleteSelection used with aDestNode during drag&drop * @param aCollapseSelection used with aDestNode during drag&drop */`",844,null],[11,"InsertElementAtSelection","","`text /** * Insert an element, which may have child nodes, at the selection * Used primarily to insert a new element for various insert element dialogs, * but it enforces the HTML 4.0 DTD \"CanContain\" rules, so it should * be useful for other elements. * * @param aElement The element to insert * @param aDeleteSelection Delete the selection before inserting * If aDeleteSelection is PR_FALSE, then the element is inserted * after the end of the selection for all element except * Named Anchors, which insert before the selection */`",844,null],[11,"UpdateBaseURL","","`text /** * Set the BaseURL for the document to the current URL * but only if the page doesn't have a <base> tag * This should be done after the document URL has changed, * such as after saving a file * This is used as base for relativizing link and image urls */`",844,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectElement","","`text /** * Set the selection at the suppled element * * @param aElement An element in the document */`",844,null],[11,"SetCaretAfterElement","","`text /** * Create a collapsed selection just after aElement * * XXX could we parameterize SelectElement(before/select/after>? * * The selection is set to parent-of-aElement with an * offset 1 greater than aElement's offset * but it enforces the HTML 4.0 DTD \"CanContain\" rules, so it should * be useful for other elements. * * @param aElement An element in the document */`",844,null],[11,"SetParagraphFormat","","`text /** * SetParagraphFormat Insert a block paragraph tag around selection * @param aParagraphFormat \"p\", \"h1\" to \"h6\", \"address\", \"pre\", or \"blockquote\" */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParagraphState","","`text /** * getParagraphState returns what block tag paragraph format is in * the selection. * @param aMixed True if there is more than one format * @return Name of block tag. \"\" is returned for none. */`",844,null],[11,"GetFontFaceState","","`text /** * getFontFaceState returns what font face is in the selection. * @param aMixed True if there is more than one font face * @return Name of face. Note: \"tt\" is returned for * tt tag. \"\" is returned for none. */`",844,null],[11,"GetFontColorState","","`text /** * getFontColorState returns what font face is in the selection. * @param aMixed True if there is more than one font color * @return Color string. \"\" is returned for none. */`",844,null],[11,"GetBackgroundColorState","","`text /** * getFontColorState returns what font face is in the selection. * @param aMixed True if there is more than one font color * @return Color string. \"\" is returned for none. */`",844,null],[11,"GetHighlightColorState","","`text /** * getHighlightColorState returns what the highlight color of the selection. * @param aMixed True if there is more than one font color * @return Color string. \"\" is returned for none. */`",844,null],[11,"GetListState","","`text /** * getListState returns what list type is in the selection. * @param aMixed True if there is more than one type of list, or * if there is some list and non-list * @param aOL The company that employs me. No, really, it's * true if an \"ol\" list is selected. * @param aUL true if an \"ul\" list is selected. * @param aDL true if a \"dl\" list is selected. */`",844,null],[11,"GetListItemState","","`text /** * getListItemState returns what list item type is in the selection. * @param aMixed True if there is more than one type of list item, or * if there is some list and non-list * @param aLI true if \"li\" list items are selected. * @param aDT true if \"dt\" list items are selected. * @param aDD true if \"dd\" list items are selected. */`",844,null],[11,"GetAlignment","","`text /** * getAlignment returns what alignment is in the selection. * @param aMixed True if there is more than one type of list item, or * if there is some list and non-list * @param aAlign enum value for first encountered alignment * (left/center/right) */`",844,null],[11,"GetIndentState","","`text /** * Document me! * */`",844,null],[11,"MakeOrChangeList","","`text /** * Document me! * */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveList","","`text /** * Document me! * */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Indent","","`text /** * Document me! * */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Align","","`text /** * Document me! * */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetElementOrParentByTagName","","`text /** * Return the input node or a parent matching the given aTagName, * starting the search at the supplied node. * An example of use is for testing if a node is in a table cell * given a selection anchor node. * * @param aTagName The HTML tagname * Special input values: * Use \"href\" to get a link node * (an \"A\" tag with the \"href\" attribute set) * Use \"anchor\" or \"namedanchor\" to get a named anchor node * (an \"A\" tag with the \"name\" attribute set) * Use \"list\" to get an OL, UL, or DL list node * Use \"td\" to get either a TD or TH cell node * * @param aNode The node in the document to start the search. * If it is null, the anchor node of the current selection is used. * @return NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * (passes NS_SUCCEEDED macro) */`",844,null],[11,"GetSelectedElement","","`text /** * Return an element only if it is the only node selected, * such as an image, horizontal rule, etc. * The exception is a link, which is more like a text attribute: * The Anchor tag is returned if the selection is within the textnode(s) * that are children of the \"A\" node. * This could be a collapsed selection, i.e., a caret * within the link text. * * @param aTagName The HTML tagname or and empty string * to get any element (but only if it is the only element selected) * Special input values for Links and Named anchors: * Use \"href\" to get a link node * (an \"A\" tag with the \"href\" attribute set) * Use \"anchor\" or \"namedanchor\" to get a named anchor node * (an \"A\" tag with the \"name\" attribute set) * @return NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * (passes NS_SUCCEEDED macro) */`",844,null],[11,"GetHeadContentsAsHTML","","`text /** * Output the contents of the <HEAD> section as text/HTML format */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ReplaceHeadContentsWithHTML","","`text /** * Replace all children of <HEAD> with string of HTML source */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CreateElementWithDefaults","","`text /** * Return a new element with default attribute values * * This does not rely on the selection, and is not sensitive to context. * * Used primarily to supply new element for various insert element dialogs * (Image, Link, NamedAnchor, Table, and HorizontalRule * are the only returned elements as of 7/25/99) * * @param aTagName The HTML tagname * Special input values for Links and Named anchors: * Use \"href\" to get a link node * (an \"A\" tag with the \"href\" attribute set) * Use \"anchor\" or \"namedanchor\" to get a named anchor node * (an \"A\" tag with the \"name\" attribute set) * @return The new element created. */`",844,null],[11,"InsertLinkAroundSelection","","`text /** * Insert an link element as the parent of the current selection * * @param aElement An \"A\" element with a non-empty \"href\" attribute */`",844,null],[11,"SetBackgroundColor","","`text /** * Set the value of the \"bgcolor\" attribute on the document's <body> element * * @param aColor The HTML color string, such as \"#ffccff\" or \"yellow\" */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetBodyAttribute","","`text /** * Set an attribute on the document's <body> element * such as text, link, background colors * * 8/31/00 THIS ISN'T BEING USED? SHOULD WE DROP IT? * * @param aAttr The attribute to be set * @param aValue The value of the attribute */`",844,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLinkedObjects","","`text /** * Find all the nodes in the document which contain references * to outside URIs (e.g. a href, img src, script src, etc.) * The objects in the array will be type nsIURIRefObject. * * @return aNodeList the linked nodes found */`",844,null],[11,"GetIsCSSEnabled","","`text /** * A boolean which is true is the HTMLEditor has been instantiated * with CSS knowledge and if the CSS pref is currently checked * * @return true if CSS handled and enabled */`",844,null],[11,"SetIsCSSEnabled","","`text /** * A boolean which is true is the HTMLEditor has been instantiated * with CSS knowledge and if the CSS pref is currently checked * * @return true if CSS handled and enabled */`",844,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSelectionContainer","","`text /** * returns the deepest container of the selection * @return a DOM Element */`",844,null],[11,"CheckSelectionStateForAnonymousButtons","","`text /** * Checks if the anonymous nodes created by the HTML editor have to be * refreshed or hidden depending on a possible new state of the selection * @param aSelection [IN] a selection */`",844,null],[11,"IsAnonymousElement","","`boolean isAnonymousElement (in nsIDOMElement aElement);`",844,null],[11,"GetReturnInParagraphCreatesNewParagraph","","`text /** * A boolean indicating if a return key pressed in a paragraph creates * another paragraph or just inserts a <br> at the caret * * @return true if CR in a paragraph creates a new paragraph */`",844,null],[11,"SetReturnInParagraphCreatesNewParagraph","","`text /** * A boolean indicating if a return key pressed in a paragraph creates * another paragraph or just inserts a <br> at the caret * * @return true if CR in a paragraph creates a new paragraph */`",844,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",845,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",845,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIMozIntl` to one of its base interfaces.",845,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",845,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",846,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",846,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUserInfo` to one of its base interfaces.",846,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",846,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFullname","","`readonly attribute wstring fullname;`",846,null],[11,"GetEmailAddress","","`readonly attribute string emailAddress;`",846,null],[11,"GetUsername","","`readonly attribute string username;`",846,null],[11,"GetDomain","","`readonly attribute string domain;`",846,null],[11,"addref","","",847,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",847,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHistoryInternal` to one of its base interfaces.",847,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",847,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddEntry","","`text /** * Add a new Entry to the History List * @param aEntry - The entry to add * @param aPersist - If true this specifies that the entry should persist * in the list. If false, this means that when new entries are added * this element will not appear in the session history list. */`",847,null],[11,"GetRootTransaction","","`text /** * Get the root transaction */`",847,null],[11,"SetRootDocShell","","`text /** * Sets the toplevel docshell object to which this SHistory object belongs to. */`",847,null],[11,"UpdateIndex","","`text /** * Update the index maintained by sessionHistory */`",847,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ReplaceEntry","","`text /** * Replace the nsISHEntry at a particular index * @param aIndex - The index at which the entry should be replaced * @param aReplaceEntry - The replacement entry for the index. */`",847,null],[11,"NotifyOnHistoryReload","","`text /** * Notifies all registered session history listeners about an impending * reload. * * @param aReloadURI The URI of the document to be reloaded. * @param aReloadFlags Flags that indicate how the document is to be * refreshed. See constants on the nsIWebNavigation * interface. * @return Whether the operation can proceed. */`",847,null],[11,"EvictOutOfRangeContentViewers","","`text /** * Evict content viewers which don't lie in the \"safe\" range around aIndex. * In practice, this should leave us with no more than gHistoryMaxViewers * viewers associated with this SHistory object. * * Also make sure that the total number of content viewers in all windows is * not greater than our global max; if it is, evict viewers as appropriate. * * @param aIndex - The index around which the \"safe\" range is centered. In * general, if you just navigated the history, aIndex should be the index * history was navigated to. */`",847,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"EvictExpiredContentViewerForEntry","","`text /** * Evict the content viewer associated with a bfcache entry * that has timed out. */`",847,null],[11,"EvictAllContentViewers","","`text /** * Evict all the content viewers in this session history */`",847,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddToExpirationTracker","","`text /** * Add a BFCache entry to expiration tracker so it gets evicted on expiration. */`",847,null],[11,"RemoveFromExpirationTracker","","`text /** * Remove a BFCache entry from expiration tracker. */`",847,null],[11,"RemoveDynEntries","","`text /** * Remove dynamic entries found at given index. * * @param aIndex * Index to remove dynamic entries from. It will be passed to * RemoveEntries as aStartIndex. * @param aContainer (optional) * The container to start looking for dynamic entries. Only the * dynamic descendants of the container will be removed. If not given, * all dynamic entries at the index will be removed. */`",847,null],[11,"RemoveDynEntriesForBFCacheEntry","","`text /** * Similar to RemoveDynEntries, but instead of specifying an index, use the * given BFCacheEntry to find the index and remove dynamic entries from the * index. * * The method takes no effect if the bfcache entry is not or no longer hold * by the SHistory instance. * * @param aEntry * The bfcache entry to look up for index to remove dynamic entries * from. */`",847,null],[11,"addref","","",848,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",848,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleCaretMoveEvent` to one of its base interfaces.",848,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",848,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetCaretOffset","","`text /** * Return caret offset. */`",848,null],[11,"addref","","",849,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",849,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILocalFileWin` to one of its base interfaces.",849,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",849,{"inputs":[{"name":"self"}],"output":{"name":"nsifile"}}],[18,"WFA_SEARCH_INDEXED","","`text /** * Windows specific file attributes. */`",849,null],[18,"WFA_READONLY","","",849,null],[18,"WFA_READWRITE","","",849,null],[11,"InitWithCommandLine","","`text /** * initWithCommandLine * * Initialize this object based on the main app path of a commandline * handler. * * @param aCommandLine * the commandline to parse an app path out of. */`",849,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVersionInfoField","","`text /** * getVersionInfoValue * * Retrieve a metadata field from the file's VERSIONINFO block. * Throws NS_ERROR_FAILURE if no value is found, or the value is empty. * * @param aField The field to look up. * */`",849,null],[11,"GetCanonicalPath","","`text /** * The canonical path of the file, which avoids short/long * pathname inconsistencies. The nsIFile persistent * descriptor is not guaranteed to be canonicalized (it may * persist either the long or the short path name). The format of * the canonical path will vary with the underlying file system: * it will typically be the short pathname on filesystems that * support both short and long path forms. */`",849,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNativeCanonicalPath","","`[noscript] readonly attribute ACString nativeCanonicalPath;`",849,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileAttributesWin","","`text /** * fileAttributesWin * * Set or get windows specific file attributes. * * Throws NS_ERROR_FILE_INVALID_PATH for an invalid file. * Throws NS_ERROR_FAILURE if the set or get fails. */`",849,null],[11,"SetFileAttributesWin","","`text /** * fileAttributesWin * * Set or get windows specific file attributes. * * Throws NS_ERROR_FILE_INVALID_PATH for an invalid file. * Throws NS_ERROR_FAILURE if the set or get fails. */`",849,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetShortcut","","`text /** * setShortcut * * Creates the specified shortcut, or updates it if it already exists. * * If the shortcut is being updated (i.e. the shortcut already exists), * any excluded parameters will remain unchanged in the shortcut file. * For example, if you want to change the description of a specific * shortcut but keep the target, working dir, args, and icon the same, * pass null for those parameters and only pass in a value for the * description. * * If the shortcut does not already exist and targetFile is not specified, * setShortcut will throw NS_ERROR_FILE_TARGET_DOES_NOT_EXIST. * * @param targetFile the path that the shortcut should target * @param workingDir the working dir that should be set for the shortcut * @param args the args string that should be set for the shortcut * @param description the description that should be set for the shortcut * @param iconFile the file containing an icon to be used for this shortcut * @param iconIndex this value selects a specific icon from within iconFile. If iconFile contains only one icon, this value should be 0. */`",849,null],[11,"addref","","",850,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",850,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentUIService` to one of its base interfaces.",850,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",850,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowPayment","","`text /** * Show the payment UI to users. * The implementation gets the payment data through nsIPaymentRequestService * by the passed in requestId, then shows the payment UI and start to interact * with users. * According to user's action, nsIPaymentRequestService's APIs respondPayment, * changeShippingAddress, or changeShippingOtpion is possible to called in the * implementation. * @param requestId - the request identify of the payment request. * Notice that this requestId is an internal request Id * generated by Gecko */`",850,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AbortPayment","","`text /** * Abort the payment. * The implementation must abort and close the showing payment UI then call * nsIPaymentRequestService respondPayment with nsIPaymentAbortActionResponse * to inform Gecko of the abort status. * @param requestId - the request identify of the payment request. * Notice that this requestId is an internal request Id * generated by Gecko */`",850,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CompletePayment","","`text /** * Complete the payment. * The implementation should close the showing payment UI, then call * nsIPaymentRequestService respondPayment with nsIPaymentCompleteActionResponse * to inform Gecko of the complete status. * @param requestId - the request identify of the payment request. * Notice that this requestId is an internal request Id * generated by Gecko */`",850,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UpdatePayment","","`text /** * Update the payment data in the payment UI. * The implementation should get the updated payment data through the * nsIPaymentRequestService again, and update the UI. * @param requestId - the request identify of the payment request. * Notice that this requestId is an internal request Id * generated by Gecko */`",850,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",851,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",851,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputChannelThrottleQueue` to one of its base interfaces.",851,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",851,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize this object with the mean and maximum bytes per * second that will be allowed. Neither value may be zero, and * the maximum must not be less than the mean. * * @param aMeanBytesPerSecond * Mean number of bytes per second. * @param aMaxBytesPerSecond * Maximum number of bytes per second. */`",851,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Available","","`text /** * Return the number of bytes that are available to the caller in * this time slice. * * @param aRemaining * The number of bytes available to be processed * @return the number of bytes allowed to be processed during this * time slice; this will never be greater than aRemaining. */`",851,null],[11,"RecordRead","","`text /** * Record a successful read. * * @param aBytesRead * The number of bytes actually read. */`",851,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"BytesProcessed","","`text /** * Return the number of bytes allowed through this queue. This is * the sum of all the values passed to recordRead. This method is * primarily useful for testing. */`",851,null],[11,"WrapStream","","`text /** * Wrap the given input stream in a new input stream which * throttles the incoming data. * * @param aInputStream the input stream to wrap * @return a new input stream that throttles the data. */`",851,null],[11,"addref","","",852,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",852,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThrottledInputChannel` to one of its base interfaces.",852,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",852,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetThrottleQueue","","`text /** * The queue that manages this channel. Multiple channels can * share a single queue. A null value means that no throttling * will be done. */`",852,null],[11,"SetThrottleQueue","","`text /** * The queue that manages this channel. Multiple channels can * share a single queue. A null value means that no throttling * will be done. */`",852,null],[11,"addref","","",853,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",853,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageListener` to one of its base interfaces.",853,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",853,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReceiveMessage","","`text /** * This is for JS only. * receiveMessage is called with one parameter, which has the following * properties: * { * target: %the target of the message. Either an element owning * the message manager, or message manager itself if no * element owns it% * name: %message name%, * sync: %true or false%. * data: %structured clone of the sent message data%, * json: %same as .data, deprecated%, * objects: %named table of jsvals/objects, or null% * principal: %principal for the window app * } * * Each listener is invoked with its own copy of the message * parameter. * * When the listener is called, 'this' value is the target of the message. * * If the message is synchronous, the possible return value is * returned as JSON (will be changed to use structured clones). * When there are multiple listeners to sync messages, each * listener's return value is sent back as an array. |undefined| * return values show up as undefined values in the array. */`",853,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",854,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",854,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageListenerManager` to one of its base interfaces.",854,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",854,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddMessageListener","","`text /** * Register |listener| to receive |messageName|. All listener * callbacks for a particular message are invoked when that message * is received. * * The message manager holds a strong ref to |listener|. * * If the same listener registers twice for the same message, the * second registration is ignored. * * Pass true for listenWhenClosed if you want to receive messages * during the short period after a frame has been removed from the * DOM and before its frame script has finished unloading. This * parameter only has an effect for frame message managers in * the main process. Default is false. */`",854,null],[11,"RemoveMessageListener","","`text /** * Undo an |addMessageListener| call -- that is, calling this causes us to no * longer invoke |listener| when |messageName| is received. * * removeMessageListener does not remove a message listener added via * addWeakMessageListener; use removeWeakMessageListener for that. */`",854,null],[11,"AddWeakMessageListener","","`text /** * This is just like addMessageListener, except the message manager holds a * weak ref to |listener|. * * If you have two weak message listeners for the same message, they may be * called in any order. */`",854,null],[11,"RemoveWeakMessageListener","","`text /** * This undoes an |addWeakMessageListener| call. */`",854,null],[11,"MarkForCC","","`[notxpcom] boolean markForCC ();`",854,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",855,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",855,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageSender` to one of its base interfaces.",855,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",855,{"inputs":[{"name":"self"}],"output":{"name":"nsimessagelistenermanager"}}],[11,"GetProcessMessageManager","","`text /** * For remote browsers there is always a corresponding process message * manager. The intention of this attribute is to link leaf level frame * message managers on the parent side with the corresponding process * message managers (if there is one). For any other cases this property * is null. */`",855,null],[11,"GetRemoteType","","`text /** * For remote browsers, this contains the remoteType of the content child. * Otherwise, it is empty. */`",855,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",856,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",856,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageBroadcaster` to one of its base interfaces.",856,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",856,{"inputs":[{"name":"self"}],"output":{"name":"nsimessagelistenermanager"}}],[11,"GetChildCount","","`text /** * Number of subordinate message managers. */`",856,null],[11,"GetChildAt","","`text /** * Return a single subordinate message manager. */`",856,null],[11,"ReleaseCachedProcesses","","`text /** * Some processes are kept alive after their last tab/window are closed for testing * (see dom.ipc.keepProcessesAlive). This function releases those. */`",856,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",857,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",857,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISyncMessageSender` to one of its base interfaces.",857,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",857,{"inputs":[{"name":"self"}],"output":{"name":"nsimessagesender"}}],[11,"addref","","",858,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",858,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMessageManagerGlobal` to one of its base interfaces.",858,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",858,{"inputs":[{"name":"self"}],"output":{"name":"nsisyncmessagesender"}}],[11,"Dump","","`text /** * Print a string to stdout. */`",858,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PrivateNoteIntentionalCrash","","`text /** * If leak detection is enabled, print a note to the leak log that this * process will intentionally crash. */`",858,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Atob","","`text /** * Ascii base64 data to binary data and vice versa */`",858,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Btoa","","`DOMString btoa (in DOMString aBase64Data);`",858,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",859,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",859,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentFrameMessageManager` to one of its base interfaces.",859,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",859,{"inputs":[{"name":"self"}],"output":{"name":"nsimessagemanagerglobal"}}],[11,"GetContent","","`text /** * The current top level window in the frame or null. */`",859,null],[11,"GetDocShell","","`text /** * The top level docshell or null. */`",859,null],[11,"GetTabEventTarget","","`text /** * Returns the SchedulerEventTarget corresponding to the TabGroup * for this frame. */`",859,null],[11,"addref","","",860,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",860,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInProcessContentFrameMessageManager` to one of its base interfaces.",860,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",860,{"inputs":[{"name":"self"}],"output":{"name":"nsicontentframemessagemanager"}}],[11,"GetOwnerContent","","`[notxpcom] nsIContent getOwnerContent ();`",860,null],[11,"CacheFrameLoader","","`[notxpcom] void cacheFrameLoader (in nsIFrameLoader aFrameLoader);`",860,null],[11,"addref","","",861,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",861,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentProcessMessageManager` to one of its base interfaces.",861,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",861,{"inputs":[{"name":"self"}],"output":{"name":"nsimessagemanagerglobal"}}],[11,"addref","","",862,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",862,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFrameScriptLoader` to one of its base interfaces.",862,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",862,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LoadFrameScript","","`text /** * Load a script in the (remote) frame. aURL must be the absolute URL. * data: URLs are also supported. For example data:,dump(\"foo\\n\"); * If aAllowDelayedLoad is true, script will be loaded when the * remote frame becomes available. Otherwise the script will be loaded * only if the frame is already available. */`",862,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveDelayedFrameScript","","`text /** * Removes aURL from the list of scripts which support delayed load. */`",862,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",863,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",863,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProcessScriptLoader` to one of its base interfaces.",863,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",863,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LoadProcessScript","","`text /** * Load a script in the (possibly remote) process. aURL must be the absolute URL. * data: URLs are also supported. For example data:,dump(\"foo\\n\"); * If aAllowDelayedLoad is true, script will be loaded when the * remote frame becomes available. Otherwise the script will be loaded * only if the frame is already available. */`",863,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveDelayedProcessScript","","`text /** * Removes aURL from the list of scripts which support delayed load. */`",863,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",864,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",864,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGlobalProcessScriptLoader` to one of its base interfaces.",864,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",864,{"inputs":[{"name":"self"}],"output":{"name":"nsiprocessscriptloader"}}],[11,"addref","","",865,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",865,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageProgressHandler` to one of its base interfaces.",865,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",865,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnProgress","","`text /** * onProgress is invoked periodically during long running calls. * * @param aConnection connection, for which progress handler is * invoked. * * @return true to abort request, false to continue work. */`",865,null],[11,"addref","","",866,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",866,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOpenSignedAppFileCallback` to one of its base interfaces.",866,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",866,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OpenSignedAppFileFinished","","`void openSignedAppFileFinished (in nsresult rv, in nsIZipReader aZipReader, in nsIX509Cert aSignerCert);`",866,null],[11,"addref","","",867,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",867,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIVerifySignedDirectoryCallback` to one of its base interfaces.",867,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",867,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VerifySignedDirectoryFinished","","`void verifySignedDirectoryFinished (in nsresult rv, in nsIX509Cert aSignerCert);`",867,null],[11,"addref","","",868,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",868,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertVerificationCallback` to one of its base interfaces.",868,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",868,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VerifyCertFinished","","`void verifyCertFinished (in int32_t aPRErrorCode, in nsIX509CertList aVerifiedChain, in bool aHasEVPolicy);`",868,null],[11,"addref","","",869,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",869,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIX509CertDB` to one of its base interfaces.",869,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",869,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNTRUSTED","","`text /** * Constants that define which usages a certificate * is trusted for. */`",869,null],[18,"TRUSTED_SSL","","",869,null],[18,"TRUSTED_EMAIL","","",869,null],[18,"AppXPCShellRoot","","`text /** * Verifies the signature on the given JAR file to verify that it has a * valid signature. To be considered valid, there must be exactly one * signature on the JAR file and that signature must have signed every * entry. Further, the signature must come from a certificate that * is trusted for code signing. * * On success, NS_OK, a nsIZipReader, and the trusted certificate that * signed the JAR are returned. * * On failure, an error code is returned. * * This method returns a nsIZipReader, instead of taking an nsIZipReader * as input, to encourage users of the API to verify the signature as the * first step in opening the JAR. */`",869,null],[18,"AddonsPublicRoot","","",869,null],[18,"AddonsStageRoot","","",869,null],[18,"PrivilegedPackageRoot","","",869,null],[18,"DeveloperImportedRoot","","",869,null],[18,"FLAG_LOCAL_ONLY","","",869,null],[18,"FLAG_MUST_BE_EV","","",869,null],[11,"FindCertByDBKey","","`text /** * Will find a certificate based on its dbkey * retrieved by getting the dbKey attribute of * the certificate. * * @param aDBkey Database internal key, as obtained using * attribute dbkey in nsIX509Cert. */`",869,null],[11,"FindCertByEmailAddress","","`text /** * Find a certificate by email address. * * @param aEmailAddress The email address to be used as the key * to find the certificate. * * @return The matching certificate if found. */`",869,null],[11,"ImportCertificates","","`text /** * Use this to import a stream sent down as a mime type into * the certificate database on the default token. * The stream may consist of one or more certificates. * * @param data The raw data to be imported * @param length The length of the data to be imported * @param type The type of the certificate, see constants in nsIX509Cert * @param ctx A UI context. */`",869,null],[11,"ImportEmailCertificate","","`text /** * Import another person's email certificate into the database. * * @param data The raw data to be imported * @param length The length of the data to be imported * @param ctx A UI context. */`",869,null],[11,"ImportUserCertificate","","`text /** * Import a personal certificate into the database, assuming * the database already contains the private key for this certificate. * * @param data The raw data to be imported * @param length The length of the data to be imported * @param ctx A UI context. */`",869,null],[11,"DeleteCertificate","","`text /** * Delete a certificate stored in the database. * * @param aCert Delete this certificate. */`",869,null],[11,"SetCertTrust","","`text /** * Modify the trust that is stored and associated to a certificate within * a database. Separate trust is stored for * One call manipulates the trust for one trust type only. * See the trust type constants defined within this interface. * * @param cert Change the stored trust of this certificate. * @param type The type of the certificate. See nsIX509Cert. * @param trust A bitmask. The new trust for the possible usages. * See the trust constants defined within this interface. */`",869,null],[11,"SetCertTrustFromString","","`text /** * @param cert The certificate for which to modify trust. * @param trustString decoded by CERT_DecodeTrustString. 3 comma separated * characters, indicating SSL, Email, and Object signing * trust. The object signing trust flags are effectively * ignored by gecko, but they still must be specified (at * least by a final trailing comma) because this argument * is passed to CERT_DecodeTrustString. */`",869,null],[11,"IsCertTrusted","","`text /** * Query whether a certificate is trusted for a particular use. * * @param cert Obtain the stored trust of this certificate. * @param certType The type of the certificate. See nsIX509Cert. * @param trustType A single bit from the usages constants defined * within this interface. * * @return Returns true if the certificate is trusted for the given use. */`",869,null],[11,"ImportCertsFromFile","","`text /** * Import certificate(s) from file * * @param aFile Identifies a file that contains the certificate * to be imported. * @param aType Describes the type of certificate that is going to * be imported. See type constants in nsIX509Cert. */`",869,null],[11,"ImportPKCS12File","","`text /** * Import a PKCS#12 file containing cert(s) and key(s) into the database. * * @param aFile Identifies a file that contains the data to be imported. */`",869,null],[11,"ExportPKCS12File","","`text /** * Export a set of certs and keys from the database to a PKCS#12 file. * * @param aFile Identifies a file that will be filled with the data to be * exported. * @param count The number of certificates to be exported. * @param aCerts The array of all certificates to be exported. */`",869,null],[11,"ConstructX509FromBase64","","`[must_use] nsIX509Cert constructX509FromBase64 (in ACString base64);`",869,null],[11,"ConstructX509","","`[must_use] nsIX509Cert constructX509 (in ACString certDER);`",869,null],[11,"OpenSignedAppFileAsync","","`[must_use] void openSignedAppFileAsync (in AppTrustedRoot trustedRoot, in nsIFile aJarFile, in nsIOpenSignedAppFileCallback callback);`",869,null],[11,"VerifySignedDirectoryAsync","","`text /** * Vestigial implementation of verifying signed unpacked add-ons. trustedRoot * and aUnpackedDir are ignored. The callback is always called with * NS_ERROR_SIGNED_JAR_NOT_SIGNED and a null signer cert. */`",869,null],[11,"AddCert","","`[must_use] nsIX509Cert addCert (in ACString certDER, in ACString trust);`",869,null],[11,"VerifyCertAtTime","","`text /** Warning: This interface is inteded to use only for testing only as: * 1. It can create IO on the main thread. * 2. It is in constant change, so in/out can change at any release. * * Obtain the verification result for a cert given a particular usage. * On success, the call returns 0, the chain built during verification, * and whether the cert is good for EV usage. * On failure, the call returns the PRErrorCode for the verification failure * * @param aCert Obtain the stored trust of this certificate * @param aUsage a integer representing the usage from NSS * @param aFlags flags as described above * @param aHostname the (optional) hostname to verify for * @param aTime the time at which to verify, in seconds since the epoch * @param aVerifiedChain chain of verification up to the root if success * @param aHasEVPolicy bool that signified that the cert was an EV cert * @return 0 if success or the value or the error code for the verification * failure */`",869,null],[11,"VerifyCertNow","","`[must_use] int32_t verifyCertNow (in nsIX509Cert aCert, in int64_t aUsage, in uint32_t aFlags, in ACString aHostname, out nsIX509CertList aVerifiedChain, out bool aHasEVPolicy);`",869,null],[11,"AsyncVerifyCertAtTime","","`text /** * Similar to the above, but asynchronous. As a result, use of this API is not * limited to tests. */`",869,null],[11,"ClearOCSPCache","","`[must_use] void clearOCSPCache ();`",869,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddCertFromBase64","","`[must_use] nsIX509Cert addCertFromBase64 (in ACString base64, in ACString trust);`",869,null],[11,"GetCerts","","`[must_use] nsIX509CertList getCerts ();`",869,null],[11,"GetEnterpriseRoots","","`[must_use] nsIX509CertList getEnterpriseRoots ();`",869,null],[11,"addref","","",870,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",870,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDocumentFragment` to one of its base interfaces.",870,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",870,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"addref","","",871,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",871,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileChannel` to one of its base interfaces.",871,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",871,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFile","","`readonly attribute nsIFile file;`",871,null],[11,"addref","","",872,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",872,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISliderListener` to one of its base interfaces.",872,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",872,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ValueChanged","","`text /** * Called when the current, minimum or maximum value has been changed to * newValue. The which parameter will either be 'curpos', 'minpos' or 'maxpos'. * If userChanged is true, then the user changed ths slider, otherwise it * was changed via some other means. */`",872,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DragStateChanged","","`text /** * Called when the user begins or ends dragging the thumb. */`",872,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",873,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",873,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadRetargetableRequest` to one of its base interfaces.",873,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",873,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RetargetDeliveryTo","","`text /** * Called to retarget delivery of OnDataAvailable to another thread. Should * only be called before AsyncOpen for nsIWebsocketChannels, or during * OnStartRequest for nsIChannels. * Note: For nsIChannels, OnStartRequest and OnStopRequest will still be * delivered on the main thread. * * @param aNewTarget New event target, e.g. thread or threadpool. * * Note: no return value is given. If the retargeting cannot be handled, * normal delivery to the main thread will continue. As such, listeners * should be ready to deal with OnDataAvailable on either the main thread or * the new target thread. */`",873,null],[11,"GetDeliveryTarget","","`text /** * Returns the event target where OnDataAvailable events will be dispatched. * * This is only valid after OnStartRequest has been called. Any time before * that point, the value may be changed by `retargetDeliveryTo` calls. */`",873,null],[11,"addref","","",874,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",874,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProcess` to one of its base interfaces.",874,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",874,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialises the process with an executable to be run. Call the run method * to run the executable. * @param executable The executable to run. */`",874,null],[11,"Kill","","`text /** * Kills the running process. After exiting the process will either have * been killed or a failure will have been returned. */`",874,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Run","","`text /** * Executes the file this object was initialized with * @param blocking Whether to wait until the process terminates before returning or not. * @param args An array of arguments to pass to the process in the * native character set. * @param count The length of the args array. */`",874,null],[11,"RunAsync","","`text /** * Executes the file this object was initialized with optionally calling * an observer after the process has finished running. * @param args An array of arguments to pass to the process in the * native character set. * @param count The length of the args array. * @param observer An observer to notify when the process has completed. It * will receive this process instance as the subject and * \"process-finished\" or \"process-failed\" as the topic. The * observer will be notified on the main thread. * @param holdWeak Whether to use a weak reference to hold the observer. */`",874,null],[11,"Runw","","`text /** * Executes the file this object was initialized with * @param blocking Whether to wait until the process terminates before returning or not. * @param args An array of arguments to pass to the process in UTF-16 * @param count The length of the args array. */`",874,null],[11,"RunwAsync","","`text /** * Executes the file this object was initialized with optionally calling * an observer after the process has finished running. * @param args An array of arguments to pass to the process in UTF-16 * @param count The length of the args array. * @param observer An observer to notify when the process has completed. It * will receive this process instance as the subject and * \"process-finished\" or \"process-failed\" as the topic. The * observer will be notified on the main thread. * @param holdWeak Whether to use a weak reference to hold the observer. */`",874,null],[11,"GetStartHidden","","`text /** * When set to true the process will not open a new window when started and * will run hidden from the user. This currently affects only the Windows * platform. */`",874,null],[11,"SetStartHidden","","`text /** * When set to true the process will not open a new window when started and * will run hidden from the user. This currently affects only the Windows * platform. */`",874,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetNoShell","","`text /** * When set to true the process will be launched directly without using the * shell. This currently affects only the Windows platform. */`",874,null],[11,"SetNoShell","","`text /** * When set to true the process will be launched directly without using the * shell. This currently affects only the Windows platform. */`",874,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPid","","`text /** * The process identifier of the currently running process. This will only * be available after the process has started and may not be available on * some platforms. */`",874,null],[11,"GetExitValue","","`text /** * The exit value of the process. This is only valid after the process has * exited. */`",874,null],[11,"GetIsRunning","","`text /** * Returns whether the process is currently running or not. */`",874,null],[11,"addref","","",875,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",875,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAddonInterposition` to one of its base interfaces.",875,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",875,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",876,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",876,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageStatementCallback` to one of its base interfaces.",876,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",876,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_FINISHED","","`text /** * Called when the statement has finished executing. This function will only * be called once for any given asynchronous statement. * * @param aReason * Indicates if the statement is no longer executing because it either * finished (REASON_FINISHED), was canceled (REASON_CANCELED), or * a fatal error occurred (REASON_ERROR). */`",876,null],[18,"REASON_CANCELED","","",876,null],[18,"REASON_ERROR","","",876,null],[11,"HandleResult","","`text /** * Called when some result is obtained from the database. This function can * be called more than once with a different storageIResultSet each time for * any given asynchronous statement. * * @param aResultSet * The result set containing the data from the database. */`",876,null],[11,"HandleError","","`text /** * Called when some error occurs while executing the statement. This function * may be called more than once with a different storageIError each time for * any given asynchronous statement. * * @param aError * An object containing information about the error. */`",876,null],[11,"HandleCompletion","","`void handleCompletion (in unsigned short aReason);`",876,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",877,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",877,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetworkProperties` to one of its base interfaces.",877,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",877,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsWifi","","`readonly attribute boolean isWifi;`",877,null],[11,"GetDhcpGateway","","`readonly attribute unsigned long dhcpGateway;`",877,null],[11,"addref","","",878,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",878,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationServiceCallback` to one of its base interfaces.",878,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",878,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifySuccess","","`void notifySuccess (in DOMString url);`",878,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"NotifyError","","`void notifyError (in nsresult error);`",878,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",879,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",879,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationService` to one of its base interfaces.",879,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",879,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ROLE_CONTROLLER","","",879,null],[18,"ROLE_RECEIVER","","",879,null],[18,"CLOSED_REASON_ERROR","","",879,null],[18,"CLOSED_REASON_CLOSED","","",879,null],[18,"CLOSED_REASON_WENTAWAY","","",879,null],[11,"SendSessionMessage","","`void sendSessionMessage (in DOMString sessionId, in uint8_t role, in DOMString data);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SendSessionBinaryMsg","","`void sendSessionBinaryMsg (in DOMString sessionId, in uint8_t role, in ACString data);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SendSessionBlob","","`void sendSessionBlob (in DOMString sessionId, in uint8_t role, in nsIDOMBlob blob);`",879,null],[11,"CloseSession","","`void closeSession (in DOMString sessionId, in uint8_t role, in uint8_t closedReason);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"TerminateSession","","`void terminateSession (in DOMString sessionId, in uint8_t role);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"RegisterSessionListener","","`void registerSessionListener (in DOMString sessionId, in uint8_t role, in nsIPresentationSessionListener listener);`",879,null],[11,"UnregisterSessionListener","","`void unregisterSessionListener (in DOMString sessionId, in uint8_t role);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"RegisterRespondingListener","","`void registerRespondingListener (in unsigned long long windowId, in nsIPresentationRespondingListener listener);`",879,null],[11,"UnregisterRespondingListener","","`void unregisterRespondingListener (in unsigned long long windowId);`",879,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"NotifyReceiverReady","","`void notifyReceiverReady (in DOMString sessionId, in unsigned long long windowId, in boolean isLoading, in nsIPresentationTransportBuilderConstructor constructor);`",879,null],[11,"NotifyTransportClosed","","`void NotifyTransportClosed (in DOMString sessionId, in uint8_t role, in nsresult reason);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"UntrackSessionInfo","","`void untrackSessionInfo (in DOMString sessionId, in uint8_t role);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"GetWindowIdBySessionId","","`unsigned long long getWindowIdBySessionId (in DOMString sessionId, in uint8_t role);`",879,null],[11,"UpdateWindowIdBySessionId","","`void updateWindowIdBySessionId (in DOMString sessionId, in uint8_t role, in unsigned long long windowId);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"BuildTransport","","`void buildTransport (in DOMString sessionId, in uint8_t role);`",879,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",880,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",880,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertNotificationImageListener` to one of its base interfaces.",880,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",880,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnImageReady","","`text /** * Called when the image finishes loading. * * @param aUserData An opaque parameter passed to |loadImage|. * @param aRequest The image request. */`",880,null],[11,"OnImageMissing","","`text /** * Called if the alert doesn't have an image, or if the image request times * out or fails. * * @param aUserData An opaque parameter passed to |loadImage|. */`",880,null],[11,"addref","","",881,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",881,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertNotification` to one of its base interfaces.",881,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",881,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** Initializes an alert notification. */`",881,null],[11,"GetName","","`text /** * The name of the notification. On Android, the name is hashed and used as * a notification ID. Notifications will replace previous notifications with * the same name. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImageURL","","`text /** * A URL identifying the image to put in the alert. The OS X backend limits * the amount of time it will wait for the image to load to six seconds. After * that time, the alert will show without an image. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** The title for the alert. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetText","","`text /** The contents of the alert. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTextClickable","","`text /** * Controls the click behavior. If true, the alert listener will be notified * when the user clicks on the alert. */`",881,null],[11,"GetCookie","","`text /** * An opaque cookie that will be passed to the alert listener for each * callback. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDir","","`text /** * Bidi override for the title and contents. Valid values are \"auto\", \"ltr\", * or \"rtl\". Ignored if the backend doesn't support localization. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLang","","`text /** * Language of the title and text. Ignored if the backend doesn't support * localization. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetData","","`text /** * A Base64-encoded structured clone buffer containing data associated with * this alert. Only used for web notifications. Chrome callers should use a * cookie instead. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPrincipal","","`text /** * The principal of the page that created the alert. Used for IPC security * checks, and to determine whether the alert is actionable. */`",881,null],[11,"GetURI","","`text /** * The URI of the page that created the alert. |null| if the alert is not * actionable. */`",881,null],[11,"GetInPrivateBrowsing","","`text /** * Controls the image loading behavior. If true, the image request will be * loaded anonymously (without cookies or authorization tokens). */`",881,null],[11,"GetRequireInteraction","","`text /** * Indicates that the notification should remain readily available until * the user activates or dismisses the notification. */`",881,null],[11,"GetActionable","","`text /** * Indicates whether this alert should show the source string and action * buttons. False for system alerts (which can omit the principal), or * expanded, system, and null principals. */`",881,null],[11,"GetSource","","`text /** * The host and port of the originating page, or an empty string if the alert * is not actionable. */`",881,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"LoadImage","","`text /** * Loads the image associated with this alert. * * @param aTimeout The number of milliseconds to wait before cancelling the * image request. If zero, there is no timeout. * @param aListener An |nsIAlertNotificationImageListener| implementation, * notified when the image loads. The listener is kept alive * until the request completes. * @param aUserData An opaque parameter passed to the listener's methods. * Not used by the libnotify backend, but the OS X backend * passes the pending notification. */`",881,null],[11,"addref","","",882,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",882,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertsService` to one of its base interfaces.",882,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",882,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowPersistentNotification","","`void showPersistentNotification (in AString aPersistentData, in nsIAlertNotification aAlert, [optional] in nsIObserver aAlertListener);`",882,null],[11,"ShowAlert","","`void showAlert (in nsIAlertNotification aAlert, [optional] in nsIObserver aAlertListener);`",882,null],[11,"ShowAlertNotification","","`text /** * Initializes and shows an |nsIAlertNotification| with the given parameters. * * @param aAlertListener Used for callbacks. May be null if the caller * doesn't care about callbacks. * @see nsIAlertNotification for descriptions of all other parameters. * @throws NS_ERROR_NOT_AVAILABLE If the notification cannot be displayed. * * The following arguments will be passed to the alertListener's observe() * method: * subject - null * topic - \"alertfinished\" when the alert goes away * \"alertdisablecallback\" when alerts should be disabled for the principal * \"alertsettingscallback\" when alert settings should be opened * \"alertclickcallback\" when the text is clicked * \"alertshow\" when the alert is shown * data - the value of the cookie parameter passed to showAlertNotification. * * @note Depending on current circumstances (if the user's in a fullscreen * application, for instance), the alert might not be displayed at all. * In that case, if an alert listener is passed in it will receive the * \"alertfinished\" notification immediately. */`",882,null],[11,"CloseAlert","","`text /** * Close alerts created by the service. * * @param aName The name of the notification to close. If no name * is provided then only a notification created with * no name (if any) will be closed. */`",882,null],[11,"addref","","",883,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",883,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertsDoNotDisturb` to one of its base interfaces.",883,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",883,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetManualDoNotDisturb","","`text /** * Toggles a manual Do Not Disturb mode for the service to reduce the amount * of disruption that alerts cause the user. * This may mean only displaying them in a notification tray/center or not * displaying them at all. If a system backend already supports a similar * feature controlled by the user, enabling this may not have any impact on * code to show an alert. e.g. on OS X, the system will take care not * disrupting a user if we simply create a notification like usual. */`",883,null],[11,"SetManualDoNotDisturb","","`text /** * Toggles a manual Do Not Disturb mode for the service to reduce the amount * of disruption that alerts cause the user. * This may mean only displaying them in a notification tray/center or not * displaying them at all. If a system backend already supports a similar * feature controlled by the user, enabling this may not have any impact on * code to show an alert. e.g. on OS X, the system will take care not * disrupting a user if we simply create a notification like usual. */`",883,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",884,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",884,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertsIconData` to one of its base interfaces.",884,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",884,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowAlertWithIconData","","`text /** * Shows an alert with an icon. Web notifications use the favicon of the * page that created the alert. If the favicon is not in the Places database, * |aIconSize| will be zero. */`",884,null],[11,"addref","","",885,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",885,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAlertsIconURI` to one of its base interfaces.",885,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",885,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowAlertWithIconURI","","`text /** * Shows an alert with an icon URI. Web notifications use |moz-anno:| * URIs to reference favicons from Places. If the page doesn't have a * favicon, |aIconURI| will be |null|. */`",885,null],[11,"addref","","",886,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",886,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserChrome3` to one of its base interfaces.",886,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",886,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebbrowserchrome2"}}],[11,"OnBeforeLinkTraversal","","`text /** * Determines the appropriate target for a link. * * @param originalTarget * The original link target. * @param linkURI * Link destination URI. * @param aDOMNode * Link DOM node. * @param isAppTab * Whether or not the link is in an app tab. * @returns A new link target, if appropriate. * Otherwise returns originalTarget. */`",886,null],[11,"ShouldLoadURI","","`text /** * Determines whether a load should continue. * * @param aDocShell * The docshell performing the load. * @param aURI * The URI being loaded. * @param aReferrer * The referrer of the load. * @param aHasPostData * True if the load which is being asked about has associated post data * which would be discarded if the load was redirected across process * boundaries. * @param aTriggeringPrincipal * The principal that initiated the load of aURI. */`",886,null],[11,"ShouldLoadURIInThisProcess","","`bool shouldLoadURIInThisProcess (in nsIURI aURI);`",886,null],[11,"ReloadInFreshProcess","","`text /** * Attempts to load the currently loaded page into a fresh process to increase * available memory. * * @param aDocShell * The docshell performing the load. */`",886,null],[11,"StartPrerenderingDocument","","`text /** * Tell the browser to start prerendering the given document. This prerendering * _must_ be for the toplevel document. * * @param aHref The URI to begin prerendering * @param aReferrer The URI of the document requesting the prerender. * @param aTriggeringPrincipal The Principal that initiated to load aHref */`",886,null],[11,"ShouldSwitchToPrerenderedDocument","","`text /** * Check if there's a prerendered document which matches given URI / * referrer, and try to switch to the prerendered document immediately if * there is. * * @param aHref * The URI which is being loaded. * @param aReferrer * The referrer for the current load. * @param aSuccess * (Optional) a runnable which will be run if the swap is successful. * @param aFailure * (Optional) a runnable which will be run if the swap is not * successful. Note it's not invoked if the function returns false. * * @return True if there is a matched prerendered document to swap with, * false otherwise. */`",886,null],[11,"addref","","",887,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",887,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowMediator` to one of its base interfaces.",887,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",887,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"zLevelTop","","",887,null],[18,"zLevelBottom","","",887,null],[18,"zLevelBelow","","",887,null],[11,"GetEnumerator","","`text /** Return an enumerator which iterates over all windows of type aWindowType * from the oldest window to the youngest. * @param aWindowType the returned enumerator will enumerate only * windows of this type. (\"type\" is the * |windowtype| attribute of the XML <window> element.) * If null, all windows will be enumerated. * @return an enumerator of nsIDOMWindows. Note that windows close * asynchronously in many cases, so windows returned from this * enumerator can have .closed set to true. Caveat enumerator! */`",887,null],[11,"GetXULWindowEnumerator","","`text /** Identical to getEnumerator except: * @return an enumerator of nsIXULWindows */`",887,null],[11,"GetZOrderDOMWindowEnumerator","","`text /** Return an enumerator which iterates over all windows of type aWindowType * in their z (front-to-back) order. Note this interface makes * no requirement that a window couldn't be revisited if windows * are re-ordered while z-order enumerators are active. * @param aWindowType the returned enumerator will enumerate only * windows of this type. (\"type\" is the * |windowtype| attribute of the XML <window> element.) * If null, all windows will be enumerated. * @param aFrontToBack if true, the enumerator enumerates windows in order * from front to back. back to front if false. * @return an enumerator of nsIDOMWindows */`",887,null],[11,"GetZOrderXULWindowEnumerator","","`text /** Identical to getZOrderDOMWindowEnumerator except: * @return an enumerator of nsIXULWindows */`",887,null],[11,"GetMostRecentWindow","","`text /** This is a shortcut for simply fetching the first window in * front to back order. * @param aWindowType return the topmost window of this type. * (\"type\" is the |windowtype| attribute of * the XML <window> element.) * If null, return the topmost window of any type. * @return the topmost window */`",887,null],[11,"GetOuterWindowWithId","","`text /** * Return the outer window with the given ID, if any. Can return null. */`",887,null],[11,"GetCurrentInnerWindowWithId","","`text /** * Return the inner window with the given current window ID, if any. * Can return null if no inner window with the ID exists or if it's not * a current inner anymore. */`",887,null],[11,"RegisterWindow","","`text /** Add the window to the list of known windows. Listeners (see * addListener) will be notified through their onOpenWindow method. * @param aWindow the window to add */`",887,null],[11,"UnregisterWindow","","`text /** Remove the window from the list of known windows. Listeners (see * addListener) will be be notified through their onCloseWindow method. * @param aWindow the window to remove */`",887,null],[11,"UpdateWindowTimeStamp","","`text /** Call this method when a window gains focus. It's a primitive means of * determining the most recent window. It's no longer necessary and it * really should be removed. * @param aWindow the window which has gained focus */`",887,null],[11,"CalculateZPosition","","`text /** A window wants to be moved in z-order. Calculate whether and how * it should be constrained. Note this method is advisory only: * it changes nothing either in WindowMediator's internal state * or with the window. * Note it compares the nsIXULWindow to nsIWidgets. A pure interface * would use all nsIXULWindows. But we expect this to be called from * callbacks originating in native window code. They are expected to * hand us comparison values which are pulled from general storage * in the native widget, and may not correspond to an nsIWidget at all. * For that reason this interface requires only objects one step * removed from the native window (nsIWidgets), and its implementation * must be very understanding of what may be completely invalid * pointers in those parameters. * * @param inWindow the window in question * @param inPosition requested position * values: zLevelTop: topmost window. zLevelBottom: bottom. * zLevelBelow: below ioBelow. (the value of ioBelow will * be ignored for zLevelTop and Bottom.) * @param inBelow if inPosition==zLevelBelow, the window * below which inWindow wants to be placed. Otherwise this * variable is ignored. * @param outPosition constrained position, values like inPosition. * @param outBelow if outPosition==zLevelBelow, the window * below which inWindow should be placed. Otherwise this * this value will be null. * @return PR_TRUE if the position returned is different from * the position given. */`",887,null],[11,"SetZPosition","","`text /** A window has been positioned behind another. Inform WindowMediator * @param inWindow the window in question * @param inPosition new position. values: * zLevelTop: topmost window. * zLevelBottom: bottom. * zLevelBelow: below inBelow. (inBelow is ignored * for other values of inPosition.) * @param inBelow the window inWindow is behind, if zLevelBelow */`",887,null],[11,"GetZLevel","","`text /** Return the window's Z level (as defined in nsIXULWindow). * @param aWindow the window in question * @return aWindow's z level */`",887,null],[11,"SetZLevel","","`text /** Set the window's Z level (as defined in nsIXULWindow). The implementation * will reposition the window as necessary to match its new Z level. * The implementation will assume a window's Z level to be * nsIXULWindow::normalZ until it has been informed of a different level. * @param aWindow the window in question * @param aZLevel the window's new Z level */`",887,null],[11,"AddListener","","`text /** Register a listener for window status changes. * keeps strong ref? (to be decided) * @param aListener the listener to register */`",887,null],[11,"RemoveListener","","`text /** Unregister a listener of window status changes. * @param aListener the listener to unregister */`",887,null],[11,"addref","","",888,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",888,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowMediator_44` to one of its base interfaces.",888,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",888,{"inputs":[{"name":"self"}],"output":{"name":"nsiwindowmediator"}}],[11,"GetMostRecentNonPBWindow","","`text /** * Same as getMostRecentWindow, but ignores private browsing * windows. */`",888,null],[11,"addref","","",889,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",889,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptLoaderObserver` to one of its base interfaces.",889,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",889,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ScriptAvailable","","`text /** * The script is available for evaluation. For inline scripts, this * method will be called synchronously. For externally loaded scripts, * this method will be called when the load completes. * * @param aResult A result code representing the result of loading * a script. If this is a failure code, script evaluation * will not occur. * @param aElement The element being processed. * @param aIsInline Is this an inline classic script (as opposed to an * externally loaded classic script or module script)? * @param aURI What is the URI of the script (the document URI if * it is inline). * @param aLineNo At what line does the script appear (generally 1 * if it is a loaded script). */`",889,null],[11,"ScriptEvaluated","","`text /** * The script has been evaluated. * * @param aResult A result code representing the success or failure of * the script evaluation. * @param aElement The element being processed. * @param aIsInline Is this an inline script or externally loaded? */`",889,null],[11,"addref","","",890,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",890,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICaptivePortalServiceCallback` to one of its base interfaces.",890,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",890,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * Invoke callbacks after captive portal detection finished. */`",890,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",891,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",891,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICaptivePortalService` to one of its base interfaces.",891,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",891,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNKNOWN","","",891,null],[18,"NOT_CAPTIVE","","",891,null],[18,"UNLOCKED_PORTAL","","",891,null],[18,"LOCKED_PORTAL","","",891,null],[11,"RecheckCaptivePortal","","`text /** * Called from XPCOM to trigger a captive portal recheck. * A network request will only be performed if no other checks are currently * ongoing. * Will not do anything if called in the content process. */`",891,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetState","","`text /** * Returns the state of the captive portal. */`",891,null],[11,"GetLastChecked","","`text /** * Returns the time difference between NOW and the last time a request was * completed in milliseconds. */`",891,null],[11,"addref","","",892,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",892,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMStyleSheet` to one of its base interfaces.",892,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",892,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * The nsIDOMStyleSheet interface is a datatype for a style sheet in * the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",892,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDisabled","","`attribute boolean disabled;`",892,null],[11,"SetDisabled","","`attribute boolean disabled;`",892,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOwnerNode","","`readonly attribute nsIDOMNode ownerNode;`",892,null],[11,"GetParentStyleSheet","","`readonly attribute nsIDOMStyleSheet parentStyleSheet;`",892,null],[11,"GetHref","","`readonly attribute DOMString href;`",892,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`readonly attribute DOMString title;`",892,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMedia","","`readonly attribute nsIDOMMediaList media;`",892,null],[11,"addref","","",893,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",893,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMElement` to one of its base interfaces.",893,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",893,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"GetTagName","","`text /** * The nsIDOMElement interface represents an element in an HTML or * XML document. * * For more information on this interface please see * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html#interface-element */`",893,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAttributes","","`readonly attribute nsIDOMMozNamedAttrMap attributes;`",893,null],[11,"GetAttribute","","`DOMString getAttribute (in DOMString name);`",893,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAttribute","","`void setAttribute (in DOMString name, in DOMString value);`",893,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"HasAttribute","","`boolean hasAttribute (in DOMString name);`",893,null],[11,"GetAttributeNode","","`nsIDOMAttr getAttributeNode (in DOMString name);`",893,null],[11,"GetAttributeNodeNS","","`nsIDOMAttr getAttributeNodeNS (in DOMString namespaceURI, in DOMString localName);`",893,null],[11,"addref","","",894,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",894,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputStreamTee` to one of its base interfaces.",894,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",894,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"GetSource","","`attribute nsIInputStream source;`",894,null],[11,"SetSource","","`attribute nsIInputStream source;`",894,null],[11,"GetSink","","`attribute nsIOutputStream sink;`",894,null],[11,"SetSink","","`attribute nsIOutputStream sink;`",894,null],[11,"GetEventTarget","","`text /** * If |eventTarget| is set, copying to sink is done asynchronously using * the event-target (e.g. a thread). If |eventTarget| is not set, copying * to sink happens synchronously while reading from the source. */`",894,null],[11,"SetEventTarget","","`text /** * If |eventTarget| is set, copying to sink is done asynchronously using * the event-target (e.g. a thread). If |eventTarget| is not set, copying * to sink happens synchronously while reading from the source. */`",894,null],[11,"addref","","",895,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",895,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHTransaction` to one of its base interfaces.",895,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",895,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSHEntry","","`text /** * The nsISHEntry for the current transaction */`",895,null],[11,"SetSHEntry","","`text /** * The nsISHEntry for the current transaction */`",895,null],[11,"GetPrev","","`text /** * The parent of this transaction */`",895,null],[11,"SetPrev","","`text /** * The parent of this transaction */`",895,null],[11,"GetNext","","`text /** * The legitimate child of this transaction */`",895,null],[11,"SetNext","","`text /** * The legitimate child of this transaction */`",895,null],[11,"GetPersist","","`text /** * Specifies if this transaction should persist. If not it will be replaced * by new additions to the list. */`",895,null],[11,"SetPersist","","`text /** * Specifies if this transaction should persist. If not it will be replaced * by new additions to the list. */`",895,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Create","","`text /** * Create a transaction with parent and History Entry */`",895,null],[11,"addref","","",896,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",896,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFrameLoader` to one of its base interfaces.",896,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",896,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EVENT_MODE_NORMAL_DISPATCH","","`text /** * The default event mode automatically forwards the events * handled in EventStateManager::HandleCrossProcessEvent to * the child content process when these events are targeted to * the remote browser element. * * Used primarly for input events (mouse, keyboard) */`",896,null],[18,"EVENT_MODE_DONT_FORWARD_TO_CHILD","","`text /** * With this event mode, it's the application's responsability to * convert and forward events to the content process */`",896,null],[11,"GetDocShell","","`text /** * Get the docshell from the frame loader. */`",896,null],[11,"GetTabParent","","`text /** * Get this frame loader's TabParent, if it has a remote frame. Otherwise, * returns null. */`",896,null],[11,"GetLoadContext","","`text /** * Get an nsILoadContext for the top-level docshell. For remote * frames, a shim is returned that contains private browsing and app * information. */`",896,null],[11,"LoadFrame","","`text /** * Start loading the frame. This method figures out what to load * from the owner content in the frame loader. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"LoadURI","","`text /** * Loads the specified URI in this frame. Behaves identically to loadFrame, * except that this method allows specifying the URI to load. */`",896,null],[11,"SetIsPrerendered","","`text /** * Puts the frameloader in prerendering mode. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MakePrerenderedLoaderActive","","`text /** * Make the prerendered frameloader being active (and clear isPrerendered flag). */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AppendPartialSHistoryAndSwap","","`text /** * Append partial session history from another frame loader. * * @return A promise which will be resolved when the navigation is complete. */`",896,null],[11,"RequestGroupedHistoryNavigation","","`text /** * If grouped session history is applied, use this function to navigate to * an entry of session history object of another frameloader. * * @return A promise which will be resolved when the navigation is complete. */`",896,null],[11,"Destroy","","`text /** * Destroy the frame loader and everything inside it. This will * clear the weak owner content reference. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDepthTooGreat","","`text /** * Find out whether the loader's frame is at too great a depth in * the frame tree. This can be used to decide what operations may * or may not be allowed on the loader's docshell. */`",896,null],[11,"ActivateRemoteFrame","","`text /** * Activate remote frame. * Throws an exception with non-remote frames. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DeactivateRemoteFrame","","`text /** * Deactivate remote frame. * Throws an exception with non-remote frames. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SendCrossProcessMouseEvent","","`text /** * @see nsIDOMWindowUtils sendMouseEvent. */`",896,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"c_float"},{"name":"c_float"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ActivateFrameEvent","","`text /** * Activate event forwarding from client (remote frame) to parent. */`",896,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMessageManager","","`readonly attribute nsIMessageSender messageManager;`",896,null],[11,"SendCrossProcessKeyEvent","","`text /** * @see nsIDOMWindowUtils sendKeyEvent. */`",896,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RequestNotifyAfterRemotePaint","","`text /** * Request that the next time a remote layer transaction has been * received by the Compositor, a MozAfterRemoteFrame event be sent * to the window. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RequestFrameLoaderClose","","`text /** * Close the window through the ownerElement. */`",896,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Print","","`text /** * Print the current document. * * @param aOuterWindowID the ID of the outer window to print * @param aPrintSettings optional print settings to use; printSilent can be * set to prevent prompting. * @param aProgressListener optional print progress listener. */`",896,null],[11,"EnsureGroupedSHistory","","`text /** * Ensure that the current nsIFrameLoader has a GroupedSHistory. */`",896,null],[11,"GetEventMode","","`attribute unsigned long eventMode;`",896,null],[11,"SetEventMode","","`attribute unsigned long eventMode;`",896,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetClipSubdocument","","`text /** * If false, then the subdocument is not clipped to its CSS viewport, and the * subdocument's viewport scrollbar(s) are not rendered. * Defaults to true. */`",896,null],[11,"SetClipSubdocument","","`text /** * If false, then the subdocument is not clipped to its CSS viewport, and the * subdocument's viewport scrollbar(s) are not rendered. * Defaults to true. */`",896,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetClampScrollPosition","","`text /** * If false, then the subdocument's scroll coordinates will not be clamped * to their scroll boundaries. * Defaults to true. */`",896,null],[11,"SetClampScrollPosition","","`text /** * If false, then the subdocument's scroll coordinates will not be clamped * to their scroll boundaries. * Defaults to true. */`",896,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOwnerElement","","`text /** * The element which owns this frame loader. * * For example, if this is a frame loader for an <iframe>, this attribute * returns the iframe element. */`",896,null],[11,"GetChildID","","`text /** * Cached childID of the ContentParent owning the TabParent in this frame * loader. This can be used to obtain the childID after the TabParent died. */`",896,null],[11,"GetOwnerIsMozBrowserFrame","","`text /** * Find out whether the owner content really is a mozbrowser. <xul:browser> * is not considered to be a mozbrowser frame. */`",896,null],[11,"GetLazyWidth","","`text /** * The last known width of the frame. Reading this property will not trigger * a reflow, and therefore may not reflect the current state of things. It * should only be used in asynchronous APIs where values are not guaranteed * to be up-to-date when received. */`",896,null],[11,"GetLazyHeight","","`text /** * The last known height of the frame. Reading this property will not trigger * a reflow, and therefore may not reflect the current state of things. It * should only be used in asynchronous APIs where values are not guaranteed * to be up-to-date when received. */`",896,null],[11,"GetPartialSHistory","","`text /** * The partial session history. */`",896,null],[11,"GetGroupedSHistory","","`text /** * The grouped session history composed of multiple session history objects * across root docshells. */`",896,null],[11,"GetIsDead","","`text /** * Is `true` if the frameloader is dead (destroy has been called on it) */`",896,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",897,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",897,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFrameLoaderOwner` to one of its base interfaces.",897,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",897,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFrameLoaderXPCOM","","`text /** * The frame loader owned by this nsIFrameLoaderOwner */`",897,null],[11,"SetIsPrerendered","","`text /** * Puts the FrameLoaderOwner in prerendering mode. */`",897,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InternalSetFrameLoader","","`text /** * This method is used internally by SwapFrameLoaders to set the frame loader * on the target nsFrameLoader. * * Avoid using this method outside of that context, and instead prefer using * SwapFrameLoaders. */`",897,null],[11,"addref","","",898,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",898,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMWindowUtils` to one of its base interfaces.",898,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",898,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MODIFIER_ALT","","`text /** * Following modifiers are for sent*Event() except sendNative*Event(). * NOTE: MODIFIER_ALT, MODIFIER_CONTROL, MODIFIER_SHIFT and MODIFIER_META * are must be same values as nsIDOMNSEvent::*_MASK for backward * compatibility. */`",898,null],[18,"MODIFIER_CONTROL","","",898,null],[18,"MODIFIER_SHIFT","","",898,null],[18,"MODIFIER_META","","",898,null],[18,"MODIFIER_ALTGRAPH","","",898,null],[18,"MODIFIER_CAPSLOCK","","",898,null],[18,"MODIFIER_FN","","",898,null],[18,"MODIFIER_FNLOCK","","",898,null],[18,"MODIFIER_NUMLOCK","","",898,null],[18,"MODIFIER_SCROLLLOCK","","",898,null],[18,"MODIFIER_SYMBOL","","",898,null],[18,"MODIFIER_SYMBOLLOCK","","",898,null],[18,"MODIFIER_OS","","",898,null],[18,"WHEEL_EVENT_CAUSED_BY_NO_LINE_OR_PAGE_DELTA_DEVICE","","`text /** Synthesize a wheel event for a window. The event types supported is only * wheel. * * Events are sent in coordinates offset by aX and aY from the window. * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * @param aX x offset in CSS pixels * @param aY y offset in CSS pixels * @param aDeltaX deltaX value. * @param aDeltaY deltaY value. * @param aDeltaZ deltaZ value. * @param aDeltaMode deltaMode value which must be one of * nsIDOMWheelEvent::DOM_DELTA_*. * @param aModifiers modifiers pressed, using constants defined as * MODIFIER_* * @param aLineOrPageDeltaX If you set this value non-zero for * DOM_DELTA_PIXEL event, EventStateManager will * dispatch NS_MOUSE_SCROLL event for horizontal * scroll. * @param aLineOrPageDeltaY If you set this value non-zero for * DOM_DELTA_PIXEL event, EventStateManager will * dispatch NS_MOUSE_SCROLL event for vertical * scroll. * @param aOptions Set following flags. */`",898,null],[18,"WHEEL_EVENT_CAUSED_BY_MOMENTUM","","",898,null],[18,"WHEEL_EVENT_CUSTOMIZED_BY_USER_PREFS","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_ZERO","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_POSITIVE","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_X_NEGATIVE","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_ZERO","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_POSITIVE","","",898,null],[18,"WHEEL_EVENT_EXPECTED_OVERFLOW_DELTA_Y_NEGATIVE","","",898,null],[18,"KEY_FLAG_PREVENT_DEFAULT","","`text /** * Synthesize a key event to the window. The event types supported are: * keydown, keyup, keypress * * Key events generally end up being sent to the focused node. * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * @param aType event type * @param aKeyCode key code * @param aCharCode character code * @param aModifiers modifiers pressed, using constants defined as MODIFIER_* * @param aAdditionalFlags special flags for the key event, see KEY_FLAG_*. * * @return false if the event had preventDefault() called on it, * true otherwise. In other words, true if and only if the * default action was taken. */`",898,null],[18,"KEY_FLAG_NOT_SYNTHESIZED_FOR_TESTS","","",898,null],[18,"KEY_FLAG_LOCATION_STANDARD","","",898,null],[18,"KEY_FLAG_LOCATION_LEFT","","",898,null],[18,"KEY_FLAG_LOCATION_RIGHT","","",898,null],[18,"KEY_FLAG_LOCATION_NUMPAD","","",898,null],[18,"MOUSESCROLL_PREFER_WIDGET_AT_POINT","","`text /** * The values for sendNativeMouseScrollEvent's aAdditionalFlags. */ /** * If MOUSESCROLL_PREFER_WIDGET_AT_POINT is set, widget will dispatch * the event to a widget which is under the cursor. Otherwise, dispatch to * a default target on the platform. E.g., on Windows, it's focused window. */`",898,null],[18,"MOUSESCROLL_SCROLL_LINES","","`text /** * Interpret the scroll delta values as lines rather than pixels. */`",898,null],[18,"MOUSESCROLL_WIN_SCROLL_LPARAM_NOT_NULL","","`text /** * The platform specific values of aAdditionalFlags. Must be over 0x00010000. */ /** * If MOUSESCROLL_WIN_SCROLL_LPARAM_NOT_NULL is set and aNativeMessage is * WM_VSCROLL or WM_HSCROLL, widget will set the window handle to the lParam * instead of NULL. */`",898,null],[18,"TOUCH_HOVER","","`text /** * Touch states for sendNativeTouchPoint. These values match * nsIWidget's TouchPointerState. */`",898,null],[18,"TOUCH_CONTACT","","",898,null],[18,"TOUCH_REMOVE","","",898,null],[18,"TOUCH_CANCEL","","",898,null],[18,"FLUSH_NONE","","",898,null],[18,"FLUSH_STYLE","","",898,null],[18,"FLUSH_LAYOUT","","",898,null],[18,"FLUSH_DISPLAY","","",898,null],[18,"IME_STATUS_DISABLED","","`text /** * WARNING: These values must be same as nsIWidget's values. */ /** * DISABLED means users cannot use IME completely. * Note that this state is *not* same as |ime-mode: disabled;|. */`",898,null],[18,"IME_STATUS_ENABLED","","`text /** * ENABLED means users can use all functions of IME. This state is same as * |ime-mode: normal;|. */`",898,null],[18,"IME_STATUS_PASSWORD","","`text /** * PASSWORD means users cannot use most functions of IME. But on GTK2, * users can use \"Simple IM\" which only supports dead key inputting. * The behavior is same as the behavior of the native password field. * This state is same as |ime-mode: disabled;|. */`",898,null],[18,"IME_STATUS_PLUGIN","","`text /** * PLUGIN means a plug-in has focus. At this time we should not touch to * controlling the IME state. */`",898,null],[18,"QUERY_CONTENT_FLAG_USE_NATIVE_LINE_BREAK","","`text /** * If sendQueryContentEvent()'s aAdditionalFlags argument is * QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK, plain text generated from content * is created with \"\\n\". * Otherwise, platform dependent. E.g., on Windows, \"\\r\\n\" is used. * aOffset and aLength are offset and length in/of the plain text content. * This flag also affects the result values such as offset, length and string. */`",898,null],[18,"QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_SPELLCHECK","","`text /** * sendQueryContentEvent()'s aAdditionalFlags may have one of following * flags when aType is QUERY_SELECTED_TEXT. If one of them is set, * the result is the first range of the selection type. See also * nsISelectionController::SELECTION_*. */`",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_IME_RAWINPUT","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_IME_SELECTEDRAWTEXT","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_IME_CONVERTEDTEXT","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_IME_SELECTEDCONVERTEDTEXT","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_ACCESSIBILITY","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_FIND","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_URLSECONDARY","","",898,null],[18,"QUERY_CONTENT_FLAG_SELECTION_URLSTRIKEOUT","","",898,null],[18,"QUERY_CONTENT_FLAG_OFFSET_RELATIVE_TO_INSERTION_POINT","","`text /** * One of sendQueryContentEvent()'s aAdditionalFlags. If this is specified, * aOffset is relative to start of selection or composition. * Note that this is supported only when QUERY_CONTENT_FLAG_USE_XP_LINE_BREAK * is not specified for now. */`",898,null],[18,"QUERY_SELECTED_TEXT","","`text /** * QUERY_SELECTED_TEXT queries the first selection range's information. * * @param aOffset Not used. * @param aLength Not used. * @param aX Not used. * @param aY Not used. * * @return offset, reversed and text properties of the result are available. */`",898,null],[18,"QUERY_TEXT_CONTENT","","`text /** * QUERY_TEXT_CONTENT queries the text at the specified range. * * @param aOffset The first character's offset. 0 is the first character. * @param aLength The length of getting text. If the aLength is too long, * the result text is shorter than this value. * @param aX Not used. * @param aY Not used. * * @return text property of the result is available. */`",898,null],[18,"QUERY_CARET_RECT","","`text /** * QUERY_CARET_RECT queries the (collapsed) caret rect of the offset. * If the actual caret is there at the specified offset, this returns the * actual caret rect. Otherwise, this guesses the caret rect from the * metrics of the text. * * @param aOffset The caret offset. 0 is the left side of the first * caracter in LTR text. * @param aLength Not used. * @param aX Not used. * @param aY Not used. * * @return left, top, width and height properties of the result are available. * The left and the top properties are offset in the client area of * the DOM window. */`",898,null],[18,"QUERY_TEXT_RECT","","`text /** * QUERY_TEXT_RECT queries the specified text's rect. * * @param aOffset The first character's offset. 0 is the first character. * @param aLength The length of getting text. If the aLength is too long, * the extra length is ignored. * @param aX Not used. * @param aY Not used. * * @return left, top, width and height properties of the result are available. * The left and the top properties are offset in the client area of * the DOM window. */`",898,null],[18,"QUERY_EDITOR_RECT","","`text /** * QUERY_TEXT_RECT queries the focused editor's rect. * * @param aOffset Not used. * @param aLength Not used. * @param aX Not used. * @param aY Not used. * * @return left, top, width and height properties of the result are available. */`",898,null],[18,"QUERY_CHARACTER_AT_POINT","","`text /** * QUERY_CHARACTER_AT_POINT queries the character information at the * specified point. The point is offset in the window. * NOTE: If there are some panels at the point, this method send the query * event to the panel's widget automatically. * * @param aOffset Not used. * @param aLength Not used. * @param aX X offset in the widget. * @param aY Y offset in the widget. * * @return offset, notFound, left, top, width and height properties of the * result are available. */`",898,null],[18,"QUERY_TEXT_RECT_ARRAY","","`text /** * QUERY_TEXT_RECT_ARRAY queries the rects per character * * @param aOffset The first character's offset. 0 is the first character. * @param aLength The length of getting text. If the aLength is too long, * the extra length is ignored. * @param aX Not used. * @param aY Not used. */`",898,null],[18,"SELECTION_SET_FLAG_USE_NATIVE_LINE_BREAK","","`text /** * If sendQueryContentEvent()'s aAdditionalFlags argument is * SELECTION_SET_FLAG_USE_NATIVE_LINE_BREAK, aOffset and aLength are offset * and length in/of plain text generated from content is created with \"\\n\". * Otherwise, platform dependent. E.g., on Windows, \"\\r\\n\" is used. */`",898,null],[18,"SELECTION_SET_FLAG_USE_XP_LINE_BREAK","","",898,null],[18,"SELECTION_SET_FLAG_REVERSE","","`text /** * If SELECTION_SET_FLAG_REVERSE is set, the selection is set from * |aOffset + aLength| to |aOffset|. Otherwise, it's set from |aOffset| to * |aOffset + aLength|. */`",898,null],[18,"SELECT_CHARACTER","","",898,null],[18,"SELECT_CLUSTER","","",898,null],[18,"SELECT_WORD","","",898,null],[18,"SELECT_LINE","","",898,null],[18,"SELECT_BEGINLINE","","",898,null],[18,"SELECT_ENDLINE","","",898,null],[18,"SELECT_PARAGRAPH","","",898,null],[18,"SELECT_WORDNOSPACE","","",898,null],[18,"AUDIO_INPUT","","`text /** * Returns all the audio input/output devices. */`",898,null],[18,"AUDIO_OUTPUT","","",898,null],[18,"AGENT_SHEET","","",898,null],[18,"USER_SHEET","","",898,null],[18,"AUTHOR_SHEET","","",898,null],[18,"DEFAULT_MOUSE_POINTER_ID","","",898,null],[18,"DEFAULT_PEN_POINTER_ID","","",898,null],[18,"DEFAULT_TOUCH_POINTER_ID","","",898,null],[18,"MOUSE_BUTTON_LEFT_BUTTON","","",898,null],[18,"MOUSE_BUTTON_MIDDLE_BUTTON","","",898,null],[18,"MOUSE_BUTTON_RIGHT_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_NO_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_LEFT_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_RIGHT_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_MIDDLE_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_4TH_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_5TH_BUTTON","","",898,null],[18,"MOUSE_BUTTONS_NOT_SPECIFIED","","",898,null],[18,"DIRECTION_LTR","","",898,null],[18,"DIRECTION_RTL","","",898,null],[18,"DIRECTION_NOT_SET","","",898,null],[11,"GetImageAnimationMode","","`text /** * Image animation mode of the window. When this attribute's value * is changed, the implementation should set all images in the window * to the given value. That is, when set to kDontAnimMode, all images * will stop animating. The attribute's value must be one of the * animationMode values from imgIContainer. * @note Images may individually override the window's setting after * the window's mode is set. Therefore images given different modes * since the last setting of the window's mode may behave * out of line with the window's overall mode. * @note The attribute's value is the window's overall mode. It may * for example continue to report kDontAnimMode after all images * have subsequently been individually animated. * @note Only images immediately in this window are affected; * this is not recursive to subwindows. * @see imgIContainer */`",898,null],[11,"SetImageAnimationMode","","`text /** * Image animation mode of the window. When this attribute's value * is changed, the implementation should set all images in the window * to the given value. That is, when set to kDontAnimMode, all images * will stop animating. The attribute's value must be one of the * animationMode values from imgIContainer. * @note Images may individually override the window's setting after * the window's mode is set. Therefore images given different modes * since the last setting of the window's mode may behave * out of line with the window's overall mode. * @note The attribute's value is the window's overall mode. It may * for example continue to report kDontAnimMode after all images * have subsequently been individually animated. * @note Only images immediately in this window are affected; * this is not recursive to subwindows. * @see imgIContainer */`",898,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetDocCharsetIsForced","","`text /** * Whether the charset of the window's current document has been forced by * the user. * Cannot be accessed from unprivileged context (not content-accessible) */`",898,null],[11,"GetPhysicalMillimeterInCSSPixels","","`text /** * Return the conversion of a physical millimeter in CSS pixels. */`",898,null],[11,"GetDocumentMetadata","","`text /** * Function to get metadata associated with the window's current document * @param aName the name of the metadata. This should be all lowercase. * @return the value of the metadata, or the empty string if it's not set * * Will throw a DOM security error if called without chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Redraw","","`text /** * Force an immediate redraw of this window. The parameter specifies * the number of times to redraw, and the return value is the length, * in milliseconds, that the redraws took. If aCount is not specified * or is 0, it is taken to be 1. */`",898,null],[11,"UpdateLayerTree","","`text /** * Force a synchronous layer transaction for this window if necessary. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetLastTransactionId","","`text /** * Get the last used layer transaction id for this window's refresh driver. */`",898,null],[11,"GetViewportInfo","","`text /** * Information retrieved from the <meta name=\"viewport\"> tag. * See nsContentUtils::GetViewportInfo for more information. */`",898,null],[11,"GetContentViewerSize","","`text /** * Information about the window size in device pixels. */`",898,null],[11,"SetDisplayPortForElement","","`text /** * For any scrollable element, this allows you to override the * visible region and draw more than what is visible, which is * useful for asynchronous drawing. The \"displayport\" will be * <xPx, yPx, widthPx, heightPx> in units of CSS pixels, * regardless of the size of the enclosing container. This * will *not* trigger reflow. * * For the root scroll area, pass in the root document element. * For scrollable elements, pass in the container element (for * instance, the element with overflow: scroll). * * <x, y> is relative to the top-left of what would normally be * the visible area of the element. This means that the pixels * rendered to the displayport take scrolling into account, * for example. * * It's legal to set a displayport that extends beyond the overflow * area in any direction (left/right/top/bottom). * * It's also legal to set a displayport that extends beyond the * area's bounds. No pixels are rendered outside the area bounds. * * The caller of this method must have chrome privileges. * * Calling this will always force a recomposite, so it should be * avoided if at all possible. Client code should do checks before * calling this so that duplicate sets are not made with the same * displayport. * * aPriority is recorded along with the displayport rectangle. If this * method is called with a lower priority than the current priority, the * call is ignored. */`",898,null],[11,"SetDisplayPortMarginsForElement","","`text /** * An alternate way to represent a displayport rect as a set of margins and a * base rect to apply those margins to. A consumer of pixels may ask for as * many extra pixels as it would like in each direction. Layout then sets * the base rect to the \"visible rect\" of the element, which is just the * subrect of the element that is drawn (it does not take in account content * covering the element). * * If both a displayport rect and displayport margins with corresponding base * rect are set with the same priority then the margins will take precendence. * * Specifying an alignment value will ensure that after the base rect has * been expanded by the displayport margins, it will be further expanded so * that each edge is located at a multiple of the \"alignment\" value. * * Note that both the margin values and alignment are treated as values in * ScreenPixels. Refer to layout/base/Units.h for a description of this unit. * The base rect values are in app units. */`",898,null],[11,"SetDisplayPortBaseForElement","","`void setDisplayPortBaseForElement (in int32_t aX, in int32_t aY, in int32_t aWidth, in int32_t aHeight, in nsIDOMElement aElement);`",898,null],[11,"SetResolution","","`text /** * Get/set the resolution at which rescalable web content is drawn. * * Setting a new resolution does *not* trigger reflow. This API is * entirely separate from textZoom and fullZoom; a resolution scale * can be applied together with both textZoom and fullZoom. * * The effect of this API is for gfx code to allocate more or fewer * pixels for rescalable content by a factor of |resolution| in * both dimensions. The scale at which the content is displayed does * not change; if that is desired, use setResolutionAndScaleTo() instead. * * The caller of this method must have chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetResolution","","`void getResolution (out float aResolution);`",898,null],[11,"SetResolutionAndScaleTo","","`text /** * Similar to setResolution(), but also scales the content by the * amount of the resolution, so that it is displayed at a * correspondingly larger or smaller size, without the need for * the caller to set an additional transform. * * This can be used to implement a non-reflowing scale-zoom, e.g. * for pinch-zoom on mobile platforms. * * The caller of this method must have chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"SetRestoreResolution","","`text /** * Set a resolution on the presShell which is the \"restored\" from history. * The display dimensions are compared to their current values and used * to scale the resolution value if necessary, e.g. if the device was * rotated between saving and restoring of the session data. * This resolution should be used when painting for the first time. Calling * this too late may have no effect. */`",898,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsResolutionSet","","`text /** * Whether the resolution has been set by the user. * This gives a way to check whether the provided resolution is the default * value or restored from a previous session. * * Can only be accessed with chrome privileges. */`",898,null],[11,"GetIsFirstPaint","","`text /** * Whether the next paint should be flagged as the first paint for a document. * This gives a way to track the next paint that occurs after the flag is * set. The flag gets cleared after the next paint. * * Can only be accessed with chrome privileges. */`",898,null],[11,"SetIsFirstPaint","","`text /** * Whether the next paint should be flagged as the first paint for a document. * This gives a way to track the next paint that occurs after the flag is * set. The flag gets cleared after the next paint. * * Can only be accessed with chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPresShellId","","`uint32_t getPresShellId ();`",898,null],[11,"SendTouchEvent","","`text /** Synthesize a touch event. The event types supported are: * touchstart, touchend, touchmove, and touchcancel * * Events are sent in coordinates offset by aX and aY from the window. * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * The event is dispatched via the toplevel window, so it could go to any * window under the toplevel window, in some cases it could never reach this * window at all. * * @param aType event type * @param xs array of offsets in CSS pixels for each touch to be sent * @param ys array of offsets in CSS pixels for each touch to be sent * @param rxs array of radii in CSS pixels for each touch to be sent * @param rys array of radii in CSS pixels for each touch to be sent * @param rotationAngles array of angles in degrees for each touch to be sent * @param forces array of forces (floats from 0 to 1) for each touch to be sent * @param count number of touches in this set * @param aModifiers modifiers pressed, using constants defined as MODIFIER_* * @param aIgnoreRootScrollFrame whether the event should ignore viewport bounds * during dispatch * * returns true if the page called prevent default on this touch event */`",898,null],[11,"SendTouchEventToWindow","","`text /** The same as sendTouchEvent but ensures that the event is dispatched to * this DOM window or one of its children. */`",898,null],[11,"SendWheelEvent","","`void sendWheelEvent (in float aX, in float aY, in double aDeltaX, in double aDeltaY, in double aDeltaZ, in unsigned long aDeltaMode, in long aModifiers, in long aLineOrPageDeltaX, in long aLineOrPageDeltaY, in unsigned long aOptions);`",898,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"c_float"},{"name":"c_double"},{"name":"c_double"},{"name":"c_double"},{"name":"uint32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SendKeyEvent","","`boolean sendKeyEvent (in AString aType, in long aKeyCode, in long aCharCode, in long aModifiers, [optional] in unsigned long aAdditionalFlags);`",898,null],[11,"SendNativeKeyEvent","","`text /** * See nsIWidget::SynthesizeNativeKeyEvent * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * When you use this for tests, use the constants defined in NativeKeyCodes.js * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified with a \"keyevent\" * topic. */`",898,null],[11,"SendNativeMouseEvent","","`text /** * See nsIWidget::SynthesizeNativeMouseEvent * * Will be called on the widget that contains aElement. * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified with a \"mouseevent\" * topic. */`",898,null],[11,"SendNativeMouseMove","","`text /** * See nsIWidget::SynthesizeNativeMouseMove and sendNativeMouseEvent */`",898,null],[11,"SuppressAnimation","","`text /** * Suppress animations that are applied to a window by OS when * resizing, moving, changing size mode, ... */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SendNativeMouseScrollEvent","","`text /** * See nsIWidget::SynthesizeNativeMouseScrollEvent * * Will be called on the widget that contains aElement. * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified with a * \"mousescrollevent\" topic. * * @param aNativeMessage * On Windows: WM_MOUSEWHEEL (0x020A), WM_MOUSEHWHEEL(0x020E), * WM_VSCROLL (0x0115) or WM_HSCROLL (0x114). */`",898,null],[11,"SendNativeTouchPoint","","`text /** * Create a new or update an existing touch point on the digitizer. * To trigger os level gestures, individual touch points should * transition through a complete set of touch states which should be * sent as individual calls. For example: * tap - msg1:TOUCH_CONTACT, msg2:TOUCH_REMOVE * drag - msg1-n:TOUCH_CONTACT (moving), msgn+1:TOUCH_REMOVE * hover drag - msg1-n:TOUCH_HOVER (moving), msgn+1:TOUCH_REMOVE * * Widget support: Windows 8.0+, Winrt/Win32. Other widgets will throw. * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified with a \"touchpoint\" * topic. * * @param aPointerId The touch point id to create or update. * @param aTouchState one or more of the touch states listed above * @param aScreenX, aScreenY screen coords of this event * @param aPressure 0.0 -> 1.0 float val indicating pressure * @param aOrientation 0 -> 359 degree value indicating the * orientation of the pointer. Use 90 for normal taps. */`",898,null],[11,"SendNativeTouchTap","","`text /** * Simulates native touch based taps on the input digitizer. Events * triggered by this call are injected at the os level. Events do not * bypass widget level input processing and as such can be used to * test widget event logic and async pan-zoom controller functionality. * Cannot be accessed from an unprivileged context. * * Long taps (based on the aLongTap parameter) will be completed * asynchrnously after the call returns. Long tap delay is based on * the ui.click_hold_context_menus.delay pref or 1500 msec if pref * is not set. * * Widget support: Windows 8.0+, Winrt/Win32. Other widgets will * throw. * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified, with a \"touchtap\" * topic. * * @param aScreenX, aScreenY screen coords of this event * @param aLongTap true if the tap should be long, false for a short * tap. */`",898,null],[11,"ClearNativeTouchSequence","","`text /** * Cancel any existing touch points or long tap delays. Calling this is safe * even if you're sure there aren't any pointers recorded. You should call * this when tests shut down to reset the digitizer driver. Not doing so can * leave the digitizer in an undetermined state which can screw up subsequent * tests and native input. * * NOTE: The synthesized native event will be fired asynchronously, and upon * completion the observer, if provided, will be notified with a \"cleartouch\" * topic. */`",898,null],[11,"ActivateNativeMenuItemAt","","`text /** * See nsIWidget::ActivateNativeMenuItemAt * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ForceUpdateNativeMenuAt","","`text /** * See nsIWidget::ForceUpdateNativeMenuAt * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSelectionAsPlaintext","","`text /** * Returns the current selection as plaintext. Note that the result may be * different from the result of sendQueryContentEvent(QUERY_SELECTED_TEXT). * This result is computed by native API with transferable data. In other * words, when the OS treats the selection as plaintext, it treats current * selection as this result. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Focus","","`text /** * Focus the element aElement. The element should be in the same document * that the window is displaying. Pass null to blur the element, if any, * that currently has focus, and focus the document. * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * @param aElement the element to focus * * Do not use this method. Just use element.focus if available or * nsIFocusManager::SetFocus instead. * */`",898,null],[11,"GarbageCollect","","`text /** * Force a garbage collection followed by a cycle collection. * * Will throw a DOM security error if called without chrome privileges in * non-debug builds. Available to all callers in debug builds. * * @param aListener listener that receives information about the CC graph * (see @mozilla.org/cycle-collector-logger;1 for a logger * component) */`",898,null],[11,"CycleCollect","","`text /** * Force a cycle collection without garbage collection. * * Will throw a DOM security error if called without chrome privileges in * non-debug builds. Available to all callers in debug builds. * * @param aListener listener that receives information about the CC graph * (see @mozilla.org/cycle-collector-logger;1 for a logger * component) */`",898,null],[11,"RunNextCollectorTimer","","`text /** * Trigger whichever GC or CC timer is currently active and waiting to fire. * Don't do this too much for initiating heavy actions, like the start of a IGC. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SendSimpleGestureEvent","","`text /** Synthesize a simple gesture event for a window. The event types * supported are: MozSwipeGestureMayStart, MozSwipeGestureStart, * MozSwipeGestureUpdate, MozSwipeGestureEnd, MozSwipeGesture, * MozMagnifyGestureStart, MozMagnifyGestureUpdate, MozMagnifyGesture, * MozRotateGestureStart, MozRotateGestureUpdate, MozRotateGesture, * MozPressTapGesture, MozTapGesture, and MozEdgeUIGesture. * * Cannot be accessed from unprivileged context (not * content-accessible) Will throw a DOM security error if called * without chrome privileges. * * @param aType event type * @param aX x offset in CSS pixels * @param aY y offset in CSS pixels * @param aDirection direction, using constants defined in nsIDOMSimpleGestureEvent * @param aDelta amount of magnification or rotation for magnify and rotation events * @param aModifiers modifiers pressed, using constants defined in nsIDOMNSEvent * @param aClickCount For tap gestures, the number of taps. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"c_float"},{"name":"c_float"},{"name":"uint32_t"},{"name":"c_double"},{"name":"int32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ElementFromPoint","","`text /** * Retrieve the element at point aX, aY in the window's document. * * @param aIgnoreRootScrollFrame whether or not to ignore the root scroll * frame when retrieving the element. If false, this method returns * null for coordinates outside of the viewport. * @param aFlushLayout flushes layout if true. Otherwise, no flush occurs. */`",898,null],[11,"NodesFromRect","","`text /** * Retrieve all nodes that intersect a rect in the window's document. * * @param aX x reference for the rectangle in CSS pixels * @param aY y reference for the rectangle in CSS pixels * @param aTopSize How much to expand up the rectangle * @param aRightSize How much to expand right the rectangle * @param aBottomSize How much to expand down the rectangle * @param aLeftSize How much to expand left the rectangle * @param aIgnoreRootScrollFrame whether or not to ignore the root scroll * frame when retrieving the element. If false, this method returns * null for coordinates outside of the viewport. * @param aFlushLayout flushes layout if true. Otherwise, no flush occurs. */`",898,null],[11,"GetTranslationNodes","","`text /** * Get a list of nodes that have meaningful textual content to * be translated. The implementation of this algorithm is in flux * as we experiment and refine which approach works best. * * This method requires chrome privileges. */`",898,null],[11,"CompareCanvases","","`text /** * Compare the two canvases, returning the number of differing pixels and * the maximum difference in a channel. This will throw an error if * the dimensions of the two canvases are different. * * This method requires chrome privileges. */`",898,null],[11,"GetIsMozAfterPaintPending","","`text /** * Returns true if a MozAfterPaint event has been queued but not yet * fired. */`",898,null],[11,"SuppressEventHandling","","`text /** * Suppresses/unsuppresses user initiated event handling in window's document * and subdocuments. * * @throw NS_ERROR_DOM_SECURITY_ERR if called without chrome privileges and * NS_ERROR_FAILURE if window doesn't have a document. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DisableNonTestMouseEvents","","`text /** * Disable or enable non synthetic test mouse events on *all* windows. * * Cannot be accessed from unprivileged context (not content-accessible). * Will throw a DOM security error if called without chrome privileges. * * @param aDisable If true, disable all non synthetic test mouse events * on all windows. Otherwise, enable them. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetScrollXY","","`text /** * Returns the scroll position of the window's currently loaded document. * * @param aFlushLayout flushes layout if true. Otherwise, no flush occurs. * @see nsIDOMWindow::scrollX/Y */`",898,null],[11,"GetScrollXYFloat","","`text /** * Returns the scroll position of the window's currently loaded document. * * @param aFlushLayout flushes layout if true. Otherwise, no flush occurs. * @see nsIDOMWindow::scrollX/Y */`",898,null],[11,"GetScrollbarSize","","`text /** * Returns the scrollbar width of the window's scroll frame. * * @param aFlushLayout flushes layout if true. Otherwise, no flush occurs. */`",898,null],[11,"GetBoundsWithoutFlushing","","`text /** * Returns the given element's bounds without flushing pending layout changes. */`",898,null],[11,"NeedsFlush","","`text /** * Returns true if a flush of the given type is needed. */`",898,null],[11,"GetRootBounds","","`text /** * Returns the bounds of the window's currently loaded document. This will * generally be (0, 0, pageWidth, pageHeight) but in some cases (e.g. RTL * documents) may have a negative left value. */`",898,null],[11,"GetIMEIsOpen","","`text /** * Get IME open state. TRUE means 'Open', otherwise, 'Close'. * This property works only when IMEEnabled is IME_STATUS_ENABLED. */`",898,null],[11,"GetIMEStatus","","`text /** * Get IME status, see above IME_STATUS_* definitions. */`",898,null],[11,"GetScreenPixelsPerCSSPixel","","`text /** * Get the number of screen pixels per CSS pixel. */`",898,null],[11,"GetFullZoom","","`text /** * Get the current zoom factor. * This is _approximately_ the same as nsIContentViewer.fullZoom, * but takes into account Gecko's quantization of the zoom factor, which is * implemented by adjusting the (integer) number of appUnits per devPixel. */`",898,null],[11,"DispatchDOMEventViaPresShell","","`text /** * Dispatches aEvent via the nsIPresShell object of the window's document. * The event is dispatched to aTarget, which should be an object * which implements nsIContent interface (#element, #text, etc). * * Cannot be accessed from unprivileged context (not * content-accessible) Will throw a DOM security error if called * without chrome privileges. * * @note Event handlers won't get aEvent as parameter, but a similar event. * Also, aEvent should not be reused. */`",898,null],[11,"DispatchEventToChromeOnly","","`text /** * Sets WidgetEvent::mFlags::mOnlyChromeDispatch to true to ensure that * the event is propagated only to chrome. * Event's .target property will be aTarget. * Returns the same value as what EventTarget.dispatchEvent does. */`",898,null],[11,"SendContentCommandEvent","","`text /** * Generate a content command event. * * Cannot be accessed from unprivileged context (not content-accessible) * Will throw a DOM security error if called without chrome privileges. * * @param aType Type of command content event to send. Can be one of \"cut\", * \"copy\", \"paste\", \"delete\", \"undo\", \"redo\", or \"pasteTransferable\". * @param aTransferable an instance of nsITransferable when aType is * \"pasteTransferable\" */`",898,null],[11,"SendQueryContentEvent","","`text /** * Synthesize a query content event. Note that the result value returned here * is in LayoutDevice pixels rather than CSS pixels. * * @param aType One of the following const values. And see also each comment * for the other parameters and the result. * @param aAdditionalFlags See the description of QUERY_CONTENT_FLAG_*. */`",898,null],[11,"RemoteFrameFullscreenChanged","","`text /** * Called when the remote child frame has changed its fullscreen state, * when entering fullscreen, and when the origin which is fullscreen changes. * aFrameElement is the iframe element which contains the child-process * fullscreen document. */`",898,null],[11,"RemoteFrameFullscreenReverted","","`text /** * Called when the remote frame has popped all fullscreen elements off its * stack, so that the operation can complete on the parent side. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HandleFullscreenRequests","","`text /** * Calls the document to handle any pending fullscreen requests. * It is called when the parent document has entered fullscreen, and * we want to put the current document into fullscreen as well. * The return value indicates whether there is any fullscreen request * handled by this call. */`",898,null],[11,"ExitFullscreen","","`text /** * Called when the child frame has fully exit fullscreen, so that the parent * process can also fully exit. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SendSelectionSetEvent","","`text /** * Synthesize a selection set event to the window. * * This sets the selection as the specified information. * * @param aOffset The caret offset of the selection start. * @param aLength The length of the selection. If this is too long, the * extra length is ignored. * @param aAdditionalFlags See the description of SELECTION_SET_FLAG_*. * @return True, if succeeded. Otherwise, false. */`",898,null],[11,"SelectAtPoint","","`text /** * Select content at a client point based on a selection behavior if the * underlying content is selectable. Selection will accumulate with any * existing selection, callers should clear selection prior if needed. * May fire selection changed events. Calls nsFrame's SelectByTypeAtPoint. * * @param aX, aY The selection point in client coordinates. * @param aSelectType The selection behavior requested. * @return True if a selection occured, false otherwise. * @throw NS_ERROR_DOM_SECURITY_ERR, NS_ERROR_UNEXPECTED for utils * issues, and NS_ERROR_INVALID_ARG for coordinates that are outside * this window. */`",898,null],[11,"GetVisitedDependentComputedStyle","","`text /** * Perform the equivalent of: * window.getComputedStyle(aElement, aPseudoElement). * getPropertyValue(aPropertyName) * except that, when the link whose presence in history is allowed to * influence aElement's style is visited, get the value the property * would have if allowed all properties to change as a result of * :visited selectors (except for cases where getComputedStyle uses * data from the frame). * * This is easier to implement than adding our property restrictions * to this API, and is sufficient for the present testing * requirements (which are essentially testing 'color'). */`",898,null],[11,"GetOuterWindowID","","`text /** * Get the id of the outer window of this window. This will never throw. */`",898,null],[11,"GetCurrentInnerWindowID","","`text /** * Get the id of the current inner window of this window. If there * is no current inner window, throws NS_ERROR_NOT_AVAILABLE. */`",898,null],[11,"EnterModalState","","`text /** * Put the window into a state where scripts are frozen and events * suppressed, for use when the window has launched a modal prompt. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"LeaveModalState","","`text /** * Resume normal window state, where scripts can run and events are * delivered. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsInModalState","","`text /** * Is the window is in a modal state? [See enterModalState()] */`",898,null],[11,"SetDesktopModeViewport","","`text /** * Request set internal desktopMode flag change. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SuspendTimeouts","","`text /** * Suspend/resume timeouts on this window and its descendant windows. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumeTimeouts","","`void resumeTimeouts ();`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetLayerManagerType","","`text /** * What type of layer manager the widget associated with this window is * using. \"Basic\" is unaccelerated; other types are accelerated. Throws an * error if there is no widget associated with this window. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLayerManagerRemote","","`text /** * True if the layer manager for the widget associated with this window is * forwarding layers to a remote compositor, false otherwise. Throws an * error if there is no widget associated with this window. */`",898,null],[11,"GetUsingAdvancedLayers","","`text /** * True if advanced layers is enabled on this window, false otherwise. */`",898,null],[11,"GetIsWebRenderRequested","","`text /** * True if webrender was requested by the user (via pref or env-var), false * otherwise. Note that this doesn't represent whether or not webrender is * *actually* enabled, just whether or not it was requested. */`",898,null],[11,"GetCurrentAudioBackend","","`text /** * Returns the current audio backend as a free-form string. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCurrentMaxAudioChannels","","`text /** * Returns the max channel counts of the current audio device. */`",898,null],[11,"GetCurrentPreferredChannelLayout","","`text /** * Returns the preferred channel layout of the current audio device. */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCurrentPreferredSampleRate","","`text /** * Returns the preferred sample rate of the current audio device. */`",898,null],[11,"AudioDevices","","`nsIArray audioDevices (in unsigned short aSide);`",898,null],[11,"StartFrameTimeRecording","","`text /** * Record (and return) frame-intervals for frames which were presented * between calling StartFrameTimeRecording and StopFrameTimeRecording. * * - Uses a cyclic buffer and serves concurrent consumers, so if Stop is called too late * (elements were overwritten since Start), result is considered invalid and hence empty. * - Buffer is capable of holding 10 seconds @ 60fps (or more if frames were less frequent). * Can be changed (up to 1 hour) via pref: toolkit.framesRecording.bufferSize. * - Note: the first frame-interval may be longer than expected because last frame * might have been presented some time before calling StartFrameTimeRecording. */ /** * Returns a handle which represents current recording start position. */`",898,null],[11,"StopFrameTimeRecording","","`text /** * Returns number of recorded frames since startIndex was issued, * and allocates+populates 2 arraye with the recorded data. * - Allocation is infallible. Should be released even if size is 0. */`",898,null],[11,"GetDisplayDPI","","`text /** * The DPI of the display */`",898,null],[11,"GetContainerElement","","`text /** * Return this window's frame element. * Ignores all chrome/content or mozbrowser boundaries. */`",898,null],[11,"AdvanceTimeAndRefresh","","`text /** * advanceTimeAndRefresh allows the caller to take over the refresh * driver timing for a window. A call to advanceTimeAndRefresh does * three things: * (1) It marks the refresh driver for this presentation so that it * no longer refreshes on its own, but is instead driven entirely * by the caller (except for the refresh that happens when a * document comes out of the bfcache). * (2) It advances the refresh driver's current refresh time by the * argument given. Negative advances are permitted. * (3) It does a refresh (i.e., notifies refresh observers) at that * new time. * * Note that this affects other connected docshells of the same type * in the same docshell tree, such as parent frames. * * When callers have completed their use of advanceTimeAndRefresh, * they must call restoreNormalRefresh. */`",898,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"RestoreNormalRefresh","","`text /** * Undoes the effects of advanceTimeAndRefresh. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsTestControllingRefreshes","","`text /** * Reports whether the current state is test-controlled refreshes * (see advanceTimeAndRefresh and restoreNormalRefresh above). */`",898,null],[11,"GetAsyncPanZoomEnabled","","`text /** * Reports whether APZ is enabled on the widget that this window is attached * to. If there is no widget it will report the default platform value of * whether or not APZ is enabled. */`",898,null],[11,"SetAsyncScrollOffset","","`text /** * Set async scroll offset on an element. The next composite will render * with that offset if async scrolling is enabled, and then the offset * will be removed. Only call this while test-controlled refreshes is enabled. */`",898,null],[11,"SetAsyncZoom","","`text /** * Set async zoom value. aRootElement should be the document element of our * document. The next composite will render with that zoom added to any * existing zoom if async scrolling is enabled, and then the zoom will be * removed. Only call this while test-controlled refreshes is enabled. */`",898,null],[11,"FlushApzRepaints","","`text /** * Do a round-trip to the compositor to ensure any pending APZ repaint requests * get flushed to the main thread. If the function returns true, the flush was * triggered and an \"apz-repaints-flushed\" notification will be dispatched via * the observer service once the flush is complete. If the function returns * false, an error occurred or a flush is not needed, and the notification * will not fire. This is intended to be used by test code only! */`",898,null],[11,"ZoomToFocusedInput","","`text /** * Ask APZ to pan and zoom to the focused input element. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ComputeAnimationDistance","","`text /** * Method for testing StyleAnimationValue::ComputeDistance. * * Returns the distance between the two values as reported by * StyleAnimationValue::ComputeDistance for the given element and * property. */`",898,null],[11,"GetAnimationTypeForLonghand","","`text /** * Returns the animation type of the specified property (e.g. 'coord'). * * @param aProperty A longhand CSS property (e.g. 'background-color'). */`",898,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUnanimatedComputedStyle","","`text /** * Returns the computed style for the specified property of given pseudo type * on the given element after removing styles from declarative animations. * @param aElement - A target element * @param aPseudoElement - A pseudo type (e.g. '::before' or null) * @param aProperty - A longhand CSS property (e.g. 'background-color') * @param aFlushType - FLUSH_NONE if any pending styles should not happen, * FLUSH_STYLE to flush pending styles. */`",898,null],[11,"GetFocusedInputType","","`text /** * Get the type of the currently focused html input, if any. */`",898,null],[11,"GetViewId","","`text /** * Find the view ID for a given element. This is the reverse of * findElementWithViewId(). */`",898,null],[11,"LeafLayersPartitionWindow","","`text /** * Checks the layer tree for this window and returns true * if all layers have transforms that are translations by integers, * no leaf layers overlap, and the union of the leaf layers is exactly * the bounds of the window. Always returns true in non-DEBUG builds. */`",898,null],[11,"CheckAndClearPaintedState","","`text /** * Check if any PaintedLayer painting has been done for this element, * clears the painted flags if they have. */`",898,null],[11,"CheckAndClearDisplayListState","","`text /** * Check if any display list building has been done for this element, * clears the display list flags if they have. */`",898,null],[11,"IsPartOfOpaqueLayer","","`text /** * Check whether all display items of the primary frame of aElement have been * assigned to the same single PaintedLayer in the last paint. If that is the * case, returns whether that PaintedLayer is opaque; if it's not the case, an * exception is thrown. */`",898,null],[11,"NumberOfAssignedPaintedLayers","","`text /** * Count the number of different PaintedLayers that the supplied elements have * been assigned to in the last paint. Throws an exception if any of the * elements doesn't have a primary frame, or if that frame's display items are * assigned to any other layers than just a single PaintedLayer per element. */`",898,null],[11,"FlushPendingFileDeletions","","`void flushPendingFileDeletions ();`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPaintingSuppressed","","`text /** * Returns true if painting is suppressed for this window and false * otherwise. */`",898,null],[11,"SetScrollPositionClampingScrollPortSize","","`text /** * Set the scrollport size for the purposes of clamping scroll positions for * the root scroll frame of this document to be (aWidth,aHeight) in CSS pixels. * * The caller of this method must have chrome privileges. */`",898,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"DisableDialogs","","`text /** * These are used to control whether dialogs (alert, prompt, confirm) are * allowed. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnableDialogs","","`void enableDialogs ();`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AreDialogsEnabled","","`bool areDialogsEnabled ();`",898,null],[11,"LoadSheet","","`text /** * Synchronously loads a style sheet from |sheetURI| and adds it to the list * of additional style sheets of the document. * * These additional style sheets are very much like user/agent sheets loaded * with loadAndRegisterSheet. The only difference is that they are applied only * on the document owned by this window. * * Sheets added via this API take effect immediately on the document. */`",898,null],[11,"LoadSheetUsingURIString","","`text /** * Same as the above method but allows passing the URI as a string. */`",898,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"AddSheet","","`text /** * Adds a style sheet to the list of additional style sheets of the document. * * Style sheets can be preloaded with nsIStyleSheetService.preloadSheet. * * Sheets added via this API take effect immediately on the document. */`",898,null],[11,"RemoveSheet","","`text /** * Remove the document style sheet at |sheetURI| from the list of additional * style sheets of the document. The removal takes effect immediately. */`",898,null],[11,"RemoveSheetUsingURIString","","`text /** * Same as the above method but allows passing the URI as a string. */`",898,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsHandlingUserInput","","`text /** * Returns true if a user input is being handled. * * This calls EventStateManager::IsHandlingUserInput(). */`",898,null],[11,"GetMillisSinceLastUserInput","","`text /** * Returns milliseconds elapsed since last user input was started * * This relies on EventStateManager::LatestUserInputStart() */`",898,null],[11,"AllowScriptsToClose","","`text /** * After calling the method, the window for which this DOMWindowUtils * was created can be closed using scripts. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsParentWindowMainWidgetVisible","","`text /** * Is the parent window's main widget visible? If it isn't, we probably * don't want to display any dialogs etc it may request. This corresponds * to the visibility check in nsWindowWatcher::OpenWindowInternal(). * * Will throw a DOM security error if called without chrome privileges or * NS_ERROR_NOT_AVAILABLE in the unlikely event that the parent window's * main widget can't be reached. */`",898,null],[11,"IsNodeDisabledForEvents","","`text /** * In certain cases the event handling of nodes, form controls in practice, * may be disabled. Such cases are for example the existence of disabled * attribute or -moz-user-input: none/disabled. */`",898,null],[11,"GetPaintFlashing","","`text /** * Setting paintFlashing to true will flash newly painted area. */`",898,null],[11,"SetPaintFlashing","","`text /** * Setting paintFlashing to true will flash newly painted area. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetOMTAStyle","","`AString getOMTAStyle (in nsIDOMElement aElement, in AString aProperty, [optional] in AString aPseudoElement);`",898,null],[11,"RequestCompositorProperty","","`text /** * Special function that gets a property syncronously from the last composite * that occured. * * Supported properties: * \"overdraw\": Report a percentage between 0 and 999 indicate how many times * each pixels on the destination window have been touched. */`",898,null],[11,"SetHandlingUserInput","","`text /** * If aHandlingInput is true, this informs the event state manager that * we're handling user input. Otherwise, this is a no-op (as by default * we're not handling user input). * Remember to call destruct() on the return value! * See also nsIDOMWindowUtils::isHandlingUserInput. */`",898,null],[11,"PostRestyleSelfEvent","","`text /** * Posts an eRestyle_Self restyle event for the given element. */`",898,null],[11,"GetMediaSuspend","","`text /** * Used to pause or resume all media in this window. Use-cases are audio * competing, remote media control and to prevent auto-playing media. */`",898,null],[11,"SetMediaSuspend","","`text /** * Used to pause or resume all media in this window. Use-cases are audio * competing, remote media control and to prevent auto-playing media. */`",898,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetAudioMuted","","`text /** * With this it's possible to mute all the MediaElements in this window. * We have audioMuted and audioVolume to preserve the volume across * mute/umute. */`",898,null],[11,"SetAudioMuted","","`text /** * With this it's possible to mute all the MediaElements in this window. * We have audioMuted and audioVolume to preserve the volume across * mute/umute. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAudioVolume","","`text /** * range: greater or equal to 0. The real volume level is affected by the * volume of all ancestor windows. */`",898,null],[11,"SetAudioVolume","","`text /** * range: greater or equal to 0. The real volume level is affected by the * volume of all ancestor windows. */`",898,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"XpconnectArgument","","`text /** * This method doesn't do anything useful. It was solely added for the * purpose of the test for bug 503926. */`",898,null],[11,"AskPermission","","`text /** * Helper for JS components that need to send permission requests with * e10s support properly. */`",898,null],[11,"GetRestyleGeneration","","`text /** * Restyle generation for the current document. * * May throw NS_ERROR_NOT_AVAILABLE. */`",898,null],[11,"GetFramesConstructed","","`text /** * Number of frames constructed (excluding breaking) for the curent * document. * * May throw NS_ERROR_NOT_AVAILABLE. */`",898,null],[11,"GetFramesReflowed","","`text /** * Number of frames reflowed for the curent document. * * May throw NS_ERROR_NOT_AVAILABLE. */`",898,null],[11,"SetChromeMargin","","`text /** * Controls the amount of chrome that should be visible on each side of * the window. Works like the chromemargin xul:window attribute. * This should only be used with non-XUL windows. */`",898,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetServiceWorkersTestingEnabled","","`text /** * Enable some service workers testing features. */`",898,null],[11,"SetServiceWorkersTestingEnabled","","`text /** * Enable some service workers testing features. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"EnterChaosMode","","`void enterChaosMode ();`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"LeaveChaosMode","","`text /** * Decrease the chaos mode activation level. See enterChaosMode(). */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TriggerDeviceReset","","`text /** * Alerts Gecko of a device reset */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HasRuleProcessorUsedByMultipleStyleSets","","`text /** * Returns whether the document's style set's rule processor for the * specified level of the cascade is shared by multiple style sets. * (Used by tests to ensure that certain optimizations do not regress.) * * @param aSheetType One of the nsIStyleSheetService.*_SHEET constants. */`",898,null],[11,"ForceUseCounterFlush","","`void forceUseCounterFlush (in nsIDOMNode aNode);`",898,null],[11,"RespectDisplayPortSuppression","","`text /** * Enable or disable displayport suppression. This is intended to be used by * testing code, to provide more deterministic behaviour over the displayport * suppression during tests. Note that this updates a flag, so whatever value * was last provided is what will be used. */`",898,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ForceReflowInterrupt","","`text /** * Set a flag that forces the next reflow interrupt check to return true. This * can be used by tests to force execution of the interrupted reflow codepaths. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TerminateGPUProcess","","`text /** * Terminate the GPU process. Used for testing GPU process restarts. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetGpuProcessPid","","`text /** * Returns the GPU process pid, or -1 if there is no GPU process. */`",898,null],[11,"IsTimeoutTracking","","`text /** * Returns true if the given timeout ID is in the list of tracking * timeouts. */`",898,null],[11,"AddManuallyManagedState","","`text /** * Adds an EventStates bit to the element. * * The state string must be one of the following: * * (none yet; but for example \"higlighted\" for NS_EVENT_STATE_HIGHLIGHTED) * * The supported state strings are defined in kManuallyManagedStates * in nsDOMWindowUtils.cpp. */`",898,null],[11,"RemoveManuallyManagedState","","`text /** * Removes the specified EventStates bits from the element. * * See above for the strings that can be passed for |state|. */`",898,null],[11,"GetStorageUsage","","`text /** * Returns usage data for a given storage object. * * @param aStorage * The storage object to get usage data for. */`",898,null],[11,"GetDirectionFromText","","`text /** * Returns the directionality of a string using the first-strong character * algorithm defined in http://unicode.org/reports/tr9/#P2. * * @param aString the string to retrieve the direction for. * @return one of DIRECTION_LTR, DIRECTION_RTL or DIRECTION_NOT_SET depending * on the first-strong character found in the string. */`",898,null],[11,"EnsureDirtyRootFrame","","`text /** * Calls FrameNeedsReflow on that root frame so that a layout flush * will be necessary. * * This should only be used for testing. */`",898,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsStyledByServo","","`text /** * Whether the current document is styled by Servo's style engine. * * This calls nsIDocument::IsStyledByServo(). */`",898,null],[11,"AddToStyloBlocklist","","`text /** * Add a domain to the existing stylo blocklist. * * This calls nsLayoutUtils::AddToStyloBlocklist(). */`",898,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"RemoveFromStyloBlocklist","","`text /** * Remove a domain from the existing stylo blocklist. * * This calls nsLayoutUtils::RemoveFromStyloBlocklist(). */`",898,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",899,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",899,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITranslationNodeList` to one of its base interfaces.",899,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",899,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",899,null],[11,"Item","","`nsIDOMNode item (in unsigned long index);`",899,null],[11,"IsTranslationRootAtIndex","","`boolean isTranslationRootAtIndex (in unsigned long index);`",899,null],[11,"addref","","",900,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",900,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJSRAIIHelper` to one of its base interfaces.",900,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",900,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Destruct","","`text /** * JS doesn't do RAII very well. We can use this interface to make remembering * to destruct an object in a finally clause easier. */`",900,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",901,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",901,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthPrompt` to one of its base interfaces.",901,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",901,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SAVE_PASSWORD_NEVER","","",901,null],[18,"SAVE_PASSWORD_FOR_SESSION","","",901,null],[18,"SAVE_PASSWORD_PERMANENTLY","","",901,null],[11,"Prompt","","`text /** * Puts up a text input dialog with OK and Cancel buttons. * Note: prompt uses separate args for the \"in\" and \"out\" values of the * input field, whereas the other functions use a single inout arg. * @param dialogText The title for the dialog. * @param text The text to display in the dialog. * @param passwordRealm The \"realm\" the password belongs to: e.g. * ldap://localhost/dc=test * @param savePassword One of the SAVE_PASSWORD_* options above. * @param defaultText The default text to display in the text input box. * @param result The value entered by the user if OK was * selected. * @return true for OK, false for Cancel */`",901,null],[11,"PromptUsernameAndPassword","","`text /** * Puts up a username/password dialog with OK and Cancel buttons. * Puts up a password dialog with OK and Cancel buttons. * @param dialogText The title for the dialog. * @param text The text to display in the dialog. * @param passwordRealm The \"realm\" the password belongs to: e.g. * ldap://localhost/dc=test * @param savePassword One of the SAVE_PASSWORD_* options above. * @param user The username entered in the dialog. * @param pwd The password entered by the user if OK was * selected. * @return true for OK, false for Cancel */`",901,null],[11,"PromptPassword","","`text /** * Puts up a password dialog with OK and Cancel buttons. * @param dialogText The title for the dialog. * @param text The text to display in the dialog. * @param passwordRealm The \"realm\" the password belongs to: e.g. * ldap://localhost/dc=test. If a username is * specified (http://user@site.com) it will be used * when matching existing logins or saving new ones. * If no username is specified, only password-only * logins will be matched or saved. * Note: if a username is specified, the username * should be escaped. * @param savePassword One of the SAVE_PASSWORD_* options above. * @param pwd The password entered by the user if OK was * selected. * @return true for OK, false for Cancel */`",901,null],[11,"addref","","",902,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",902,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFind` to one of its base interfaces.",902,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",902,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFindBackwards","","`attribute boolean findBackwards;`",902,null],[11,"SetFindBackwards","","`attribute boolean findBackwards;`",902,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCaseSensitive","","`attribute boolean caseSensitive;`",902,null],[11,"SetCaseSensitive","","`attribute boolean caseSensitive;`",902,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEntireWord","","`attribute boolean entireWord;`",902,null],[11,"SetEntireWord","","`attribute boolean entireWord;`",902,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Find","","`text /** * Find some text in the current context. The implementation is * responsible for performing the find and highlighting the text. * * @param aPatText The text to search for. * @param aSearchRange A Range specifying domain of search. * @param aStartPoint A Range specifying search start point. * If not collapsed, we'll start from * end (forward) or start (backward). * @param aEndPoint A Range specifying search end point. * If not collapsed, we'll end at * end (forward) or start (backward). * @retval A range spanning the match that was found (or null). */`",902,null],[11,"addref","","",903,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",903,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULDocument` to one of its base interfaces.",903,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",903,{"inputs":[{"name":"self"}],"output":{"name":"nsidomdocument"}}],[11,"GetPopupNode","","`attribute nsIDOMNode popupNode;`",903,null],[11,"SetPopupNode","","`attribute nsIDOMNode popupNode;`",903,null],[11,"GetPopupRangeParent","","`text /** * These attributes correspond to trustedGetPopupNode().rangeOffset and * rangeParent. They will help you find where in the DOM the popup is * happening. Can be accessed from chrome only, and only during a popup * event. Accessing any other time will be an error. */`",903,null],[11,"GetPopupRangeOffset","","`readonly attribute long popupRangeOffset;`",903,null],[11,"GetTooltipNode","","`attribute nsIDOMNode tooltipNode;`",903,null],[11,"SetTooltipNode","","`attribute nsIDOMNode tooltipNode;`",903,null],[11,"GetCommandDispatcher","","`readonly attribute nsIDOMXULCommandDispatcher commandDispatcher;`",903,null],[11,"GetWidth","","`readonly attribute long width;`",903,null],[11,"GetHeight","","`readonly attribute long height;`",903,null],[11,"GetElementsByAttribute","","`nsIDOMNodeList getElementsByAttribute (in DOMString name, in DOMString value);`",903,null],[11,"GetElementsByAttributeNS","","`nsIDOMNodeList getElementsByAttributeNS (in DOMString namespaceURI, in DOMString name, in DOMString value);`",903,null],[11,"AddBroadcastListenerFor","","`void addBroadcastListenerFor (in nsIDOMElement broadcaster, in nsIDOMElement observer, in DOMString attr);`",903,null],[11,"RemoveBroadcastListenerFor","","`void removeBroadcastListenerFor (in nsIDOMElement broadcaster, in nsIDOMElement observer, in DOMString attr);`",903,null],[11,"Persist","","`void persist (in DOMString id, in DOMString attr);`",903,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBoxObjectFor","","`nsIBoxObject getBoxObjectFor (in nsIDOMElement elt);`",903,null],[11,"LoadOverlay","","`text /** * Loads a XUL overlay and merges it with the current document, notifying an * observer when the merge is complete. * @param url * The URL of the overlay to load and merge * @param observer * An object implementing nsIObserver that will be notified with a * message of topic \"xul-overlay-merged\" when the merge is complete. * The subject parameter of |observe| will QI to a nsIURI - the URI * of the merged overlay. This parameter is optional and may be null. * * NOTICE: In the 2.0 timeframe this API will change such that the * implementation will fire a DOMXULOverlayMerged event upon merge * completion rather than notifying an observer. Do not rely on this * API's behavior _not_ to change because it will! * - Ben Goodger (8/23/2005) */`",903,null],[11,"addref","","",904,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",904,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNSEvent` to one of its base interfaces.",904,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",904,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ALT_MASK","","",904,null],[18,"CONTROL_MASK","","",904,null],[18,"SHIFT_MASK","","",904,null],[18,"META_MASK","","",904,null],[11,"addref","","",905,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",905,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleObjectAttributeChangedEvent` to one of its base interfaces.",905,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",905,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetChangedAttribute","","`text /** * Return the accessible attribute that changed. */`",905,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",906,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",906,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNodeList` to one of its base interfaces.",906,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",906,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Item","","`text /** * The nsIDOMNodeList interface provides the abstraction of an ordered * collection of nodes, without defining or constraining how this collection * is implemented. * The items in the list are accessible via an integral index, starting from 0. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",906,null],[11,"GetLength","","`readonly attribute unsigned long length;`",906,null],[11,"addref","","",907,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",907,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertTreeItem` to one of its base interfaces.",907,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",907,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCert","","`[must_use] readonly attribute nsIX509Cert cert;`",907,null],[11,"GetHostPort","","`[must_use] readonly attribute AString hostPort;`",907,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",908,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",908,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertTree` to one of its base interfaces.",908,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",908,{"inputs":[{"name":"self"}],"output":{"name":"nsitreeview"}}],[11,"LoadCerts","","`[must_use] void loadCerts (in unsigned long type);`",908,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"LoadCertsFromCache","","`[must_use] void loadCertsFromCache (in nsIX509CertList cache, in unsigned long type);`",908,null],[11,"GetCert","","`[must_use] nsIX509Cert getCert (in unsigned long index);`",908,null],[11,"GetTreeItem","","`[must_use] nsICertTreeItem getTreeItem (in unsigned long index);`",908,null],[11,"DeleteEntryObject","","`[must_use] void deleteEntryObject (in unsigned long index);`",908,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",909,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",909,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleImage` to one of its base interfaces.",909,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",909,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetImagePosition","","`text /** * Returns the coordinates of the image. * * @param coordType specifies coordinates origin (for available constants * refer to nsIAccessibleCoordinateType) * @param x the x coordinate * @param y the y coordinate */`",909,null],[11,"GetImageSize","","`text /** * Returns the size of the image. * * @param width the heigth * @param height the width */`",909,null],[11,"addref","","",910,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",910,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownload` to one of its base interfaces.",910,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",910,{"inputs":[{"name":"self"}],"output":{"name":"nsitransfer"}}],[11,"GetTargetFile","","`text /** * The target of a download is always a file on the local file system. */`",910,null],[11,"GetPercentComplete","","`text /** * The percentage of transfer completed. * If the file size is unknown it'll be -1 here. */`",910,null],[11,"GetAmountTransferred","","`text /** * The amount of bytes downloaded so far. */`",910,null],[11,"GetSize","","`text /** * The size of file in bytes. * Unknown size is represented by -1. */`",910,null],[11,"GetSource","","`text /** * The source of the transfer. */`",910,null],[11,"GetTarget","","`text /** * The target of the transfer. */`",910,null],[11,"GetCancelable","","`text /** * Object that can be used to cancel the download. * Will be null after the download is finished. */`",910,null],[11,"GetDisplayName","","`text /** * The user-readable description of the transfer. */`",910,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStartTime","","`text /** * The time a transfer was started. */`",910,null],[11,"GetSpeed","","`text /** * The speed of the transfer in bytes/sec. */`",910,null],[11,"GetMIMEInfo","","`text /** * Optional. If set, it will contain the target's relevant MIME information. * This includes its MIME Type, helper app, and whether that helper should be * executed. */`",910,null],[11,"GetId","","`text /** * The id of the download that is stored in the database - not globally unique. * For example, a private download and a public one might have identical ids. * Can only be safely used for direct database manipulation in the database that * contains this download. Use the guid property instead for safe, database-agnostic * searching and manipulation. * * @deprecated */`",910,null],[11,"GetGuid","","`text /** * The guid of the download that is stored in the database. * Has the form of twelve alphanumeric characters. */`",910,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetState","","`text /** * The state of the download. * @see nsIDownloadManager and nsIXPInstallManagerUI */`",910,null],[11,"GetReferrer","","`text /** * The referrer uri of the download. This is only valid for HTTP downloads, * and can be null. */`",910,null],[11,"GetResumable","","`text /** * Indicates if the download can be resumed after being paused or not. This * is only the case if the download is over HTTP/1.1 or FTP and if the * server supports it. */`",910,null],[11,"GetIsPrivate","","`text /** * Indicates if the download was initiated from a context marked as private, * controlling whether it should be stored in a permanent manner or not. */`",910,null],[11,"Cancel","","`text /** * Cancel this download if it's currently in progress. */`",910,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Pause","","`text /** * Pause this download if it is in progress. * * @throws NS_ERROR_UNEXPECTED if it cannot be paused. */`",910,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Resume","","`text /** * Resume this download if it is paused. * * @throws NS_ERROR_UNEXPECTED if it cannot be resumed or is not paused. */`",910,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Remove","","`text /** * Instruct the download manager to remove this download. Whereas * cancel simply cancels the transfer, but retains information about it, * remove removes all knowledge of it. * * @see nsIDownloadManager.removeDownload for more detail * @throws NS_ERROR_FAILURE if the download is active. */`",910,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Retry","","`text /** * Instruct the download manager to retry this failed download * @throws NS_ERROR_NOT_AVAILABLE if the download is not known. * @throws NS_ERROR_FAILURE if the download is not in the following states: * nsIDownloadManager::DOWNLOAD_CANCELED * nsIDownloadManager::DOWNLOAD_FAILED */`",910,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",911,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",911,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMOfflineResourceList` to one of its base interfaces.",911,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",911,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNCACHED","","`text /** * State of the application cache this object is associated with. */`",911,null],[18,"IDLE","","",911,null],[18,"CHECKING","","",911,null],[18,"DOWNLOADING","","",911,null],[18,"UPDATEREADY","","",911,null],[18,"OBSOLETE","","",911,null],[11,"GetMozItems","","`text /** * Get the list of dynamically-managed entries. */`",911,null],[11,"MozHasItem","","`text /** * Check that an entry exists in the list of dynamically-managed entries. * * @param uri * The resource to check. */`",911,null],[11,"GetMozLength","","`text /** * Get the number of dynamically-managed entries. * @status DEPRECATED * Clients should use the \"items\" attribute. */`",911,null],[11,"MozItem","","`text /** * Get the URI of a dynamically-managed entry. * @status DEPRECATED * Clients should use the \"items\" attribute. */`",911,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"MozAdd","","`text /** * Add an item to the list of dynamically-managed entries. The resource * will be fetched into the application cache. * * @param uri * The resource to add. */`",911,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"MozRemove","","`text /** * Remove an item from the list of dynamically-managed entries. If this * was the last reference to a URI in the application cache, the cache * entry will be removed. * * @param uri * The resource to remove. */`",911,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStatus","","`readonly attribute unsigned short status;`",911,null],[11,"Update","","`text /** * Begin the application update process on the associated application cache. */`",911,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SwapCache","","`text /** * Swap in the newest version of the application cache, or disassociate * from the cache if the cache group is obsolete. */`",911,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",912,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",912,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSImportRule` to one of its base interfaces.",912,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",912,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetHref","","`readonly attribute DOMString href;`",912,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMedia","","`readonly attribute nsIDOMMediaList media;`",912,null],[11,"GetStyleSheet","","`readonly attribute nsIDOMCSSStyleSheet styleSheet;`",912,null],[11,"addref","","",913,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",913,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedElementBase` to one of its base interfaces.",913,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",913,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAttributes","","`text /** * The attributes found on the element. Most interfaces provide convenience * accessors for their standard fields, so this useful only when looking for * an extension. */`",913,null],[11,"SetAttributes","","`text /** * The attributes found on the element. Most interfaces provide convenience * accessors for their standard fields, so this useful only when looking for * an extension. */`",913,null],[11,"GetBaseURI","","`text /** * The baseURI for the Entry or Feed. */`",913,null],[11,"SetBaseURI","","`text /** * The baseURI for the Entry or Feed. */`",913,null],[11,"addref","","",914,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",914,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISupportsPriority` to one of its base interfaces.",914,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",914,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PRIORITY_HIGHEST","","`text /** * Typical priority values. */`",914,null],[18,"PRIORITY_HIGH","","",914,null],[18,"PRIORITY_NORMAL","","",914,null],[18,"PRIORITY_LOW","","",914,null],[18,"PRIORITY_LOWEST","","",914,null],[11,"GetPriority","","`text /** * This attribute may be modified to change the priority of this object. The * implementation of this interface is free to truncate a given priority * value to whatever limits are appropriate. Typically, this attribute is * initialized to PRIORITY_NORMAL, but implementations may choose to assign a * different initial value. */`",914,null],[11,"SetPriority","","`text /** * This attribute may be modified to change the priority of this object. The * implementation of this interface is free to truncate a given priority * value to whatever limits are appropriate. Typically, this attribute is * initialized to PRIORITY_NORMAL, but implementations may choose to assign a * different initial value. */`",914,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"AdjustPriority","","`text /** * This method adjusts the priority attribute by a given delta. It helps * reduce the amount of coding required to increment or decrement the value * of the priority attribute. */`",914,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",915,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",915,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIParserUtils` to one of its base interfaces.",915,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",915,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SanitizerAllowComments","","`text /** * Flag for sanitizer: Allow comment nodes. */`",915,null],[18,"SanitizerAllowStyle","","`text /** * Flag for sanitizer: Allow <style> and style=\"\" (with contents sanitized * in case of -moz-binding). Note! If -moz-binding is absent, properties * that might be XSS risks in other Web engines are preserved! */`",915,null],[18,"SanitizerCidEmbedsOnly","","`text /** * Flag for sanitizer: Only allow cid: URLs for embedded content. * * At present, sanitizing CSS backgrounds, etc., is not supported, so setting * this together with SanitizerAllowStyle doesn't make sense. * * At present, sanitizing CSS syntax in SVG presentational attributes is not * supported, so this option flattens out SVG. */`",915,null],[18,"SanitizerDropNonCSSPresentation","","`text /** * Flag for sanitizer: Drop non-CSS presentational HTML elements and * attributes, such as <font>, <center> and bgcolor=\"\". */`",915,null],[18,"SanitizerDropForms","","`text /** * Flag for sanitizer: Drop forms and form controls (excluding * fieldset/legend). */`",915,null],[18,"SanitizerDropMedia","","`text /** * Flag for sanitizer: Drop <img>, <video>, <audio> and <source> and flatten * out SVG. */`",915,null],[11,"Sanitize","","`text /** * Parses a string into an HTML document, sanitizes the document and * returns the result serialized to a string. * * The sanitizer is designed to protect against XSS when sanitized content * is inserted into a different-origin context without an iframe-equivalent * sandboxing mechanism. * * By default, the sanitizer doesn't try to avoid leaking information that * the content was viewed to third parties. That is, by default, e.g. * <img src> pointing to an HTTP server potentially controlled by a third * party is not removed. To avoid ambient information leakage upon loading * the sanitized content, use the SanitizerInternalEmbedsOnly flag. In that * case, <a href> links (and similar) to other content are preserved, so an * explicit user action (following a link) after the content has been loaded * can still leak information. * * By default, non-dangerous non-CSS presentational HTML elements and * attributes or forms are not removed. To remove these, use * SanitizerDropNonCSSPresentation and/or SanitizerDropForms. * * By default, comments and CSS is removed. To preserve comments, use * SanitizerAllowComments. To preserve <style> and style=\"\", use * SanitizerAllowStyle. -moz-binding is removed from <style> and style=\"\" if * present. In this case, properties that Gecko doesn't recognize can get * removed as a side effect. Note! If -moz-binding is not present, <style> * and style=\"\" and SanitizerAllowStyle is specified, the sanitized content * may still be XSS dangerous if loaded into a non-Gecko Web engine! * * @param src the HTML source to parse (C++ callers are allowed but not * required to use the same string for the return value.) * @param flags sanitization option flags defined above */`",915,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ConvertToPlainText","","`text /** * Convert HTML to plain text. * * @param src the HTML source to parse (C++ callers are allowed but not * required to use the same string for the return value.) * @param flags conversion option flags defined in nsIDocumentEncoder * @param wrapCol number of characters per line; 0 for no auto-wrapping */`",915,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ParseFragment","","`text /** * Parses markup into a sanitized document fragment. * * @param fragment the input markup * @param flags sanitization option flags defined above * @param isXML true if |fragment| is XML and false if HTML * @param baseURI the base URL for this fragment * @param element the context node for the fragment parsing algorithm */`",915,null],[11,"addref","","",916,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",916,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGroupedSHistory` to one of its base interfaces.",916,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",916,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCount","","`[infallible] readonly attribute unsigned long count;`",916,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetActiveFrameLoader","","`text /** * The currently active frameloader controlled by this nsIGroupedSHistory. */`",916,null],[11,"AppendPartialSHistory","","`text /** * Remove all partial histories after currently active one (if any) and then * append the given partial session history to the end of the list. */`",916,null],[11,"HandleSHistoryUpdate","","`text /** * Notify the grouped session history that the active partial session history * has been modified. * * @param aPartialHistory The partial history which was updated * @param aTruncate If this parameter is true, all partial session histories * after this one will be removed. */`",916,null],[11,"GotoIndex","","`text /** * Find the proper partial session history and navigate to the entry * corresponding to the given global index. Note it doesn't swap frameloaders, * but rather return the target loader for the caller to swap. * * This function may throw NS_ERROR_NOT_AVAILABLE if the frameloader to swap * to is dead. * * @param aGlobalIndex * The global index to navigate to. * @return The frameloader which needs to be swapped in, or null if no * frameloader needs to be swapped. */`",916,null],[11,"CloseInactiveFrameLoaderOwners","","`text /** * Close the FrameLoaderOwners of the inactive PartialSHistories in this GlobalSHistory. * This does not remove the PartialSHistories from the GroupedSHistory. */`",916,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddPrerenderingPartialSHistory","","`text /** * Add a partialSHistory as a \"prerendering\" partialSHistory. This * partialSHistory's tab will have its lifetime managed by the * GroupedSHistory, and will be closed when closeInactiveFrameLoaderOwners is * called, or whenever a SHistory update is received. */`",916,null],[11,"CancelPrerendering","","`text /** * Cancel the prerendering with the given ID. */`",916,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",917,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",917,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMBlob` to one of its base interfaces.",917,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",917,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",918,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",918,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIChromeRegistry` to one of its base interfaces.",918,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",918,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NONE","","",918,null],[18,"PARTIAL","","",918,null],[18,"FULL","","",918,null],[11,"ConvertChromeURL","","`text /** * Resolve a chrome URL to an loadable URI using the information in the * registry. Does not modify aChromeURL. * * Chrome URLs are allowed to be specified in \"shorthand\", leaving the * \"file\" portion off. In that case, the URL is expanded to: * * chrome://package/provider/package.ext * * where \"ext\" is: * * \"xul\" for a \"content\" package, * \"css\" for a \"skin\" package, and * \"dtd\" for a \"locale\" package. * * @param aChromeURL the URL that is to be converted. */`",918,null],[11,"CheckForNewChrome","","`text /** * refresh the chrome list at runtime, looking for new packages/etc */`",918,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"WrappersEnabled","","`text /** * returns whether XPCNativeWrappers are enabled for aURI. */`",918,null],[11,"addref","","",919,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",919,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXULChromeRegistry` to one of its base interfaces.",919,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",919,{"inputs":[{"name":"self"}],"output":{"name":"nsichromeregistry"}}],[11,"ReloadChrome","","`void reloadChrome ();`",919,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSelectedLocale","","`ACString getSelectedLocale (in ACString packageName, [optional] in boolean asBCP47);`",919,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsLocaleRTL","","`boolean isLocaleRTL (in ACString package);`",919,null],[11,"RefreshSkins","","`void refreshSkins ();`",919,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AllowScriptsForPackage","","`text /** * Installable skin XBL is not always granted the same privileges as other * chrome. This asks the chrome registry whether scripts are allowed to be * run for a particular chrome URI. Do not pass non-chrome URIs to this * method. */`",919,null],[11,"AllowContentToAccess","","`text /** * Content should only be allowed to load chrome JS from certain packages. * This method reflects the contentaccessible flag on packages. * Do not pass non-chrome URIs to this method. */`",919,null],[11,"CanLoadURLRemotely","","`text /** * Returns true if the passed chrome URL is allowed to be loaded in a remote * process. This reflects the remoteenabled flag on packages. * Do not pass non-chrome URIs to this method. */`",919,null],[11,"MustLoadURLRemotely","","`text /** * Returns true if the passed chrome URL must be loaded in a remote process. * This reflects the remoterequired flag on packages. * Do not pass non-chrome URIs to this method. */`",919,null],[11,"addref","","",920,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",920,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIX509CertList` to one of its base interfaces.",920,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",920,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddCert","","`[must_use] void addCert (in nsIX509Cert cert);`",920,null],[11,"GetEnumerator","","`[must_use] nsISimpleEnumerator getEnumerator ();`",920,null],[11,"Equals","","`text /** * Test whether two certificate list instances represent the same * certificate list. * * @return Whether the certificate lists are equal */`",920,null],[11,"addref","","",921,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",921,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamLoaderObserver` to one of its base interfaces.",921,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",921,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStreamComplete","","`text /** * Called when the entire stream has been loaded. * * @param loader the stream loader that loaded the stream. * @param ctxt the context parameter of the underlying channel * @param status the status of the underlying channel * @param resultLength the length of the data loaded * @param result the data * * This method will always be called asynchronously by the * nsIStreamLoader involved, on the thread that called the * loader's init() method. * * If the observer wants to take over responsibility for the * data buffer (result), it returns NS_SUCCESS_ADOPTED_DATA * in place of NS_OK as its success code. The loader will then * \"forget\" about the data and not free() it after * onStreamComplete() returns; observer must call free() * when the data is no longer required. */`",921,null],[11,"addref","","",922,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",922,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamLoader` to one of its base interfaces.",922,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",922,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Asynchronously loads a channel into a memory buffer. * * To use this interface, first call init() with a nsIStreamLoaderObserver * that will be notified when the data has been loaded. Then call asyncOpen() * on the channel with the nsIStreamLoader as the listener. The context * argument in the asyncOpen() call will be passed to the onStreamComplete() * callback. * * XXX define behaviour for sizes >4 GB */ /** * Initialize this stream loader, and start loading the data. * * @param aStreamObserver * An observer that will be notified when the data is complete. * @param aRequestObserver * An optional observer that will be notified when the request * has started or stopped. */`",922,null],[11,"GetNumBytesRead","","`text /** * Gets the number of bytes read so far. */`",922,null],[11,"GetRequest","","`text /** * Gets the request that loaded this file. * null after the request has finished loading. */`",922,null],[11,"addref","","",923,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",923,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGZFileWriter` to one of its base interfaces.",923,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",923,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize this object. We'll write our gzip'ed data to the given file, * overwriting its contents if the file exists. * * init() will return an error if called twice. It's an error to call any * other method on this interface without first calling init(). */`",923,null],[11,"Write","","`text /** * Write the given string to the file. */`",923,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Finish","","`text /** * Close this nsIGZFileWriter. Classes implementing nsIGZFileWriter will run * this method when the underlying object is destroyed, so it's not strictly * necessary to explicitly call it from your code. * * It's an error to call this method twice, and it's an error to call write() * after finish() has been called. */`",923,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",924,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",924,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentMethodData` to one of its base interfaces.",924,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",924,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSupportedMethods","","`readonly attribute AString supportedMethods;`",924,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",925,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",925,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentCurrencyAmount` to one of its base interfaces.",925,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",925,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCurrency","","`readonly attribute AString currency;`",925,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`readonly attribute AString value;`",925,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",926,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",926,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentItem` to one of its base interfaces.",926,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",926,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLabel","","`readonly attribute AString label;`",926,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAmount","","`readonly attribute nsIPaymentCurrencyAmount amount;`",926,null],[11,"GetPending","","`readonly attribute boolean pending;`",926,null],[11,"addref","","",927,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",927,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentDetailsModifier` to one of its base interfaces.",927,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",927,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSupportedMethods","","`readonly attribute AString supportedMethods;`",927,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTotal","","`readonly attribute nsIPaymentItem total;`",927,null],[11,"GetAdditionalDisplayItems","","`readonly attribute nsIArray additionalDisplayItems;`",927,null],[11,"addref","","",928,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",928,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentShippingOption` to one of its base interfaces.",928,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",928,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`readonly attribute AString id;`",928,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLabel","","`readonly attribute AString label;`",928,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAmount","","`readonly attribute nsIPaymentCurrencyAmount amount;`",928,null],[11,"GetSelected","","`attribute boolean selected;`",928,null],[11,"SetSelected","","`attribute boolean selected;`",928,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",929,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",929,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentDetails` to one of its base interfaces.",929,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",929,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`readonly attribute AString id;`",929,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTotalItem","","`readonly attribute nsIPaymentItem totalItem;`",929,null],[11,"GetDisplayItems","","`readonly attribute nsIArray displayItems;`",929,null],[11,"GetShippingOptions","","`readonly attribute nsIArray shippingOptions;`",929,null],[11,"GetModifiers","","`readonly attribute nsIArray modifiers;`",929,null],[11,"GetError","","`readonly attribute AString error;`",929,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Update","","`void update (in nsIPaymentDetails aDetails);`",929,null],[11,"addref","","",930,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",930,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentOptions` to one of its base interfaces.",930,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",930,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRequestPayerName","","`readonly attribute boolean requestPayerName;`",930,null],[11,"GetRequestPayerEmail","","`readonly attribute boolean requestPayerEmail;`",930,null],[11,"GetRequestPayerPhone","","`readonly attribute boolean requestPayerPhone;`",930,null],[11,"GetRequestShipping","","`readonly attribute boolean requestShipping;`",930,null],[11,"GetShippingType","","`readonly attribute AString shippingType;`",930,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",931,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",931,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPaymentRequest` to one of its base interfaces.",931,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",931,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTabId","","`readonly attribute uint64_t tabId;`",931,null],[11,"GetTopLevelPrincipal","","`readonly attribute nsIPrincipal topLevelPrincipal;`",931,null],[11,"GetRequestId","","`readonly attribute AString requestId;`",931,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPaymentMethods","","`readonly attribute nsIArray paymentMethods;`",931,null],[11,"GetPaymentDetails","","`readonly attribute nsIPaymentDetails paymentDetails;`",931,null],[11,"GetPaymentOptions","","`readonly attribute nsIPaymentOptions paymentOptions;`",931,null],[11,"UpdatePaymentDetails","","`void updatePaymentDetails (in nsIPaymentDetails aDetails);`",931,null],[11,"addref","","",932,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",932,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHTMLElement` to one of its base interfaces.",932,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",932,{"inputs":[{"name":"self"}],"output":{"name":"nsidomelement"}}],[11,"GetDraggable","","`text /** * The nsIDOMHTMLElement interface is the primary [X]HTML element * interface. It represents a single [X]HTML element in the document * tree. * * This interface is trying to follow the DOM Level 2 HTML specification: * http://www.w3.org/TR/DOM-Level-2-HTML/ * * with changes from the work-in-progress WHATWG HTML specification: * http://www.whatwg.org/specs/web-apps/current-work/ */`",932,null],[11,"GetSpellcheck","","`readonly attribute boolean spellcheck;`",932,null],[11,"GetOffsetWidth","","`readonly attribute long offsetWidth;`",932,null],[11,"GetOffsetHeight","","`readonly attribute long offsetHeight;`",932,null],[11,"addref","","",933,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",933,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMWheelEvent` to one of its base interfaces.",933,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",933,{"inputs":[{"name":"self"}],"output":{"name":"nsidommouseevent"}}],[18,"DOM_DELTA_PIXEL","","",933,null],[18,"DOM_DELTA_LINE","","",933,null],[18,"DOM_DELTA_PAGE","","",933,null],[11,"addref","","",934,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",934,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTMLInlineTableEditor` to one of its base interfaces.",934,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",934,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInlineTableEditingEnabled","","`text /** * boolean indicating if inline table editing is enabled in the editor. * When inline table editing is enabled, and when the selection is * contained in a table cell, special buttons allowing to add/remove * a line/column are available on the cell's border. */`",934,null],[11,"SetInlineTableEditingEnabled","","`text /** * boolean indicating if inline table editing is enabled in the editor. * When inline table editing is enabled, and when the selection is * contained in a table cell, special buttons allowing to add/remove * a line/column are available on the cell's border. */`",934,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ShowInlineTableEditingUI","","`text /** * Shows inline table editing UI around a table cell * @param aCell [IN] a DOM Element being a table cell, td or th */`",934,null],[11,"HideInlineTableEditingUI","","`text /** * Hide all inline table editing UI */`",934,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DoInlineTableEditingAction","","`text /** * Modifies the table containing the selection according to the * activation of an inline table editing UI element * @param aUIAnonymousElement [IN] the inline table editing UI element */`",934,null],[11,"RefreshInlineTableEditingUI","","`text /** * Refresh already visible inline table editing UI */`",934,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",935,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",935,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPConnectJSObjectHolder` to one of its base interfaces.",935,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",935,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",936,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",936,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPConnectWrappedNative` to one of its base interfaces.",936,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",936,{"inputs":[{"name":"self"}],"output":{"name":"nsixpconnectjsobjectholder"}}],[11,"DebugDump","","`void debugDump (in short depth);`",936,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",937,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",937,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPConnectWrappedJS` to one of its base interfaces.",937,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",937,{"inputs":[{"name":"self"}],"output":{"name":"nsixpconnectjsobjectholder"}}],[11,"GetInterfaceInfo","","`readonly attribute nsIInterfaceInfo InterfaceInfo;`",937,null],[11,"GetInterfaceIID","","`readonly attribute nsIIDPtr InterfaceIID;`",937,null],[11,"DebugDump","","`void debugDump (in short depth);`",937,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"AggregatedQueryInterface","","`void aggregatedQueryInterface (in nsIIDRef uuid, [iid_is (uuid), retval] out nsQIResult result);`",937,null],[11,"addref","","",938,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",938,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPConnectWrappedJSUnmarkGray` to one of its base interfaces.",938,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",938,{"inputs":[{"name":"self"}],"output":{"name":"nsixpconnectwrappedjs"}}],[11,"addref","","",939,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",939,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCWrappedJSObjectGetter` to one of its base interfaces.",939,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",939,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNeverCalled","","`readonly attribute nsISupports neverCalled;`",939,null],[11,"addref","","",940,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",940,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCFunctionThisTranslator` to one of its base interfaces.",940,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",940,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"TranslateThis","","`nsISupports TranslateThis (in nsISupports aInitialThis);`",940,null],[11,"addref","","",941,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",941,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPConnect` to one of its base interfaces.",941,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",941,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DebugDump","","`void debugDump (in short depth);`",941,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"DebugDumpObject","","`void debugDumpObject (in nsISupports aCOMObj, in short depth);`",941,null],[11,"DebugDumpJSStack","","`void debugDumpJSStack (in boolean showArgs, in boolean showLocals, in boolean showThisProps);`",941,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetFunctionThisTranslator","","`void setFunctionThisTranslator (in nsIIDRef aIID, in nsIXPCFunctionThisTranslator aTranslator);`",941,null],[11,"addref","","",942,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",942,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISubstitutingProtocolHandler` to one of its base interfaces.",942,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",942,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolhandler"}}],[18,"ALLOW_CONTENT_ACCESS","","`text /** * Content script may access files in this package. */`",942,null],[11,"SetSubstitution","","`text /** * Sets the substitution for the root key: * resource://root/path ==> baseURI.resolve(path) * * A null baseURI removes the specified substitution. * * A root key should always be lowercase; however, this may not be * enforced. */`",942,null],[11,"SetSubstitutionWithFlags","","`text /** * Same as setSubstitution, but with specific flags. */`",942,null],[11,"GetSubstitution","","`text /** * Gets the substitution for the root key. * * @throws NS_ERROR_NOT_AVAILABLE if none exists. */`",942,null],[11,"HasSubstitution","","`text /** * Returns TRUE if the substitution exists and FALSE otherwise. */`",942,null],[11,"ResolveURI","","`text /** * Utility function to resolve a substituted URI. A resolved URI is not * guaranteed to reference a resource that exists (ie. opening a channel to * the resolved URI may fail). * * @throws NS_ERROR_NOT_AVAILABLE if resURI.host() is an unknown root key. */`",942,null],[11,"AddObserver","","`text /** * Adds an observer that will be notified on the main thread whenever a * substitition is set or unset. Notifications are not sent for substitutions * that were set prior to the observer being added. Holds an owning reference * to the observer until removeObserver is called or the protocol handler is * destroyed. */`",942,null],[11,"RemoveObserver","","`text /** * Removes the observer. */`",942,null],[11,"addref","","",943,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",943,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILayoutHistoryState` to one of its base interfaces.",943,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",943,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetHasStates","","`text /** * Whether this LayoutHistoryState contains any PresStates. */`",943,null],[11,"GetKeys","","`text /** * Get the keys of all PresStates held by this LayoutHistoryState. * Note: Check hasStates first. */`",943,null],[11,"GetPresState","","`void getPresState (in ACString aKey, out float aScrollX, out float aScrollY, out boolean aAllowScrollOriginDowngrade, out float aRes, out boolean aScaleToRes);`",943,null],[11,"AddNewPresState","","`text /** * Constructs a new nsPresState object based on the supplied data * and adds it to the LayoutHistoryState. */`",943,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"c_float"},{"name":"c_float"},{"name":"bool"},{"name":"c_float"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",944,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",944,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestReturnCodeParent` to one of its base interfaces.",944,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",944,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CallChild","","`nsresult callChild (in long childBehavior);`",944,null],[11,"addref","","",945,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",945,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestReturnCodeChild` to one of its base interfaces.",945,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",945,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"CHILD_SHOULD_THROW","","",945,null],[18,"CHILD_SHOULD_RETURN_SUCCESS","","",945,null],[18,"CHILD_SHOULD_RETURN_RESULTCODE","","",945,null],[18,"CHILD_SHOULD_NEST_RESULTCODES","","",945,null],[11,"DoIt","","`void doIt (in long behavior);`",945,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",946,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",946,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageVacuumParticipant` to one of its base interfaces.",946,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",946,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetExpectedDatabasePageSize","","`text /** * The expected page size in bytes for the database. The vacuum manager will * try to correct the page size during idle based on this value. * * @note If the database is using the WAL journal mode, the page size won't * be changed to the requested value. See bug 634374. * @note Valid page size values are powers of 2 between 512 and 65536. * The suggested value is mozIStorageConnection::defaultPageSize. */`",946,null],[11,"GetDatabaseConnection","","`text /** * Connection to the database file to be vacuumed. */`",946,null],[11,"OnBeginVacuum","","`text /** * Notifies when a vacuum operation begins. Listeners should avoid using the * database till onEndVacuum is received. * * @return true to proceed with the vacuum, false if the participant wants to * opt-out for now, it will be retried later. Useful when participant * is running some other heavy operation that can't be interrupted. * * @note When a vacuum operation starts or ends it will also dispatch a global * \"heavy-io-task\" notification through the observer service with the * data argument being either \"vacuum-begin\" or \"vacuum-end\". */`",946,null],[11,"OnEndVacuum","","`text /** * Notifies when a vacuum operation ends. * * @param aSucceeded * reports if the vacuum succeeded or failed. */`",946,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",947,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",947,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMFontFace` to one of its base interfaces.",947,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",947,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFromFontGroup","","`readonly attribute boolean fromFontGroup;`",947,null],[11,"GetFromLanguagePrefs","","`readonly attribute boolean fromLanguagePrefs;`",947,null],[11,"GetFromSystemFallback","","`readonly attribute boolean fromSystemFallback;`",947,null],[11,"GetName","","`readonly attribute DOMString name;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCSSFamilyName","","`readonly attribute DOMString CSSFamilyName;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRule","","`readonly attribute nsIDOMCSSFontFaceRule rule;`",947,null],[11,"GetSrcIndex","","`readonly attribute long srcIndex;`",947,null],[11,"GetURI","","`readonly attribute DOMString URI;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLocalName","","`readonly attribute DOMString localName;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFormat","","`readonly attribute DOMString format;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMetadata","","`readonly attribute DOMString metadata;`",947,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",948,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",948,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBFCacheEntry` to one of its base interfaces.",948,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",948,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RemoveFromBFCacheSync","","`void RemoveFromBFCacheSync ();`",948,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveFromBFCacheAsync","","`void RemoveFromBFCacheAsync ();`",948,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetID","","`readonly attribute unsigned long long ID;`",948,null],[11,"addref","","",949,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",949,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDashboardEventNotifier` to one of its base interfaces.",949,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",949,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddHost","","`void addHost (in ACString aHost, in unsigned long aSerial, in boolean aEncrypted);`",949,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveHost","","`void removeHost (in ACString aHost, in unsigned long aSerial);`",949,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"NewMsgSent","","`void newMsgSent (in ACString aHost, in unsigned long aSerial, in unsigned long aLength);`",949,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"NewMsgReceived","","`void newMsgReceived (in ACString aHost, in unsigned long aSerial, in unsigned long aLength);`",949,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",950,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",950,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebVTTListener` to one of its base interfaces.",950,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",950,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",951,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",951,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedTextConstruct` to one of its base interfaces.",951,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",951,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBase","","`text /** * If the text construct contains (X)HTML, relative references in * the content should be resolved against this base URI. */`",951,null],[11,"SetBase","","`text /** * If the text construct contains (X)HTML, relative references in * the content should be resolved against this base URI. */`",951,null],[11,"GetLang","","`text /** * The language of the text. For example, \"en-US\" for US English. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetLang","","`text /** * The language of the text. For example, \"en-US\" for US English. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`text /** * One of \"text\", \"html\", or \"xhtml\". If the type is (x)html, a '<' * character represents markup. To display that character, an escape * such as &lt; must be used. If the type is \"text\", the '<' * character represents the character itself, and such text should * not be embedded in markup without escaping it first. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetType","","`text /** * One of \"text\", \"html\", or \"xhtml\". If the type is (x)html, a '<' * character represents markup. To display that character, an escape * such as &lt; must be used. If the type is \"text\", the '<' * character represents the character itself, and such text should * not be embedded in markup without escaping it first. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetText","","`text /** * The content of the text construct. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetText","","`text /** * The content of the text construct. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PlainText","","`text /** * Returns the text of the text construct, with all markup stripped * and all entities decoded. If the type attribute's value is \"text\", * this function returns the value of the text attribute unchanged. */`",951,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"CreateDocumentFragment","","`text /** * Return an nsIDocumentFragment containing the text and markup. */`",951,null],[11,"addref","","",952,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",952,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMEventTarget` to one of its base interfaces.",952,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",952,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RemoveEventListener","","`text /** * This method allows the removal of event listeners from the event * target. If an EventListener is removed from an EventTarget while it * is processing an event, it will not be triggered by the current actions. * EventListeners can never be invoked after being removed. * Calling removeEventListener with arguments which do not identify any * currently registered EventListener on the EventTarget has no effect. * * @param type Specifies the event type of the EventListener being * removed. * @param listener The EventListener parameter indicates the * EventListener to be removed. * @param useCapture Specifies whether the EventListener being * removed was registered as a capturing listener or * not. If a listener was registered twice, one with * capture and one without, each must be removed * separately. Removal of a capturing listener does * not affect a non-capturing version of the same * listener, and vice versa. */`",952,null],[11,"RemoveSystemEventListener","","`text /** * removeSystemEventListener() should be used if you have used * addSystemEventListener(). */`",952,null],[11,"DispatchEvent","","`text /** * This method allows the dispatch of events into the implementations * event model. Events dispatched in this manner will have the same * capturing and bubbling behavior as events dispatched directly by the * implementation. The target of the event is the EventTarget on which * dispatchEvent is called. * * @param evt Specifies the event type, behavior, and contextual * information to be used in processing the event. * @return Indicates whether any of the listeners which handled the * event called preventDefault. If preventDefault was called * the value is false, else the value is true. * @throws INVALID_STATE_ERR: Raised if the Event's type was * not specified by initializing the event before * dispatchEvent was called. Specification of the Event's * type as null or an empty string will also trigger this * exception. */`",952,null],[11,"addref","","",953,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",953,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBinaryInputStream` to one of its base interfaces.",953,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",953,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"SetInputStream","","`void setInputStream (in nsIInputStream aInputStream);`",953,null],[11,"ReadBoolean","","`text /** * Read 8-bits from the stream. * * @return that byte to be treated as a boolean. */`",953,null],[11,"Read8","","`uint8_t read8 ();`",953,null],[11,"Read16","","`uint16_t read16 ();`",953,null],[11,"Read32","","`uint32_t read32 ();`",953,null],[11,"Read64","","`uint64_t read64 ();`",953,null],[11,"ReadFloat","","`float readFloat ();`",953,null],[11,"ReadDouble","","`double readDouble ();`",953,null],[11,"ReadCString","","`text /** * Read an 8-bit pascal style string from the stream. * 32-bit length field, followed by length 8-bit chars. */`",953,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ReadString","","`text /** * Read an 16-bit pascal style string from the stream. * 32-bit length field, followed by length PRUnichars. */`",953,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ReadBytes","","`text /** * Read an opaque byte array from the stream. * * @param aLength the number of bytes that must be read. * * @throws NS_ERROR_FAILURE if it can't read aLength bytes */`",953,null],[11,"ReadByteArray","","`text /** * Read an opaque byte array from the stream, storing the results * as an array of PRUint8s. * * @param aLength the number of bytes that must be read. * * @throws NS_ERROR_FAILURE if it can't read aLength bytes */`",953,null],[11,"addref","","",954,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",954,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSFontFeatureValuesRule` to one of its base interfaces.",954,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",954,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFontFamily","","`attribute DOMString fontFamily;`",954,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFontFamily","","`attribute DOMString fontFamily;`",954,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValueText","","`attribute DOMString valueText;`",954,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValueText","","`attribute DOMString valueText;`",954,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",955,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",955,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncStreamCopier2` to one of its base interfaces.",955,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",955,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[11,"Init","","`text /** * Initialize the stream copier. * * If neither the source nor the sink are buffered, buffering will * be automatically added to the sink. * * * @param aSource * contains the data to be copied. * @param aSink * specifies the destination for the data. * @param aTarget * specifies the thread on which the copy will occur. a null value * is permitted and will cause the copy to occur on an unspecified * background thread. * @param aChunkSize * specifies how many bytes to read/write at a time. this controls * the granularity of the copying. it should match the segment size * of the \"buffered\" streams involved. * @param aCloseSource * true if aSource should be closed after copying (this is generally * the desired behavior). * @param aCloseSink * true if aSink should be closed after copying (this is generally * the desired behavior). */`",955,null],[11,"AsyncCopy","","`text /** * asyncCopy triggers the start of the copy. The observer will be notified * when the copy completes. * * @param aObserver * receives notifications. * @param aObserverContext * passed to observer methods. */`",955,null],[11,"addref","","",956,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",956,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncOutputStream` to one of its base interfaces.",956,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",956,{"inputs":[{"name":"self"}],"output":{"name":"nsioutputstream"}}],[18,"WAIT_CLOSURE_ONLY","","`text /** * If passed to asyncWait, this flag overrides the default behavior, * causing the OnOutputStreamReady notification to be suppressed until the * stream becomes closed (either as a result of closeWithStatus/close being * called on the stream or possibly due to some error in the underlying * stream). */`",956,null],[11,"CloseWithStatus","","`text /** * This method closes the stream and sets its internal status. If the * stream is already closed, then this method is ignored. Once the stream * is closed, the stream's status cannot be changed. Any successful status * code passed to this method is treated as NS_BASE_STREAM_CLOSED, which * is equivalent to nsIInputStream::close. * * NOTE: this method exists in part to support pipes, which have both an * input end and an output end. If the output end of a pipe is closed, then * reads from the input end of the pipe will fail. The error code returned * when an attempt is made to read from a \"closed\" pipe corresponds to the * status code passed in when the output end of the pipe is closed, which * greatly simplifies working with pipes in some cases. * * @param aStatus * The error that will be reported if this stream is accessed after * it has been closed. */`",956,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"AsyncWait","","`text /** * Asynchronously wait for the stream to be writable or closed. The * notification is one-shot, meaning that each asyncWait call will result * in exactly one notification callback. After the OnOutputStreamReady event * is dispatched, the stream releases its reference to the * nsIOutputStreamCallback object. It is safe to call asyncWait again from the * notification handler. * * This method may be called at any time (even if write has not been called). * In other words, this method may be called when the stream already has * room for more data. It may also be called when the stream is closed. If * the stream is already writable or closed when AsyncWait is called, then the * OnOutputStreamReady event will be dispatched immediately. Otherwise, the * event will be dispatched when the stream becomes writable or closed. * * @param aCallback * This object is notified when the stream becomes ready. This * parameter may be null to clear an existing callback. * @param aFlags * This parameter specifies optional flags passed in to configure * the behavior of this method. Pass zero to specify no flags. * @param aRequestedCount * Wait until at least this many bytes can be written. This is only * a suggestion to the underlying stream; it may be ignored. The * caller may pass zero to indicate no preference. * @param aEventTarget * Specify NULL to receive notification on ANY thread (possibly even * recursively on the calling thread -- i.e., synchronously), or * specify that the notification be delivered to a specific event * target. */`",956,null],[11,"addref","","",957,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",957,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOutputStreamCallback` to one of its base interfaces.",957,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",957,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnOutputStreamReady","","`text /** * This is a companion interface for nsIAsyncOutputStream::asyncWait. */ /** * Called to indicate that the stream is either writable or closed. * * @param aStream * The stream whose asyncWait method was called. */`",957,null],[11,"addref","","",958,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",958,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpAuthenticableChannel` to one of its base interfaces.",958,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",958,{"inputs":[{"name":"self"}],"output":{"name":"nsiproxiedchannel"}}],[11,"GetIsSSL","","`text /** * If the channel being authenticated is using SSL. */`",958,null],[11,"GetProxyMethodIsConnect","","`text /** * Returns if the proxy HTTP method used is CONNECT. If no proxy is being * used it must return PR_FALSE. */`",958,null],[11,"Cancel","","`text /** * Cancels the current request. See nsIRequest. */`",958,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"GetLoadFlags","","`text /** * The load flags of this request. See nsIRequest. */`",958,null],[11,"GetURI","","`text /** * The URI corresponding to the channel. See nsIChannel. */`",958,null],[11,"GetLoadGroup","","`text /** * The load group of this request. It is here for querying its * notificationCallbacks. See nsIRequest. */`",958,null],[11,"GetNotificationCallbacks","","`text /** * The notification callbacks for the channel. See nsIChannel. */`",958,null],[11,"GetRequestMethod","","`text /** * The HTTP request method. See nsIHttpChannel. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetServerResponseHeader","","`text /** * The \"Server\" response header. * Return NS_ERROR_NOT_AVAILABLE if not available. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProxyChallenges","","`text /** * The Proxy-Authenticate response header. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetWWWChallenges","","`text /** * The WWW-Authenticate response header. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetProxyCredentials","","`text /** * Sets the Proxy-Authorization request header. An empty string * will clear it. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetWWWCredentials","","`text /** * Sets the Authorization request header. An empty string * will clear it. */`",958,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnAuthAvailable","","`text /** * Called when authentication information is ready and has been set on this * object using setWWWCredentials/setProxyCredentials. Implementations can * continue with the request and send the given information to the server. * * It is called asynchronously from * nsIHttpChannelAuthProvider::processAuthentication if that method returns * NS_ERROR_IN_PROGRESS. * * @note Any exceptions thrown from this method should be ignored. */`",958,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnAuthCancelled","","`text /** * Notifies that the prompt was cancelled. It is called asynchronously * from nsIHttpChannelAuthProvider::processAuthentication if that method * returns NS_ERROR_IN_PROGRESS. * * @param userCancel * If the user was cancelled has cancelled the authentication prompt. */`",958,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CloseStickyConnection","","`text /** * Tells the channel to drop and close any sticky connection, since this * connection oriented schema cannot be negotiated second time on * the same connection. */`",958,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ConnectionRestartable","","`text /** * Tells the channel to mark the connection as allowed to restart on * authentication retry. This is allowed when the request is a start * of a new authentication round. */`",958,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",959,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",959,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebProgressListener2` to one of its base interfaces.",959,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",959,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebprogresslistener"}}],[11,"OnProgressChange64","","`text /** * Notification that the progress has changed for one of the requests * associated with aWebProgress. Progress totals are reset to zero when all * requests in aWebProgress complete (corresponding to onStateChange being * called with aStateFlags including the STATE_STOP and STATE_IS_WINDOW * flags). * * This function is identical to nsIWebProgressListener::onProgressChange, * except that this function supports 64-bit values. * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRequest * The nsIRequest that has new progress. * @param aCurSelfProgress * The current progress for aRequest. * @param aMaxSelfProgress * The maximum progress for aRequest. * @param aCurTotalProgress * The current progress for all requests associated with aWebProgress. * @param aMaxTotalProgress * The total progress for all requests associated with aWebProgress. * * NOTE: If any progress value is unknown, then its value is replaced with -1. * * @see nsIWebProgressListener2::onProgressChange64 */`",959,null],[11,"OnRefreshAttempted","","`text /** * Notification that a refresh or redirect has been requested in aWebProgress * For example, via a <meta http-equiv=\"refresh\"> or an HTTP Refresh: header * * @param aWebProgress * The nsIWebProgress instance that fired the notification. * @param aRefreshURI * The new URI that aWebProgress has requested redirecting to. * @param aMillis * The delay (in milliseconds) before refresh. * @param aSameURI * True if aWebProgress is requesting a refresh of the * current URI. * False if aWebProgress is requesting a redirection to * a different URI. * * @return True if the refresh may proceed. * False if the refresh should be aborted. */`",959,null],[11,"addref","","",960,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",960,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDisplayInfo` to one of its base interfaces.",960,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",960,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`readonly attribute long id;`",960,null],[11,"GetConnected","","`readonly attribute boolean connected;`",960,null],[11,"addref","","",961,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",961,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboardDragDropHooks` to one of its base interfaces.",961,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",961,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AllowStartDrag","","`text /** * Prevents the drag from starting * * @param event DOM event (drag gesture) * * @return TRUE drag can proceed * @return FALSE drag is cancelled, does not go to OS */`",961,null],[11,"AllowDrop","","`text /** * Tells gecko whether a drop is allowed on this content area * * @param event DOM event (drag over) * @param session the drag session from which client can get * the flavors present or the actual data * * @return TRUE indicates to OS that if a drop does happen on this * browser, it will be accepted. * @return FALSE indicates to OS drop is not allowed. On win32, this * will change the cursor to \"reject\". */`",961,null],[11,"OnCopyOrDrag","","`text /** * Alter the flavors or data presented to the OS * Used for drag and copy actions * Because this can be called many times, it is highly recommended * that the implementation be very efficient so user feedback is * not negatively impacted. * * @param event DOM event (drag drop); null if triggered by copy. * @param trans the transferable holding the list of flavors * and the data for each flavor * * @return TRUE copy/drag can proceed * @return FALSE copy/drag is cancelled, does not go to OS */`",961,null],[11,"OnPasteOrDrop","","`text /** * Provide an alternative action to the built-in behavior when * something is dropped on the browser or in an editor * * @param event DOM event (drag drop); null if triggered by paste. * @param trans the transferable holding the list of flavors * and the data for each flavor * * @return TRUE action was handled, do not perform built-in * behavior * @return FALSE action was not overridden, do built-in behavior */`",961,null],[11,"addref","","",962,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",962,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDevice` to one of its base interfaces.",962,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",962,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetId","","`readonly attribute AUTF8String id;`",962,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`readonly attribute AUTF8String name;`",962,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`readonly attribute AUTF8String type;`",962,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EstablishControlChannel","","`nsIPresentationControlChannel establishControlChannel ();`",962,null],[11,"Disconnect","","`void disconnect ();`",962,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsRequestedUrlSupported","","`boolean isRequestedUrlSupported (in DOMString requestedUrl);`",962,null],[11,"addref","","",963,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",963,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOfflineCacheUpdateObserver` to one of its base interfaces.",963,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",963,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_ERROR","","",963,null],[18,"STATE_CHECKING","","",963,null],[18,"STATE_NOUPDATE","","",963,null],[18,"STATE_OBSOLETE","","",963,null],[18,"STATE_DOWNLOADING","","",963,null],[18,"STATE_ITEMSTARTED","","",963,null],[18,"STATE_ITEMCOMPLETED","","",963,null],[18,"STATE_ITEMPROGRESS","","",963,null],[18,"STATE_FINISHED","","",963,null],[11,"UpdateStateChanged","","`text /** * aUpdate has changed its state. * * @param aUpdate * The nsIOfflineCacheUpdate being processed. * @param event * See enumeration above */`",963,null],[11,"ApplicationCacheAvailable","","`text /** * Informs the observer about an application being available to associate. * * @param applicationCache * The application cache instance that has been created or found by the * update to associate with */`",963,null],[11,"addref","","",964,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",964,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOfflineCacheUpdate` to one of its base interfaces.",964,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",964,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStatus","","`text /** * An nsIOfflineCacheUpdate is used to update an application's offline * resources. * * It can be used to perform partial or complete updates. * * One update object will be updating at a time. The active object will * load its items one by one, sending itemCompleted() to any registered * observers. */ /** * Fetch the status of the running update. This will return a value * defined in nsIDOMOfflineResourceList. */`",964,null],[11,"GetPartial","","`text /** * TRUE if the update is being used to add specific resources. * FALSE if the complete cache update process is happening. */`",964,null],[11,"GetIsUpgrade","","`text /** * TRUE if this is an upgrade attempt, FALSE if it is a new cache * attempt. */`",964,null],[11,"GetUpdateDomain","","`text /** * The domain being updated, and the domain that will own any URIs added * with this update. */`",964,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetManifestURI","","`text /** * The manifest for the offline application being updated. */`",964,null],[11,"GetSucceeded","","`text /** * TRUE if the cache update completed successfully. */`",964,null],[11,"Init","","`text /** * Initialize the update. * * @param aManifestURI * The manifest URI to be checked. * @param aDocumentURI * The page that is requesting the update. * @param aLoadingPrincipal * The principal of the page that is requesting the update. */`",964,null],[11,"InitPartial","","`text /** * Initialize the update for partial processing. * * @param aManifestURI * The manifest URI of the related cache. * @param aClientID * Client ID of the cache to store resource to. This ClientID * must be ID of cache in the cache group identified by * the manifest URI passed in the first parameter. * @param aDocumentURI * The page that is requesting the update. May be null * when this information is unknown. */`",964,null],[11,"InitForUpdateCheck","","`text /** * Initialize the update to only check whether there is an update * to the manifest available (if it has actually changed on the server). * * @param aManifestURI * The manifest URI of the related cache. * @param aObserver * nsIObserver implementation that receives the result. * When aTopic == \"offline-cache-update-available\" there is an update to * to download. Update of the app cache will lead to a new version * download. * When aTopic == \"offline-cache-update-unavailable\" then there is no * update available (the manifest has not changed on the server). */`",964,null],[11,"AddDynamicURI","","`text /** * Add a dynamic URI to the offline cache as part of the update. * * @param aURI * The URI to add. */`",964,null],[11,"Schedule","","`text /** * Add the update to the offline update queue. An offline-cache-update-added * event will be sent to the observer service. */`",964,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddObserver","","`text /** * Observe loads that are added to the update. * * @param aObserver * object that notifications will be sent to. * @param aHoldWeak * TRUE if you want the update to hold a weak reference to the * observer, FALSE for a strong reference. */`",964,null],[11,"RemoveObserver","","`text /** * Remove an observer from the update. * * @param aObserver * the observer to remove. */`",964,null],[11,"Cancel","","`text /** * Cancel the update when still in progress. This stops all running resource * downloads and discards the downloaded cache version. Throws when update * has already finished and made the new cache version active. */`",964,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetByteProgress","","`text /** * Return the number of bytes downloaded so far */`",964,null],[11,"addref","","",965,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",965,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOfflineCacheUpdateService` to one of its base interfaces.",965,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",965,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ALLOW_NO_WARN","","`text /** * Constants for the offline-app permission. * * XXX: This isn't a great place for this, but it's really the only * private offline-app-related interface */ /** * Allow the domain to use offline APIs, and don't warn about excessive * usage. */`",965,null],[11,"GetNumUpdates","","`text /** * Access to the list of cache updates that have been scheduled. */`",965,null],[11,"GetUpdate","","`nsIOfflineCacheUpdate getUpdate (in unsigned long index);`",965,null],[11,"ScheduleUpdate","","`text /** * Schedule a cache update for a given offline manifest. If an * existing update is scheduled or running, that update will be returned. * Otherwise a new update will be scheduled. */`",965,null],[11,"ScheduleAppUpdate","","`text /** * Schedule a cache update for a given offline manifest using app cache * bound to the given appID+inIsolatedMozBrowser flag. If an existing update * is scheduled or running, that update will be returned. Otherwise a new * update will be scheduled. */`",965,null],[11,"ScheduleOnDocumentStop","","`text /** * Schedule a cache update for a manifest when the document finishes * loading. */`",965,null],[11,"CheckForUpdate","","`text /** * Schedule a check to see if an update is available. * * This will not update or make any changes to the appcache. * It only notifies the observer to indicate whether the manifest has * changed on the server (or not): a changed manifest means that an * update is available. * * For arguments see nsIOfflineCacheUpdate.initForUpdateCheck() method * description. */`",965,null],[11,"OfflineAppAllowed","","`text /** * Checks whether a principal should have access to the offline * cache. * @param aPrincipal * The principal to check. * @param aPrefBranch * The pref branch to use to check the * offline-apps.allow_by_default pref. If not specified, * the pref service will be used. */`",965,null],[11,"OfflineAppAllowedForURI","","`text /** * Checks whether a document at the given URI should have access * to the offline cache. * @param aURI * The URI to check * @param aPrefBranch * The pref branch to use to check the * offline-apps.allow_by_default pref. If not specified, * the pref service will be used. */`",965,null],[11,"AllowOfflineApp","","`text /** * Sets the \"offline-app\" permission for the principal. * In the single process model calls directly on permission manager. * In the multi process model dispatches to the parent process. */`",965,null],[11,"addref","","",966,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",966,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITableEditor` to one of its base interfaces.",966,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",966,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eNoSearch","","",966,null],[18,"ePreviousColumn","","",966,null],[18,"ePreviousRow","","",966,null],[11,"InsertTableCell","","`text /** Insert table methods * Insert relative to the selected cell or the * cell enclosing the selection anchor * The selection is collapsed and is left in the new cell * at the same row,col location as the original anchor cell * * @param aNumber Number of items to insert * @param aAfter If TRUE, insert after the current cell, * else insert before current cell */`",966,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"InsertTableColumn","","`void insertTableColumn (in long aNumber, in boolean aAfter);`",966,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"InsertTableRow","","`void insertTableRow (in long aNumber, in boolean aAfter);`",966,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DeleteTable","","`text /** Delete table methods * Delete starting at the selected cell or the * cell (or table) enclosing the selection anchor * The selection is collapsed and is left in the * cell at the same row,col location as * the previous selection anchor, if possible, * else in the closest neigboring cell * * @param aNumber Number of items to insert/delete */`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DeleteTableCellContents","","`text /** Delete just the cell contents * This is what should happen when Delete key is used * for selected cells, to minimize upsetting the table layout */`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DeleteTableCell","","`text /** Delete cell elements as well as contents * @param aNumber Number of contiguous cells, rows, or columns * * When there are more than 1 selected cells, aNumber is ignored. * For Delete Rows or Columns, the complete columns or rows are * determined by the selected cells. E.g., to delete 2 complete rows, * user simply selects a cell in each, and they don't * have to be contiguous. */`",966,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"DeleteTableColumn","","`void deleteTableColumn (in long aNumber);`",966,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"DeleteTableRow","","`void deleteTableRow (in long aNumber);`",966,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SelectTableCell","","`text /** Table Selection methods * Selecting a row or column actually * selects all cells (not TR in the case of rows) */`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectBlockOfCells","","`text /** Select a rectangular block of cells: * all cells falling within the row/column index of aStartCell * to through the row/column index of the aEndCell * aStartCell can be any location relative to aEndCell, * as long as they are in the same table * @param aStartCell starting cell in block * @param aEndCell ending cell in block */`",966,null],[11,"SelectTableRow","","`void selectTableRow ();`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectTableColumn","","`void selectTableColumn ();`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectTable","","`void selectTable ();`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectAllTableCells","","`void selectAllTableCells ();`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SwitchTableCellHeaderType","","`text /** Create a new TD or TH element, the opposite type of the supplied aSourceCell * 1. Copy all attributes from aSourceCell to the new cell * 2. Move all contents of aSourceCell to the new cell * 3. Replace aSourceCell in the table with the new cell * * @param aSourceCell The cell to be replaced * @return The new cell that replaces aSourceCell */`",966,null],[11,"JoinTableCells","","`text /** Merges contents of all selected cells * for selected cells that are adjacent, * this will result in a larger cell with appropriate * rowspan and colspan, and original cells are deleted * The resulting cell is in the location of the * cell at the upper-left corner of the adjacent * block of selected cells * * @param aMergeNonContiguousContents: * If true: * Non-contiguous cells are not deleted, * but their contents are still moved * to the upper-left cell * If false: contiguous cells are ignored * * If there are no selected cells, * and selection or caret is in a cell, * that cell and the one to the right * are merged */`",966,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SplitTableCell","","`text /** Split a cell that has rowspan and/or colspan > 0 * into cells such that all new cells have * rowspan = 1 and colspan = 1 * All of the contents are not touched -- * they will appear to be in the upper-left cell */`",966,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NormalizeTable","","`text /** Scan through all rows and add cells as needed so * all locations in the cellmap are occupied. * Used after inserting single cells or pasting * a collection of cells that extend past the * previous size of the table * If aTable is null, it uses table enclosing the selection anchor * This doesn't doesn't change the selection, * thus it can be used to fixup all tables * in a page independent of the selection */`",966,null],[11,"GetCellIndexes","","`text /** Get the row an column index from the layout's cellmap * If aCell is null, it will try to find enclosing table of selection anchor * */`",966,null],[11,"GetTableSize","","`text /** Get the number of rows and columns in a table from the layout's cellmap * If aTable is null, it will try to find enclosing table of selection ancho * Note that all rows in table will not have this many because of * ROWSPAN effects or if table is not \"rectangular\" (has short rows) */`",966,null],[11,"GetCellAt","","`text /** Get a cell element at cellmap grid coordinates * A cell that spans across multiple cellmap locations will * be returned multiple times, once for each location it occupies * * @param aTable A table in the document * @param aRowIndex, aColIndex The 0-based cellmap indexes * * (in C++ returns: NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) * * You can scan for all cells in a row or column * by iterating through the appropriate indexes * until the returned aCell is null */`",966,null],[11,"GetCellDataAt","","`text /** Get a cell at cellmap grid coordinates and associated data * A cell that spans across multiple cellmap locations will * be returned multiple times, once for each location it occupies * Examine the returned aStartRowIndex and aStartColIndex to see * if it is in the same layout column or layout row: * A \"layout row\" is all cells sharing the same top edge * A \"layout column\" is all cells sharing the same left edge * This is important to determine what to do when inserting or deleting a column or row * * @param aTable A table in the document * @param aRowIndex, aColIndex The 0-based cellmap indexes * returns values: * @param aCell The cell at this cellmap location * @param aStartRowIndex The row index where cell starts * @param aStartColIndex The col index where cell starts * @param aRowSpan May be 0 (to span down entire table) or number of cells spanned * @param aColSpan May be 0 (to span across entire table) or number of cells spanned * @param aActualRowSpan The actual number of cellmap locations (rows) spanned by the cell * @param aActualColSpan The actual number of cellmap locations (columns) spanned by the cell * @param aIsSelected * @param * * (in C++ returns: NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"GetFirstRow","","`text /** Get the first row element in a table * * @return The row at the requested index * Returns null if there are no rows in table * (in C++ returns: NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"GetNextRow","","`text /** Get the next row element starting the search from aTableElement * * @param aTableElement Any TR or child-of-TR element in the document * * @return The row to start search from * and the row returned from the search * Returns null if there isn't another row * (in C++ returns: NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"GetSelectedOrParentTableElement","","`text /** Preferred direction to search for neighboring cell * when trying to locate a cell to place caret in after * a table editing action. * Used for aDirection param in SetSelectionAfterTableEdit */ /** Examine the current selection and find * a selected TABLE, TD or TH, or TR element. * or return the parent TD or TH if selection is inside a table cell * Returns null if no table element is found. * * @param aTagName The tagname of returned element * Note that \"td\" will be returned if name * is actually \"th\" * @param aCount How many table elements were selected * This tells us if we have multiple cells selected * (0 if element is a parent cell of selection) * @return The table element (table, row, or first selected cell) * */`",966,null],[11,"GetSelectedCellsType","","`text /** Generally used after GetSelectedOrParentTableElement * to test if selected cells are complete rows or columns * * @param aElement Any table or cell element or any element * inside a table * Used to get enclosing table. * If null, selection's anchorNode is used * * @return * 0 aCellElement was not a cell * (returned result = NS_ERROR_FAILURE) * TABLESELECTION_CELL There are 1 or more cells selected but * complete rows or columns are not selected * TABLESELECTION_ROW All cells are in 1 or more rows * and in each row, all cells selected * Note: This is the value if all rows * (thus all cells) are selected * TABLESELECTION_COLUMN All cells are in 1 or more columns * and in each column, all cells are selected */`",966,null],[11,"GetFirstSelectedCell","","`text /** Get first selected element from first selection range. * (If multiple cells were selected this is the first in the order they were selected) * Assumes cell-selection model where each cell * is in a separate range (selection parent node is table row) * @param aCell [OUT] Selected cell or null if ranges don't contain * cell selections * @param aRange [OUT] Optional: if not null, return the selection range * associated with the cell * Returns the DOM cell element * (in C++: returns NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"GetFirstSelectedCellInTable","","`text /** Get first selected element in the table * This is the upper-left-most selected cell in table, * ignoring the order that the user selected them (order in the selection ranges) * Assumes cell-selection model where each cell * is in a separate range (selection parent node is table row) * @param aCell Selected cell or null if ranges don't contain * cell selections * @param aRowIndex Optional: if not null, return row index of 1st cell * @param aColIndex Optional: if not null, return column index of 1st cell * * Returns the DOM cell element * (in C++: returns NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"GetNextSelectedCell","","`text /** Get next selected cell element from first selection range. * Assumes cell-selection model where each cell * is in a separate range (selection parent node is table row) * Always call GetFirstSelectedCell() to initialize stored index of \"next\" cell * @param aCell Selected cell or null if no more selected cells * or ranges don't contain cell selections * @param aRange Optional: if not null, return the selection range * associated with the cell * * Returns the DOM cell element * (in C++: returns NS_EDITOR_ELEMENT_NOT_FOUND if an element is not found * passes NS_SUCCEEDED macro) */`",966,null],[11,"addref","","",967,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",967,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageService` to one of its base interfaces.",967,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",967,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OpenAsyncDatabase","","`text /** * Open an asynchronous connection to a database. * * This method MUST be called from the main thread. The connection object * returned by this function is not threadsafe. You MUST use it only from * the main thread. * * If you have more than one connection to a file, you MUST use the EXACT * SAME NAME for the file each time, including case. The sqlite code uses * a simple string compare to see if there is already a connection. Opening * a connection to \"Foo.sqlite\" and \"foo.sqlite\" will CORRUPT YOUR DATABASE. * * @param aDatabaseStore Either a nsIFile representing the file that contains * the database or a special string to open a special database. The special * string may be: * - \"memory\" to open an in-memory database. * * @param aOptions A set of options (may be null). Options may contain: * - bool shared (defaults to |false|). * -- If |true|, opens the database with a shared-cache. The * shared-cache mode is more memory-efficient when many * connections to the same database are expected, though, the * connections will contend the cache resource. In any cases * where performance matter, working without a shared-cache will * improve concurrency. @see openUnsharedDatabase * * - int growthIncrement (defaults to none). * -- Set the growth increment for the main database. This hints SQLite to * grow the database file by a given chunk size and may reduce * filesystem fragmentation on large databases. * @see mozIStorageConnection::setGrowthIncrement * * @param aCallback A callback that will receive the result of the operation. * In case of error, it may receive as status: * - NS_ERROR_OUT_OF_MEMORY if allocating a new storage object fails. * - NS_ERROR_FILE_CORRUPTED if the database file is corrupted. * In case of success, it receives as argument the new database * connection, as an instance of |mozIStorageAsyncConnection|. * * @throws NS_ERROR_INVALID_ARG if |aDatabaseStore| is neither a file nor * one of the special strings understood by this method, or if one of * the options passed through |aOptions| does not have the right type. * @throws NS_ERROR_NOT_SAME_THREAD if called from a thread other than the * main thread. */`",967,null],[11,"OpenSpecialDatabase","","`text /** * Get a connection to a named special database storage. * * @param aStorageKey a string key identifying the type of storage * requested. Valid values include: \"memory\". * * @see openDatabase for restrictions on how database connections may be * used. For the profile database, you should only access it from the main * thread since other callers may also have connections. * * @returns a new mozIStorageConnection for the requested * storage database. * * @throws NS_ERROR_INVALID_ARG if aStorageKey is invalid. */`",967,null],[11,"OpenDatabase","","`text /** * Open a connection to the specified file. * * Consumers should check mozIStorageConnection::connectionReady to ensure * that they can use the database. If this value is false, it is strongly * recommended that the database be backed up with * mozIStorageConnection::backupDB so user data is not lost. * * ========== * DANGER * ========== * * If you have more than one connection to a file, you MUST use the EXACT * SAME NAME for the file each time, including case. The sqlite code uses * a simple string compare to see if there is already a connection. Opening * a connection to \"Foo.sqlite\" and \"foo.sqlite\" will CORRUPT YOUR DATABASE. * * The connection object returned by this function is not threadsafe. You must * use it only from the thread you created it from. * * @param aDatabaseFile * A nsIFile that represents the database that is to be opened.. * * @returns a mozIStorageConnection for the requested database file. * * @throws NS_ERROR_OUT_OF_MEMORY * If allocating a new storage object fails. * @throws NS_ERROR_FILE_CORRUPTED * If the database file is corrupted. */`",967,null],[11,"OpenUnsharedDatabase","","`text /** * Open a connection to the specified file that doesn't share a sqlite cache. * * Without a shared-cache, each connection uses its own pages cache, which * may be memory inefficient with a large number of connections, in such a * case so you should use openDatabase instead. On the other side, if cache * contention may be an issue, for instance when concurrency is important to * ensure responsiveness, using unshared connections may be a performance win. * * ========== * DANGER * ========== * * If you have more than one connection to a file, you MUST use the EXACT * SAME NAME for the file each time, including case. The sqlite code uses * a simple string compare to see if there is already a connection. Opening * a connection to \"Foo.sqlite\" and \"foo.sqlite\" will CORRUPT YOUR DATABASE. * * The connection object returned by this function is not threadsafe. You must * use it only from the thread you created it from. * * @param aDatabaseFile * A nsIFile that represents the database that is to be opened. * * @returns a mozIStorageConnection for the requested database file. * * @throws NS_ERROR_OUT_OF_MEMORY * If allocating a new storage object fails. * @throws NS_ERROR_FILE_CORRUPTED * If the database file is corrupted. */`",967,null],[11,"OpenDatabaseWithFileURL","","`text /** * See openDatabase(). Exactly the same only initialized with a file URL. * Custom parameters can be passed to SQLite and VFS implementations through * the query part of the URL. * * @param aURL * A nsIFileURL that represents the database that is to be opened. */`",967,null],[11,"BackupDatabaseFile","","`text /** * Copies the specified database file to the specified parent directory with * the specified file name. If the parent directory is not specified, it * places the backup in the same directory as the current file. This function * ensures that the file being created is unique. * * @param aDBFile * The database file that will be backed up. * @param aBackupFileName * The name of the new backup file to create. * @param [optional] aBackupParentDirectory * The directory you'd like the backup file to be placed. * @return The nsIFile representing the backup file. */`",967,null],[11,"addref","","",968,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",968,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecurityInfoProvider` to one of its base interfaces.",968,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",968,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSecurityInfo","","`text /** * The security info for this provider, if any. */`",968,null],[11,"GetHasTransferredData","","`text /** * Whether this provider has transferred data. If it hasn't, its * security info should be ignored. */`",968,null],[11,"addref","","",969,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",969,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextToSubURI` to one of its base interfaces.",969,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",969,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConvertAndEscape","","`ACString ConvertAndEscape (in ACString charset, in AString text);`",969,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"UnEscapeAndConvert","","`AString UnEscapeAndConvert (in ACString charset, in ACString text);`",969,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UnEscapeURIForUI","","`text /** * Unescapes the given URI fragment (for UI purpose only) * Note: * <ul> * <li> escaping back the result (unescaped string) is not guaranteed to * give the original escaped string * <li> In case of a conversion error, the URI fragment (escaped) is * assumed to be in UTF-8 and converted to AString (UTF-16) * <li> In case of successful conversion any resulting character listed * in network.IDN.blacklist_chars (except space) is escaped * <li> Always succeeeds (callers don't need to do error checking) * </ul> * * @param aCharset the charset to convert from * @param aURIFragment the URI (or URI fragment) to unescape * @return Unescaped aURIFragment converted to unicode */`",969,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"UnEscapeNonAsciiURI","","`text /** * Unescapes only non ASCII characters in the given URI fragment * note: this method assumes the URI as UTF-8 and fallbacks to the given * charset if the charset is an ASCII superset * * @param aCharset the charset to convert from * @param aURIFragment the URI (or URI fragment) to unescape * @return Unescaped aURIFragment converted to unicode * @throws NS_ERROR_UCONV_NOCONV when there is no decoder for aCharset * or NS_ERROR_UDEC_ILLEGALINPUT in case of conversion failure */`",969,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",970,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",970,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULTreeElement` to one of its base interfaces.",970,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",970,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetColumns","","`readonly attribute nsITreeColumns columns;`",970,null],[11,"GetView","","`attribute nsITreeView view;`",970,null],[11,"SetView","","`attribute nsITreeView view;`",970,null],[11,"GetBody","","`readonly attribute nsIDOMElement body;`",970,null],[11,"GetEditable","","`attribute boolean editable;`",970,null],[11,"SetEditable","","`attribute boolean editable;`",970,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInputField","","`readonly attribute nsIDOMXULTextBoxElement inputField;`",970,null],[11,"addref","","",971,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",971,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleScrollType` to one of its base interfaces.",971,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",971,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SCROLL_TYPE_TOP_LEFT","","`text /** * Scroll the top left of the object or substring to the top left of the * window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_BOTTOM_RIGHT","","`text /** * Scroll the bottom right of the object or substring to the bottom right of * the window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_TOP_EDGE","","`text /** * Scroll the top edge of the object or substring to the top edge of the * window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_BOTTOM_EDGE","","`text /** * Scroll the bottom edge of the object or substring to the bottom edge of * the window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_LEFT_EDGE","","`text /** * Scroll the left edge of the object or substring to the left edge of the * window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_RIGHT_EDGE","","`text /** * Scroll the right edge of the object or substring to the right edge of the * window (or as close as possible). */`",971,null],[18,"SCROLL_TYPE_ANYWHERE","","`text /** * Scroll an object the minimum amount necessary in order for the entire * frame to be visible (if possible). */`",971,null],[11,"addref","","",972,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",972,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleCoordinateType` to one of its base interfaces.",972,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",972,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"COORDTYPE_SCREEN_RELATIVE","","`text /** * The coordinates are relative to the screen. */`",972,null],[18,"COORDTYPE_WINDOW_RELATIVE","","`text /** * The coordinates are relative to the window. */`",972,null],[18,"COORDTYPE_PARENT_RELATIVE","","`text /** * The coordinates are relative to the upper left corner of the bounding box * of the immediate parent. */`",972,null],[11,"addref","","",973,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",973,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMFormData` to one of its base interfaces.",973,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",973,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Append","","`void append (in DOMString name, in nsIVariant value);`",973,null],[11,"addref","","",974,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",974,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISAXContentHandler` to one of its base interfaces.",974,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",974,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartDocument","","`text /** * Receive notification of the beginning of a document. * * The SAX parser will invoke this method only once, before any * other event callbacks. */`",974,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EndDocument","","`text /** * Receive notification of the end of a document. * * There is an apparent contradiction between the documentation for * this method and the documentation for ErrorHandler.fatalError(). * Until this ambiguity is resolved in a future major release, * clients should make no assumptions about whether endDocument() * will or will not be invoked when the parser has reported a * fatalError() or thrown an exception. * * The SAX parser will invoke this method only once, and it will be * the last method invoked during the parse. The parser shall not * invoke this method until it has either abandoned parsing (because * of an unrecoverable error) or reached the end of input. */`",974,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StartElement","","`text /** * Receive notification of the beginning of an element. * * The Parser will invoke this method at the beginning of every * element in the XML document; there will be a corresponding * endElement event for every startElement event (even when the * element is empty). All of the element's content will be reported, * in order, before the corresponding endElement event. * * This event allows up to three name components for each element: * * 1.) the Namespace URI; * 2.) the local name; and * 3.) the qualified (prefixed) name. * * Any or all of these may be provided, depending on the values of * the http://xml.org/sax/features/namespaces and the * http://xml.org/sax/features/namespace-prefixes properties: * * The Namespace URI and local name are required when the namespaces * property is true (the default), and are optional when the * namespaces property is false (if one is specified, both must be); * * The qualified name is required when the namespace-prefixes * property is true, and is optional when the namespace-prefixes * property is false (the default). * * Note that the attribute list provided will contain only * attributes with explicit values (specified or defaulted): * #IMPLIED attributes will be omitted. The attribute list will * contain attributes used for Namespace declarations (xmlns* * attributes) only if the * http://xml.org/sax/features/namespace-prefixes property is true * (it is false by default, and support for a true value is * optional). * * @param uri the Namespace URI, or the empty string if the * element has no Namespace URI or if Namespace * processing is not being performed * @param localName the local name (without prefix), or the * empty string if Namespace processing is not being * performed * @param qName the qualified name (with prefix), or the * empty string if qualified names are not available * @param atts the attributes attached to the element. If * there are no attributes, it shall be an empty * SAXAttributes object. The value of this object after * startElement returns is undefined */`",974,null],[11,"EndElement","","`text /** * Receive notification of the end of an element. * * The SAX parser will invoke this method at the end of every * element in the XML document; there will be a corresponding * startElement event for every endElement event (even when the * element is empty). * * For information on the names, see startElement. * * @param uri the Namespace URI, or the empty string if the * element has no Namespace URI or if Namespace * processing is not being performed * @param localName the local name (without prefix), or the * empty string if Namespace processing is not being * performed * @param qName the qualified XML name (with prefix), or the * empty string if qualified names are not available */`",974,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Characters","","`text /** * Receive notification of character data. * * The Parser will call this method to report each chunk of * character data. SAX parsers may return all contiguous character * data in a single chunk, or they may split it into several chunks; * however, all of the characters in any single event must come from * the same external entity so that the Locator provides useful * information. * * Note that some parsers would report whitespace in element * content using the ignorableWhitespace method rather than this one * (validating parsers must do so). But this interface no longer has an * ignorableWhitespace method, so in that case such whitespace is not * reported at all. * * @param value the characters from the XML document */`",974,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ProcessingInstruction","","`text /** * Receive notification of a processing instruction. * * The Parser will invoke this method once for each processing * instruction found: note that processing instructions may occur * before or after the main document element. * * A SAX parser must never report an XML declaration (XML 1.0, * section 2.8) or a text declaration (XML 1.0, section 4.3.1) using * this method. * * @param target the processing instruction target * @param data the processing instruction data, or null if * none was supplied. The data does not include any * whitespace separating it from the target */`",974,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",975,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",975,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMAnimationEvent` to one of its base interfaces.",975,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",975,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAnimationName","","`readonly attribute DOMString animationName;`",975,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetElapsedTime","","`readonly attribute float elapsedTime;`",975,null],[11,"GetPseudoElement","","`readonly attribute DOMString pseudoElement;`",975,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",976,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",976,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrivacyTransitionObserver` to one of its base interfaces.",976,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",976,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PrivateModeChanged","","`void privateModeChanged (in bool enabled);`",976,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",977,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",977,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSFontFaceRule` to one of its base interfaces.",977,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",977,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStyle","","`readonly attribute nsIDOMCSSStyleDeclaration style;`",977,null],[11,"addref","","",978,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",978,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWritablePropertyBag` to one of its base interfaces.",978,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",978,{"inputs":[{"name":"self"}],"output":{"name":"nsipropertybag"}}],[11,"SetProperty","","`text /** * Set a property with the given name to the given value. If * a property already exists with the given name, it is * overwritten. */`",978,null],[11,"DeleteProperty","","`text /** * Delete a property with the given name. * @throws NS_ERROR_FAILURE if a property with that name doesn't * exist. */`",978,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",979,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",979,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPopupWindowManager` to one of its base interfaces.",979,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",979,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ALLOW_POPUP","","`text /** * These values are returned by the testPermission method */`",979,null],[18,"DENY_POPUP","","",979,null],[18,"ALLOW_POPUP_WITH_PREJUDICE","","",979,null],[11,"TestPermission","","`text /** * Test whether a website has permission to show a popup window. * @param principal is the principal to be tested * @return one of the enumerated permission actions defined above */`",979,null],[11,"addref","","",980,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",980,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPreloadedStyleSheet` to one of its base interfaces.",980,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",980,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",981,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",981,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolProxyFilter` to one of its base interfaces.",981,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",981,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ApplyFilter","","`text /** * This method is called to apply proxy filter rules for the given URI * and proxy object (or list of proxy objects). * * @param aProxyService * A reference to the Protocol Proxy Service. This is passed so that * implementations may easily access methods such as newProxyInfo. * @param aURI * The URI for which these proxy settings apply. * @param aProxy * The proxy (or list of proxies) that would be used by default for * the given URI. This may be null. * * @return The proxy (or list of proxies) that should be used in place of * aProxy. This can be just be aProxy if the filter chooses not to * modify the proxy. It can also be null to indicate that a direct * connection should be used. Use aProxyService.newProxyInfo to * construct nsIProxyInfo objects. */`",981,null],[11,"addref","","",982,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",982,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolProxyChannelFilter` to one of its base interfaces.",982,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",982,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ApplyFilter","","`text /** * This method is called to apply proxy filter rules for the given channel * and proxy object (or list of proxy objects). * * @param aProxyService * A reference to the Protocol Proxy Service. This is passed so that * implementations may easily access methods such as newProxyInfo. * @param aChannel * The channel for which these proxy settings apply. * @param aProxy * The proxy (or list of proxies) that would be used by default for * the given channel. This may be null. * * @return The proxy (or list of proxies) that should be used in place of * aProxy. This can be just be aProxy if the filter chooses not to * modify the proxy. It can also be null to indicate that a direct * connection should be used. Use aProxyService.newProxyInfo to * construct nsIProxyInfo objects. */`",982,null],[11,"addref","","",983,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",983,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURI` to one of its base interfaces.",983,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",983,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSpec","","`text /************************************************************************ * The URI is broken down into the following principal components: */ /** * Returns a string representation of the URI. Setting the spec causes * the new spec to be parsed per the rules for the scheme the URI * currently has. In particular, setting the spec to a URI string with a * different scheme will generally produce incorrect results; no one * outside of a protocol handler implementation should be doing that. If * the URI stores information from the nsIIOService.newURI call used to * create it other than just the parsed string, then behavior of this * information on setting the spec attribute is undefined. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetSpec","","`text /************************************************************************ * The URI is broken down into the following principal components: */ /** * Returns a string representation of the URI. Setting the spec causes * the new spec to be parsed per the rules for the scheme the URI * currently has. In particular, setting the spec to a URI string with a * different scheme will generally produce incorrect results; no one * outside of a protocol handler implementation should be doing that. If * the URI stores information from the nsIIOService.newURI call used to * create it other than just the parsed string, then behavior of this * information on setting the spec attribute is undefined. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPrePath","","`text /** * The prePath (eg. scheme://user:password@host:port) returns the string * before the path. This is useful for authentication or managing sessions. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetScheme","","`text /** * The Scheme is the protocol to which this URI refers. The scheme is * restricted to the US-ASCII charset per RFC3986. Setting this is * highly discouraged outside of a protocol handler implementation, since * that will generally lead to incorrect results. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetScheme","","`text /** * The Scheme is the protocol to which this URI refers. The scheme is * restricted to the US-ASCII charset per RFC3986. Setting this is * highly discouraged outside of a protocol handler implementation, since * that will generally lead to incorrect results. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUserPass","","`text /** * The username:password (or username only if value doesn't contain a ':') * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetUserPass","","`text /** * The username:password (or username only if value doesn't contain a ':') * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUsername","","`text /** * The optional username and password, assuming the preHost consists of * username:password. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetUsername","","`text /** * The optional username and password, assuming the preHost consists of * username:password. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPassword","","`attribute AUTF8String password;`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPassword","","`attribute AUTF8String password;`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHostPort","","`text /** * The host:port (or simply the host, if port == -1). * * If this attribute is set to a value that only has a host part, the port * will not be reset. To reset the port as well use setHostAndPort. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetHostPort","","`text /** * The host:port (or simply the host, if port == -1). * * If this attribute is set to a value that only has a host part, the port * will not be reset. To reset the port as well use setHostAndPort. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetHostAndPort","","`text /** * This function will always set a host and a port. If the port part is * empty, the value of the port will be set to the default value. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHost","","`text /** * The host is the internet domain name to which this URI refers. It could * be an IPv4 (or IPv6) address literal. Otherwise it is an ASCII or punycode * encoded string. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetHost","","`text /** * The host is the internet domain name to which this URI refers. It could * be an IPv4 (or IPv6) address literal. Otherwise it is an ASCII or punycode * encoded string. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * A port value of -1 corresponds to the protocol's default port (eg. -1 * implies port 80 for http URIs). */`",983,null],[11,"SetPort","","`text /** * A port value of -1 corresponds to the protocol's default port (eg. -1 * implies port 80 for http URIs). */`",983,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetPathQueryRef","","`text /** * The path, typically including at least a leading '/' (but may also be * empty, depending on the protocol). * * Some characters may be escaped. * * This attribute contains query and ref parts for historical reasons. * Use the 'filePath' attribute if you do not want those parts included. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetPathQueryRef","","`text /** * The path, typically including at least a leading '/' (but may also be * empty, depending on the protocol). * * Some characters may be escaped. * * This attribute contains query and ref parts for historical reasons. * Use the 'filePath' attribute if you do not want those parts included. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Equals","","`text /************************************************************************ * An URI supports the following methods: */ /** * URI equivalence test (not a strict string comparison). * * eg. http://foo.com:80/ == http://foo.com/ */`",983,null],[11,"SchemeIs","","`text /** * An optimization to do scheme checks without requiring the users of nsIURI * to GetScheme, thereby saving extra allocating and freeing. Returns true if * the schemes match (case ignored). */`",983,null],[11,"Clone","","`text /** * Clones the current URI. */`",983,null],[11,"Resolve","","`text /** * This method resolves a relative string into an absolute URI string, * using this URI as the base. * * NOTE: some implementations may have no concept of a relative URI. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAsciiSpec","","`text /************************************************************************ * Additional attributes: */ /** * The URI spec with an ASCII compatible encoding. Host portion follows * the IDNA draft spec. Other parts are URL-escaped per the rules of * RFC2396. The result is strictly ASCII. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAsciiHostPort","","`text /** * The host:port (or simply the host, if port == -1), with an ASCII compatible * encoding. Host portion follows the IDNA draft spec. The result is strictly * ASCII. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAsciiHost","","`text /** * The URI host with an ASCII compatible encoding. Follows the IDNA * draft spec for converting internationalized domain names (UTF-8) to * ASCII for compatibility with existing internet infrasture. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRef","","`text /************************************************************************ * Additional attribute & methods added for .ref support: */ /** * Returns the reference portion (the part after the \"#\") of the URI. * If there isn't one, an empty string is returned. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetRef","","`text /************************************************************************ * Additional attribute & methods added for .ref support: */ /** * Returns the reference portion (the part after the \"#\") of the URI. * If there isn't one, an empty string is returned. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EqualsExceptRef","","`text /** * URI equivalence test (not a strict string comparison), ignoring * the value of the .ref member. * * eg. http://foo.com/# == http://foo.com/ * http://foo.com/#aaa == http://foo.com/#bbb */`",983,null],[11,"CloneIgnoringRef","","`text /** * Clones the current URI, clearing the 'ref' attribute in the clone. */`",983,null],[11,"CloneWithNewRef","","`text /** * Clones the current URI, replacing the 'ref' attribute in the clone with * the ref supplied. */`",983,null],[11,"GetSpecIgnoringRef","","`text /** * returns a string for the current URI with the ref element cleared. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHasRef","","`text /** * Returns if there is a reference portion (the part after the \"#\") of the URI. */`",983,null],[11,"GetFilePath","","`text /************************************************************************ * Additional attributes added for .query support: */ /** * Returns a path including the directory and file portions of a * URL. For example, the filePath of \"http://host/foo/bar.html#baz\" * is \"/foo/bar.html\". * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetFilePath","","`text /************************************************************************ * Additional attributes added for .query support: */ /** * Returns a path including the directory and file portions of a * URL. For example, the filePath of \"http://host/foo/bar.html#baz\" * is \"/foo/bar.html\". * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetQuery","","`text /** * Returns the query portion (the part after the \"?\") of the URL. * If there isn't one, an empty string is returned. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetQuery","","`text /** * Returns the query portion (the part after the \"?\") of the URL. * If there isn't one, an empty string is returned. * * Some characters may be escaped. */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayHost","","`text /** * If the URI has a punycode encoded hostname, this will hold the UTF8 * representation of that hostname (if that representation doesn't contain * blacklisted characters, and the network.IDN_show_punycode pref is false) * Otherwise, if the hostname is ASCII, it will return the same as .asciiHost */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayHostPort","","`text /** * The displayHost:port (or simply the displayHost, if port == -1). */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplaySpec","","`text /** * Returns the same as calling .spec, only with a UTF8 encoded hostname * (if that hostname doesn't contain blacklisted characters, and * the network.IDN_show_punycode pref is false) */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDisplayPrePath","","`text /** * Returns the same as calling .prePath, only with a UTF8 encoded hostname * (if that hostname doesn't contain blacklisted characters, and * the network.IDN_show_punycode pref is false) */`",983,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Mutate","","`text /** * Returns an nsIURIMutator that can be used to make changes to the URI. * After performing the setter operations on the mutator, one may call * mutator.finalize() to get a new immutable URI with the desired * properties. */`",983,null],[11,"addref","","",984,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",984,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageCompletionCallback` to one of its base interfaces.",984,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",984,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * Indicates that the event this callback was passed in for has completed. * * @param status * The status of the call. Generally NS_OK if the operation * completed successfully. * @param value * If the operation produces a result, the result. Otherwise, * |null|. * * @see The calling method for expected values. */`",984,null],[11,"addref","","",985,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",985,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMozBrowserFrame` to one of its base interfaces.",985,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",985,{"inputs":[{"name":"self"}],"output":{"name":"nsidommozbrowserframe"}}],[11,"GetReallyIsBrowser","","`text /** * Gets whether this frame really is a browser frame. * * In order to really be a browser frame, this frame's * nsIDOMMozBrowserFrame::mozbrowser attribute must be true, and the frame * may have to pass various security checks. */`",985,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsolated","","`text /** * Gets whether this frame is an isolated frame. * * By default, browser frames are isolated, meaning they have a principal * where OriginAttributes.mIsInIsolatedMozBrowser == true. This isolates * storage and other origin related items from non-browser apps, xul:browsers, * etc. * * Isolation can be disabled by setting the frame's isolated attribute to * false. Disabling isolation is only allowed if the containing document has * browser permission (or equivalent access). */`",985,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"DisallowCreateFrameLoader","","`text /** * Normally, a frame tries to create its frame loader when its src is * modified, or its contentWindow is accessed. * * disallowCreateFrameLoader prevents the frame element from creating its * frame loader (in the same way that not being inside a document prevents the * creation of a frame loader). allowCreateFrameLoader lifts this restriction. * * These methods are not re-entrant -- it is an error to call * disallowCreateFrameLoader twice without first calling allowFrameLoader. * * It's also an error to call either method if we already have a frame loader. */`",985,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AllowCreateFrameLoader","","`void allowCreateFrameLoader ();`",985,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CreateRemoteFrameLoader","","`text /** * Create a remote (i.e., out-of-process) frame loader attached to the given * tab parent. * * It is an error to call this method if we already have a frame loader. */`",985,null],[11,"InitializeBrowserAPI","","`text /** * Initialize the API, and add frame message listener that supports API * invocations. */`",985,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DestroyBrowserFrameScripts","","`text /** * Notify frame scripts that support the API to destroy. */`",985,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",986,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",986,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtocolProxyService` to one of its base interfaces.",986,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",986,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"RESOLVE_PREFER_SOCKS_PROXY","","`text /** Flag 1 << 0 is unused **/ /** * When the proxy configuration is manual this flag may be passed to the * resolve and asyncResolve methods to request to prefer the SOCKS proxy * to HTTP ones. */`",986,null],[18,"RESOLVE_IGNORE_URI_SCHEME","","`text /** * When the proxy configuration is manual this flag may be passed to the * resolve and asyncResolve methods to request to not analyze the uri's * scheme specific proxy. When this flag is set the main HTTP proxy is the * preferred one. * * NOTE: if RESOLVE_PREFER_SOCKS_PROXY is set then the SOCKS proxy is * the preferred one. * * NOTE: if RESOLVE_PREFER_HTTPS_PROXY is set then the HTTPS proxy * is the preferred one. */`",986,null],[18,"RESOLVE_PREFER_HTTPS_PROXY","","`text /** * When the proxy configuration is manual this flag may be passed to the * resolve and asyncResolve methods to request to prefer the HTTPS proxy * to the others HTTP ones. * * NOTE: RESOLVE_PREFER_SOCKS_PROXY takes precedence over this flag. * * NOTE: This flag implies RESOLVE_IGNORE_URI_SCHEME. */`",986,null],[18,"RESOLVE_ALWAYS_TUNNEL","","`text /** * When the proxy configuration is manual this flag may be passed to the * resolve and asyncResolve methods to that all methods will be tunneled via * CONNECT through the http proxy. */`",986,null],[18,"PROXYCONFIG_DIRECT","","`text /** * These values correspond to the possible integer values for the * network.proxy.type preference. */`",986,null],[18,"PROXYCONFIG_MANUAL","","",986,null],[18,"PROXYCONFIG_PAC","","",986,null],[18,"PROXYCONFIG_WPAD","","",986,null],[18,"PROXYCONFIG_SYSTEM","","",986,null],[11,"AsyncResolve","","`text /** * This method returns via callback a nsIProxyInfo instance that identifies * a proxy to be used for the given channel. Otherwise, this method returns * null indicating that a direct connection should be used. * * @param aChannelOrURI * The channel for which a proxy is to be found, or, if no channel is * available, a URI indicating the same. This method will return * NS_ERROR_NOINTERFACE if this argument isn't either an nsIURI or an * nsIChannel. * @param aFlags * A bit-wise combination of the RESOLVE_ flags defined above. Pass * 0 to specify the default behavior. Any additional bits that do * not correspond to a RESOLVE_ flag are reserved for future use. * @param aCallback * The object to be notified when the result is available. * @param aMainThreadTarget * A labelled event target for dispatching runnables to main thread. * * @return An object that can be used to cancel the asychronous operation. * If canceled, the cancelation status (aReason) will be forwarded * to the callback's onProxyAvailable method via the aStatus param. * * NOTE: If this proxy is unavailable, getFailoverForProxy may be called * to determine the correct secondary proxy to be used. * * NOTE: If the protocol handler for the given URI supports * nsIProxiedProtocolHandler, then the nsIProxyInfo instance returned from * resolve may be passed to the newProxiedChannel method to create a * nsIChannel to the given URI that uses the specified proxy. * * NOTE: However, if the nsIProxyInfo type is \"http\", then it means that * the given URI should be loaded using the HTTP protocol handler, which * also supports nsIProxiedProtocolHandler. * * @see nsIProxiedProtocolHandler::newProxiedChannel */`",986,null],[11,"NewProxyInfo","","`text /** * This method may be called to construct a nsIProxyInfo instance from * the given parameters. This method may be useful in conjunction with * nsISocketTransportService::createTransport for creating, for example, * a SOCKS connection. * * @param aType * The proxy type. This is a string value that identifies the proxy * type. Standard values include: * \"http\" - specifies a HTTP proxy * \"https\" - specifies HTTP proxying over TLS connection to proxy * \"socks\" - specifies a SOCKS version 5 proxy * \"socks4\" - specifies a SOCKS version 4 proxy * \"direct\" - specifies a direct connection (useful for failover) * The type name is case-insensitive. Other string values may be * possible, and new types may be defined by a future version of * this interface. * @param aHost * The proxy hostname or IP address. * @param aPort * The proxy port. * @param aFlags * Flags associated with this connection. See nsIProxyInfo.idl * for currently defined flags. * @param aFailoverTimeout * Specifies the length of time (in seconds) to ignore this proxy if * this proxy fails. Pass UINT32_MAX to specify the default * timeout value, causing nsIProxyInfo::failoverTimeout to be * assigned the default value. * @param aFailoverProxy * Specifies the next proxy to try if this proxy fails. This * parameter may be null. */`",986,null],[11,"NewProxyInfoWithAuth","","`text /** * This method may be called to construct a nsIProxyInfo instance for * with the specified username and password. * Currently implemented for SOCKS proxies only. * @param aType * The proxy type. This is a string value that identifies the proxy * type. Standard values include: * \"socks\" - specifies a SOCKS version 5 proxy * \"socks4\" - specifies a SOCKS version 4 proxy * The type name is case-insensitive. Other string values may be * possible, and new types may be defined by a future version of * this interface. * @param aHost * The proxy hostname or IP address. * @param aPort * The proxy port. * @param aUsername * The proxy username * @param aPassword * The proxy password * @param aFlags * Flags associated with this connection. See nsIProxyInfo.idl * for currently defined flags. * @param aFailoverTimeout * Specifies the length of time (in seconds) to ignore this proxy if * this proxy fails. Pass UINT32_MAX to specify the default * timeout value, causing nsIProxyInfo::failoverTimeout to be * assigned the default value. * @param aFailoverProxy * Specifies the next proxy to try if this proxy fails. This * parameter may be null. */`",986,null],[11,"GetFailoverForProxy","","`text /** * If the proxy identified by aProxyInfo is unavailable for some reason, * this method may be called to access an alternate proxy that may be used * instead. As a side-effect, this method may affect future result values * from resolve/asyncResolve as well as from getFailoverForProxy. * * @param aProxyInfo * The proxy that was unavailable. * @param aURI * The URI that was originally passed to resolve/asyncResolve. * @param aReason * The error code corresponding to the proxy failure. This value * may be used to tune the delay before this proxy is used again. * * @throw NS_ERROR_NOT_AVAILABLE if there is no alternate proxy available. */`",986,null],[11,"RegisterFilter","","`text /** * This method may be used to register a proxy filter instance. Each proxy * filter is registered with an associated position that determines the * order in which the filters are applied (starting from position 0). When * resolve/asyncResolve is called, it generates a list of proxies for the * given URI, and then it applies the proxy filters. The filters have the * opportunity to modify the list of proxies. * * If two filters register for the same position, then the filters will be * visited in the order in which they were registered. * * If the filter is already registered, then its position will be updated. * * After filters have been run, any disabled or disallowed proxies will be * removed from the list. A proxy is disabled if it had previously failed- * over to another proxy (see getFailoverForProxy). A proxy is disallowed, * for example, if it is a HTTP proxy and the nsIProtocolHandler for the * queried URI does not permit proxying via HTTP. * * If a nsIProtocolHandler disallows all proxying, then filters will never * have a chance to intercept proxy requests for such URLs. * * @param aFilter * The nsIProtocolProxyFilter instance to be registered. * @param aPosition * The position of the filter. * * NOTE: It is possible to construct filters that compete with one another * in undesirable ways. This API does not attempt to protect against such * problems. It is recommended that any extensions that choose to call * this method make their position value configurable at runtime (perhaps * via the preferences service). */`",986,null],[11,"RegisterChannelFilter","","`text /** * Similar to registerFilter, but accepts an nsIProtocolProxyChannelFilter, * which selects proxies according to channel rather than URI. * * @param aFilter * The nsIProtocolProxyChannelFilter instance to be registered. * @param aPosition * The position of the filter. */`",986,null],[11,"UnregisterFilter","","`text /** * This method may be used to unregister a proxy filter instance. All * filters will be automatically unregistered at XPCOM shutdown. * * @param aFilter * The nsIProtocolProxyFilter instance to be unregistered. */`",986,null],[11,"UnregisterChannelFilter","","`text /** * This method may be used to unregister a proxy channel filter instance. All * filters will be automatically unregistered at XPCOM shutdown. * * @param aFilter * The nsIProtocolProxyChannelFilter instance to be unregistered. */`",986,null],[11,"GetProxyConfigType","","`text /** * This attribute specifies the current type of proxy configuration. */`",986,null],[11,"addref","","",987,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",987,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserHandler` to one of its base interfaces.",987,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",987,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStartPage","","`attribute AUTF8String startPage;`",987,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetStartPage","","`attribute AUTF8String startPage;`",987,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDefaultArgs","","`attribute AUTF8String defaultArgs;`",987,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDefaultArgs","","`attribute AUTF8String defaultArgs;`",987,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFeatures","","`text /** * Extract the width and height specified on the command line, if present. * @return A feature string with a prepended comma, e.g. \",width=500,height=400\" */`",987,null],[11,"addref","","",988,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",988,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIWithPrincipal` to one of its base interfaces.",988,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",988,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrincipal","","`text /** * The principal associated with the resource returned when loading this * uri. */`",988,null],[11,"GetPrincipalUri","","`text /** * The uri for the principal. */`",988,null],[11,"addref","","",989,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",989,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInterfaceInfoManager` to one of its base interfaces.",989,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",989,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInfoForIID","","`nsIInterfaceInfo getInfoForIID (in nsIIDPtr iid);`",989,null],[11,"GetInfoForName","","`nsIInterfaceInfo getInfoForName (in string name);`",989,null],[11,"addref","","",990,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",990,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebNavigationInfo` to one of its base interfaces.",990,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",990,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNSUPPORTED","","`text /** * Returned by isTypeSupported to indicate lack of support for a type. * @note this is guaranteed not to change, so that boolean tests can be done * on the return value if isTypeSupported to detect whether a type is * supported at all. */`",990,null],[18,"IMAGE","","`text /** * Returned by isTypeSupported to indicate that a type is supported as an * image. */`",990,null],[18,"PLUGIN","","`text /** * Returned by isTypeSupported to indicate that a type is supported via an * NPAPI (\"Netscape 4 API\") plug-in. This is not the value returned for * \"XPCOM plug-ins\". */`",990,null],[18,"OTHER","","`text /** * @note Other return types may be added here in the future as they become * relevant. */ /** * Returned by isTypeSupported to indicate that a type is supported via some * other means. */`",990,null],[11,"IsTypeSupported","","`text /** * Query whether aType is supported. * @param aType the MIME type in question. * @param aWebNav the nsIWebNavigation object for which the request * is being made. This is allowed to be null. If it is non-null, * the return value of this method may depend on the exact state of * aWebNav and the values set through nsIWebBrowserSetup; otherwise * the method will assume that the caller is interested in information * about nsIWebNavigation objects in their default state. * @return an enum value indicating whether and how aType is supported. * @note This method may rescan plugins to ensure that they're properly * registered for the types they support. */`",990,null],[11,"addref","","",991,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",991,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXMLDocument` to one of its base interfaces.",991,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",991,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",992,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",992,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMBeforeUnloadEvent` to one of its base interfaces.",992,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",992,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetReturnValue","","`text /** * Attribute used to pass back a return value from a beforeunload * handler */`",992,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetReturnValue","","`text /** * Attribute used to pass back a return value from a beforeunload * handler */`",992,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",993,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",993,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIEncoder` to one of its base interfaces.",993,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",993,{"inputs":[{"name":"self"}],"output":{"name":"nsiasyncinputstream"}}],[18,"INPUT_FORMAT_RGB","","",993,null],[18,"INPUT_FORMAT_RGBA","","",993,null],[18,"INPUT_FORMAT_HOSTARGB","","",993,null],[11,"InitFromData","","`void initFromData ([array, size_is (length), const] in uint8_t data, in unsigned long length, in uint32_t width, in uint32_t height, in uint32_t stride, in uint32_t inputFormat, in AString outputOptions);`",993,null],[11,"StartImageEncode","","`void startImageEncode (in uint32_t width, in uint32_t height, in uint32_t inputFormat, in AString outputOptions);`",993,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddImageFrame","","`void addImageFrame ([array, size_is (length), const] in uint8_t data, in unsigned long length, in uint32_t width, in uint32_t height, in uint32_t stride, in uint32_t frameFormat, in AString frameOptions);`",993,null],[11,"EndImageEncode","","`void endImageEncode ();`",993,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetImageBufferUsed","","`[noscript] unsigned long getImageBufferUsed ();`",993,null],[11,"GetImageBuffer","","`[noscript] charPtr getImageBuffer ();`",993,null],[11,"addref","","",994,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",994,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMProcessingInstruction` to one of its base interfaces.",994,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",994,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcharacterdata"}}],[11,"GetTarget","","`text /** * The nsIDOMProcessingInstruction interface represents a * \"processing instruction\", used in XML as a way to keep processor-specific * information in the text of the document. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ and * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html */`",994,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",995,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",995,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageStatement` to one of its base interfaces.",995,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",995,{"inputs":[{"name":"self"}],"output":{"name":"mozistoragebasestatement"}}],[18,"VALUE_TYPE_NULL","","`text /** * Execute a query, using any currently-bound parameters. Reset is called * when no more data is returned. This method is only available to JavaScript * consumers. * * @deprecated As of Mozilla 1.9.2 in favor of executeStep(). * * @return a boolean indicating whether there are more rows or not. * * [deprecated] boolean step(); */ /** * Obtains the current list of named parameters, which are settable. This * property is only available to JavaScript consumers. * * readonly attribute mozIStorageStatementParams params; */ /** * Obtains the current row, with access to all the data members by name. This * property is only available to JavaScript consumers. * * readonly attribute mozIStorageStatementRow row; */ /** * These type values are returned by getTypeOfIndex * to indicate what type of value is present at * a given column. */`",995,null],[18,"VALUE_TYPE_INTEGER","","",995,null],[18,"VALUE_TYPE_FLOAT","","",995,null],[18,"VALUE_TYPE_TEXT","","",995,null],[18,"VALUE_TYPE_BLOB","","",995,null],[11,"Clone","","`text /** * Create a clone of this statement, by initializing a new statement * with the same connection and same SQL statement as this one. It * does not preserve statement state; that is, if a statement is * being executed when it is cloned, the new statement will not be * executing. */`",995,null],[11,"GetParameterCount","","`readonly attribute unsigned long parameterCount;`",995,null],[11,"GetParameterName","","`text /** * Name of nth parameter, if given */`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetParameterIndex","","`text /** * Returns the index of the named parameter. * * @param aName * The name of the parameter you want the index for. This does not * include the leading ':'. * @return the index of the named parameter. */`",995,null],[11,"GetColumnCount","","`text /** * Number of columns returned */`",995,null],[11,"GetColumnName","","`text /** * Name of nth column */`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetColumnIndex","","`text /** * Obtains the index of the column with the specified name. * * @param aName * The name of the column. * @return The index of the column with the specified name. */`",995,null],[11,"Reset","","`text /** * Reset parameters/statement execution */`",995,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Execute","","`text /** * Execute the query, ignoring any results. This is accomplished by * calling executeStep() once, and then calling reset(). * * Error and last insert info, etc. are available from * the mozStorageConnection. */`",995,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ExecuteStep","","`text /** * Execute a query, using any currently-bound parameters. Reset * must be called on the statement after the last call of * executeStep. * * @return a boolean indicating whether there are more rows or not; * row data may be accessed using mozIStorageValueArray methods on * the statement. */`",995,null],[11,"GetNumEntries","","`text /** * The number of entries in the array (each corresponding to a column in the * database row) */`",995,null],[11,"GetTypeOfIndex","","`text /** * Indicate the data type of the current result row for the the given column. * SQLite will perform type conversion if you ask for a value as a different * type than it is stored as. * * @param aIndex * 0-based column index. * @return The type of the value at the given column index; one of * VALUE_TYPE_NULL, VALUE_TYPE_INTEGER, VALUE_TYPE_FLOAT, * VALUE_TYPE_TEXT, VALUE_TYPE_BLOB. */`",995,null],[11,"GetInt32","","`text /** * Retrieve the contents of a column from the current result row as an * integer. * * @param aIndex * 0-based colummn index. * @return Column value interpreted as an integer per type conversion rules. * @{ */`",995,null],[11,"GetInt64","","`long long getInt64 (in unsigned long aIndex);`",995,null],[11,"GetDouble","","`text /** @} */ /** * Retrieve the contents of a column from the current result row as a * floating point double. * * @param aIndex * 0-based colummn index. * @return Column value interpreted as a double per type conversion rules. */`",995,null],[11,"GetUTF8String","","`text /** * Retrieve the contents of a column from the current result row as a * string. * * @param aIndex * 0-based colummn index. * @return The value for the result column interpreted as a string. If the * stored value was NULL, you will get an empty string with IsVoid set * to distinguish it from an explicitly set empty string. * @{ */`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetString","","`AString getString (in unsigned long aIndex);`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBlob","","`text /** @} */ /** * Retrieve the contents of a column from the current result row as a * blob. * * @param aIndex * 0-based colummn index. * @param[out] aDataSize * The number of bytes in the blob. * @param[out] aData * The contents of the BLOB. This will be NULL if aDataSize == 0. */`",995,null],[11,"GetBlobAsString","","`text /** * Retrieve the contents of a Blob column from the current result row as a * string. * * @param aIndex * 0-based colummn index. * @return The value for the result Blob column interpreted as a String. * No encoding conversion is performed. */`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBlobAsUTF8String","","`text /** * Retrieve the contents of a Blob column from the current result row as a * UTF8 string. * * @param aIndex * 0-based colummn index. * @return The value for the result Blob column interpreted as a UTF8 String. * No encoding conversion is performed. */`",995,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsNull","","`text /** * Check whether the given column in the current result row is NULL. * * @param aIndex * 0-based colummn index. * @return true if the value for the result column is null. */`",995,null],[11,"GetSharedUTF8String","","`text /** * Returns a shared string pointer */`",995,null],[11,"GetSharedString","","`[noscript] void getSharedString (in unsigned long aIndex, out unsigned long aLength, [shared, retval] out wstring aResult);`",995,null],[11,"addref","","",996,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",996,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEventTarget` to one of its base interfaces.",996,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",996,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DISPATCH_NORMAL","","`text /** * This flag specifies the default mode of event dispatch, whereby the event * is simply queued for later processing. When this flag is specified, * dispatch returns immediately after the event is queued. */`",996,null],[18,"DISPATCH_SYNC","","`text /** * This flag specifies the synchronous mode of event dispatch, in which the * dispatch method does not return until the event has been processed. * * NOTE: passing this flag to dispatch may have the side-effect of causing * other events on the current thread to be processed while waiting for the * given event to be processed. */`",996,null],[18,"DISPATCH_AT_END","","`text /** * This flag specifies that the dispatch is occurring from a running event * that was dispatched to the same event target, and that event is about to * finish. * * A thread pool can use this as an optimization hint to not spin up * another thread, since the current thread is about to become idle. * * These events are always async. */`",996,null],[11,"IsOnCurrentThreadInfallible","","`text /** * IsOnCurrentThread() should return true if events dispatched to this target * can possibly run on the current thread, and false otherwise. In the case * of an nsIEventTarget for a thread pool, it should return true on all * threads in the pool. In the case of a non-thread nsIEventTarget such as * ThrottledEventQueue, it should return true on the thread where events are * expected to be processed, even if no events from the queue are actually * being processed right now. * * When called on an nsISerialEventTarget, IsOnCurrentThread can be used to * ensure that no other thread has \"ownership\" of the event target. As such, * it's useful for asserting that an object is only used on a particular * thread. IsOnCurrentThread can't guarantee that the current event has been * dispatched through a particular event target. * * The infallible version of IsOnCurrentThread() is optimized to avoid a * virtual call for non-thread event targets. Thread targets should set * mVirtualThread to their virtual PRThread. Non-thread targets should leave * mVirtualThread null and implement IsOnCurrentThreadInfallible() to * return the correct answer. * * The fallible version of IsOnCurrentThread may return errors, such as during * shutdown. If it does not return an error, it should return the same result * as the infallible version. The infallible method should return the correct * result regardless of whether the fallible method returns an error. */`",996,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"IsOnCurrentThread","","`boolean isOnCurrentThread ();`",996,null],[11,"DispatchFromScript","","`text /** * Version of Dispatch to expose to JS, which doesn't require an alreadyAddRefed<> * (it will be converted to that internally) * * @param event * The (raw) event to dispatch. * @param flags * The flags modifying event dispatch. The flags are described in detail * below. * * @throws NS_ERROR_INVALID_ARG * Indicates that event is null. * @throws NS_ERROR_UNEXPECTED * Indicates that the thread is shutting down and has finished processing * events, so this event would never run and has not been dispatched. */`",996,null],[11,"addref","","",997,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",997,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginManager` to one of its base interfaces.",997,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",997,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddLogin","","`text /** * Store a new login in the login manager. * * @param aLogin * The login to be added. * @return a clone of the login info with the guid set (even if it was not provided) * * Default values for the login's nsILoginMetaInfo properties will be * created. However, if the caller specifies non-default values, they will * be used instead. */`",997,null],[11,"RemoveLogin","","`text /** * Remove a login from the login manager. * * @param aLogin * The login to be removed. * * The specified login must exactly match a stored login. However, the * values of any nsILoginMetaInfo properties are ignored. */`",997,null],[11,"ModifyLogin","","`text /** * Modify an existing login in the login manager. * * @param oldLogin * The login to be modified. * @param newLoginData * The new login values (either a nsILoginInfo or nsIProperyBag) * * If newLoginData is a nsILoginInfo, all of the old login's nsILoginInfo * properties are changed to the values from newLoginData (but the old * login's nsILoginMetaInfo properties are unmodified). * * If newLoginData is a nsIPropertyBag, only the specified properties * will be changed. The nsILoginMetaInfo properties of oldLogin can be * changed in this manner. * * If the propertybag contains an item named \"timesUsedIncrement\", the * login's timesUsed property will be incremented by the item's value. */`",997,null],[11,"RemoveAllLogins","","`text /** * Remove all logins known to login manager. * * The browser sanitization feature allows the user to clear any stored * passwords. This interface allows that to be done without getting each * login first (which might require knowing the master password). * */`",997,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAllLogins","","`text /** * Fetch all logins in the login manager. An array is always returned; * if there are no logins the array is empty. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property and omit this param. * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.getAllLogins(); * (|logins| is an array). */`",997,null],[11,"GetAllDisabledHosts","","`text /** * Obtain a list of all hosts for which password saving is disabled. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property and omit this param. * @param hostnames * An array of hostname strings, in origin URL format without a * pathname. For example: \"https://www.site.com\". * * NOTE: This can be called from JS as: * var logins = pwmgr.getDisabledAllLogins(); */`",997,null],[11,"GetLoginSavingEnabled","","`text /** * Check to see if saving logins has been disabled for a host. * * @param aHost * The hostname to check. This argument should be in the origin * URL format, without a pathname. For example: \"http://foo.com\". */`",997,null],[11,"SetLoginSavingEnabled","","`text /** * Disable (or enable) storing logins for the specified host. When * disabled, the login manager will not prompt to store logins for * that host. Existing logins are not affected. * * @param aHost * The hostname to set. This argument should be in the origin * URL format, without a pathname. For example: \"http://foo.com\". * @param isEnabled * Specify if saving logins should be enabled (true) or * disabled (false) */`",997,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"FindLogins","","`text /** * Search for logins matching the specified criteria. Called when looking * for logins that might be applicable to a form or authentication request. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property, and supply an dummy object for * this out param. For example: |findLogins({}, hostname, ...)| * @param aHostname * The hostname to restrict searches to, in URL format. For * example: \"http://www.site.com\". * To find logins for a given nsIURI, you would typically pass in * its prePath. * @param aActionURL * For form logins, this argument should be the URL to which the * form will be submitted. For protocol logins, specify null. * An empty string (\"\") will match any value (except null). * @param aHttpRealm * For protocol logins, this argument should be the HTTP Realm * for which the login applies. This is obtained from the * WWW-Authenticate header. See RFC2617. For form logins, * specify null. * An empty string (\"\") will match any value (except null). * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.findLogins({}, hostname, ...); * */`",997,null],[11,"CountLogins","","`text /** * Search for logins matching the specified criteria, as with * findLogins(). This interface only returns the number of matching * logins (and not the logins themselves), which allows a caller to * check for logins without causing the user to be prompted for a master * password to decrypt the logins. * * @param aHostname * The hostname to restrict searches to. Specify an empty string * to match all hosts. A null value will not match any logins, and * will thus always return a count of 0. * @param aActionURL * The URL to which a form login will be submitted. To match any * form login, specify an empty string. To not match any form * login, specify null. * @param aHttpRealm * The HTTP Realm for which the login applies. To match logins for * any realm, specify an empty string. To not match logins for any * realm, specify null. */`",997,null],[11,"AutoCompleteSearchAsync","","`text /** * Generate results for a userfield autocomplete menu. * * NOTE: This interface is provided for use only by the FormFillController, * which calls it directly. This isn't really ideal, it should * probably be callback registered through the FFC. */`",997,null],[11,"StopSearch","","`text /** * Stop a previously-started async search. */`",997,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SearchLogins","","`text /** * Search for logins in the login manager. An array is always returned; * if there are no logins the array is empty. * * @param count * The number of elements in the array. JS callers can simply use * the array's .length property, and supply an dummy object for * this out param. For example: |searchLogins({}, matchData)| * @param matchData * The data used to search. This does not follow the same * requirements as findLogins for those fields. Wildcard matches are * simply not specified. * @param logins * An array of nsILoginInfo objects. * * NOTE: This can be called from JS as: * var logins = pwmgr.searchLogins({}, matchData); * (|logins| is an array). */`",997,null],[11,"GetUiBusy","","`text /** * True when a master password prompt is being displayed. */`",997,null],[11,"GetIsLoggedIn","","`text /** * True when the master password has already been entered, and so a caller * can ask for decrypted logins without triggering a prompt. */`",997,null],[11,"addref","","",998,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",998,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINestedEventLoopCondition` to one of its base interfaces.",998,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",998,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsDone","","`text /** * Returns true if the current nested event loop should stop spinning. */`",998,null],[11,"addref","","",999,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",999,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadManager` to one of its base interfaces.",999,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",999,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DEFAULT_STACK_SIZE","","`text /** * Default number of bytes reserved for a thread's stack, if no stack size * is specified in newThread(). 0 means use platform default. */`",999,null],[11,"NewThread","","`text /** * Create a new thread (a global, user PRThread). * * @param creationFlags * Reserved for future use. Pass 0. * @param stackSize * Number of bytes to reserve for the thread's stack. * * @returns * The newly created nsIThread object. */`",999,null],[11,"NewNamedThread","","`text /** * Create a new thread (a global, user PRThread) with the specified name. * * @param name * The name of the thread. Passing an empty name is equivalent to * calling newThread(0, stackSize), i.e. the thread will not be named. * @param stackSize * Number of bytes to reserve for the thread's stack. * * @returns * The newly created nsIThread object. */`",999,null],[11,"GetMainThread","","`text /** * Get the main thread. */`",999,null],[11,"GetCurrentThread","","`text /** * Get the current thread. If the calling thread does not already have a * nsIThread associated with it, then a new nsIThread will be created and * associated with the current PRThread. */`",999,null],[11,"DispatchToMainThread","","`text /** * This queues a runnable to the main thread. It's a shortcut for JS callers * to be used instead of * .mainThread.dispatch(runnable, Ci.nsIEventTarget.DISPATCH_NORMAL); * or * .currentThread.dispatch(runnable, Ci.nsIEventTarget.DISPATCH_NORMAL); * C++ callers should instead use NS_DispatchToMainThread. */`",999,null],[11,"IdleDispatchToMainThread","","`text /** * This queues a runnable to the main thread's idle queue. * * @param event * The event to dispatch. * @param timeout * The time in milliseconds until this event should be moved from the idle * queue to the regular queue if it hasn't been executed by then. If not * passed or a zero value is specified, the event will never be moved to * the regular queue. */`",999,null],[11,"SpinEventLoopUntil","","`text /** * Enter a nested event loop on the current thread, waiting on, and * processing events until condition.isDone() returns true. * * If condition.isDone() throws, this function will throw as well. * * C++ code should not use this function, instead preferring * mozilla::SpinEventLoopUntil. */`",999,null],[11,"SpinEventLoopUntilEmpty","","`text /** * Spin the current thread's event loop until there are no more pending * events. This could be done with spinEventLoopUntil, but that would * require access to the current thread from JavaScript, which we are * moving away from. */`",999,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSystemGroupEventTarget","","`text /** * Return the SchedulerEventTarget for the SystemGroup. */`",999,null],[11,"addref","","",1000,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1000,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleVirtualCursorChangeEvent` to one of its base interfaces.",1000,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1000,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetOldAccessible","","`text /** * Previous object pointed at by virtual cursor. null if none. */`",1000,null],[11,"GetOldStartOffset","","`text /** * Previous start offset of pivot. -1 if none. */`",1000,null],[11,"GetOldEndOffset","","`text /** * Previous end offset of pivot. -1 if none. */`",1000,null],[11,"GetReason","","`text /** * Reason for virtual cursor move. */`",1000,null],[11,"addref","","",1001,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1001,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputStreamChannel` to one of its base interfaces.",1001,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1001,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetURI","","`text /** * Sets the URI for this channel. This must be called before the * channel is opened, and it may only be called once. */`",1001,null],[11,"GetContentStream","","`text /** * Get/set the content stream * * This stream contains the data that will be pushed to the channel's * stream listener. If the stream is non-blocking and supports the * nsIAsyncInputStream interface, then the stream will be read directly. * Otherwise, the stream will be read on a background thread. * * This attribute must be set before the channel is opened, and it may * only be set once. * * @throws NS_ERROR_IN_PROGRESS if the setter is called after the channel * has been opened. */`",1001,null],[11,"SetContentStream","","`text /** * Get/set the content stream * * This stream contains the data that will be pushed to the channel's * stream listener. If the stream is non-blocking and supports the * nsIAsyncInputStream interface, then the stream will be read directly. * Otherwise, the stream will be read on a background thread. * * This attribute must be set before the channel is opened, and it may * only be set once. * * @throws NS_ERROR_IN_PROGRESS if the setter is called after the channel * has been opened. */`",1001,null],[11,"GetSrcdocData","","`text /** * Get/set the srcdoc data string. When the input stream channel is * created to load a srcdoc iframe, this is set to hold the value of the * srcdoc attribute. * * This should be the same value used to create contentStream, but this is * not checked. * * Changing the value of this attribute will not otherwise affect the * functionality of the channel or input stream. */`",1001,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSrcdocData","","`text /** * Get/set the srcdoc data string. When the input stream channel is * created to load a srcdoc iframe, this is set to hold the value of the * srcdoc attribute. * * This should be the same value used to create contentStream, but this is * not checked. * * Changing the value of this attribute will not otherwise affect the * functionality of the channel or input stream. */`",1001,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetIsSrcdocChannel","","`text /** * Returns true if srcdocData has been set within the channel. */`",1001,null],[11,"GetBaseURI","","`text /** * The base URI to be used for the channel. Used when the base URI cannot * be inferred by other means, for example when this is a srcdoc channel. */`",1001,null],[11,"SetBaseURI","","`text /** * The base URI to be used for the channel. Used when the base URI cannot * be inferred by other means, for example when this is a srcdoc channel. */`",1001,null],[11,"addref","","",1002,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1002,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISerialEventTarget` to one of its base interfaces.",1002,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1002,{"inputs":[{"name":"self"}],"output":{"name":"nsieventtarget"}}],[11,"addref","","",1003,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1003,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteController` to one of its base interfaces.",1003,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATUS_NONE","","",1003,null],[18,"STATUS_SEARCHING","","",1003,null],[18,"STATUS_COMPLETE_NO_MATCH","","",1003,null],[18,"STATUS_COMPLETE_MATCH","","",1003,null],[11,"GetInput","","`attribute nsIAutoCompleteInput input;`",1003,null],[11,"SetInput","","`attribute nsIAutoCompleteInput input;`",1003,null],[11,"GetSearchStatus","","`readonly attribute unsigned short searchStatus;`",1003,null],[11,"GetMatchCount","","`readonly attribute unsigned long matchCount;`",1003,null],[11,"StartSearch","","`void startSearch (in AString searchString);`",1003,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"StopSearch","","`void stopSearch ();`",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HandleText","","`boolean handleText ();`",1003,null],[11,"HandleEnter","","`boolean handleEnter (in boolean aIsPopupSelection, [optional] in nsIDOMEvent aEvent);`",1003,null],[11,"HandleEscape","","`boolean handleEscape ();`",1003,null],[11,"HandleStartComposition","","`void handleStartComposition ();`",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HandleEndComposition","","`void handleEndComposition ();`",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HandleTab","","`void handleTab ();`",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"HandleKeyNavigation","","`boolean handleKeyNavigation (in unsigned long key);`",1003,null],[11,"HandleDelete","","`boolean handleDelete ();`",1003,null],[11,"GetValueAt","","`AString getValueAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLabelAt","","`AString getLabelAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCommentAt","","`AString getCommentAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStyleAt","","`AString getStyleAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImageAt","","`AString getImageAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFinalCompleteValueAt","","`AString getFinalCompleteValueAt (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSearchString","","`attribute AString searchString;`",1003,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSearchString","","`attribute AString searchString;`",1003,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetInitiallySelectedIndex","","`void setInitiallySelectedIndex (in long index);`",1003,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ResetInternalState","","`void resetInternalState ();`",1003,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1004,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1004,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPluginInstanceOwner` to one of its base interfaces.",1004,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1004,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMode","","`text /** * Get the display mode for the plugin instance. */`",1004,null],[11,"CreateWidget","","`text /** * Create a place for the plugin to live in the owner's * environment. this may or may not create a window * depending on the windowless state of the plugin instance. */`",1004,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDocument","","`text /** * Get the associated document. */`",1004,null],[11,"RedrawPlugin","","`text /** * Have the plugin recomposited. */`",1004,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetNetscapeWindow","","`text /** * Get NetscapeWindow, corresponds to NPNVnetscapeWindow */`",1004,null],[11,"SetEventModel","","`text /** * Convert between plugin, window, and screen coordinate spaces. */`",1004,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CallSetWindow","","`text /** * Call NPP_SetWindow on the plugin. */`",1004,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetContentsScaleFactor","","`text /** * Get the contents scale factor for the screen the plugin is * drawn on. */`",1004,null],[11,"addref","","",1005,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1005,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAssociatedContentSecurity` to one of its base interfaces.",1005,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1005,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCountSubRequestsBrokenSecurity","","`attribute long countSubRequestsBrokenSecurity;`",1005,null],[11,"SetCountSubRequestsBrokenSecurity","","`attribute long countSubRequestsBrokenSecurity;`",1005,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetCountSubRequestsNoSecurity","","`attribute long countSubRequestsNoSecurity;`",1005,null],[11,"SetCountSubRequestsNoSecurity","","`attribute long countSubRequestsNoSecurity;`",1005,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Flush","","`void flush ();`",1005,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1006,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1006,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTMLObjectResizer` to one of its base interfaces.",1006,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1006,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eTopLeft","","",1006,null],[18,"eTop","","",1006,null],[18,"eTopRight","","",1006,null],[18,"eLeft","","",1006,null],[18,"eRight","","",1006,null],[18,"eBottomLeft","","",1006,null],[18,"eBottom","","",1006,null],[18,"eBottomRight","","",1006,null],[11,"GetResizedObject","","`text /** * the element currently displaying resizers */`",1006,null],[11,"GetObjectResizingEnabled","","`text /** * a boolean indicating if object resizing is enabled in the editor */`",1006,null],[11,"SetObjectResizingEnabled","","`text /** * a boolean indicating if object resizing is enabled in the editor */`",1006,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ShowResizers","","`text /** * Shows active resizers around an element's frame * @param aResizedElement [IN] a DOM Element */`",1006,null],[11,"HideResizers","","`text /** * Hide resizers if they are visible */`",1006,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RefreshResizers","","`text /** * Refresh visible resizers */`",1006,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MouseDown","","`text /** * event callback when a mouse button is pressed * @param aX [IN] horizontal position of the pointer * @param aY [IN] vertical position of the pointer * @param aTarget [IN] the element triggering the event * @param aMouseEvent [IN] the event */`",1006,null],[11,"MouseUp","","`text /** * event callback when a mouse button is released * @param aX [IN] horizontal position of the pointer * @param aY [IN] vertical position of the pointer * @param aTarget [IN] the element triggering the event */`",1006,null],[11,"MouseMove","","`text /** * event callback when the mouse pointer is moved * @param aMouseEvent [IN] the event */`",1006,null],[11,"addref","","",1007,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1007,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIToolkitProfileService` to one of its base interfaces.",1007,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1007,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStartWithLastProfile","","`attribute boolean startWithLastProfile;`",1007,null],[11,"SetStartWithLastProfile","","`attribute boolean startWithLastProfile;`",1007,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetStartOffline","","`attribute boolean startOffline;`",1007,null],[11,"SetStartOffline","","`attribute boolean startOffline;`",1007,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetProfiles","","`readonly attribute nsISimpleEnumerator profiles;`",1007,null],[11,"GetSelectedProfile","","`text /** * The currently selected profile (the one used or about to be used by the * browser). */`",1007,null],[11,"SetSelectedProfile","","`text /** * The currently selected profile (the one used or about to be used by the * browser). */`",1007,null],[11,"GetDefaultProfile","","`text /** * The default profile (the one used or about to be used by the * browser if no other profile is specified at runtime). This is the profile * marked with Default=1 in profiles.ini and is usually the same as * selectedProfile, except on Developer Edition. * * Developer Edition uses a profile named \"dev-edition-default\" as the * default profile (which it creates if it doesn't exist), unless a special * empty file named \"ignore-dev-edition-profile\" is present next to * profiles.ini. In that case Developer Edition behaves the same as any * other build of Firefox. */`",1007,null],[11,"SetDefaultProfile","","`text /** * The default profile (the one used or about to be used by the * browser if no other profile is specified at runtime). This is the profile * marked with Default=1 in profiles.ini and is usually the same as * selectedProfile, except on Developer Edition. * * Developer Edition uses a profile named \"dev-edition-default\" as the * default profile (which it creates if it doesn't exist), unless a special * empty file named \"ignore-dev-edition-profile\" is present next to * profiles.ini. In that case Developer Edition behaves the same as any * other build of Firefox. */`",1007,null],[11,"GetProfileByName","","`text /** * Get a profile by name. This is mainly for use by the -P * commandline flag. * * @param aName The profile name to find. */`",1007,null],[11,"LockProfilePath","","`text /** * Lock an arbitrary path as a profile. If the path does not exist, it * will be created and the defaults copied from the application directory. */`",1007,null],[11,"CreateProfile","","`text /** * Create a new profile. * * The profile temporary directory will be chosen based on where the * profile directory is located. * * @param aRootDir * The profile directory. May be null, in which case a suitable * default will be chosen based on the profile name. * @param aName * The profile name. */`",1007,null],[11,"CreateDefaultProfileForApp","","`text /** * Create the default profile for an application. * * The profile will be typically in * {Application Data}/.profilename/{salt}.default or * {Application Data}/.appname/{salt}.default * or if aVendorName is provided * {Application Data}/.vendor/appname/{salt}.default * * @note Either aProfileName or aAppName must be non-empty * * @param aProfileName * The name of the profile * @param aAppName * The name of the application * @param aVendorName * The name of the vendor * @return The created profile. */`",1007,null],[11,"GetProfileCount","","`text /** * Returns the number of profiles. * @return 0, 1, or 2. More than 2 profiles will always return 2. */`",1007,null],[11,"Flush","","`text /** * Flush the profiles list file. */`",1007,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1008,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1008,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStringBundleOverride` to one of its base interfaces.",1008,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1008,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStringFromName","","`text /** * get the override value for a particular key in a particular * string bundle */`",1008,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"EnumerateKeysInBundle","","`text /** * get all override keys for a given string bundle */`",1008,null],[11,"addref","","",1009,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1009,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHandlerService` to one of its base interfaces.",1009,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1009,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AsyncInit","","`text /** * Asynchronously performs any IO that the nsIHandlerService needs to do * before it can be of use. */`",1009,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Enumerate","","`text /** * Retrieve a list of all handlers in the datastore. This list is not * guaranteed to be in any particular order, and callers should not assume * it will remain in the same order in the future. * * @returns a list of all handlers in the datastore */`",1009,null],[11,"FillHandlerInfo","","`text /** * Fill a handler info object with information from the datastore. * * Note: because of the way the external helper app service currently mixes * OS and user handler info in the same handler info object, this method * takes an existing handler info object (probably retrieved from the OS) * and \"fills it in\" with information from the datastore, overriding any * existing properties on the object with properties from the datastore. * * Ultimately, however, we're going to separate OS and user handler info * into separate objects, at which point this method should be renamed to * something like \"get\" or \"retrieve\", take a class and type (or perhaps * a type whose class can be determined by querying the type, for example * an nsIContentType which is also an nsIMIMEType or an nsIProtocolScheme), * and return a handler info object representing only the user info. * * Note: if you specify an override type, then the service will fill in * the handler info object with information about that type instead of * the type specified by the object's nsIHandlerInfo::type attribute. * * This is useful when you are trying to retrieve information about a MIME * type that doesn't exist in the datastore, but you have a file extension * for that type, and nsIHandlerService::getTypeFromExtension returns another * MIME type that does exist in the datastore and can handle that extension. * * For example, the user clicks on a link, and the content has a MIME type * that isn't in the datastore, but the link has a file extension, and that * extension is associated with another MIME type in the datastore (perhaps * an unofficial MIME type preceded an official one, like with image/x-png * and image/png). * * In that situation, you can call this method to fill in the handler info * object with information about that other type by passing the other type * as the aOverrideType parameter. * * @param aHandlerInfo the handler info object * @param aOverrideType a type to use instead of aHandlerInfo::type * * Note: if there is no information in the datastore about this type, * this method throws NS_ERROR_NOT_AVAILABLE. Callers are encouraged to * check exists() before calling fillHandlerInfo(), to prevent spamming the * console with XPCOM exception errors. */`",1009,null],[11,"Store","","`text /** * Save the preferred action, preferred handler, possible handlers, and * always ask properties of the given handler info object to the datastore. * Updates an existing record or creates a new one if necessary. * * Note: if preferred action is undefined or invalid, then we assume * the default value nsIHandlerInfo::useHelperApp. * * @param aHandlerInfo the handler info object */`",1009,null],[11,"Exists","","`text /** * Whether or not a record for the given handler info object exists * in the datastore. If the datastore is corrupt (or some other error * is caught in the implementation), false will be returned. * * @param aHandlerInfo a handler info object * * @returns whether or not a record exists */`",1009,null],[11,"Remove","","`text /** * Remove the given handler info object from the datastore. Deletes all * records associated with the object, including the preferred handler, info, * and type records plus the entry in the list of types, if they exist. * Otherwise, it does nothing and does not return an error. * * @param aHandlerInfo the handler info object */`",1009,null],[11,"GetTypeFromExtension","","`text /** * Get the MIME type mapped to the given file extension in the datastore. * * XXX If we ever support extension -> protocol scheme mappings, then this * method should work for those as well. * * Note: in general, you should use nsIMIMEService::getTypeFromExtension * to get a MIME type from a file extension, as that method checks a variety * of other sources besides just the datastore. Use this only when you want * to specifically get only the mapping available in the datastore. * * @param aFileExtension the file extension * * @returns the MIME type, if any; otherwise returns an empty string (\"\"). */`",1009,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ExistsForProtocol","","`text /** * Whether or not there is a handler known to the OS for the * specified protocol type. * * @param aProtocolScheme scheme to check for support * * @returns whether or not a handler exists */`",1009,null],[11,"addref","","",1010,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1010,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSStyleSheet` to one of its base interfaces.",1010,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1010,{"inputs":[{"name":"self"}],"output":{"name":"nsidomstylesheet"}}],[11,"GetOwnerRule","","`text /** * The nsIDOMCSSStyleSheet interface is a datatype for a CSS style * sheet in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",1010,null],[11,"GetCssRules","","`readonly attribute nsIDOMCSSRuleList cssRules;`",1010,null],[11,"InsertRule","","`unsigned long insertRule (in DOMString rule, in unsigned long index) raises (DOMException);`",1010,null],[11,"DeleteRule","","`void deleteRule (in unsigned long index) raises (DOMException);`",1010,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1011,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1011,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMTimeRanges` to one of its base interfaces.",1011,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1011,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",1011,null],[11,"Start","","`double start (in unsigned long index);`",1011,null],[11,"End","","`double end (in unsigned long index);`",1011,null],[11,"addref","","",1012,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1012,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFXMLParser` to one of its base interfaces.",1012,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1012,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ParseAsync","","`text /** * Create a stream listener that can be used to asynchronously * parse RDF/XML. * @param aSink the RDF datasource the will receive the data * @param aBaseURI the base URI used to resolve relative * references in the RDF/XML * @return an nsIStreamListener object to handle the data */`",1012,null],[11,"ParseString","","`text /** * Parse a string of RDF/XML * @param aSink the RDF datasource that will receive the data * @param aBaseURI the base URI used to resolve relative * references in the RDF/XML * @param aSource a UTF8 string containing RDF/XML data. */`",1012,null],[11,"addref","","",1013,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1013,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIJSSubScriptLoader` to one of its base interfaces.",1013,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1013,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1014,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1014,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProtectedAuthThread` to one of its base interfaces.",1014,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1014,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Login","","`text /** * login - run the thread * A user interface implementing this interface needs to * call this method as soon as the message to the user is * displayed. This will trigger login operation. No user * cancellation is possible during login operation. * * When the login is done, the observe method of @observer will * be called on the UI thread with a topic of \"login-finished\" * and null data and subject. */`",1014,null],[11,"GetSlot","","`text /** * The PKCS11 slot */`",1014,null],[11,"GetTokenName","","`text /** * Gets token to be logged in name. */`",1014,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1015,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1015,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestInterfaceA` to one of its base interfaces.",1015,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1015,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`attribute string name;`",1015,null],[11,"SetName","","`attribute string name;`",1015,null],[11,"addref","","",1016,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1016,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestInterfaceB` to one of its base interfaces.",1016,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1016,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`attribute string name;`",1016,null],[11,"SetName","","`attribute string name;`",1016,null],[11,"addref","","",1017,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1017,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestInterfaceC` to one of its base interfaces.",1017,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1017,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSomeInteger","","`attribute long someInteger;`",1017,null],[11,"SetSomeInteger","","`attribute long someInteger;`",1017,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1018,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1018,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageError` to one of its base interfaces.",1018,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1018,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ERROR","","`text /** * General SQL error or missing database. */`",1018,null],[18,"INTERNAL","","`text /** * Internal logic error. */`",1018,null],[18,"PERM","","`text /** * Access permission denied. */`",1018,null],[18,"ABORT","","`text /** * A callback routine requested an abort. */`",1018,null],[18,"BUSY","","`text /** * The database file is locked. */`",1018,null],[18,"LOCKED","","`text /** * A table in the database is locked. */`",1018,null],[18,"NOMEM","","`text /** * An allocation failed. */`",1018,null],[18,"READONLY","","`text /** * Attempt to write to a readonly database. */`",1018,null],[18,"INTERRUPT","","`text /** * Operation was terminated by an interrupt. */`",1018,null],[18,"IOERR","","`text /** * Some kind of disk I/O error occurred. */`",1018,null],[18,"CORRUPT","","`text /** * The database disk image is malformed. */`",1018,null],[18,"FULL","","`text /** * An insertion failed because the database is full. */`",1018,null],[18,"CANTOPEN","","`text /** * Unable to open the database file. */`",1018,null],[18,"EMPTY","","`text /** * The database is empty. */`",1018,null],[18,"SCHEMA","","`text /** * The database scheme changed. */`",1018,null],[18,"TOOBIG","","`text /** * A string or blob exceeds the size limit. */`",1018,null],[18,"CONSTRAINT","","`text /** * Abort due to a constraint violation. */`",1018,null],[18,"MISMATCH","","`text /** * Data type mismatch. */`",1018,null],[18,"MISUSE","","`text /** * Library used incorrectly. */`",1018,null],[18,"NOLFS","","`text /** * Uses OS features not supported on the host system. */`",1018,null],[18,"AUTH","","`text /** * Authorization denied. */`",1018,null],[18,"FORMAT","","`text /** * Auxiliary database format error. */`",1018,null],[18,"RANGE","","`text /** * Attempt to bind a parameter using an out-of-range index or nonexistent * named parameter name. */`",1018,null],[18,"NOTADB","","`text /** * File opened that is not a database file. */`",1018,null],[11,"GetResult","","`text /** * Indicates what type of error occurred. */`",1018,null],[11,"GetMessage","","`text /** * An error string the gives more details, if available. */`",1018,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1019,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1019,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketProviderService` to one of its base interfaces.",1019,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1019,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSocketProvider","","`nsISocketProvider getSocketProvider (in string socketType);`",1019,null],[11,"addref","","",1020,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1020,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRemoteService` to one of its base interfaces.",1020,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1020,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Startup","","`text /** * Start the remote service. This should not be done until app startup * appears to have been successful. * * @param appName (Required) Sets a window property identifying the * application. * @param profileName (May be null) Sets a window property identifying the * profile name. */`",1020,null],[11,"RegisterWindow","","`text /** * Register a XUL window with the xremote service. The window will be * configured to accept incoming remote requests. If this method is called * before startup(), the registration will happen once startup() is called. */`",1020,null],[11,"Shutdown","","`text /** * Stop the remote service from accepting additional requests. */`",1020,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1021,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1021,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowCreator2` to one of its base interfaces.",1021,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1021,{"inputs":[{"name":"self"}],"output":{"name":"nsiwindowcreator"}}],[11,"CreateChromeWindow2","","`text /** Create a new window. Gecko will/may call this method, if made available to it, to create new windows. @param parent Parent window, if any. Null if not. The newly created window should be made a child/dependent window of the parent, if any (and if the concept applies to the underlying OS). @param chromeFlags Chrome features from nsIWebBrowserChrome @param aOpeningTab The TabParent that is trying to open this new chrome window. Can be nullptr. @param aOpener The window which is trying to open this new chrome window. Can be nullptr @param aNextTabParentId The integer ID of the next tab parent actor to use. 0 means there is no next tab parent ID to use. @param cancel Return |true| to reject window creation. If true the implementation has determined the window should not be created at all. The caller should not default to any possible backup scheme for creating the window. @return the new window. Will be null if canceled or an error occurred. */`",1021,null],[11,"SetScreenId","","`text /** * B2G multi-screen support. When open another top-level window on b2g, * a screen ID is needed for identifying which screen this window is * opened to. * @param aScreenId Differentiate screens of windows. It is platform- * specific due to the hardware limitation for now. */`",1021,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1022,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1022,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISimpleStreamListener` to one of its base interfaces.",1022,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1022,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Initialize the simple stream listener. * * @param aSink data will be read from the channel to this output stream. * Must implement writeFrom. * @param aObserver optional stream observer (can be NULL) */`",1022,null],[11,"addref","","",1023,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1023,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXPathEvaluator` to one of its base interfaces.",1023,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1023,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Evaluate","","`nsISupports evaluate (in DOMString expression, in nsIDOMNode contextNode, in nsIDOMNode resolver, in unsigned short type, in nsISupports result) raises (XPathException,DOMException);`",1023,null],[11,"addref","","",1024,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1024,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeFileWatcherErrorCallback` to one of its base interfaces.",1024,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1024,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * @param xpcomError The XPCOM error code. * @param osError The native OS error (errno under Unix, GetLastError under Windows). */`",1024,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1025,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1025,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeFileWatcherCallback` to one of its base interfaces.",1025,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1025,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Changed","","`text /** * @param resourcePath * The path of the changed resource. If there were too many changes, * the string \"*\" is passed. * @param flags Reserved for future uses, not currently used. */`",1025,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1026,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1026,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeFileWatcherSuccessCallback` to one of its base interfaces.",1026,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1026,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Complete","","`text /** * @param resourcePath * The path of the resource for which the operation completes. */`",1026,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1027,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1027,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINativeFileWatcherService` to one of its base interfaces.",1027,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1027,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddPath","","`text /** * Watches the passed path for changes. If it's a directory, every file * it contains is watched. Recursively watches subdirectories. If the * resource is already being watched, does nothing. If the passed path * is a file, the behaviour is not specified. * * @param pathToWatch The path to watch for changes. * @param onChange * The callback invoked whenever a change on a watched * resource is detected. * @param onError * The optional callback invoked whenever an error occurs. * @param onSuccess * The optional callback invoked when the file watcher starts * watching the resource for changes. */`",1027,null],[11,"RemovePath","","`text /** * Removes the provided path from the watched resources. If the path * was not being watched or the callbacks were not registered, silently * ignores the request. * Please note that the file watcher only considers the onChange callbacks * when deciding to close a watch on a resource. If there are no more onChange * callbacks associated to the watch, it gets closed (even though it still has * some error callbacks associated). * * @param pathToUnwatch The path to un-watch. * @param onChange * The registered callback invoked whenever a change on a watched * resource is detected. * @param onError * The optionally registered callback invoked whenever an error * occurs. * @param onSuccess * The optional callback invoked when the file watcher stops * watching the resource for changes. */`",1027,null],[11,"addref","","",1028,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1028,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthPromptCallback` to one of its base interfaces.",1028,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1028,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnAuthAvailable","","`text /** * Authentication information is available. * * @param aContext * The context as passed to promptPasswordAsync * @param aAuthInfo * Authentication information. Must be the same object that was passed * to promptPasswordAsync. * * @note Any exceptions thrown from this method should be ignored. */`",1028,null],[11,"OnAuthCancelled","","`text /** * Notification that the prompt was cancelled. * * @param aContext * The context that was passed to promptPasswordAsync. * @param userCancel * If false, this prompt was cancelled by calling the * the cancel method on the nsICancelable; otherwise, * it was cancelled by the user. */`",1028,null],[11,"addref","","",1029,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1029,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStreamListenerTee` to one of its base interfaces.",1029,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1029,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Initalize the tee. * * @param listener * the original listener the tee will propagate onStartRequest, * onDataAvailable and onStopRequest notifications to, exceptions from * the listener will be propagated back to the channel * @param sink * the stream the data coming from the channel will be written to, * should be blocking * @param requestObserver * optional parameter, listener that gets only onStartRequest and * onStopRequest notifications; exceptions threw within this optional * observer are also propagated to the channel, but exceptions from * the original listener (listener parameter) are privileged */`",1029,null],[11,"InitAsync","","`text /** * Initalize the tee like above, but with the extra parameter to make it * possible to copy the output asynchronously * @param anEventTarget * if set, this event-target is used to copy data to the output stream, * giving an asynchronous tee */`",1029,null],[11,"addref","","",1030,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1030,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgITools` to one of its base interfaces.",1030,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1030,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DecodeImageFromBuffer","","`text /** * decodeImageFromBuffer * Caller provides an buffer, a buffer size and a mimetype. We read from * the stream and decompress it (according to the specified mime type) and * return the resulting imgIContainer. * * @param aBuffer * Data in memory. * @param aSize * Buffer size. * @param aMimeType * Type of image in the stream. */`",1030,null],[11,"DecodeImageAsync","","`text /** * decodeImageAsync * See decodeImage. The main difference between this method and decodeImage * is that here the operation is done async on a thread from the decode * pool. When the operation is completed, the callback is executed with the * result. * * @param aStream * An input stream for an encoded image file. * @param aMimeType * Type of image in the stream. * @param aCallback * The callback is executed when the imgContainer is fully created. * @param aEventTarget * This eventTarget is used to execute aCallback */`",1030,null],[11,"EncodeImage","","`text /** * encodeImage * Caller provides an image container, and the mime type it should be * encoded to. We return an input stream for the encoded image data. * * @param aContainer * An image container. * @param aMimeType * Type of encoded image desired (eg \"image/png\"). * @param outputOptions * Encoder-specific output options. */`",1030,null],[11,"EncodeScaledImage","","`text /** * encodeScaledImage * Caller provides an image container, and the mime type it should be * encoded to. We return an input stream for the encoded image data. * The encoded image is scaled to the specified dimensions. * * @param aContainer * An image container. * @param aMimeType * Type of encoded image desired (eg \"image/png\"). * @param aWidth, aHeight * The size (in pixels) desired for the resulting image. Specify 0 to * use the given image's width or height. Values must be >= 0. * @param outputOptions * Encoder-specific output options. */`",1030,null],[11,"GetImgLoaderForDocument","","`text /** * getImgLoaderForDocument * Retrieve an image loader that reflects the privacy status of the given * document. * * @param doc * A document. Must not be null. */`",1030,null],[11,"GetImgCacheForDocument","","`text /** * getImgLoaderForDocument * Retrieve an image cache that reflects the privacy status of the given * document. * * @param doc * A document. Null is allowed, but must _only_ be passed * when there is no way to obtain a relevant document for * the current context in which a cache is desired. */`",1030,null],[11,"EncodeCroppedImage","","`text /** * encodeCroppedImage * Caller provides an image container, and the mime type it should be * encoded to. We return an input stream for the encoded image data. * The encoded image is cropped to the specified dimensions. * * The given offset and size must not exceed the image bounds. * * @param aContainer * An image container. * @param aMimeType * Type of encoded image desired (eg \"image/png\"). * @param aOffsetX, aOffsetY * The crop offset (in pixels). Values must be >= 0. * @param aWidth, aHeight * The size (in pixels) desired for the resulting image. Specify 0 to * use the given image's width or height. Values must be >= 0. * @param outputOptions * Encoder-specific output options. */`",1030,null],[11,"CreateScriptedObserver","","`text /** * Create a wrapper around a scripted notification observer (ordinarily * imgINotificationObserver cannot be implemented from scripts). * * @param aObserver The scripted observer to wrap */`",1030,null],[11,"addref","","",1031,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1031,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIContainerCallback` to one of its base interfaces.",1031,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1031,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnImageReady","","`text /** * This is a companion interface for nsIAsyncInputStream::asyncWait. */`",1031,null],[11,"addref","","",1032,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1032,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextServicesFilter` to one of its base interfaces.",1032,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1032,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Skip","","`text /** * Indicates whether the content node should be skipped by the iterator * @param aNode - node to skip */`",1032,null],[11,"addref","","",1033,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1033,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrinterEnumerator` to one of its base interfaces.",1033,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1033,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDefaultPrinterName","","`text /** * The name of the system default printer. This name should also be * present in printerNameList below. This is not necessarily gecko's * default printer; see nsIPrintSettingsService.defaultPrinterName * for that. */`",1033,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InitPrintSettingsFromPrinter","","`text /** * Initializes certain settings from the native printer into the PrintSettings * These settings include, but are not limited to: * Page Orientation * Page Size * Number of Copies */`",1033,null],[11,"GetPrinterNameList","","`text /** * The list of printer names */`",1033,null],[11,"addref","","",1034,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1034,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHistoryListener` to one of its base interfaces.",1034,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1034,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnHistoryNewEntry","","`text /** * Called when a new document is added to session history. New documents are * added to session history by docshell when new pages are loaded in a frame * or content area, for example via nsIWebNavigation::loadURI() * * @param aNewURI The URI of the document to be added to session history. * @param aOldIndex The index of the current history item before the operation. */`",1034,null],[11,"OnHistoryGoBack","","`text /** * Called when navigating to a previous session history entry, for example * due to a nsIWebNavigation::goBack() call. * * @param aBackURI The URI of the session history entry being navigated to. * It could be null in case of a grouped session history * navigation since we have no URI information of entries * existing in other partial histories. * @return Whether the operation can proceed. */`",1034,null],[11,"OnHistoryGoForward","","`text /** * Called when navigating to a next session history entry, for example * due to a nsIWebNavigation::goForward() call. * * @param aForwardURI The URI of the session history entry being navigated to. * It could be null in case of a grouped session history * navigation since we have no URI information of entries * existing in other partial histories. * @return Whether the operation can proceed. */`",1034,null],[11,"OnHistoryReload","","`text /** * Called when the current document is reloaded, for example due to a * nsIWebNavigation::reload() call. * * @param aReloadURI The URI of the document to be reloaded. * @param aReloadFlags Flags that indicate how the document is to be * refreshed. See constants on the nsIWebNavigation * interface. * @return Whether the operation can proceed. * * @see nsIWebNavigation */`",1034,null],[11,"OnHistoryGotoIndex","","`text /** * Called when navigating to a session history entry by index, for example, * when nsIWebNavigation::gotoIndex() is called. * * @param aIndex The index in session history of the entry to be loaded. * @param aGotoURI The URI of the session history entry to be loaded. * It could be null in case of a grouped session history * navigation since we have no URI information of entries * existing in other partial histories. * @return Whether the operation can proceed. */`",1034,null],[11,"OnHistoryPurge","","`text /** * Called when entries are removed from session history. Entries can be * removed from session history for various reasons, for example to control * the memory usage of the browser, to prevent users from loading documents * from history, to erase evidence of prior page loads, etc. * * To purge documents from session history call nsISHistory::PurgeHistory() * * @param aNumEntries The number of entries to be removed from session history. * @return Whether the operation can proceed. */`",1034,null],[11,"OnHistoryReplaceEntry","","`text /** * Called when an entry is replaced in the session history. Entries are * replaced when navigating away from non-persistent history entries (such as * about pages) and when history.replaceState is called. * * @param aIndex The index in session history of the entry being * replaced */`",1034,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnLengthChanged","","`text /** * Called when nsISHistory::count has been updated. Unlike OnHistoryNewEntry * and OnHistoryPurge which happen before the modifications are actually done * and maybe cancellable, this function is called after these modifications. */`",1034,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnIndexChanged","","`text /** * Called when nsISHistory::index has been updated. Unlike the other methods * on this interface, which happen before the modifications are actually done * and maybe cancellable, this function is called after these modifications. */`",1034,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1035,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1035,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPKCS11Slot` to one of its base interfaces.",1035,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1035,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SLOT_DISABLED","","",1035,null],[18,"SLOT_NOT_PRESENT","","",1035,null],[18,"SLOT_UNINITIALIZED","","",1035,null],[18,"SLOT_NOT_LOGGED_IN","","",1035,null],[18,"SLOT_LOGGED_IN","","",1035,null],[18,"SLOT_READY","","",1035,null],[11,"GetName","","`[must_use] readonly attribute AUTF8String name;`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDesc","","`[must_use] readonly attribute AUTF8String desc;`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetManID","","`text /** * Manufacturer ID of the slot. */`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHWVersion","","`text /** * Hardware version of the slot. */`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFWVersion","","`text /** * Firmware version of the slot. */`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetStatus","","`[must_use] readonly attribute unsigned long status;`",1035,null],[11,"GetToken","","`[must_use] nsIPK11Token getToken ();`",1035,null],[11,"GetTokenName","","`[must_use] readonly attribute AUTF8String tokenName;`",1035,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1036,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1036,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoGeolocation` to one of its base interfaces.",1036,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1036,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ClearWatch","","`void clearWatch (in long watchId);`",1036,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1037,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1037,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCScriptable` to one of its base interfaces.",1037,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1037,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClassName","","`text /** * Note: This is not really an XPCOM interface. For example, callers must * guarantee that they set the *_retval of the various methods that return a * boolean to PR_TRUE before making the call. Implementations may skip writing * to *_retval unless they want to return PR_FALSE. */`",1037,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1038,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1038,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISuspendedTypes` to one of its base interfaces.",1038,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1038,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NONE_SUSPENDED","","`text /** * The suspended enum is used in three different situations, * - platform audio focus (Fennec/B2G) * - remote media control (Fennec) * - block auto-play video in non-active page * * Note: the \"remote side\" must control the AudioChannelAgent using * nsIAudioChannelAgentCallback.windowSuspendChanged() callback instead using * play/pause methods or any button in the webpage. * * - SUSPENDED_PAUSE : * It's used when transiently losing audio focus, the media can't be resumed * until we gain the audio focus again. It would change the internal state of * MediaElement when it's being suspended/resumed, and it would trigger the * related JS event. eg. \"play\" and \"pause\" event. * * - SUSPENDED_BLOCK * It's used to prevent auto-playing media in inactive page in order to * reduce the power consumption, and the media can't be resumed until the * page becomes active again. It would change the internal state of * MediaElement when it's being blocked/resumed, so it won't trigger the * related JS event. eg. \"play\" and \"pause\" event. * * - SUSPENDED_PAUSE_DISPOSABLE * It's used for remote media-control to pause the playing media and when we * lose audio focus permanently. It's disposable suspended, so the media can * be resumed arbitrary after that. Same as SUSPENDED_PAUSE, it would change * the internal state of MediaElement when it's being suspended. * * - SUSPENDED_STOP_DISPOSABLE * It's used for remote media-control to stop the playing media. The remote * control would disappear after stopping the media, so we would disconnect * the audio channel agent. It's disposable suspended, so the media can be * resumed arbitrary after that. Same as SUSPENDED_PAUSE, it would change * the internal state of MediaElement when it's being suspended. */`",1038,null],[18,"SUSPENDED_PAUSE","","",1038,null],[18,"SUSPENDED_BLOCK","","",1038,null],[18,"SUSPENDED_PAUSE_DISPOSABLE","","",1038,null],[18,"SUSPENDED_STOP_DISPOSABLE","","",1038,null],[11,"addref","","",1039,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1039,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAudioChannelAgentCallback` to one of its base interfaces.",1039,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1039,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"WindowVolumeChanged","","`text /** * Notified when the window volume/mute is changed */`",1039,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"WindowSuspendChanged","","`text /** * Notified when the window needs to be suspended or resumed. */`",1039,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"WindowAudioCaptureChanged","","`text /** * Notified when the capture state is changed. */`",1039,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1040,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1040,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAudioChannelAgent` to one of its base interfaces.",1040,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1040,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"AUDIO_AGENT_STATE_NORMAL","","",1040,null],[18,"AUDIO_AGENT_STATE_MUTED","","",1040,null],[18,"AUDIO_AGENT_STATE_FADED","","",1040,null],[11,"Init","","`text /** * Initialize the agent with a channel type. * Note: This function should only be called once. * * @param window * The window * @param callback * 1. Once the playable status changes, agent uses this callback function * to notify Gecko component. * 2. The callback is allowed to be null. Ex: telephony doesn't need to * listen change of the playable status. * 3. The AudioChannelAgent keeps a strong reference to the callback * object. */`",1040,null],[11,"InitWithWeakCallback","","`text /** * This method is just like init(), except the audio channel agent keeps a * weak reference to the callback object. * * In order for this to work, |callback| must implement * nsISupportsWeakReference. */`",1040,null],[11,"NotifyStoppedPlaying","","`text /** * Notify the agent we no longer want to play. * * Note : even if notifyStartedPlaying() returned false, the agent would * still be registered with the audio channel service and receive callbacks * for status changes. So notifyStoppedPlaying must still eventually be * called to unregister the agent with the channel service. */`",1040,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyStartedAudible","","`text /** * Notify agent that we already start producing audible data. * * Note : sometime audio might become silent during playing, this method is used to * notify the actually audible state to other services which want to know * about that, ex. tab sound indicator. */`",1040,{"inputs":[{"name":"self"},{"name":"uint8_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1041,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1041,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadGroup` to one of its base interfaces.",1041,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1041,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[11,"GetGroupObserver","","`text /** * A load group maintains a collection of nsIRequest objects. * This is used in lots of places where groups of requests need to be tracked. * For example, nsIDocument::mDocumentLoadGroup is used to track all requests * made for subdocuments in order to track page load progress and allow all * requests made on behalf of the document to be stopped, etc. */ /** * The group observer is notified when requests are added to and removed * from this load group. The groupObserver is weak referenced. */`",1041,null],[11,"SetGroupObserver","","`text /** * A load group maintains a collection of nsIRequest objects. * This is used in lots of places where groups of requests need to be tracked. * For example, nsIDocument::mDocumentLoadGroup is used to track all requests * made for subdocuments in order to track page load progress and allow all * requests made on behalf of the document to be stopped, etc. */ /** * The group observer is notified when requests are added to and removed * from this load group. The groupObserver is weak referenced. */`",1041,null],[11,"GetDefaultLoadRequest","","`text /** * Accesses the default load request for the group. Each time a number * of requests are added to a group, the defaultLoadRequest may be set * to indicate that all of the requests are related to a base request. * * The load group inherits its load flags from the default load request. * If the default load request is NULL, then the group's load flags are * not changed. */`",1041,null],[11,"SetDefaultLoadRequest","","`text /** * Accesses the default load request for the group. Each time a number * of requests are added to a group, the defaultLoadRequest may be set * to indicate that all of the requests are related to a base request. * * The load group inherits its load flags from the default load request. * If the default load request is NULL, then the group's load flags are * not changed. */`",1041,null],[11,"AddRequest","","`text /** * Adds a new request to the group. This will cause the default load * flags to be applied to the request. If this is a foreground * request then the groupObserver's onStartRequest will be called. * * If the request is the default load request or if the default load * request is null, then the load group will inherit its load flags from * the request. */`",1041,null],[11,"RemoveRequest","","`text /** * Removes a request from the group. If this is a foreground request * then the groupObserver's onStopRequest will be called. * * By the time this call ends, aRequest will have been removed from the * loadgroup, even if this function throws an exception. */`",1041,null],[11,"GetRequests","","`text /** * Returns the requests contained directly in this group. * Enumerator element type: nsIRequest. */`",1041,null],[11,"GetActiveCount","","`text /** * Returns the count of \"active\" requests (ie. requests without the * LOAD_BACKGROUND bit set). */`",1041,null],[11,"GetNotificationCallbacks","","`text /** * Notification callbacks for the load group. */`",1041,null],[11,"SetNotificationCallbacks","","`text /** * Notification callbacks for the load group. */`",1041,null],[11,"GetRequestContextID","","`text /** * Context for managing things like js/css connection blocking, * and per-tab connection grouping. */`",1041,null],[11,"GetDefaultLoadFlags","","`text /** * The set of load flags that will be added to all new requests added to * this group. Any existing requests in the load group are not modified, * so it is expected these flags will be added before requests are added * to the group - typically via nsIDocShell::defaultLoadFlags on a new * docShell. * Note that these flags are *not* added to the default request for the * load group; it is expected the default request will already have these * flags (again, courtesy of setting nsIDocShell::defaultLoadFlags before * the docShell has created the default request.) */`",1041,null],[11,"SetDefaultLoadFlags","","`text /** * The set of load flags that will be added to all new requests added to * this group. Any existing requests in the load group are not modified, * so it is expected these flags will be added before requests are added * to the group - typically via nsIDocShell::defaultLoadFlags on a new * docShell. * Note that these flags are *not* added to the default request for the * load group; it is expected the default request will already have these * flags (again, courtesy of setting nsIDocShell::defaultLoadFlags before * the docShell has created the default request.) */`",1041,{"inputs":[{"name":"self"},{"name":"nsloadflags"}],"output":{"name":"nsresult"}}],[11,"GetUserAgentOverrideCache","","`text /** * The cached user agent override created by UserAgentOverrides.jsm. Used * for all sub-resource requests in the loadgroup. */`",1041,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetUserAgentOverrideCache","","`text /** * The cached user agent override created by UserAgentOverrides.jsm. Used * for all sub-resource requests in the loadgroup. */`",1041,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1042,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1042,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDebug2` to one of its base interfaces.",1042,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1042,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsDebugBuild","","`text /** * Whether XPCOM was compiled with DEBUG defined. This often * correlates to whether other code (e.g., Firefox, XULRunner) was * compiled with DEBUG defined. */`",1042,null],[11,"GetAssertionCount","","`text /** * The number of assertions since process start. */`",1042,null],[11,"GetIsDebuggerAttached","","`text /** * Whether a debugger is currently attached. * Supports Windows + Mac */`",1042,null],[11,"Assertion","","`text /** * Show an assertion and trigger nsIDebug2.break(). * * @param aStr assertion message * @param aExpr expression that failed * @param aFile file containing assertion * @param aLine line number of assertion */`",1042,null],[11,"Warning","","`text /** * Show a warning. * * @param aStr warning message * @param aFile file containing assertion * @param aLine line number of assertion */`",1042,null],[11,"Break","","`text /** * Request to break into a debugger. * * @param aFile file containing break request * @param aLine line number of break request */`",1042,null],[11,"Abort","","`text /** * Request the process to trigger a fatal abort. * * @param aFile file containing abort request * @param aLine line number of abort request */`",1042,null],[11,"RustPanic","","`text /** * Request the process to trigger a fatal panic!() from Rust code. * * @param aMessage the string to pass to panic!(). */`",1042,null],[11,"addref","","",1043,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1043,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGeoPositionError` to one of its base interfaces.",1043,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1043,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PERMISSION_DENIED","","",1043,null],[18,"POSITION_UNAVAILABLE","","",1043,null],[18,"TIMEOUT","","",1043,null],[11,"GetCode","","`readonly attribute short code;`",1043,null],[11,"GetMessage","","`readonly attribute AString message;`",1043,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1044,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1044,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpChannel` to one of its base interfaces.",1044,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1044,{"inputs":[{"name":"self"}],"output":{"name":"nsichannel"}}],[18,"REFERRER_POLICY_UNSET","","`text /** * Referrer policies. See ReferrerPolicy.h for more details. */`",1044,null],[18,"REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE","","",1044,null],[18,"REFERRER_POLICY_NO_REFERRER","","",1044,null],[18,"REFERRER_POLICY_ORIGIN","","",1044,null],[18,"REFERRER_POLICY_ORIGIN_WHEN_XORIGIN","","",1044,null],[18,"REFERRER_POLICY_UNSAFE_URL","","",1044,null],[18,"REFERRER_POLICY_SAME_ORIGIN","","",1044,null],[18,"REFERRER_POLICY_STRICT_ORIGIN","","",1044,null],[18,"REFERRER_POLICY_STRICT_ORIGIN_WHEN_XORIGIN","","",1044,null],[11,"GetRequestMethod","","`text /************************************************************************** * REQUEST CONFIGURATION * * Modifying request parameters after asyncOpen has been called is an error. */ /** * Set/get the HTTP request method (default is \"GET\"). Both setter and * getter are case sensitive. * * This attribute may only be set before the channel is opened. * * NOTE: The data for a \"POST\" or \"PUT\" request can be configured via * nsIUploadChannel; however, after setting the upload data, it may be * necessary to set the request method explicitly. The documentation * for nsIUploadChannel has further details. * * @throws NS_ERROR_IN_PROGRESS if set after the channel has been opened. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetRequestMethod","","`text /************************************************************************** * REQUEST CONFIGURATION * * Modifying request parameters after asyncOpen has been called is an error. */ /** * Set/get the HTTP request method (default is \"GET\"). Both setter and * getter are case sensitive. * * This attribute may only be set before the channel is opened. * * NOTE: The data for a \"POST\" or \"PUT\" request can be configured via * nsIUploadChannel; however, after setting the upload data, it may be * necessary to set the request method explicitly. The documentation * for nsIUploadChannel has further details. * * @throws NS_ERROR_IN_PROGRESS if set after the channel has been opened. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetReferrer","","`text /** * Get/set the HTTP referrer URI. This is the address (URI) of the * resource from which this channel's URI was obtained (see RFC2616 section * 14.36). * * This attribute may only be set before the channel is opened. * * NOTE: The channel may silently refuse to set the Referer header if the * URI does not pass certain security checks (e.g., a \"https://\" URL will * never be sent as the referrer for a plaintext HTTP request). The * implementation is not required to throw an exception when the referrer * URI is rejected. * * @throws NS_ERROR_IN_PROGRESS if set after the channel has been opened. * @throws NS_ERROR_FAILURE if used for setting referrer during * visitRequestHeaders. Getting the value will not throw. */`",1044,null],[11,"SetReferrer","","`text /** * Get/set the HTTP referrer URI. This is the address (URI) of the * resource from which this channel's URI was obtained (see RFC2616 section * 14.36). * * This attribute may only be set before the channel is opened. * * NOTE: The channel may silently refuse to set the Referer header if the * URI does not pass certain security checks (e.g., a \"https://\" URL will * never be sent as the referrer for a plaintext HTTP request). The * implementation is not required to throw an exception when the referrer * URI is rejected. * * @throws NS_ERROR_IN_PROGRESS if set after the channel has been opened. * @throws NS_ERROR_FAILURE if used for setting referrer during * visitRequestHeaders. Getting the value will not throw. */`",1044,null],[11,"GetReferrerPolicy","","`text /** * Get the HTTP referrer policy. The policy is retrieved from the meta * referrer tag, which can be one of many values (see ReferrerPolicy.h for * more details). */`",1044,null],[11,"SetReferrerWithPolicy","","`text /** * Set the HTTP referrer URI with a referrer policy. * @throws NS_ERROR_FAILURE if called during visitRequestHeaders. */`",1044,null],[11,"GetProtocolVersion","","`text /** * Returns the network protocol used to fetch the resource as identified * by the ALPN Protocol ID. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTransferSize","","`text /** * size consumed by the response header fields and the response payload body */`",1044,null],[11,"GetDecodedBodySize","","`text /** * The size of the message body received by the client, * after removing any applied content-codings */`",1044,null],[11,"GetEncodedBodySize","","`text /** * The size in octets of the payload body, prior to removing content-codings */`",1044,null],[11,"GetRequestHeader","","`text /** * Get the value of a particular request header. * * @param aHeader * The case-insensitive name of the request header to query (e.g., * \"Cache-Control\"). * * @return the value of the request header. * @throws NS_ERROR_NOT_AVAILABLE if the header is not set. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetRequestHeader","","`text /** * Set the value of a particular request header. * * This method allows, for example, the cookies module to add \"Cookie\" * headers to the outgoing HTTP request. * * This method may only be called before the channel is opened. * * @param aHeader * The case-insensitive name of the request header to set (e.g., * \"Cookie\"). * @param aValue * The request header value to set (e.g., \"X=1\"). * @param aMerge * If true, the new header value will be merged with any existing * values for the specified header. This flag is ignored if the * specified header does not support merging (e.g., the \"Content- * Type\" header can only have one value). The list of headers for * which this flag is ignored is an implementation detail. If this * flag is false, then the header value will be replaced with the * contents of |aValue|. * * If aValue is empty and aMerge is false, the header will be cleared. * * @throws NS_ERROR_IN_PROGRESS if called after the channel has been * opened. * @throws NS_ERROR_FAILURE if called during visitRequestHeaders. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetEmptyRequestHeader","","`text /** * Set a request header with empty value. * * This should be used with caution in the cases where the behavior of * setRequestHeader ignoring empty header values is undesirable. * * This method may only be called before the channel is opened. * * @param aHeader * The case-insensitive name of the request header to set (e.g., * \"Cookie\"). * * @throws NS_ERROR_IN_PROGRESS if called after the channel has been * opened. * @throws NS_ERROR_FAILURE if called during visitRequestHeaders. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"VisitRequestHeaders","","`text /** * Call this method to visit all request headers. Calling setRequestHeader * while visiting request headers has undefined behavior. Don't do it! * * @param aVisitor * the header visitor instance. */`",1044,null],[11,"VisitNonDefaultRequestHeaders","","`text /** * Call this method to visit all non-default (UA-provided) request headers. * Calling setRequestHeader while visiting request headers has undefined * behavior. Don't do it! * * @param aVisitor * the header visitor instance. */`",1044,null],[11,"GetAllowPipelining","","`text /** * This attribute no longer has any effect, it remains for backwards compat * * @throws NS_ERROR_FAILURE if set after the channel has been opened. */`",1044,null],[11,"SetAllowPipelining","","`text /** * This attribute no longer has any effect, it remains for backwards compat * * @throws NS_ERROR_FAILURE if set after the channel has been opened. */`",1044,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowSTS","","`text /** * This attribute of the channel indicates whether or not * the underlying HTTP transaction should be honor stored Strict Transport * Security directives for its principal. It defaults to true. Using * OCSP to bootstrap the HTTPs is the likely use case for setting it to * false. * * This attribute may only be set before the channel is opened. * * @throws NS_ERROR_IN_PROGRESS or NS_ERROR_ALREADY_OPENED * if called after the channel has been opened. */`",1044,null],[11,"SetAllowSTS","","`text /** * This attribute of the channel indicates whether or not * the underlying HTTP transaction should be honor stored Strict Transport * Security directives for its principal. It defaults to true. Using * OCSP to bootstrap the HTTPs is the likely use case for setting it to * false. * * This attribute may only be set before the channel is opened. * * @throws NS_ERROR_IN_PROGRESS or NS_ERROR_ALREADY_OPENED * if called after the channel has been opened. */`",1044,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetRedirectionLimit","","`text /** * This attribute specifies the number of redirects this channel is allowed * to make. If zero, the channel will fail to redirect and will generate * a NS_ERROR_REDIRECT_LOOP failure status. * * NOTE: An HTTP redirect results in a new channel being created. If the * new channel supports nsIHttpChannel, then it will be assigned a value * to its |redirectionLimit| attribute one less than the value of the * redirected channel's |redirectionLimit| attribute. The initial value * for this attribute may be a configurable preference (depending on the * implementation). */`",1044,null],[11,"SetRedirectionLimit","","`text /** * This attribute specifies the number of redirects this channel is allowed * to make. If zero, the channel will fail to redirect and will generate * a NS_ERROR_REDIRECT_LOOP failure status. * * NOTE: An HTTP redirect results in a new channel being created. If the * new channel supports nsIHttpChannel, then it will be assigned a value * to its |redirectionLimit| attribute one less than the value of the * redirected channel's |redirectionLimit| attribute. The initial value * for this attribute may be a configurable preference (depending on the * implementation). */`",1044,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetResponseStatus","","`text /************************************************************************** * RESPONSE INFO * * Accessing response info before the onStartRequest event is an error. */ /** * Get the HTTP response code (e.g., 200). * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"GetResponseStatusText","","`text /** * Get the HTTP response status text (e.g., \"OK\"). * * NOTE: This returns the raw (possibly 8-bit) text from the server. There * are no assumptions made about the charset of the returned text. You * have been warned! * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRequestSucceeded","","`text /** * Returns true if the HTTP response code indicates success. The value of * nsIRequest::status will be NS_OK even when processing a 404 response * because a 404 response may include a message body that (in some cases) * should be shown to the user. * * Use this attribute to distinguish server error pages from normal pages, * instead of comparing the response status manually against the set of * valid response codes, if that is required by your application. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"GetIsMainDocumentChannel","","`text /** Indicates whether channel should be treated as the main one for the * current document. If manually set to true, will always remain true. Otherwise, * will be true if LOAD_DOCUMENT_URI is set in the channel's loadflags. */`",1044,null],[11,"SetIsMainDocumentChannel","","`text /** Indicates whether channel should be treated as the main one for the * current document. If manually set to true, will always remain true. Otherwise, * will be true if LOAD_DOCUMENT_URI is set in the channel's loadflags. */`",1044,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetResponseHeader","","`text /** * Get the value of a particular response header. * * @param aHeader * The case-insensitive name of the response header to query (e.g., * \"Set-Cookie\"). * * @return the value of the response header. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest) or if the header is * not set in the response. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetResponseHeader","","`text /** * Set the value of a particular response header. * * This method allows, for example, the HTML content sink to inform the HTTP * channel about HTTP-EQUIV headers found in HTML <META> tags. * * @param aHeader * The case-insensitive name of the response header to set (e.g., * \"Cache-control\"). * @param aValue * The response header value to set (e.g., \"no-cache\"). * @param aMerge * If true, the new header value will be merged with any existing * values for the specified header. This flag is ignored if the * specified header does not support merging (e.g., the \"Content- * Type\" header can only have one value). The list of headers for * which this flag is ignored is an implementation detail. If this * flag is false, then the header value will be replaced with the * contents of |aValue|. * * If aValue is empty and aMerge is false, the header will be cleared. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). * @throws NS_ERROR_ILLEGAL_VALUE if changing the value of this response * header is not allowed. * @throws NS_ERROR_FAILURE if called during visitResponseHeaders, * VisitOriginalResponseHeaders or getOriginalResponseHeader. */`",1044,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"VisitResponseHeaders","","`text /** * Call this method to visit all response headers. Calling * setResponseHeader while visiting response headers has undefined * behavior. Don't do it! * * @param aVisitor * the header visitor instance. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"GetOriginalResponseHeader","","`text /** * Get the value(s) of a particular response header in the form and order * it has been received from the remote peer. There can be multiple headers * with the same name. * * @param aHeader * The case-insensitive name of the response header to query (e.g., * \"Set-Cookie\"). * * @param aVisitor * the header visitor instance. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest) or if the header is * not set in the response. */`",1044,null],[11,"VisitOriginalResponseHeaders","","`text /** * Call this method to visit all response headers in the form and order as * they have been received from the remote peer. * Calling setResponseHeader while visiting response headers has undefined * behavior. Don't do it! * * @param aVisitor * the header visitor instance. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"IsNoStoreResponse","","`text /** * Returns true if the server sent a \"Cache-Control: no-store\" response * header. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"IsNoCacheResponse","","`text /** * Returns true if the server sent the equivalent of a \"Cache-control: * no-cache\" response header. Equivalent response headers include: * \"Pragma: no-cache\", \"Expires: 0\", and \"Expires\" with a date value * in the past relative to the value of the \"Date\" header. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"IsPrivateResponse","","`text /** * Returns true if the server sent a \"Cache-Control: private\" response * header. * * @throws NS_ERROR_NOT_AVAILABLE if called before the response * has been received (before onStartRequest). */`",1044,null],[11,"RedirectTo","","`text /** * Instructs the channel to immediately redirect to a new destination. * Can only be called on channels that have not yet called their * listener's OnStartRequest(). Generally that means the latest time * this can be used is one of: * \"http-on-examine-response\" * \"http-on-examine-merged-response\" * \"http-on-examine-cached-response\" * * When non-null URL is set before AsyncOpen: * we attempt to redirect to the targetURI before we even start building * and sending the request to the cache or the origin server. * If the redirect is vetoed, we fail the channel. * * When set between AsyncOpen and first call to OnStartRequest being called: * we attempt to redirect before we start delivery of network or cached * response to the listener. If vetoed, we continue with delivery of * the original content to the channel listener. * * When passed aTargetURI is null the channel behaves normally (can be * rewritten). * * This method provides no explicit conflict resolution. The last * caller to call it wins. * * @throws NS_ERROR_NOT_AVAILABLE if called after the channel has already * started to deliver the content to its listener. */`",1044,null],[11,"UpgradeToSecure","","`text /** * Flags a channel to be upgraded to HTTPS. * * Upgrading to a secure channel must happen before or during * \"http-on-modify-request\". If redirectTo is called early as well, it * will win and upgradeToSecure will be a no-op. * * @throws NS_ERROR_NOT_AVAILABLE if called after the channel has already * started to deliver the content to its listener. */`",1044,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRequestContextID","","`text /** * Identifies the request context for this load. */`",1044,null],[11,"SetRequestContextID","","`text /** * Identifies the request context for this load. */`",1044,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetChannelId","","`text /** * Unique ID of the channel, shared between parent and child. Needed if * the channel activity needs to be monitored across process boundaries, * like in devtools net monitor. See bug 1274556. */`",1044,null],[11,"SetChannelId","","`text /** * Unique ID of the channel, shared between parent and child. Needed if * the channel activity needs to be monitored across process boundaries, * like in devtools net monitor. See bug 1274556. */`",1044,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetTopLevelContentWindowId","","`text /** * ID of the top-level document's inner window. Identifies the content * this channels is being load in. */`",1044,null],[11,"SetTopLevelContentWindowId","","`text /** * ID of the top-level document's inner window. Identifies the content * this channels is being load in. */`",1044,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetIsTrackingResource","","`text /** * Returns true if the channel has loaded a resource that is on the tracking * protection list. This is only available if the * privacy.trackingprotection.annotate_channels pref is set and its value * should only be relied on after the channel has established a connection. */`",1044,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetTopLevelOuterContentWindowId","","`text /** * ID of the top-level outer content window. Identifies this channel's * top-level window it comes from. * * NOTE: The setter of this attribute is currently for xpcshell test only. * Don't alter it otherwise. */`",1044,null],[11,"SetTopLevelOuterContentWindowId","","`text /** * ID of the top-level outer content window. Identifies this channel's * top-level window it comes from. * * NOTE: The setter of this attribute is currently for xpcshell test only. * Don't alter it otherwise. */`",1044,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"LogBlockedCORSRequest","","`text /** * In e10s, the information that the CORS response blocks the load is in the * parent, which doesn't know the true window id of the request, so we may * need to proxy the request to the child. * * @param aMessage * The message to print in the console. */`",1044,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1045,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1045,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetUtil` to one of its base interfaces.",1045,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1045,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ESCAPE_ALL","","`text /** Escape every character with its %XX-escaped equivalent */`",1045,null],[18,"ESCAPE_XALPHAS","","`text /** Leave alphanumeric characters intact and %XX-escape all others */`",1045,null],[18,"ESCAPE_XPALPHAS","","`text /** Leave alphanumeric characters intact, convert spaces to '+', %XX-escape all others */`",1045,null],[18,"ESCAPE_URL_PATH","","`text /** Leave alphanumeric characters and forward slashes intact, %XX-escape all others */`",1045,null],[18,"ESCAPE_URL_SCHEME","","`text /** %XX-escape URL scheme */`",1045,null],[18,"ESCAPE_URL_USERNAME","","`text /** %XX-escape username in the URL */`",1045,null],[18,"ESCAPE_URL_PASSWORD","","`text /** %XX-escape password in the URL */`",1045,null],[18,"ESCAPE_URL_HOST","","`text /** %XX-escape URL host */`",1045,null],[18,"ESCAPE_URL_DIRECTORY","","`text /** %XX-escape URL directory */`",1045,null],[18,"ESCAPE_URL_FILE_BASENAME","","`text /** %XX-escape file basename in the URL */`",1045,null],[18,"ESCAPE_URL_FILE_EXTENSION","","`text /** %XX-escape file extension in the URL */`",1045,null],[18,"ESCAPE_URL_PARAM","","`text /** %XX-escape URL parameters */`",1045,null],[18,"ESCAPE_URL_QUERY","","`text /** %XX-escape URL query */`",1045,null],[18,"ESCAPE_URL_REF","","`text /** %XX-escape URL ref */`",1045,null],[18,"ESCAPE_URL_FILEPATH","","`text /** %XX-escape URL path - same as escaping directory, basename and extension */`",1045,null],[18,"ESCAPE_URL_MINIMAL","","`text /** %XX-escape scheme, username, password, host, path, params, query and ref */`",1045,null],[18,"ESCAPE_URL_FORCED","","`text /** Force %XX-escaping of already escaped sequences */`",1045,null],[18,"ESCAPE_URL_ONLY_ASCII","","`text /** Skip non-ascii octets, %XX-escape all others */`",1045,null],[18,"ESCAPE_URL_ONLY_NONASCII","","`text /** * Skip graphic octets (0x20-0x7E) when escaping * Skips all ASCII octets (0x00-0x7F) when unescaping */`",1045,null],[18,"ESCAPE_URL_COLON","","`text /** Force %XX-escape of colon */`",1045,null],[18,"ESCAPE_URL_SKIP_CONTROL","","`text /** Skip C0 and DEL from unescaping */`",1045,null],[11,"ParseRequestContentType","","`text /** * Parse a Content-Type header value in strict mode. This is a more * conservative parser that reject things that violate RFC 7231 section * 3.1.1.1. This is typically useful for parsing Content-Type header values * that are used for HTTP requests, and those that are used to make security * decisions. * * @param aTypeHeader the header string to parse * @param [out] aCharset the charset parameter specified in the * header, if any. * @param [out] aHadCharset whether a charset was explicitly specified. * @return the MIME type specified in the header, in lower-case. */`",1045,null],[11,"ParseResponseContentType","","`text /** * Parse a Content-Type header value in relaxed mode. This is a more * permissive parser that ignores things that go against RFC 7231 section * 3.1.1.1. This is typically useful for parsing Content-Type header values * received from web servers where we want to make a best effort attempt * at extracting a useful MIME type and charset. * * NOTE: DO NOT USE THIS if you're going to make security decisions * based on the result. * * @param aTypeHeader the header string to parse * @param [out] aCharset the charset parameter specified in the * header, if any. * @param [out] aHadCharset whether a charset was explicitly specified. * @return the MIME type specified in the header, in lower-case. */`",1045,null],[11,"ProtocolHasFlags","","`text /** * Test whether the given URI's handler has the given protocol flags. * * @param aURI the URI in question * @param aFlags the flags we're testing for. * * @return whether the protocol handler for aURI has all the flags * in aFlags. */`",1045,null],[11,"URIChainHasFlags","","`text /** * Test whether the protocol handler for this URI or that for any of * its inner URIs has the given protocol flags. This will QI aURI to * nsINestedURI and walk the nested URI chain. * * @param aURI the URI in question * @param aFlags the flags we're testing for. * * @return whether any of the protocol handlers involved have all the flags * in aFlags. */`",1045,null],[11,"ToImmutableURI","","`text /** * Take aURI and produce an immutable version of it for the caller. If aURI * is immutable this will be aURI itself; otherwise this will be a clone, * marked immutable if possible. Passing null to this method is allowed; in * that case it will return null. */`",1045,null],[11,"NewSimpleNestedURI","","`text /** * Create a simple nested URI using the result of * toImmutableURI on the passed-in aURI which may not be null. * Note: The return URI will not have had its spec set yet. */`",1045,null],[11,"EscapeString","","`text /** * escape a string with %00-style escaping */`",1045,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EscapeURL","","`text /** * %XX-Escape invalid chars in a URL segment. * * @param aStr the URL to be escaped * @param aFlags the URL segment type flags * * @return the escaped string (the string itself if escaping did not happen) * */`",1045,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"UnescapeString","","`text /** * Expands URL escape sequences * * @param aStr the URL to be unescaped * @param aFlags only ESCAPE_URL_ONLY_NONASCII and ESCAPE_URL_SKIP_CONTROL * are recognized. If |aFlags| is 0 all escape sequences are * unescaped * @return unescaped string */`",1045,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ExtractCharsetFromContentType","","`text /** * Extract the charset parameter location and value from a content-type * header. * * @param aTypeHeader the header string to parse * @param [out] aCharset the charset parameter specified in the * header, if any. * @param [out] aCharsetStart index of the start of the charset parameter * (the ';' separating it from what came before) in aTypeHeader. * If this function returns false, this argument will still be * set, to the index of the location where a new charset should * be inserted. * @param [out] aCharsetEnd index of the end of the charset parameter (the * ';' separating it from what comes after, or the end * of the string) in aTypeHeader. If this function returns * false, this argument will still be set, to the index of the * location where a new charset should be inserted. * * @return whether a charset parameter was found. This can be false even in * cases when parseContentType would claim to have a charset, if the type * that won out does not have a charset parameter specified. */`",1045,null],[11,"ParseAttributePolicyString","","`text /** * Parse an attribute referrer policy string (no-referrer, origin, unsafe-url) * and return the according integer code (defined in nsIHttpChannel.idl) * * @param aPolicyString * the policy string given as attribute * @return aPolicyEnum * referrer policy code from nsIHttpChannel.idl, (see parser in * ReferrerPolicy.h for details) */`",1045,null],[11,"addref","","",1046,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1046,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIASN1Tree` to one of its base interfaces.",1046,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1046,{"inputs":[{"name":"self"}],"output":{"name":"nsitreeview"}}],[11,"LoadASN1Structure","","`[must_use] void loadASN1Structure (in nsIASN1Object asn1Object);`",1046,null],[11,"GetDisplayData","","`[must_use] AString getDisplayData (in unsigned long index);`",1046,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1047,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1047,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDialogParamBlock` to one of its base interfaces.",1047,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1047,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInt","","`text /** Get or set an integer to pass. * Index must be in the range 0..7 */`",1047,null],[11,"SetInt","","`void SetInt (in int32_t inIndex, in int32_t inInt);`",1047,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetNumberStrings","","`text /** Set the maximum number of strings to pass. Default is 16. * Use before setting any string (If you want to change it from the default). */`",1047,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetString","","`text /** Get or set an string to pass. * Index starts at 0 */`",1047,null],[11,"SetString","","`void SetString (in int32_t inIndex, in wstring inString);`",1047,null],[11,"GetObjects","","`text /** * A place where you can store an nsIMutableArray to pass nsISupports */`",1047,null],[11,"SetObjects","","`text /** * A place where you can store an nsIMutableArray to pass nsISupports */`",1047,null],[11,"addref","","",1048,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1048,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScreenManager` to one of its base interfaces.",1048,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1048,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ScreenForRect","","`nsIScreen screenForRect (in long left, in long top, in long width, in long height);`",1048,null],[11,"GetPrimaryScreen","","`readonly attribute nsIScreen primaryScreen;`",1048,null],[11,"addref","","",1049,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1049,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMultiPartChannel` to one of its base interfaces.",1049,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1049,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBaseChannel","","`text /** * readonly attribute to access the underlying channel */`",1049,null],[11,"GetPartID","","`text /** * Attribute guaranteed to be different for different parts of * the same multipart document. */`",1049,null],[11,"GetIsLastPart","","`text /** * Set to true when onStopRequest is received from the base channel. * The listener can check this from its onStopRequest to determine * whether more data can be expected. */`",1049,null],[11,"addref","","",1050,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1050,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushNotifier` to one of its base interfaces.",1050,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1050,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyPush","","`text /** * Fires a `push-message` observer notification, and sends a `push` event to * the service worker registered for the |scope|. |messageId| is an opaque ID * used to report errors if the worker fails to handle the message. */`",1050,null],[11,"NotifyPushWithData","","`text /** * Same as `notifyPush`, except the subject of the observer notification * receives an `nsIPushMessage` instance containing the |data|. Service * workers can access the |data| via the `PushMessageData` WebIDL interface. */`",1050,null],[11,"NotifySubscriptionChange","","`text /** * Fires a `push-subscription-change` observer notification, and sends a * `pushsubscriptionchange` event to the service worker registered for the * |scope|. */`",1050,null],[11,"NotifySubscriptionModified","","`text /** * Fires a `push-subscription-modified` observer notification. Chrome code * can listen for this notification to see when a subscription is added, * updated, removed, or expired for any |scope|. * * This is useful for Dev Tools and debugging add-ons that passively observe * when subscriptions are created or dropped. Other callers should listen for * `push-subscription-change` and resubscribe instead. */`",1050,null],[11,"NotifyError","","`void notifyError (in ACString scope, in nsIPrincipal principal, in DOMString message, in uint32_t flags);`",1050,null],[11,"addref","","",1051,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1051,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushData` to one of its base interfaces.",1051,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1051,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Text","","`text /** Extracts the data as a UTF-8 text string. */`",1051,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Binary","","`text /** Extracts the raw binary data. */`",1051,null],[11,"addref","","",1052,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1052,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushMessage` to one of its base interfaces.",1052,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1052,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",1052,null],[11,"GetData","","`readonly attribute nsIPushData data;`",1052,null],[11,"addref","","",1053,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1053,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISubstitutionObserver` to one of its base interfaces.",1053,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1053,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSetSubstitution","","`text /** * To be called when a substition has been set or unset on a protocol * handler. Unset operations are identified by a null URI argument. * * @param aRoot the root key of the mapping * @param aBaseURI the base URI to be substituted for the root key by the * protocol handler. For notifications triggered by unset * operations (i.e., when is a substitution is removed from the * protocol handler) this argument is null. */`",1053,null],[11,"addref","","",1054,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1054,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSCounterStyleRule` to one of its base interfaces.",1054,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1054,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`attribute DOMString name;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`attribute DOMString name;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSystem","","`attribute DOMString system;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSystem","","`attribute DOMString system;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSymbols","","`attribute DOMString symbols;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSymbols","","`attribute DOMString symbols;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAdditiveSymbols","","`attribute DOMString additiveSymbols;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAdditiveSymbols","","`attribute DOMString additiveSymbols;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNegative","","`attribute DOMString negative;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetNegative","","`attribute DOMString negative;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPrefix","","`attribute DOMString prefix;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPrefix","","`attribute DOMString prefix;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSuffix","","`attribute DOMString suffix;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSuffix","","`attribute DOMString suffix;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRange","","`attribute DOMString range;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetRange","","`attribute DOMString range;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPad","","`attribute DOMString pad;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPad","","`attribute DOMString pad;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSpeakAs","","`attribute DOMString speakAs;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSpeakAs","","`attribute DOMString speakAs;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFallback","","`attribute DOMString fallback;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetFallback","","`attribute DOMString fallback;`",1054,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1055,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1055,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDeviceListener` to one of its base interfaces.",1055,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1055,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddDevice","","`void addDevice (in nsIPresentationDevice device);`",1055,null],[11,"RemoveDevice","","`void removeDevice (in nsIPresentationDevice device);`",1055,null],[11,"UpdateDevice","","`void updateDevice (in nsIPresentationDevice device);`",1055,null],[11,"OnSessionRequest","","`void onSessionRequest (in nsIPresentationDevice device, in DOMString url, in DOMString presentationId, in nsIPresentationControlChannel controlChannel);`",1055,null],[11,"OnTerminateRequest","","`void onTerminateRequest (in nsIPresentationDevice device, in DOMString presentationId, in nsIPresentationControlChannel controlChannel, in boolean aIsFromReceiver);`",1055,null],[11,"OnReconnectRequest","","`void onReconnectRequest (in nsIPresentationDevice device, in DOMString url, in DOMString presentationId, in nsIPresentationControlChannel controlChannel);`",1055,null],[11,"addref","","",1056,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1056,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationDeviceProvider` to one of its base interfaces.",1056,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1056,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetListener","","`attribute nsIPresentationDeviceListener listener;`",1056,null],[11,"SetListener","","`attribute nsIPresentationDeviceListener listener;`",1056,null],[11,"ForceDiscovery","","`void forceDiscovery ();`",1056,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1057,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1057,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILocalCertService` to one of its base interfaces.",1057,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1057,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetOrCreateCert","","`text /** * Get or create a new self-signed X.509 cert to represent this device over a * secure transport, like TLS. * * The cert is stored permanently in the profile's key store after first use, * and is valid for 1 year. If an expired or otherwise invalid cert is found * with the nickname supplied here, it is removed and a new one is made. * * @param nickname Nickname that identifies the cert * @param cb Callback to be notified with the result */`",1057,null],[11,"RemoveCert","","`text /** * Remove a X.509 cert with the given nickname. * * @param nickname Nickname that identifies the cert * @param cb Callback to be notified with the result */`",1057,null],[11,"GetLoginPromptRequired","","`text /** * Whether calling |getOrCreateCert| or |removeCert| will trigger a login * prompt to be displayed. Generally this happens if the user has set a * master password, but has not yet logged in. */`",1057,null],[11,"addref","","",1058,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1058,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILocalCertGetCallback` to one of its base interfaces.",1058,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1058,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleCert","","`text /** * Called with the result of the getOrCreateCert operation above. * * @param cert Requested cert, or null if some error * @param result Result code from the get operation */`",1058,null],[11,"addref","","",1059,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1059,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILocalCertCallback` to one of its base interfaces.",1059,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1059,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleResult","","`text /** * Called with the result of the removeCert operation above. * * @param result Result code from the operation */`",1059,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",1060,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1060,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketTransportService` to one of its base interfaces.",1060,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1060,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateTransport","","`text /** * Creates a transport for a specified host and port. * * @param aSocketTypes * array of socket type strings. null if using default socket type. * @param aTypeCount * specifies length of aSocketTypes. * @param aHost * specifies the target hostname or IP address literal of the peer * for this socket. * @param aPort * specifies the target port of the peer for this socket. * @param aProxyInfo * specifies the transport-layer proxy type to use. null if no * proxy. used for communicating information about proxies like * SOCKS (which are transparent to upper protocols). * * @see nsIProxiedProtocolHandler * @see nsIProtocolProxyService::GetProxyInfo * * NOTE: this function can be called from any thread */`",1060,null],[11,"CreateUnixDomainTransport","","`text /** * Create a transport built on a Unix domain socket, connecting to the * given filename. * * Since Unix domain sockets are always local to the machine, they are * not affected by the nsIIOService's 'offline' flag. * * On systems that don't support Unix domain sockets at all, this * returns NS_ERROR_SOCKET_ADDRESS_NOT_SUPPORTED. * * The system-level socket API may impose restrictions on the length of * the filename that are stricter than those of the underlying * filesystem. If the file name is too long, this returns * NS_ERROR_FILE_NAME_TOO_LONG. * * The |aPath| parameter must specify an existing directory entry. * Otherwise, this returns NS_ERROR_FILE_NOT_FOUND. * * The program must have search permission on all components of the * path prefix of |aPath|, and read and write permission on |aPath| * itself. Without such permission, this returns * NS_ERROR_CONNECTION_REFUSED. * * The |aPath| parameter must refer to a unix-domain socket. Otherwise, * this returns NS_ERROR_CONNECTION_REFUSED. (POSIX specifies * ECONNREFUSED when \"the target address was not listening for * connections\", and this is what Linux returns.) * * @param aPath * The file name of the Unix domain socket to which we should * connect. */`",1060,null],[11,"NotifyWhenCanAttachSocket","","`text /** * if the number of sockets reaches the limit, then consumers can be * notified when the number of sockets becomes less than the limit. the * notification is asynchronous, delivered via the given nsIRunnable * instance on the socket transport thread. * * @param aEvent * Event that will receive the notification when a new socket can * be attached * * NOTE: this function may only be called from an event dispatch on the * socket thread. */`",1060,null],[11,"addref","","",1061,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1061,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRoutedSocketTransportService` to one of its base interfaces.",1061,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1061,{"inputs":[{"name":"self"}],"output":{"name":"nsisockettransportservice"}}],[11,"CreateRoutedTransport","","`nsISocketTransport createRoutedTransport ([array, size_is (aTypeCount)] in string aSocketTypes, in unsigned long aTypeCount, in AUTF8String aHost, in long aPort, in AUTF8String aHostRoute, in long aPortRoute, in nsIProxyInfo aProxyInfo);`",1061,null],[11,"addref","","",1062,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1062,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCTestParams` to one of its base interfaces.",1062,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1062,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"TestBoolean","","`boolean testBoolean (in boolean a, inout boolean b);`",1062,null],[11,"TestOctet","","`octet testOctet (in octet a, inout octet b);`",1062,null],[11,"TestShort","","`short testShort (in short a, inout short b);`",1062,null],[11,"TestLong","","`long testLong (in long a, inout long b);`",1062,null],[11,"TestLongLong","","`long long testLongLong (in long long a, inout long long b);`",1062,null],[11,"TestUnsignedShort","","`unsigned short testUnsignedShort (in unsigned short a, inout unsigned short b);`",1062,null],[11,"TestUnsignedLong","","`unsigned long testUnsignedLong (in unsigned long a, inout unsigned long b);`",1062,null],[11,"TestUnsignedLongLong","","`unsigned long long testUnsignedLongLong (in unsigned long long a, inout unsigned long long b);`",1062,null],[11,"TestFloat","","`float testFloat (in float a, inout float b);`",1062,null],[11,"TestDouble","","`double testDouble (in double a, inout float b);`",1062,null],[11,"TestChar","","`char testChar (in char a, inout char b);`",1062,null],[11,"TestString","","`string testString (in string a, inout string b);`",1062,null],[11,"TestWchar","","`wchar testWchar (in wchar a, inout wchar b);`",1062,null],[11,"TestWstring","","`wstring testWstring (in wstring a, inout wstring b);`",1062,null],[11,"TestDOMString","","`DOMString testDOMString (in DOMString a, inout DOMString b);`",1062,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"TestAString","","`AString testAString (in AString a, inout AString b);`",1062,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"TestAUTF8String","","`AUTF8String testAUTF8String (in AUTF8String a, inout AUTF8String b);`",1062,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"TestACString","","`ACString testACString (in ACString a, inout ACString b);`",1062,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"TestShortArray","","`void testShortArray (in unsigned long aLength, [array, size_is (aLength)] in short a, inout unsigned long bLength, [array, size_is (bLength)] inout short b, out unsigned long rvLength, [array, size_is (rvLength), retval] out short rv);`",1062,null],[11,"TestDoubleArray","","`void testDoubleArray (in unsigned long aLength, [array, size_is (aLength)] in double a, inout unsigned long bLength, [array, size_is (bLength)] inout double b, out unsigned long rvLength, [array, size_is (rvLength), retval] out double rv);`",1062,null],[11,"TestStringArray","","`void testStringArray (in unsigned long aLength, [array, size_is (aLength)] in string a, inout unsigned long bLength, [array, size_is (bLength)] inout string b, out unsigned long rvLength, [array, size_is (rvLength), retval] out string rv);`",1062,null],[11,"TestWstringArray","","`void testWstringArray (in unsigned long aLength, [array, size_is (aLength)] in wstring a, inout unsigned long bLength, [array, size_is (bLength)] inout wstring b, out unsigned long rvLength, [array, size_is (rvLength), retval] out wstring rv);`",1062,null],[11,"TestInterfaceArray","","`void testInterfaceArray (in unsigned long aLength, [array, size_is (aLength)] in nsIXPCTestInterfaceA a, inout unsigned long bLength, [array, size_is (bLength)] inout nsIXPCTestInterfaceA b, out unsigned long rvLength, [array, size_is (rvLength), retval] out nsIXPCTestInterfaceA rv);`",1062,null],[11,"TestSizedString","","`void testSizedString (in unsigned long aLength, [size_is (aLength)] in string a, inout unsigned long bLength, [size_is (bLength)] inout string b, out unsigned long rvLength, [size_is (rvLength), retval] out string rv);`",1062,null],[11,"TestSizedWstring","","`void testSizedWstring (in unsigned long aLength, [size_is (aLength)] in wstring a, inout unsigned long bLength, [size_is (bLength)] inout wstring b, out unsigned long rvLength, [size_is (rvLength), retval] out wstring rv);`",1062,null],[11,"TestInterfaceIs","","`void testInterfaceIs (in nsIIDPtr aIID, [iid_is (aIID)] in nsQIResult a, inout nsIIDPtr bIID, [iid_is (bIID)] inout nsQIResult b, out nsIIDPtr rvIID, [iid_is (rvIID), retval] out nsQIResult rv);`",1062,null],[11,"TestInterfaceIsArray","","`void testInterfaceIsArray (in unsigned long aLength, in nsIIDPtr aIID, [array, size_is (aLength), iid_is (aIID)] in nsQIResult a, inout unsigned long bLength, inout nsIIDPtr bIID, [array, size_is (bLength), iid_is (bIID)] inout nsQIResult b, out unsigned long rvLength, out nsIIDPtr rvIID, [retval, array, size_is (rvLength), iid_is (rvIID)] out nsQIResult rv);`",1062,null],[11,"TestOutAString","","`void testOutAString (out AString o);`",1062,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"TestStringArrayOptionalSize","","`ACString testStringArrayOptionalSize ([array, size_is (aLength)] in string a, [optional] in unsigned long aLength);`",1062,null],[11,"addref","","",1063,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1063,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULCommandDispatcher` to one of its base interfaces.",1063,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1063,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFocusedElement","","`attribute nsIDOMElement focusedElement;`",1063,null],[11,"SetFocusedElement","","`attribute nsIDOMElement focusedElement;`",1063,null],[11,"GetFocusedWindow","","`attribute mozIDOMWindowProxy focusedWindow;`",1063,null],[11,"SetFocusedWindow","","`attribute mozIDOMWindowProxy focusedWindow;`",1063,null],[11,"AddCommandUpdater","","`void addCommandUpdater (in nsIDOMElement updater, in DOMString events, in DOMString targets);`",1063,null],[11,"RemoveCommandUpdater","","`void removeCommandUpdater (in nsIDOMElement updater);`",1063,null],[11,"UpdateCommands","","`void updateCommands (in DOMString eventName);`",1063,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetControllerForCommand","","`nsIController getControllerForCommand (in string command);`",1063,null],[11,"GetControllers","","`nsIControllers getControllers ();`",1063,null],[11,"AdvanceFocus","","`void advanceFocus ();`",1063,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RewindFocus","","`void rewindFocus ();`",1063,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AdvanceFocusIntoSubtree","","`void advanceFocusIntoSubtree (in nsIDOMElement elt);`",1063,null],[11,"GetSuppressFocusScroll","","`attribute boolean suppressFocusScroll;`",1063,null],[11,"SetSuppressFocusScroll","","`attribute boolean suppressFocusScroll;`",1063,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Lock","","`void lock ();`",1063,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Unlock","","`void unlock ();`",1063,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1064,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1064,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthInformation` to one of its base interfaces.",1064,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1064,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"AUTH_HOST","","`text /** @name Flags */ /** * This dialog belongs to a network host. */`",1064,null],[18,"AUTH_PROXY","","`text /** * This dialog belongs to a proxy. */`",1064,null],[18,"NEED_DOMAIN","","`text /** * This dialog needs domain information. The user interface should show a * domain field, prefilled with the domain attribute's value. */`",1064,null],[18,"ONLY_PASSWORD","","`text /** * This dialog only asks for password information. Authentication prompts * SHOULD NOT show a username field. Attempts to change the username field * will have no effect. nsIAuthPrompt2 implementations should, however, show * its initial value to the user in some form. For example, a paragraph in * the dialog might say \"Please enter your password for user jsmith at * server intranet\". * * This flag is mutually exclusive with #NEED_DOMAIN. */`",1064,null],[18,"PREVIOUS_FAILED","","`text /** * We have already tried to log in for this channel * (with auth values from a previous promptAuth call), * but it failed, so we now ask the user to provide a new, correct login. * * @see also RFC 2616, Section 10.4.2 */`",1064,null],[18,"CROSS_ORIGIN_SUB_RESOURCE","","`text /** * A cross-origin sub-resource requests an authentication. * The message presented to users must reflect that. */`",1064,null],[11,"GetFlags","","`text /** * Flags describing this dialog. A bitwise OR of the flag values * above. * * It is possible that neither #AUTH_HOST nor #AUTH_PROXY are set. * * Auth prompts should ignore flags they don't understand; especially, they * should not throw an exception because of an unsupported flag. */`",1064,null],[11,"GetRealm","","`text /** * The server-supplied realm of the authentication as defined in RFC 2617. * Can be the empty string if the protocol does not support realms. * Otherwise, this is a human-readable string like \"Secret files\". */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAuthenticationScheme","","`text /** * The authentication scheme used for this request, if applicable. If the * protocol for this authentication does not support schemes, this will be * the empty string. Otherwise, this will be a string such as \"basic\" or * \"digest\". This string will always be in lowercase. */`",1064,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUsername","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * On return, this parameter should contain the username entered by * the user. * This field can only be changed if the #ONLY_PASSWORD flag is not set. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetUsername","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * On return, this parameter should contain the username entered by * the user. * This field can only be changed if the #ONLY_PASSWORD flag is not set. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPassword","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * The password should not be shown in clear. * On return, this parameter should contain the password entered by * the user. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPassword","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * The password should not be shown in clear. * On return, this parameter should contain the password entered by * the user. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDomain","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * On return, this parameter should contain the domain entered by * the user. * This attribute is only used if flags include #NEED_DOMAIN. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDomain","","`text /** * The initial value should be used to prefill the dialog or be shown * in some other way to the user. * On return, this parameter should contain the domain entered by * the user. * This attribute is only used if flags include #NEED_DOMAIN. */`",1064,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1065,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1065,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFinishDumpingCallback` to one of its base interfaces.",1065,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1065,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback (in nsISupports data);`",1065,null],[11,"addref","","",1066,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1066,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDumpGCAndCCLogsCallback` to one of its base interfaces.",1066,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1066,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDump","","`text /** * Called whenever a process has successfully finished dumping its GC/CC logs. * Incomplete dumps (e.g., if the child crashes or is killed due to memory * exhaustion) are not reported. * * @param aGCLog The file that the GC log was written to. * * @param aCCLog The file that the CC log was written to. * * @param aIsParent indicates whether this log file pair is from the * parent process. */`",1066,null],[11,"OnFinish","","`text /** * Called when GC/CC logging has finished, after all calls to |onDump|. */`",1066,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1067,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1067,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMemoryInfoDumper` to one of its base interfaces.",1067,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1067,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DumpMemoryReportsToNamedFile","","`text /** * This dumps gzipped memory reports for this process and its child * processes. If a file of the given name exists, it will be overwritten. * * @param aFilename The output file. * * @param aFinishDumping The callback called on completion. * * @param aFinishDumpingData The environment for the callback. * * @param aAnonymize Should the reports be anonymized? * * Sample output, annotated with comments for explanatory purposes. * * { * // The version number of the format, which will be incremented each time * // backwards-incompatible changes are made. A mandatory integer. * \"version\": 1 * * // Equal to nsIMemoryReporterManager::hasMozMallocUsableSize. A * // mandatory boolean. * \"hasMozMallocUsableSize\": true, * * // The memory reports. A mandatory array. * \"reports\": [ * // The properties correspond to the arguments of * // nsIHandleReportCallback::callback. Every one is mandatory. * {\"process\":\"Main Process (pid 12345)\", \"path\":\"explicit/foo/bar\", * \"kind\":1, \"units\":0, \"amount\":2000000, \"description\":\"Foo bar.\"}, * {\"process\":\"Main Process (pid 12345)\", \"path\":\"heap-allocated\", * \"kind\":1, \"units\":0, \"amount\":3000000, \"description\":\"Heap allocated.\"}, * {\"process\":\"Main Process (pid 12345)\", \"path\":\"vsize\", * \"kind\":1, \"units\":0, \"amount\":10000000, \"description\":\"Vsize.\"} * ] * } */`",1067,null],[11,"DumpMemoryInfoToTempDir","","`text /** * Similar to dumpMemoryReportsToNamedFile, this method dumps gzipped memory * reports for this process and its child processes to files in the tmp * directory called memory-reports-<identifier>-<pid>.json.gz (or something * similar, such as memory-reports-<identifier>-<pid>-1.json.gz; no existing * file will be overwritten). * * If DMD is enabled, this method also dumps gzipped DMD output for this * process and its child processes to files in the tmp directory called * dmd-<identifier>-<pid>.txt.gz (or something similar; again, no existing * file will be overwritten). * * @param aIdentifier this identifier will appear in the filename of our * about:memory dump and those of our children. * * If the identifier is empty, the implementation may set it arbitrarily * and use that new value for its own dump and the dumps of its child * processes. For example, the implementation may set |aIdentifier| to the * number of seconds since the epoch. * * @param aAnonymize Should the reports be anonymized? * * @param aMinimizeMemoryUsage indicates whether we should run a series of * gc/cc's in an attempt to reduce our memory usage before collecting our * memory report. */`",1067,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DumpGCAndCCLogsToFile","","`text /** * Dump GC and CC logs to files in the OS's temp directory (or in * $MOZ_CC_LOG_DIRECTORY, if that environment variable is specified). * * @param aIdentifier If aIdentifier is non-empty, this string will appear in * the filenames of the logs we create (both for this process and, if * aDumpChildProcesses is true, for our child processes). * * If aIdentifier is empty, the implementation may set it to an * arbitrary value; for example, it may set aIdentifier to the number * of seconds since the epoch. * * @param aDumpAllTraces indicates whether we should run an all-traces CC * log. An all-traces log visits all objects currently eligible for cycle * collection, while a non-all-traces log avoids visiting some objects * which we know are reachable. * * All-traces logs are much bigger than the alternative, but they may be * helpful when trying to understand why a particular object is alive. For * example, a non-traces-log will skip references held by an active * document; if your object is being held alive by such a document, you * probably want to see those references. * * @param aDumpChildProcesses indicates whether we should call * DumpGCAndCCLogsToFile in our child processes. If so, the child processes * will dump their children, and so on. * */`",1067,null],[11,"DumpGCAndCCLogsToSink","","`text /** * Like |dumpGCAndCCLogsToFile|, but sends the logs to the given log * sink object instead of accessing the filesystem directly, and * dumps the current process only. */`",1067,null],[11,"addref","","",1068,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1068,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleDocument` to one of its base interfaces.",1068,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1068,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetURL","","`text /** * The URL of the document */`",1068,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** * The title of the document, as specified in the document. */`",1068,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMimeType","","`text /** * The mime type of the document */`",1068,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDocType","","`text /** * The doc type of the document, as specified in the document. */`",1068,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDOMDocument","","`text /** * The nsIDOMDocument interface associated with this document. */`",1068,null],[11,"GetWindow","","`text /** * The nsIDOMWindow that the document resides in. */`",1068,null],[11,"GetParentDocument","","`text /** * Return the parent document accessible. */`",1068,null],[11,"GetChildDocumentCount","","`text /** * Return the count of child document accessibles. */`",1068,null],[11,"GetVirtualCursor","","`text /** * The virtual cursor pivot this document manages. */`",1068,null],[11,"GetChildDocumentAt","","`text /** * Return the child document accessible at the given index. */`",1068,null],[11,"addref","","",1069,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1069,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequestTailUnblockCallback` to one of its base interfaces.",1069,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1069,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnTailUnblock","","`text /** * Called when the requests is unblocked and proceed. * @param result * NS_OK - the request is OK to go, unblocking is not * caused by cancelation of the request. * any error - the request must behave as it were canceled * with the result as status. */`",1069,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",1070,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1070,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequestContext` to one of its base interfaces.",1070,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetID","","`text /** * A unique identifier for this request context */`",1070,null],[11,"BeginLoad","","`text /** * Called by the associated document when its load starts. This resets * context's internal states. */`",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DOMContentLoaded","","`text /** * Called when the associated document notified the DOMContentLoaded event. */`",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetBlockingTransactionCount","","`text /** * Number of active blocking transactions associated with this context */`",1070,null],[11,"AddBlockingTransaction","","`text /** * Increase the number of active blocking transactions associated * with this context by one. */`",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveBlockingTransaction","","`text /** * Decrease the number of active blocking transactions associated * with this context by one. The return value is the number of remaining * blockers. */`",1070,null],[11,"GetUserAgentOverride","","`text /** * This holds a cached value of the user agent override. */`",1070,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetUserAgentOverride","","`text /** * This holds a cached value of the user agent override. */`",1070,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"AddNonTailRequest","","`text /** * Increases/decrease the number of non-tailed requests in this context. * If the count drops to zero, all tail-blocked callbacks are notified * shortly after that to be unblocked. */`",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RemoveNonTailRequest","","`void removeNonTailRequest ();`",1070,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsContextTailBlocked","","`text /** * If the request context is in tail-blocked state, the callback * is queued and result is true. The callback will be notified * about tail-unblocking or when the request context is canceled. */`",1070,null],[11,"CancelTailedRequest","","`text /** * Called when the request is sitting in the tail queue but has been * canceled before untailing. This just removes the request from the * queue so that it is not notified on untail and not referenced. */`",1070,null],[11,"CancelTailPendingRequests","","`text /** * This notifies all queued tail-blocked requests, they will be notified * aResult and released afterwards. Called by the load group when * it's canceled. */`",1070,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",1071,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1071,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequestContextService` to one of its base interfaces.",1071,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1071,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRequestContext","","`text /** * Get an existing request context from its ID */`",1071,null],[11,"GetRequestContextFromLoadGroup","","`text /** * Shorthand to get request context from a load group */`",1071,null],[11,"NewRequestContext","","`text /** * Create a new request context */`",1071,null],[11,"RemoveRequestContext","","`text /** * Remove an existing request context from its ID */`",1071,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1072,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1072,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBackgroundFileSaver` to one of its base interfaces.",1072,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1072,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetObserver","","`text /** * This observer receives notifications when the target file name changes and * when the operation completes, successfully or not. * * @remarks A strong reference to the observer is held. Notification events * are dispatched to the thread that created the object that * implements nsIBackgroundFileSaver. */`",1072,null],[11,"SetObserver","","`text /** * This observer receives notifications when the target file name changes and * when the operation completes, successfully or not. * * @remarks A strong reference to the observer is held. Notification events * are dispatched to the thread that created the object that * implements nsIBackgroundFileSaver. */`",1072,null],[11,"GetSignatureInfo","","`text /** * An nsIArray of nsIX509CertList, representing a chain of X.509 signatures on * the downloaded file. Each list may belong to a different signer and contain * certificates all the way up to the root. * * @throws NS_ERROR_NOT_AVAILABLE * In case this is called before the onSaveComplete method has been * called to notify success, or enableSignatureInfo has not been * called. */`",1072,null],[11,"GetSha256Hash","","`text /** * The SHA-256 hash, in raw bytes, associated with the data that was saved. * * In case the enableAppend method has been called, the hash computation * includes the contents of the existing file, if any. * * @throws NS_ERROR_NOT_AVAILABLE * In case the enableSha256 method has not been called, or before the * onSaveComplete method has been called to notify success. */`",1072,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EnableSignatureInfo","","`text /** * Instructs the component to compute the signatureInfo of the target file, * and make it available in the signatureInfo property. * * @remarks This must be set on the main thread before the first call to * setTarget. */`",1072,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnableSha256","","`text /** * Instructs the component to compute the SHA-256 hash of the target file, and * make it available in the sha256Hash property. * * @remarks This must be set on the main thread before the first call to * setTarget. */`",1072,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnableAppend","","`text /** * Instructs the component to append data to the initial target file, that * will be specified by the first call to the setTarget method, instead of * overwriting the file. * * If the initial target file does not exist, this method has no effect. * * @remarks This must be set on the main thread before the first call to * setTarget. */`",1072,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetTarget","","`text /** * Sets the name of the output file to be written. The target can be changed * after data has already been fed, in which case the existing file will be * moved to the new destination. * * In case the specified file already exists, and this method is called for * the first time, the file may be either overwritten or appended to, based on * whether the enableAppend method was called. Subsequent calls always * overwrite the specified target file with the previously saved data. * * No file will be written until this function is called at least once. It's * recommended not to feed any data until the output file is set. * * If an input/output error occurs with the specified file, the save operation * fails. Failure is notified asynchronously through the observer. * * @param aTarget * New output file to be written. * @param aKeepPartial * Indicates whether aFile should be kept as partially completed, * rather than deleted, if the operation fails or is canceled. This is * generally set for downloads that use temporary \".part\" files. */`",1072,null],[11,"Finish","","`text /** * Terminates access to the output file, then notifies the observer with the * specified status code. A failure code will force the operation to be * canceled, in which case the output file will be deleted if requested. * * This forces the involved streams to be closed, thus no more data should be * fed to the component after this method has been called. * * This is the last method that should be called on this object, and the * target file name cannot be changed anymore after this method has been * called. Conversely, before calling this method, the file can still be * renamed even if all the data has been fed. * * @param aStatus * Result code that determines whether the operation should succeed or * be canceled, and is notified to the observer. If the operation * fails meanwhile for other reasons, or the observer has been already * notified of completion, this status code is ignored. */`",1072,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",1073,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1073,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBackgroundFileSaverObserver` to one of its base interfaces.",1073,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1073,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnTargetChange","","`text /** * Called when the name of the output file has been determined. This function * may be called more than once if the target file is renamed while saving. * * @param aSaver * Reference to the object that raised the notification. * @param aTarget * Name of the file that is being written. */`",1073,null],[11,"OnSaveComplete","","`text /** * Called when the operation completed, and the target file has been closed. * If the operation succeeded, the target file is ready to be used, otherwise * it might have been already deleted. * * @param aSaver * Reference to the object that raised the notification. * @param aStatus * Result code that determines whether the operation succeeded or * failed, as well as the failure reason. */`",1073,null],[11,"addref","","",1074,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1074,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthPromptProvider` to one of its base interfaces.",1074,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1074,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PROMPT_NORMAL","","`text /** * Normal (non-proxy) prompt request. */`",1074,null],[18,"PROMPT_PROXY","","`text /** * Proxy auth request. */`",1074,null],[11,"GetAuthPrompt","","`text /** * Request a prompt interface for the given prompt reason; * @throws NS_ERROR_NOT_AVAILABLE if no prompt is allowed or * available for the given reason. * * @param aPromptReason The reason for the auth prompt; * one of #PROMPT_NORMAL or #PROMPT_PROXY * @param iid The desired interface, e.g. * NS_GET_IID(nsIAuthPrompt2). * @returns an nsIAuthPrompt2 interface, or throws NS_ERROR_NOT_AVAILABLE */`",1074,null],[11,"addref","","",1075,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1075,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormatConverter` to one of its base interfaces.",1075,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1075,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInputDataFlavors","","`text /** * Get the list of the \"input\" data flavors (mime types as nsISupportsCString), * in otherwords, the flavors that this converter can convert \"from\" (the * incoming data to the converter). */`",1075,null],[11,"GetOutputDataFlavors","","`text /** * Get the list of the \"output\" data flavors (mime types as nsISupportsCString), * in otherwords, the flavors that this converter can convert \"to\" (the * outgoing data to the converter). * * @param aDataFlavorList fills list with supported flavors */`",1075,null],[11,"CanConvert","","`text /** * Determines whether a conversion from one flavor to another is supported * * @param aFromFormatConverter flavor to convert from * @param aFromFormatConverter flavor to convert to */`",1075,null],[11,"Convert","","`text /** * Converts from one flavor to another. * * @param aFromFormatConverter flavor to convert from * @param aFromFormatConverter flavor to convert to (destination own the memory) * @returns returns NS_OK if it was converted */`",1075,null],[11,"addref","","",1076,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1076,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgIContainer` to one of its base interfaces.",1076,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1076,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_RASTER","","`text /** * Enumerated values for the 'type' attribute (below). */`",1076,null],[18,"TYPE_VECTOR","","",1076,null],[18,"FLAG_NONE","","`text /** * Flags for imgIContainer operations. * * Meanings: * * FLAG_NONE: Lack of flags. * * FLAG_SYNC_DECODE: Forces synchronous/non-progressive decode of all * available data before the call returns. * * FLAG_SYNC_DECODE_IF_FAST: Like FLAG_SYNC_DECODE, but requests a sync decode * be performed only if ImageLib estimates it can be completed very quickly. * * FLAG_ASYNC_NOTIFY: Send notifications asynchronously, even if we decode * synchronously beause of FLAG_SYNC_DECODE or FLAG_SYNC_DECODE_IF_FAST. * * FLAG_DECODE_NO_PREMULTIPLY_ALPHA: Do not premultiply alpha if * it's not already premultiplied in the image data. * * FLAG_DECODE_NO_COLORSPACE_CONVERSION: Do not do any colorspace conversion; * ignore any embedded profiles, and don't convert to any particular * destination space. * * FLAG_CLAMP: Extend the image to the fill area by clamping image sample * coordinates instead of by tiling. This only affects 'draw'. * * FLAG_HIGH_QUALITY_SCALING: A hint as to whether this image should be * scaled using the high quality scaler. Do not set this if not drawing to * a window or not listening to invalidations. Passing this flag will do two * things: 1) request a decode of the image at the size asked for by the * caller if one isn't already started or complete, and 2) allows a decoded * frame of any size (it could be neither the requested size, nor the * intrinsic size) to be substituted. * * FLAG_WANT_DATA_SURFACE: Can be passed to GetFrame when the caller wants a * DataSourceSurface instead of a hardware accelerated surface. This can be * important for performance (by avoiding an upload to/readback from the GPU) * when the caller knows they want a SourceSurface of type DATA. * * FLAG_BYPASS_SURFACE_CACHE: Forces drawing to happen rather than taking * cached rendering from the surface cache. This is used when we are printing, * for example, where we want the vector commands from VectorImages to end up * in the PDF output rather than a cached rendering at screen resolution. * * FLAG_FORCE_PRESERVEASPECTRATIO_NONE: Force scaling this image * non-uniformly if necessary. This flag is for vector image only. A raster * image should ignore this flag. While drawing a vector image with this * flag, do not force uniform scaling even if its root <svg> node has a * preserveAspectRatio attribute that would otherwise require uniform * scaling , such as xMinYMin/ xMidYMin. Always scale the graphic content of * the given image non-uniformly if necessary such that the image's * viewBox (if specified or implied by height/width attributes) exactly * matches the viewport rectangle. * * FLAG_FORCE_UNIFORM_SCALING: Signal to ClippedImage::OptimalSizeForDest that * its returned size can only scale the image's size *uniformly* (by the same * factor in each dimension). We need this flag when painting border-image * section with SVG image source-data, if the SVG image has no viewBox and no * intrinsic size. In such a case, we synthesize a viewport for the SVG image * (a \"window into SVG space\") based on the border image area, and we need to * be sure we don't subsequently scale that viewport in a way that distorts * its contents by stretching them more in one dimension than the other. */`",1076,null],[18,"FLAG_SYNC_DECODE","","",1076,null],[18,"FLAG_SYNC_DECODE_IF_FAST","","",1076,null],[18,"FLAG_ASYNC_NOTIFY","","",1076,null],[18,"FLAG_DECODE_NO_PREMULTIPLY_ALPHA","","",1076,null],[18,"FLAG_DECODE_NO_COLORSPACE_CONVERSION","","",1076,null],[18,"FLAG_CLAMP","","",1076,null],[18,"FLAG_HIGH_QUALITY_SCALING","","",1076,null],[18,"FLAG_WANT_DATA_SURFACE","","",1076,null],[18,"FLAG_BYPASS_SURFACE_CACHE","","",1076,null],[18,"FLAG_FORCE_PRESERVEASPECTRATIO_NONE","","",1076,null],[18,"FLAG_FORCE_UNIFORM_SCALING","","",1076,null],[18,"DECODE_FLAGS_DEFAULT","","`text /** * A constant specifying the default set of decode flags (i.e., the default * values for FLAG_DECODE_*). */`",1076,null],[18,"FRAME_FIRST","","`text /** * Constants for specifying various \"special\" frames. * * FRAME_FIRST: The first frame * FRAME_CURRENT: The current frame * * FRAME_MAX_VALUE should be set to the value of the maximum constant above, * as it is used for ensuring that a valid value was passed in. */`",1076,null],[18,"FRAME_CURRENT","","",1076,null],[18,"FRAME_MAX_VALUE","","",1076,null],[18,"kNormalAnimMode","","`text /** * Animation mode Constants * 0 = normal * 1 = don't animate * 2 = loop once */`",1076,null],[18,"kDontAnimMode","","",1076,null],[18,"kLoopOnceAnimMode","","",1076,null],[11,"GetWidth","","`text /** * The width of the container rectangle. In the case of any error, * zero is returned, and an exception will be thrown. */`",1076,null],[11,"GetHeight","","`text /** * The height of the container rectangle. In the case of any error, * zero is returned, and an exception will be thrown. */`",1076,null],[11,"GetType","","`text /** * The type of this image (one of the TYPE_* values above). */`",1076,{"inputs":[{"name":"self"}],"output":{"name":"uint16_t"}}],[11,"GetAnimated","","`text /** * Whether this image is animated. You can only be guaranteed that querying * this will not throw if STATUS_DECODE_COMPLETE is set on the imgIRequest. * * @throws NS_ERROR_NOT_AVAILABLE if the animated state cannot be determined. */`",1076,null],[11,"WillDrawOpaqueNow","","`text /** * Returns true if this image will draw opaquely right now if asked to draw * with FLAG_HIGH_QUALITY_SCALING and otherwise default flags. If this image * (when decoded) is opaque but no decoded frames are available then * willDrawOpaqueNow will return false. */`",1076,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"StartDecoding","","`[noscript] void startDecoding (in uint32_t aFlags);`",1076,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"StartDecodingWithResult","","`[noscript,notxpcom] boolean startDecodingWithResult (in uint32_t aFlags);`",1076,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"bool"}}],[11,"LockImage","","`text /** * Increments the lock count on the image. An image will not be discarded * as long as the lock count is nonzero. Note that it is still possible for * the image to be undecoded if decode-on-draw is enabled and the image * was never drawn. * * Upon instantiation images have a lock count of zero. */`",1076,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"UnlockImage","","`text /** * Decreases the lock count on the image. If the lock count drops to zero, * the image is allowed to discard its frame data to save memory. * * Upon instantiation images have a lock count of zero. It is an error to * call this method without first having made a matching lockImage() call. * In other words, the lock count is not allowed to be negative. */`",1076,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RequestDiscard","","`text /** * If this image is unlocked, discard its decoded data. If the image is * locked or has already been discarded, do nothing. */`",1076,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAnimationMode","","`attribute unsigned short animationMode;`",1076,null],[11,"SetAnimationMode","","`attribute unsigned short animationMode;`",1076,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"ResetAnimation","","`void resetAnimation ();`",1076,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetFrameIndex","","`[notxpcom] float getFrameIndex (in uint32_t aWhichFrame);`",1076,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"c_float"}}],[11,"GetFirstFrameDelay","","`[notxpcom] int32_t getFirstFrameDelay ();`",1076,{"inputs":[{"name":"self"}],"output":{"name":"int32_t"}}],[11,"addref","","",1077,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1077,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `amIAddonManagerStartup` to one of its base interfaces.",1077,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1077,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EnumerateZipFile","","`text /** * Enumerates over all entries in the given zip file matching the given * pattern, and returns an array of their paths. * * This should be used in preference to manually opening or retrieving a * ZipReader from the zip cache, since the former causes main thread IO and * the latter can lead to file locking issues due to unpredictable GC behavior * keeping the cached ZipReader alive after the cache is flushed. * * @param file The zip file to enumerate. * @param pattern The pattern to match, as passed to nsIZipReader.findEntries. */`",1077,null],[11,"Reset","","`text /** * Resets the internal state of the startup service, and allows * initializeExtensions() to be called again. Does *not* fully unregister * chrome registry locations for previously registered add-ons. * * NOT FOR USE OUTSIDE OF UNIT TESTS. */`",1077,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"InitializeURLPreloader","","`text /** * Initializes the URL Preloader. * * NOT FOR USE OUTSIDE OF UNIT TESTS. */`",1077,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1078,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1078,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowWatcher` to one of its base interfaces.",1078,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1078,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OpenWindow","","",1078,null],[11,"RegisterNotification","","",1078,null],[11,"UnregisterNotification","","`text /** Clients of this service can register themselves to be notified when a window is opened or closed (added to or removed from this service). This method removes an aObserver from the list of objects to be notified. @param aObserver the observer to be removed. */`",1078,null],[11,"GetWindowEnumerator","","`text /** Get an iterator for currently open windows in the order they were opened, guaranteeing that each will be visited exactly once. @return an enumerator which will itself return nsISupports objects which can be QIed to an nsIDOMWindow */`",1078,null],[11,"GetNewPrompter","","`text /** Return a newly created nsIPrompt implementation. @param aParent the parent window used for posing alerts. can be null. @return a new nsIPrompt object */`",1078,null],[11,"GetNewAuthPrompter","","`text /** Return a newly created nsIAuthPrompt implementation. @param aParent the parent window used for posing alerts. can be null. @return a new nsIAuthPrompt object */`",1078,null],[11,"SetWindowCreator","","`text /** Set the window creator callback. It must be filled in by the app. openWindow will use it to create new windows. @param creator the callback. if null, the callback will be cleared and window creation capabilities lost. */`",1078,null],[11,"HasWindowCreator","","`text /** Returns true if a window creator callback has been set, false otherwise. */`",1078,null],[11,"GetChromeForWindow","","`text /** Retrieve the chrome window mapped to the given DOM window. Window Watcher keeps a list of all top-level DOM windows currently open, along with their corresponding chrome interfaces. Since DOM Windows lack a (public) means of retrieving their corresponding chrome, this method will do that. @param aWindow the DOM window whose chrome window the caller needs @return the corresponding chrome window */`",1078,null],[11,"GetWindowByName","","",1078,null],[11,"GetActiveWindow","","`text /** The Watcher serves as a global storage facility for the current active (frontmost non-floating-palette-type) window, storing and returning it on demand. Users must keep this attribute current, including after the topmost window is closed. This attribute obviously can return null if no windows are open, but should otherwise always return a valid window. */`",1078,null],[11,"SetActiveWindow","","`text /** The Watcher serves as a global storage facility for the current active (frontmost non-floating-palette-type) window, storing and returning it on demand. Users must keep this attribute current, including after the topmost window is closed. This attribute obviously can return null if no windows are open, but should otherwise always return a valid window. */`",1078,null],[11,"addref","","",1079,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1079,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXSLTProcessorPrivate` to one of its base interfaces.",1079,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1079,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DISABLE_ALL_LOADS","","`text /** * Disables all loading of external documents, such as from * <xsl:import> and document() * Defaults to off and is *not* reset by calls to reset() */`",1079,null],[11,"addref","","",1080,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1080,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDataTransfer` to one of its base interfaces.",1080,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1080,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDropEffect","","`text /** * The actual effect that will be used, and should always be one of the * possible values of effectAllowed. * * For dragstart, drag and dragleave events, the dropEffect is initialized * to none. Any value assigned to the dropEffect will be set, but the value * isn't used for anything. * * For the dragenter and dragover events, the dropEffect will be initialized * based on what action the user is requesting. How this is determined is * platform specific, but typically the user can press modifier keys to * adjust which action is desired. Within an event handler for the dragenter * and dragover events, the dropEffect should be modified if the action the * user is requesting is not the one that is desired. * * For the drop and dragend events, the dropEffect will be initialized to * the action that was desired, which will be the value that the dropEffect * had after the last dragenter or dragover event. * * Possible values: * copy - a copy of the source item is made at the new location * move - an item is moved to a new location * link - a link is established to the source at the new location * none - the item may not be dropped * * Assigning any other value has no effect and retains the old value. */`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDropEffect","","`text /** * The actual effect that will be used, and should always be one of the * possible values of effectAllowed. * * For dragstart, drag and dragleave events, the dropEffect is initialized * to none. Any value assigned to the dropEffect will be set, but the value * isn't used for anything. * * For the dragenter and dragover events, the dropEffect will be initialized * based on what action the user is requesting. How this is determined is * platform specific, but typically the user can press modifier keys to * adjust which action is desired. Within an event handler for the dragenter * and dragover events, the dropEffect should be modified if the action the * user is requesting is not the one that is desired. * * For the drop and dragend events, the dropEffect will be initialized to * the action that was desired, which will be the value that the dropEffect * had after the last dragenter or dragover event. * * Possible values: * copy - a copy of the source item is made at the new location * move - an item is moved to a new location * link - a link is established to the source at the new location * none - the item may not be dropped * * Assigning any other value has no effect and retains the old value. */`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetEffectAllowed","","`attribute DOMString effectAllowed;`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetEffectAllowed","","`attribute DOMString effectAllowed;`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFiles","","`text /** * Holds a list of all the local files available on this data transfer. * A dataTransfer containing no files will return an empty list, and an * invalid index access on the resulting file list will return null. */`",1080,null],[11,"SetDragImage","","`text /** * Set the image to be used for dragging if a custom one is desired. Most of * the time, this would not be set, as a default image is created from the * node that was dragged. * * If the node is an HTML img element, an HTML canvas element or a XUL image * element, the image data is used. Otherwise, image should be a visible * node and the drag image will be created from this. If image is null, any * custom drag image is cleared and the default is used instead. * * The coordinates specify the offset into the image where the mouse cursor * should be. To center the image for instance, use values that are half the * width and height. * * @param image a node to use * @param x the horizontal offset * @param y the vertical offset * @throws NO_MODIFICATION_ALLOWED_ERR if the item cannot be modified */`",1080,null],[11,"AddElement","","`void addElement (in nsIDOMElement element);`",1080,null],[11,"GetMozItemCount","","`text /** * The number of items being dragged. */`",1080,null],[11,"GetMozCursor","","`text /** * Sets the drag cursor state. Primarily used to control the cursor during * tab drags, but could be expanded to other uses. XXX Currently implemented * on Win32 only. * * Possible values: * auto - use default system behavior. * default - set the cursor to an arrow during the drag operation. * * Values other than 'default' are indentical to setting mozCursor to * 'auto'. */`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetMozCursor","","`text /** * Sets the drag cursor state. Primarily used to control the cursor during * tab drags, but could be expanded to other uses. XXX Currently implemented * on Win32 only. * * Possible values: * auto - use default system behavior. * default - set the cursor to an arrow during the drag operation. * * Values other than 'default' are indentical to setting mozCursor to * 'auto'. */`",1080,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMozUserCancelled","","`text /** * Will be true when the user has cancelled the drag (typically by pressing * Escape) and when the drag has been cancelled unexpectedly. This will be * false otherwise, including when the drop has been rejected by its target. * This property is only relevant for the dragend event. */`",1080,null],[11,"GetMozSourceNode","","`text /** * The node that the mouse was pressed over to begin the drag. For external * drags, or if the caller cannot access this node, this will be null. */`",1080,null],[11,"GetDropEffectInt","","`[noscript] attribute unsigned long dropEffectInt;`",1080,null],[11,"SetDropEffectInt","","`[noscript] attribute unsigned long dropEffectInt;`",1080,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetEffectAllowedInt","","`[noscript] attribute unsigned long effectAllowedInt;`",1080,null],[11,"SetEffectAllowedInt","","`[noscript] attribute unsigned long effectAllowedInt;`",1080,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1081,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1081,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileInputStream` to one of its base interfaces.",1081,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1081,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[18,"CLOSE_ON_EOF","","`text /** * If this is set, the file will close automatically when the end of the * file is reached. */`",1081,null],[18,"REOPEN_ON_REWIND","","`text /** * If this is set, the file will be reopened whenever we reach the start of * the file, either by doing a Seek(0, NS_SEEK_CUR), or by doing a relative * seek that happen to reach the beginning of the file. If the file is * already open and the seek occurs, it will happen naturally. (The file * will only be reopened if it is closed for some reason.) */`",1081,null],[18,"DEFER_OPEN","","`text /** * If this is set, the file will be opened (i.e., a call to * PR_Open done) only when we do an actual operation on the stream, * or more specifically, when one of the following is called: * - Seek * - Tell * - SetEOF * - Available * - Read * - ReadLine * * DEFER_OPEN is useful if we use the stream on a background * thread, so that the opening and possible |stat|ing of the file * happens there as well. * * @note Using this flag results in the file not being opened * during the call to Init. This means that any errors that might * happen when this flag is not set would happen during the * first read. Also, the file is not locked when Init is called, * so it might be deleted before we try to read from it. */`",1081,null],[18,"SHARE_DELETE","","`text /** * This flag has no effect and is totally ignored on any platform except * Windows since this is the default behavior on POSIX systems. On Windows * if this flag is set then the stream is opened in a special mode that * allows the OS to delete the file from disk just like POSIX. */`",1081,null],[11,"Init","","`text /** * @param file file to read from * @param ioFlags file open flags listed in prio.h (see * PR_Open documentation) or -1 to open the * file in default mode (PR_RDONLY). * @param perm file mode bits listed in prio.h or -1 to * use the default value (0) * @param behaviorFlags flags specifying various behaviors of the class * (see enumerations in the class) */`",1081,null],[11,"addref","","",1082,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1082,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileOutputStream` to one of its base interfaces.",1082,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1082,{"inputs":[{"name":"self"}],"output":{"name":"nsioutputstream"}}],[18,"DEFER_OPEN","","`text /** * See the same constant in nsIFileInputStream. The deferred open will * be performed when one of the following is called: * - Seek * - Tell * - SetEOF * - Write * - Flush * * @note Using this flag results in the file not being opened * during the call to Init. This means that any errors that might * happen when this flag is not set would happen during the * first write, and if the file is to be created, then it will not * appear on the disk until the first write. */`",1082,null],[11,"Init","","`text /** * @param file file to write to * @param ioFlags file open flags listed in prio.h (see * PR_Open documentation) or -1 to open the * file in default mode (PR_WRONLY | * PR_CREATE_FILE | PR_TRUNCATE) * @param perm file mode bits listed in prio.h or -1 to * use the default permissions (0664) * @param behaviorFlags flags specifying various behaviors of the class * (currently none supported) */`",1082,null],[11,"Preallocate","","`text /** * @param length asks the operating system to allocate storage for * this file of at least |length| bytes long, and * set the file length to the corresponding size. * @throws NS_ERROR_FAILURE if the preallocation fails. * @throws NS_ERROR_NOT_INITIALIZED if the file is not opened. */`",1082,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1083,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1083,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileStream` to one of its base interfaces.",1083,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1083,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"DEFER_OPEN","","`text /** * See the same constant in nsIFileInputStream. The deferred open will * be performed when one of the following is called: * - Seek * - Tell * - SetEOF * - Available * - Read * - Flush * - Write * - GetSize * - GetLastModified * * @note Using this flag results in the file not being opened * during the call to Init. This means that any errors that might * happen when this flag is not set would happen during the * first read or write. The file is not locked when Init is called, * so it might be deleted before we try to read from it and if the * file is to be created, then it will not appear on the disk until * the first write. */`",1083,null],[11,"Init","","`text /** * @param file file to read from or stream to * @param ioFlags file open flags listed in prio.h (see * PR_Open documentation) or -1 to open the * file in default mode (PR_RDWR). * @param perm file mode bits listed in prio.h or -1 to * use the default value (0) * @param behaviorFlags flags specifying various behaviors of the class * (see enumerations in the class) */`",1083,null],[11,"addref","","",1084,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1084,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileMetadata` to one of its base interfaces.",1084,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1084,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSize","","`text /** * File size in bytes. */`",1084,null],[11,"GetLastModified","","`text /** * File last modified time in milliseconds from midnight (00:00:00), * January 1, 1970 Greenwich Mean Time (GMT). */`",1084,null],[11,"addref","","",1085,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1085,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncFileMetadata` to one of its base interfaces.",1085,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1085,{"inputs":[{"name":"self"}],"output":{"name":"nsifilemetadata"}}],[11,"AsyncWait","","`text /** * Asynchronously wait for the object to be ready. * * @param aCallback The callback will be used when the stream is ready to * return File metadata. Use a nullptr to cancel a * previous operation. * * @param aEventTarget The event target where aCallback will be executed. * If aCallback is passed, aEventTarget cannot be null. */`",1085,null],[11,"addref","","",1086,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1086,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileMetadataCallback` to one of its base interfaces.",1086,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1086,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnFileMetadataReady","","`text /** * This is a companion interface for nsIAsyncFileMetadata::asyncWait. */ /** * Called to indicate that the nsIFileMetadata object is ready. */`",1086,null],[11,"addref","","",1087,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1087,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFDelegateFactory` to one of its base interfaces.",1087,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1087,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateDelegate","","`text /** * Create a delegate for the specified RDF resource. * * The created delegate should forward AddRef() and Release() * calls to the aOuter object. */`",1087,null],[11,"addref","","",1088,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1088,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleTextChangeEvent` to one of its base interfaces.",1088,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1088,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetStart","","`text /** * Returns offset of changed text in accessible. */`",1088,null],[11,"GetLength","","`text /** * Returns length of changed text. */`",1088,null],[11,"GetIsInserted","","`text /** * Returns true if text was inserted, otherwise false. */`",1088,null],[11,"GetModifiedText","","`text /** * The inserted or removed text */`",1088,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1089,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1089,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFService` to one of its base interfaces.",1089,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1089,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetResource","","`text /** * Construct an RDF resource from a single-byte URI. <code>nsIRDFService</code> * caches resources that are in-use, so multiple calls to <code>GetResource()</code> * for the same <code>uri</code> will return identical pointers. FindResource * is used to find out whether there already exists a resource corresponding to that url. */`",1089,null],[11,"GetUnicodeResource","","`text /** * Construct an RDF resource from a Unicode URI. This is provided * as a convenience method, allowing automatic, in-line C++ * conversion from <code>nsString</code> objects. The <code>uri</code> will * be converted to a single-byte representation internally. */`",1089,null],[11,"GetAnonymousResource","","`nsIRDFResource GetAnonymousResource ();`",1089,null],[11,"GetLiteral","","`text /** * Construct an RDF literal from a Unicode string. */`",1089,null],[11,"GetDateLiteral","","`text /** * Construct an RDF literal from a PRTime. */`",1089,null],[11,"GetIntLiteral","","`text /** * Construct an RDF literal from an int. */`",1089,null],[11,"IsAnonymousResource","","`boolean IsAnonymousResource (in nsIRDFResource aResource);`",1089,null],[11,"RegisterResource","","`text /** * Registers a resource with the RDF system, making it unique w.r.t. * GetResource. * * An implementation of nsIRDFResource should call this in its * Init() method if it wishes the resource to be globally unique * (which is usually the case). * * @note that the resource will <i>not</i> be ref-counted by the * RDF service: the assumption is that the resource implementation * will call nsIRDFService::UnregisterResource() when the last * reference to the resource is released. * * @note that the nsIRDFService implementation may choose to * maintain a reference to the resource's URI; therefore, the * resource implementation should ensure that the resource's URI * (accessible via nsIRDFResource::GetValue(const char* *aURI)) is * valid before calling RegisterResource(). Furthermore, the * resource implementation should ensure that this pointer * <i>remains</i> valid for the lifetime of the resource. (The * implementation of the resource cache in nsIRDFService uses the * URI maintained \"internally\" in the resource as a key into the * cache rather than copying the resource URI itself.) */`",1089,null],[11,"UnregisterResource","","`text /** * Called to notify the resource manager that a resource is no * longer in use. This method should only be called from the * destructor of a \"custom\" resource implementation to notify the * RDF service that the last reference to the resource has been * released, so the resource is no longer valid. * * @note As mentioned in nsIRDFResourceFactory::CreateResource(), * the RDF service will use the result of * nsIRDFResource::GetValue() as a key into its cache. For this * reason, you must always un-cache the resource <b>before</b> * releasing the storage for the <code>const char*</code> URI. */`",1089,null],[11,"RegisterDataSource","","`text /** * Register a <i>named data source</i>. The RDF service will call * <code>nsIRDFDataSource::GetURI()</code> to determine the URI under * which to register the data source. * * @note that the data source will <i>not</i> be refcounted by the * RDF service! The assumption is that an RDF data source * registers with the service once it is initialized (via * <code>nsIRDFDataSource::Init()</code>), and unregisters when the * last reference to the data source is released. */`",1089,null],[11,"UnregisterDataSource","","`text /** * Unregister a <i>named data source</i>. The RDF service will call * <code>nsIRDFDataSource::GetURI()</code> to determine the URI under which the * data source was registered. */`",1089,null],[11,"GetDataSource","","`text /** * Get the <i>named data source</i> corresponding to the URI. If a data * source has been registered via <code>RegisterDataSource()</code>, that * data source will be returned. * * If no data source is currently * registered for the specified URI, and a data source <i>constructor</i> * function has been registered via <code>RegisterDatasourceConstructor()</code>, * the RDF service will call the constructor to attempt to construct a * new data source. If construction is successful, the data source will * be initialized via <code>nsIRDFDataSource::Init()</code>. */`",1089,null],[11,"GetDataSourceBlocking","","`text /** * Same as GetDataSource, but if a remote/XML data source needs to be * constructed, then this method will issue a <b>blocking</b> Refresh * call on that data source. */`",1089,null],[11,"addref","","",1090,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1090,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUpdateTimerManager` to one of its base interfaces.",1090,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1090,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RegisterTimer","","`text /** * Register an interval with the timer manager. The timer manager * periodically checks to see if the interval has expired and if it has * calls the specified callback. This is persistent across application * restarts and can handle intervals of long durations. * @param id * An id that identifies the interval, used for persistence * @param callback * A nsITimerCallback object that is notified when the interval * expires * @param interval * The length of time, in seconds, of the interval * * Note: to avoid having to instantiate a component to call registerTimer * the component can intead register an update-timer category with comma * separated values as a single string representing the timer as follows. * * _xpcom_categories: [{ category: \"update-timer\", * value: \"contractID,\" + * \"method,\" + * \"id,\" + * \"preference,\" + * \"interval\" }], * the values are as follows * contractID : the contract ID for the component. * method : the method used to instantiate the interface. This should be * either getService or createInstance depending on your * component. * id : the id that identifies the interval, used for persistence. * preference : the preference to for timer interval. This value can be * optional by specifying an empty string for the value. * interval : the default interval in seconds for the timer. */`",1090,null],[11,"UnregisterTimer","","`text /** * Unregister an existing interval from the timer manager. * * @param id * An id that identifies the interval. */`",1090,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1091,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1091,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRelativeFilePref` to one of its base interfaces.",1091,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1091,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetFile","","`text /** * file * * The file whose location is stored or retrieved. */`",1091,null],[11,"SetFile","","`text /** * file * * The file whose location is stored or retrieved. */`",1091,null],[11,"GetRelativeToKey","","`text /** * relativeToKey * * A directory service key for the directory * from which the file path is relative. */`",1091,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetRelativeToKey","","`text /** * relativeToKey * * A directory service key for the directory * from which the file path is relative. */`",1091,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1092,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1092,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXBLAccessible` to one of its base interfaces.",1092,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1092,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAccessibleName","","`text /** * Return accessible name. */`",1092,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1093,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1093,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `inISearchObserver` to one of its base interfaces.",1093,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1093,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"IN_SUCCESS","","",1093,null],[18,"IN_INTERRUPTED","","",1093,null],[18,"IN_ERROR","","",1093,null],[11,"OnSearchStart","","`void onSearchStart (in inISearchProcess aModule);`",1093,null],[11,"OnSearchResult","","`void onSearchResult (in inISearchProcess aModule);`",1093,null],[11,"OnSearchEnd","","`void onSearchEnd (in inISearchProcess aModule, in short aResult);`",1093,null],[11,"OnSearchError","","`void onSearchError (in inISearchProcess aModule, in AString aMessage);`",1093,null],[11,"addref","","",1094,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1094,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBoxObject` to one of its base interfaces.",1094,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1094,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetElement","","`readonly attribute nsIDOMElement element;`",1094,null],[11,"GetX","","`readonly attribute long x;`",1094,null],[11,"GetY","","`readonly attribute long y;`",1094,null],[11,"GetScreenX","","`readonly attribute long screenX;`",1094,null],[11,"GetScreenY","","`readonly attribute long screenY;`",1094,null],[11,"GetWidth","","`readonly attribute long width;`",1094,null],[11,"GetHeight","","`readonly attribute long height;`",1094,null],[11,"GetPropertyAsSupports","","`nsISupports getPropertyAsSupports (in wstring propertyName);`",1094,null],[11,"SetPropertyAsSupports","","`void setPropertyAsSupports (in wstring propertyName, in nsISupports value);`",1094,null],[11,"GetProperty","","`wstring getProperty (in wstring propertyName);`",1094,null],[11,"SetProperty","","`void setProperty (in wstring propertyName, in wstring propertyValue);`",1094,null],[11,"RemoveProperty","","`void removeProperty (in wstring propertyName);`",1094,null],[11,"GetParentBox","","`readonly attribute nsIDOMElement parentBox;`",1094,null],[11,"GetFirstChild","","`readonly attribute nsIDOMElement firstChild;`",1094,null],[11,"GetLastChild","","`readonly attribute nsIDOMElement lastChild;`",1094,null],[11,"GetNextSibling","","`readonly attribute nsIDOMElement nextSibling;`",1094,null],[11,"GetPreviousSibling","","`readonly attribute nsIDOMElement previousSibling;`",1094,null],[11,"addref","","",1095,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1095,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserProfileMigrator` to one of its base interfaces.",1095,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1095,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ALL","","`text /** * profile items to migrate. use with migrate(). */`",1095,null],[18,"SETTINGS","","",1095,null],[18,"COOKIES","","",1095,null],[18,"HISTORY","","",1095,null],[18,"FORMDATA","","",1095,null],[18,"PASSWORDS","","",1095,null],[18,"BOOKMARKS","","",1095,null],[18,"OTHERDATA","","",1095,null],[18,"SESSION","","",1095,null],[11,"GetSourceExists","","`text /** * Whether or not there is any data that can be imported from this * browser (i.e. whether or not it is installed, and there exists * a user profile) */`",1095,null],[11,"GetSourceHomePageURL","","`text /** * The import source homepage. Returns null if not present/available */`",1095,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSourceLocked","","`text /** * Whether the source browser data is locked/in-use meaning migration likely * won't succeed and the user should be warned. */`",1095,null],[11,"addref","","",1096,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1096,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISpellCheckingEngine` to one of its base interfaces.",1096,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1096,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDictionary","","`text /** * The name of the current dictionary. Is either a value from * getDictionaryList or the empty string if no dictionary is selected. * Setting this attribute to a value not in getDictionaryList will throw * NS_ERROR_FILE_NOT_FOUND. * * If the dictionary is changed to no dictionary (the empty string), an * observer is allowed to set another dictionary before it returns. */`",1096,null],[11,"SetDictionary","","`text /** * The name of the current dictionary. Is either a value from * getDictionaryList or the empty string if no dictionary is selected. * Setting this attribute to a value not in getDictionaryList will throw * NS_ERROR_FILE_NOT_FOUND. * * If the dictionary is changed to no dictionary (the empty string), an * observer is allowed to set another dictionary before it returns. */`",1096,null],[11,"GetLanguage","","`text /** * The language this spellchecker is using when checking */`",1096,null],[11,"GetProvidesPersonalDictionary","","`text /** * Does the engine provide its own personal dictionary? */`",1096,null],[11,"GetProvidesWordUtils","","`text /** * Does the engine provide its own word utils? */`",1096,null],[11,"GetName","","`text /** * The name of the engine */`",1096,null],[11,"GetCopyright","","`text /** * a string indicating the copyright of the engine */`",1096,null],[11,"GetPersonalDictionary","","`text /** * the personal dictionary */`",1096,null],[11,"SetPersonalDictionary","","`text /** * the personal dictionary */`",1096,null],[11,"GetDictionaryList","","`text /** * Get the list of dictionaries */`",1096,null],[11,"Check","","`text /** * check a word */`",1096,null],[11,"Suggest","","`text /** * get a list of suggestions for a misspelled word */`",1096,null],[11,"LoadDictionariesFromDir","","`text /** * Load dictionaries from the specified dir */`",1096,null],[11,"AddDirectory","","`text /** * Add dictionaries from a directory to the spell checker */`",1096,null],[11,"RemoveDirectory","","`text /** * Remove dictionaries from a directory from the spell checker */`",1096,null],[11,"addref","","",1097,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1097,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFPurgeableDataSource` to one of its base interfaces.",1097,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1097,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Mark","","`boolean Mark (in nsIRDFResource aSource, in nsIRDFResource aProperty, in nsIRDFNode aTarget, in boolean aTruthValue);`",1097,null],[11,"Sweep","","`void Sweep ();`",1097,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1098,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1098,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIKeyObject` to one of its base interfaces.",1098,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1098,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SYM_KEY","","",1098,null],[18,"HMAC","","",1098,null],[11,"GetType","","`[must_use] short getType ();`",1098,null],[11,"addref","","",1099,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1099,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIKeyObjectFactory` to one of its base interfaces.",1099,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1099,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"KeyFromString","","`[must_use] nsIKeyObject keyFromString (in short aAlgorithm, in ACString aKey);`",1099,null],[11,"addref","","",1100,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1100,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIInputStreamPump` to one of its base interfaces.",1100,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1100,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[11,"Init","","`text /** * Initialize the input stream pump. * * @param aStream * contains the data to be read. if the input stream is non-blocking, * then it will be QI'd to nsIAsyncInputStream. if the QI succeeds * then the stream will be read directly. otherwise, it will be read * on a background thread using the stream transport service. * @param aSegmentSize * if the stream transport service is used, then this parameter * specifies the segment size for the stream transport's buffer. * pass 0 to specify the default value. * @param aSegmentCount * if the stream transport service is used, then this parameter * specifies the segment count for the stream transport's buffer. * pass 0 to specify the default value. * @param aCloseWhenDone * if true, the input stream will be closed after it has been read. * @param aMainThreadTarget * a labeled main therad event target. */`",1100,null],[11,"AsyncRead","","`text /** * asyncRead causes the input stream to be read in chunks and delivered * asynchronously to the listener via OnDataAvailable. * * @param aListener * receives notifications. * @param aListenerContext * passed to listener methods. */`",1100,null],[11,"addref","","",1101,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1101,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorStyleSheets` to one of its base interfaces.",1101,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1101,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReplaceStyleSheet","","`text /** Load and apply the style sheet, specified by aURL, to the * editor's document, replacing the last style sheet added (if any). * This is always asynchronous, and may cause network I/O. * * @param aURL The style sheet to be loaded and applied. */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddStyleSheet","","`text /** Add the given style sheet to the editor's document, * on top of any that are already there. * This is always asynchronous, and may cause network I/O. * * @param aURL The style sheet to be loaded and applied. */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ReplaceOverrideStyleSheet","","`text /** Load and apply the override style sheet, specified by aURL, to the * editor's document, replacing the last override style sheet added (if any). * This is always synchronous, so aURL should be a local file with only * local @imports. This action is not undoable. It is not intended for * \"user\" style sheets, only for editor developers to add sheets to change * display behavior for editing (like showing special cursors) that will * not be affected by loading \"document\" style sheets with addStyleSheet or * especially replaceStyleSheet. * * @param aURL The style sheet to be loaded and applied. */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddOverrideStyleSheet","","`text /** Load and apply an override style sheet, specified by aURL, to * the editor's document, on top of any that are already there. * This is always synchronous, so the same caveats about local files and no * non-local @import as replaceOverrideStyleSheet apply here, too. * * @param aURL The style sheet to be loaded and applied. */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveStyleSheet","","`text /** Remove the given style sheet from the editor's document * This is always synchronous * * @param aURL The style sheet to be removed */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveOverrideStyleSheet","","`text /** Remove the given override style sheet from the editor's document * This is always synchronous * * @param aURL The style sheet to be removed. */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"EnableStyleSheet","","`text /** Enable or disable the given style sheet from the editor's document * This is always synchronous * * @param aURL The style sheet to be enabled or disabled * @param aEnable true to enable, or false to disable the style sheet */`",1101,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1102,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1102,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNavigator` to one of its base interfaces.",1102,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1102,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAppCodeName","","`readonly attribute DOMString appCodeName;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLanguage","","`readonly attribute DOMString language;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVendor","","`readonly attribute DOMString vendor;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVendorSub","","`readonly attribute DOMString vendorSub;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetProduct","","`readonly attribute DOMString product;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetProductSub","","`readonly attribute DOMString productSub;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDoNotTrack","","`readonly attribute DOMString doNotTrack;`",1102,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1103,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1103,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIncrementalStreamLoaderObserver` to one of its base interfaces.",1103,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1103,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnIncrementalData","","`text /** * Called when new data has arrived on the stream. * * @param loader the stream loader that loaded the stream. * @param ctxt the context parameter of the underlying channel * @param dataLength the length of the new data received * @param data the contents of the new data received. * * This method will always be called asynchronously by the * nsIIncrementalStreamLoader involved, on the thread that called the * loader's init() method. * * If the observer wants to not accumulate all or portional of the data in * the internal buffer, the consumedLength shall be set to the value of * the dataLength or less. By default the consumedLength value is assumed 0. * The data and dataLength reflect the non-consumed data and will be * accumulated if consumedLength is not set. * * In comparison with onStreamComplete(), the data buffer cannot be * adopted if this method returns NS_SUCCESS_ADOPTED_DATA. */`",1103,null],[11,"OnStreamComplete","","`text /** * Called when the entire stream has been loaded. * * @param loader the stream loader that loaded the stream. * @param ctxt the context parameter of the underlying channel * @param status the status of the underlying channel * @param resultLength the length of the data loaded * @param result the data * * This method will always be called asynchronously by the * nsIIncrementalStreamLoader involved, on the thread that called the * loader's init() method. * * If the observer wants to take over responsibility for the * data buffer (result), it returns NS_SUCCESS_ADOPTED_DATA * in place of NS_OK as its success code. The loader will then * \"forget\" about the data and not free() it after * onStreamComplete() returns; observer must call free() * when the data is no longer required. */`",1103,null],[11,"addref","","",1104,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1104,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIncrementalStreamLoader` to one of its base interfaces.",1104,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1104,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"Init","","`text /** * Asynchronously loads a channel into a memory buffer. * * To use this interface, first call init() with a nsIIncrementalStreamLoaderObserver * that will be notified when the data has been loaded. Then call asyncOpen() * on the channel with the nsIIncrementalStreamLoader as the listener. The context * argument in the asyncOpen() call will be passed to the onStreamComplete() * callback. * * XXX define behaviour for sizes >4 GB */ /** * Initialize this stream loader, and start loading the data. * * @param aObserver * An observer that will be notified when the data is complete. */`",1104,null],[11,"GetNumBytesRead","","`text /** * Gets the number of bytes read so far. */`",1104,null],[11,"GetRequest","","`text /** * Gets the request that loaded this file. * null after the request has finished loading. */`",1104,null],[11,"addref","","",1105,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1105,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIWindowWatcher` to one of its base interfaces.",1105,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1105,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddWindow","","`text /** A window has been created. Add it to our list. @param aWindow the window to add @param aChrome the corresponding chrome window. The DOM window and chrome will be mapped together, and the corresponding chrome can be retrieved using the (not private) method getChromeForWindow. If null, any extant mapping will be cleared. */`",1105,null],[11,"RemoveWindow","","`text /** A window has been closed. Remove it from our list. @param aWindow the window to remove */`",1105,null],[11,"OpenWindow2","","",1105,null],[11,"OpenWindowWithTabParent","","`text /** * Opens a new window so that the window that aOpeningTab belongs to * is set as the parent window. The newly opened window will also * inherit load context information from aOpeningTab. * * @param aOpeningTab * The nsITabParent that is requesting the new window be opened. * @param aFeatures * Window features if called with window.open or similar. * @param aCalledFromJS * True if called via window.open or similar. * @param aOpenerFullZoom * The current zoom multiplier for the opener tab. This is then * applied to the newly opened window. * @param aNextTabParentId * The integer ID for the next tab parent actor. * 0 means there is no next tab parent actor to use. * @param aForceNoOpener * If true, then aOpeningTab will not be used to set the opener * for the newly created window. * * @return the nsITabParent of the initial browser for the newly opened * window. */`",1105,null],[11,"FindItemWithName","","`text /** * Find a named docshell tree item amongst all windows registered * with the window watcher. This may be a subframe in some window, * for example. * * @param aName the name of the window. Must not be null. * @param aRequestor the tree item immediately making the request. * We should make sure to not recurse down into its findItemWithName * method. * @param aOriginalRequestor the original treeitem that made the request. * Used for security checks. * @return the tree item with aName as the name, or null if there * isn't one. \"Special\" names, like _self, _top, etc, will be * treated specially only if aRequestor is null; in that case they * will be resolved relative to the first window the windowwatcher * knows about. * @see findItemWithName methods on nsIDocShellTreeItem and * nsIDocShellTreeOwner */`",1105,null],[11,"addref","","",1106,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1106,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageAsyncStatement` to one of its base interfaces.",1106,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1106,{"inputs":[{"name":"self"}],"output":{"name":"mozistoragebasestatement"}}],[11,"addref","","",1107,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1107,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdlePeriod` to one of its base interfaces.",1107,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1107,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1108,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1108,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeed` to one of its base interfaces.",1108,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1108,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedcontainer"}}],[18,"TYPE_FEED","","",1108,null],[18,"TYPE_AUDIO","","",1108,null],[18,"TYPE_IMAGE","","",1108,null],[18,"TYPE_VIDEO","","",1108,null],[11,"GetSubtitle","","`text /** * Uses description, subtitle, and extensions * to generate a summary. */`",1108,null],[11,"SetSubtitle","","`text /** * Uses description, subtitle, and extensions * to generate a summary. */`",1108,null],[11,"GetType","","`text /** * The type of feed. For example, a podcast would be TYPE_AUDIO. */`",1108,null],[11,"GetEnclosureCount","","`text /** * The total number of enclosures found in the feed. */`",1108,null],[11,"SetEnclosureCount","","`text /** * The total number of enclosures found in the feed. */`",1108,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetItems","","`text /** * The items or entries in feed. */`",1108,null],[11,"SetItems","","`text /** * The items or entries in feed. */`",1108,null],[11,"GetCloud","","`text /** * No one really knows what cloud is for. * * It supposedly enables some sort of interaction with an XML-RPC or * SOAP service. */`",1108,null],[11,"SetCloud","","`text /** * No one really knows what cloud is for. * * It supposedly enables some sort of interaction with an XML-RPC or * SOAP service. */`",1108,null],[11,"GetGenerator","","`text /** * Information about the software that produced the feed. */`",1108,null],[11,"SetGenerator","","`text /** * Information about the software that produced the feed. */`",1108,null],[11,"GetImage","","`text /** * An image url and some metadata (as defined by RSS2). * */`",1108,null],[11,"SetImage","","`text /** * An image url and some metadata (as defined by RSS2). * */`",1108,null],[11,"GetTextInput","","`text /** * No one really knows what textInput is for. * * See * <http://www.cadenhead.org/workbench/news/2894/rss-joy-textinput> * for more details. */`",1108,null],[11,"SetTextInput","","`text /** * No one really knows what textInput is for. * * See * <http://www.cadenhead.org/workbench/news/2894/rss-joy-textinput> * for more details. */`",1108,null],[11,"GetSkipDays","","`text /** * Days to skip fetching. This field was supposed to designate * intervals for feed fetching. It's not generally implemented. For * example, if this array contained \"Monday\", aggregators should not * fetch the feed on Mondays. */`",1108,null],[11,"SetSkipDays","","`text /** * Days to skip fetching. This field was supposed to designate * intervals for feed fetching. It's not generally implemented. For * example, if this array contained \"Monday\", aggregators should not * fetch the feed on Mondays. */`",1108,null],[11,"GetSkipHours","","`text /** * Hours to skip fetching. This field was supposed to designate * intervals for feed fetching. It's not generally implemented. See * <http://blogs.law.harvard.edu/tech/rss> for more information. */`",1108,null],[11,"SetSkipHours","","`text /** * Hours to skip fetching. This field was supposed to designate * intervals for feed fetching. It's not generally implemented. See * <http://blogs.law.harvard.edu/tech/rss> for more information. */`",1108,null],[11,"addref","","",1109,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1109,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIModule` to one of its base interfaces.",1109,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1109,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClassObject","","`text /** * Object Instance Creation * * Obtains a Class Object from a nsIModule for a given CID and IID pair. * This class object can either be query to a nsIFactory or a may be * query to a nsIClassInfo. * * @param aCompMgr : The global component manager * @param aClass : ClassID of object instance requested * @param aIID : IID of interface requested * */`",1109,null],[11,"RegisterSelf","","`text /** * One time registration callback * * When the nsIModule is discovered, this method will be * called so that any setup registration can be preformed. * * @param aCompMgr : The global component manager * @param aLocation : The location of the nsIModule on disk * @param aLoaderStr: Opaque loader specific string * @param aType : Loader Type being used to load this module */`",1109,null],[11,"UnregisterSelf","","`text /** * One time unregistration callback * * When the nsIModule is being unregistered, this method will be * called so that any unregistration can be preformed * * @param aCompMgr : The global component manager * @param aLocation : The location of the nsIModule on disk * @param aLoaderStr : Opaque loader specific string * */`",1109,null],[11,"CanUnload","","`text /** * Module load management * * @param aCompMgr : The global component manager * * @return indicates to the caller if the module can be unloaded. * Returning PR_TRUE isn't a guarantee that the module will be * unloaded. It constitues only willingness of the module to be * unloaded. It is very important to ensure that no outstanding * references to the module's code/data exist before returning * PR_TRUE. * Returning PR_FALSE guaratees that the module won't be unloaded. */`",1109,null],[11,"addref","","",1110,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1110,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMHTMLMediaElement` to one of its base interfaces.",1110,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1110,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NETWORK_EMPTY","","",1110,null],[18,"NETWORK_IDLE","","",1110,null],[18,"NETWORK_LOADING","","",1110,null],[18,"NETWORK_NO_SOURCE","","",1110,null],[18,"HAVE_NOTHING","","",1110,null],[18,"HAVE_METADATA","","",1110,null],[18,"HAVE_CURRENT_DATA","","",1110,null],[18,"HAVE_FUTURE_DATA","","",1110,null],[18,"HAVE_ENOUGH_DATA","","",1110,null],[11,"GetSrc","","`attribute DOMString src;`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSrc","","`attribute DOMString src;`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCurrentSrc","","`readonly attribute DOMString currentSrc;`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNetworkState","","`readonly attribute unsigned short networkState;`",1110,null],[11,"GetPreload","","`attribute DOMString preload;`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPreload","","`attribute DOMString preload;`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBuffered","","`readonly attribute nsIDOMTimeRanges buffered;`",1110,null],[11,"Load","","`void load ();`",1110,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CanPlayType","","`DOMString canPlayType (in DOMString type);`",1110,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReadyState","","`readonly attribute unsigned short readyState;`",1110,null],[11,"GetSeeking","","`readonly attribute boolean seeking;`",1110,null],[11,"GetCurrentTime","","`attribute double currentTime;`",1110,null],[11,"SetCurrentTime","","`attribute double currentTime;`",1110,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetDuration","","`readonly attribute double duration;`",1110,null],[11,"GetPaused","","`readonly attribute boolean paused;`",1110,null],[11,"GetDefaultPlaybackRate","","`attribute double defaultPlaybackRate;`",1110,null],[11,"SetDefaultPlaybackRate","","`attribute double defaultPlaybackRate;`",1110,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetPlaybackRate","","`attribute double playbackRate;`",1110,null],[11,"SetPlaybackRate","","`attribute double playbackRate;`",1110,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMozPreservesPitch","","`attribute boolean mozPreservesPitch;`",1110,null],[11,"SetMozPreservesPitch","","`attribute boolean mozPreservesPitch;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPlayed","","`readonly attribute nsIDOMTimeRanges played;`",1110,null],[11,"GetSeekable","","`readonly attribute nsIDOMTimeRanges seekable;`",1110,null],[11,"GetEnded","","`readonly attribute boolean ended;`",1110,null],[11,"GetAutoplay","","`attribute boolean autoplay;`",1110,null],[11,"SetAutoplay","","`attribute boolean autoplay;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLoop","","`attribute boolean loop;`",1110,null],[11,"SetLoop","","`attribute boolean loop;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Pause","","`void pause ();`",1110,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetControls","","`attribute boolean controls;`",1110,null],[11,"SetControls","","`attribute boolean controls;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetVolume","","`attribute double volume;`",1110,null],[11,"SetVolume","","`attribute double volume;`",1110,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMuted","","`attribute boolean muted;`",1110,null],[11,"SetMuted","","`attribute boolean muted;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDefaultMuted","","`attribute boolean defaultMuted;`",1110,null],[11,"SetDefaultMuted","","`attribute boolean defaultMuted;`",1110,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMozAudioCaptured","","`readonly attribute boolean mozAudioCaptured;`",1110,null],[11,"GetMozFragmentEnd","","`readonly attribute double mozFragmentEnd;`",1110,null],[11,"IsVideo","","`[notxpcom] boolean isVideo ();`",1110,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",1111,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1111,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFocusManager` to one of its base interfaces.",1111,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1111,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FLAG_RAISE","","",1111,null],[18,"FLAG_NOSCROLL","","`text /** * Do not scroll the element to focus into view */`",1111,null],[18,"FLAG_NOSWITCHFRAME","","`text /** * If attempting to change focus in a window that is not focused, do not * switch focus to that window. Instead, just update the focus within that * window and leave the application focus as is. This flag will have no * effect if a child window is focused and an attempt is made to adjust the * focus in an ancestor, as the frame must be switched in this case. */`",1111,null],[18,"FLAG_NOPARENTFRAME","","`text /** * This flag is only used when passed to moveFocus. If set, focus is never * moved to the parent frame of the starting element's document, instead * iterating around to the beginning of that document again. Child frames * are navigated as normal. */`",1111,null],[18,"FLAG_BYMOUSE","","`text /** * Focus is changing due to a mouse operation, for instance the mouse was * clicked on an element. */`",1111,null],[18,"FLAG_BYKEY","","`text /** * Focus is changing due to a key operation, for instance pressing the tab * key. This flag would normally be passed when MOVEFOCUS_FORWARD or * MOVEFOCUS_BACKWARD is used. */`",1111,null],[18,"FLAG_BYMOVEFOCUS","","`text /** * Focus is changing due to a call to MoveFocus. This flag will be implied * when MoveFocus is called except when one of the other mechanisms (mouse * or key) is specified, or when the type is MOVEFOCUS_ROOT or * MOVEFOCUS_CARET. */`",1111,null],[18,"FLAG_SHOWRING","","`text /** * Always show the focus ring or other indicator of focus, regardless of * other state. */`",1111,null],[18,"FLAG_BYTOUCH","","`text /** * Focus is changing due to a touch operation that generated a mouse event. * Normally used in conjunction with FLAG_BYMOUSE. */`",1111,null],[18,"MOVEFOCUS_FORWARD","","`text /** move focus forward one element, used when pressing TAB */`",1111,null],[18,"MOVEFOCUS_BACKWARD","","`text /** move focus backward one element, used when pressing Shift+TAB */`",1111,null],[18,"MOVEFOCUS_FORWARDDOC","","`text /** move focus forward to the next frame document, used when pressing F6 */`",1111,null],[18,"MOVEFOCUS_BACKWARDDOC","","`text /** move focus forward to the previous frame document, used when pressing Shift+F6 */`",1111,null],[18,"MOVEFOCUS_FIRST","","`text /** move focus to the first focusable element */`",1111,null],[18,"MOVEFOCUS_LAST","","`text /** move focus to the last focusable element */`",1111,null],[18,"MOVEFOCUS_ROOT","","`text /** move focus to the root element in the document */`",1111,null],[18,"MOVEFOCUS_CARET","","`text /** move focus to a link at the position of the caret. This is a special value used to * focus links as the caret moves over them in caret browsing mode. */`",1111,null],[18,"MOVEFOCUS_FIRSTDOC","","`text /** move focus to the first focusable document */`",1111,null],[18,"MOVEFOCUS_LASTDOC","","`text /** move focus to the last focusable document */`",1111,null],[11,"GetActiveWindow","","`text /** * The most active (frontmost) window, or null if no window that is part of * the application is active. Setting the activeWindow raises it, and * focuses the current child window's current element, if any. Setting this * to null or to a non-top-level window throws an NS_ERROR_INVALID_ARG * exception. */`",1111,null],[11,"SetActiveWindow","","`text /** * The most active (frontmost) window, or null if no window that is part of * the application is active. Setting the activeWindow raises it, and * focuses the current child window's current element, if any. Setting this * to null or to a non-top-level window throws an NS_ERROR_INVALID_ARG * exception. */`",1111,null],[11,"GetFocusedWindow","","`text /** * The child window within the activeWindow that is focused. This will * always be activeWindow, a child window of activeWindow or null if no * child window is focused. Setting the focusedWindow changes the focused * window and raises the toplevel window it is in. If the current focus * within the new focusedWindow is a frame element, then the focusedWindow * will actually be set to the child window and the current element within * that set as the focused element. This process repeats downwards until a * non-frame element is found. */`",1111,null],[11,"SetFocusedWindow","","`text /** * The child window within the activeWindow that is focused. This will * always be activeWindow, a child window of activeWindow or null if no * child window is focused. Setting the focusedWindow changes the focused * window and raises the toplevel window it is in. If the current focus * within the new focusedWindow is a frame element, then the focusedWindow * will actually be set to the child window and the current element within * that set as the focused element. This process repeats downwards until a * non-frame element is found. */`",1111,null],[11,"GetFocusedElement","","`text /** * The element that is currently focused. This will always be an element * within the document loaded in focusedWindow or null if no element in that * document is focused. */`",1111,null],[11,"GetLastFocusMethod","","`text /** * Returns the method that was used to focus the element in window. This * will either be 0, FLAG_BYMOUSE or FLAG_BYKEY. If window is null, then * the current focusedWindow will be used by default. This has the result * of retrieving the method that was used to focus the currently focused * element. */`",1111,null],[11,"SetFocus","","`text /** * Changes the focused element reference within the window containing * aElement to aElement. */`",1111,null],[11,"MoveFocus","","`text /** * Move the focus to another element. If aStartElement is specified, then * movement is done relative to aStartElement. If aStartElement is null, * then movement is done relative to the currently focused element. If no * element is focused, focus the first focusable element within the * document (or the last focusable element if aType is MOVEFOCUS_END). This * method is equivalent to setting the focusedElement to the new element. * * Specifying aStartElement and using MOVEFOCUS_LAST is not currently * implemented. * * If no element is found, and aType is either MOVEFOCUS_ROOT or * MOVEFOCUS_CARET, then the focus is cleared. If aType is any other value, * the focus is not changed. * * Returns the element that was focused. The return value may be null if focus * was moved into a child process. */`",1111,null],[11,"ClearFocus","","`text /** * Clears the focused element within aWindow. If the current focusedWindow * is a descendant of aWindow, sets the current focusedWindow to aWindow. * * @throws NS_ERROR_INVALID_ARG if aWindow is null */`",1111,null],[11,"GetFocusedElementForWindow","","`text /** * Returns the currently focused element within aWindow. If aWindow is equal * to the current value of focusedWindow, then the returned element will be * the application-wide focused element (the value of focusedElement). The * return value will be null if no element is focused. * * If aDeep is true, then child frames are traversed and the return value * may be the element within a child descendant window that is focused. If * aDeep if false, then the return value will be the frame element if the * focus is in a child frame. * * aFocusedWindow will be set to the currently focused descendant window of * aWindow, or to aWindow if aDeep is false. This will be set even if no * element is focused. * * @throws NS_ERROR_INVALID_ARG if aWindow is null */`",1111,null],[11,"MoveCaretToFocus","","`text /** * Moves the selection caret within aWindow to the current focus. */`",1111,null],[11,"ElementIsFocusable","","`text /*** * Check if given element is focusable. */`",1111,null],[11,"WindowRaised","","`text /** * Called when a window has been raised. */`",1111,null],[11,"WindowLowered","","`text /** * Called when a window has been lowered. */`",1111,null],[11,"WindowShown","","`text /** * Called when a new document in a window is shown. * * If aNeedsFocus is true, then focus events are expected to be fired on the * window if this window is in the focused window chain. */`",1111,null],[11,"WindowHidden","","`text /** * Called when a document in a window has been hidden or otherwise can no * longer accept focus. */`",1111,null],[11,"FireDelayedEvents","","`text /** * Fire any events that have been delayed due to synchronized actions. */`",1111,null],[11,"FocusPlugin","","`text /** * Indicate that a plugin wishes to take the focus. This is similar to a * normal focus except that the widget focus is not changed. Updating the * widget focus state is the responsibility of the caller. */`",1111,null],[11,"ParentActivated","","`text /** * Used in a child process to indicate that the parent window is now * active or deactive. */`",1111,null],[11,"addref","","",1112,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1112,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMEvent` to one of its base interfaces.",1112,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NONE","","`text /** * The nsIDOMEvent interface is the primary datatype for all events in * the Document Object Model. * * For more information on this interface please see * http://dev.w3.org/2006/webapi/DOM-Level-3-Events/html/DOM3-Events.html and * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html */ /** * The event isn't being dispatched. */`",1112,null],[18,"CAPTURING_PHASE","","`text /** * The current event phase is the capturing phase. */`",1112,null],[18,"AT_TARGET","","`text /** * The event is currently being evaluated at the target EventTarget. */`",1112,null],[18,"BUBBLING_PHASE","","`text /** * The current event phase is the bubbling phase. */`",1112,null],[18,"ALT_MASK","","",1112,null],[18,"CONTROL_MASK","","",1112,null],[18,"SHIFT_MASK","","",1112,null],[18,"META_MASK","","",1112,null],[11,"GetType","","`text /** * The name of the event (case-insensitive). The name must be an XML * name. */`",1112,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTarget","","`text /** * Used to indicate the EventTarget to which the event was originally * dispatched. */`",1112,null],[11,"GetCurrentTarget","","`text /** * Used to indicate the EventTarget whose EventListeners are currently * being processed. This is particularly useful during capturing and * bubbling. */`",1112,null],[11,"GetEventPhase","","`text /** * Used to indicate which phase of event flow is currently being * evaluated. */`",1112,null],[11,"GetBubbles","","`text /** * Used to indicate whether or not an event is a bubbling event. If the * event can bubble the value is true, else the value is false. */`",1112,null],[11,"GetCancelable","","`text /** * Used to indicate whether or not an event can have its default action * prevented. If the default action can be prevented the value is true, * else the value is false. */`",1112,null],[11,"GetTimeStamp","","`text /** * Used to specify the time (in milliseconds relative to the epoch) at * which the event was created. Due to the fact that some systems may * not provide this information the value of timeStamp may be not * available for all events. When not available, a value of 0 will be * returned. Examples of epoch time are the time of the system start or * 0:0:0 UTC 1st January 1970. */`",1112,null],[11,"StopPropagation","","`text /** * The stopPropagation method is used prevent further propagation of an * event during event flow. If this method is called by any * EventListener the event will cease propagating through the tree. The * event will complete dispatch to all listeners on the current * EventTarget before event flow stops. This method may be used during * any stage of event flow. */`",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PreventDefault","","`text /** * If an event is cancelable, the preventDefault method is used to * signify that the event is to be canceled, meaning any default action * normally taken by the implementation as a result of the event will * not occur. If, during any stage of event flow, the preventDefault * method is called the event is canceled. Any default action associated * with the event will not occur. Calling this method for a * non-cancelable event has no effect. Once preventDefault has been * called it will remain in effect throughout the remainder of the * event's propagation. This method may be used during any stage of * event flow. */`",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDefaultPrevented","","`text /** * Used to indicate whether preventDefault() has been called for this event. */`",1112,null],[11,"StopImmediatePropagation","","`text /** * Prevents other event listeners from being triggered and, * unlike Event.stopPropagation() its effect is immediate. */`",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetOriginalTarget","","`text /** The original target of the event, before any retargetings. */`",1112,null],[11,"GetExplicitOriginalTarget","","`text /** * The explicit original target of the event. If the event was retargeted * for some reason other than an anonymous boundary crossing, this will be set * to the target before the retargeting occurs. For example, mouse events * are retargeted to their parent node when they happen over text nodes (bug * 185889), and in that case .target will show the parent and * .explicitOriginalTarget will show the text node. * .explicitOriginalTarget differs from .originalTarget in that it will never * contain anonymous content. */`",1112,null],[11,"GetIsTrusted","","`readonly attribute boolean isTrusted;`",1112,null],[11,"GetCancelBubble","","`attribute boolean cancelBubble;`",1112,null],[11,"SetCancelBubble","","`attribute boolean cancelBubble;`",1112,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DuplicatePrivateData","","`[noscript] void duplicatePrivateData ();`",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetTarget","","`[noscript] void setTarget (in nsIDOMEventTarget aTarget);`",1112,null],[11,"IsDispatchStopped","","`[notxpcom] boolean IsDispatchStopped ();`",1112,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetTrusted","","`[noscript,notxpcom] void SetTrusted (in boolean aTrusted);`",1112,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"c_void"}}],[11,"StopCrossProcessForwarding","","`[noscript] void stopCrossProcessForwarding ();`",1112,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1113,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1113,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrintingPromptService` to one of its base interfaces.",1113,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1113,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ShowPrintDialog","","`text /** * This service enables embedders to implement their own Print and Progress Dialogs. * Each platform has a \"base\" or \"basckstop\" implementation of the service. The * service is automatically registered at start up. * * Historically, platform toolkits with native dialogs have implemented them in the GFX layer * Usually they were displayed when a new DeviceContextSpec specific to that platform * was created. * * Windows: The GFX layer no longers supports default toolkit behavior for displaying the * native Print Dialog. * If an embedder implemented service returns any error code (other than NS_ERROR_ABORT) * printing will terminate. * * Returning NS_OK assumes that the PrintSettings object was correctly filled in and * if it does not have valid fields for printer name, etc. it may also terminate. * * Defaults for platform service: * showPrintDialog - displays a native dialog * showPageSetup - displays a XUL dialog * showProgress - displays a XUL dialog * * Summary for Windows Embedders: * Stated once again: There is no \"fallback\" native platform support in GFX for the * displaying of the native print dialog. The current default implementation for Windows * display a native print dialog but a XUL-based progress dialog. * If you wish to have a native progress dialog on Windows you will have to create and * register your own service. * * Note: The Windows version Mozilla implements this service which is * automatically built and registered for you. You can use it as an example. * It is located at \"widget/windows/nsPrintDialogService.cpp\". That service * is capable of displaying a native print dialog and a XUL progress dialog. * * To fly your own dialog you may: * * 1) Implement this service to display at least the Print Dialog and a Print Progress Dialog * or you may implement just one of the dialogs and pass back NS_ERROR_NOT_IMPLEMENTED * for any of the others. * * 2) For the Print Dialog: * You may stub out this service by having all the methods return NS_ERROR_NOT_IMPLEMENTED. * You can then fly you own dialog and then properly fill in the PrintSettings object * before calling nsIWebBrowserPrint's Print method. If you stub out this service * you MUST set \"printSilent\" to true, if you do not, Printing will terminate and an * error dialog will be displayed. * * Mac: The GFX layer still supports default toolkit behavior for displaying the Print Dialog. * If an embedder implemented service returns NS_ERROR_NOT_IMPLEMENTED for \"showPrintDialog\" * The toolkit will display the native print dialog. * * Defaults for platform service: * Mac OS9: showPrintDialog - displays a native dialog * showPageSetup - displays a native dialog * showProgress - displays a XUL dialog * * Mac OSX: showPrintDialog - displays a native dialog * showPageSetup - displays a native dialog * showProgress - not implemented (provided by OS) * * GTK: There are no native dialog for GTK. * * Defaults for platform service: * showPrintDialog - displays a native dialog * showPageSetup - displays a native dialog * showProgress - displays a XUL dialog * */ /** * Show the Print Dialog * * @param parent - a DOM windows the dialog will be parented to (required) * @param webBrowserPrint - represents the document to be printed (required) * @param printSettings - PrintSettings for print \"job\" (required) * */`",1113,null],[11,"ShowProgress","","`text /** * Shows the print progress dialog * * @param parent - a DOM windows the dialog will be parented to * @param webBrowserPrint - represents the document to be printed * @param printSettings - PrintSettings for print \"job\" * @param openDialogObserver - an observer that will be notifed when the dialog is opened * @param isForPrinting - true - for printing, false for print preview * @param webProgressListener - additional listener can be registered for progress notifications * @param printProgressParams - parameter object for passing progress state * @param notifyOnOpen - this indicates that the observer will be notified when the progress * dialog has been opened. If false is returned it means the observer * (usually the caller) shouldn't wait * For Print Preview Progress there is intermediate progress */`",1113,null],[11,"ShowPageSetup","","`text /** * Shows the print progress dialog * * @param parent - a DOM windows the dialog will be parented to (required) * @param printSettings - PrintSettings for page setup (required) * @param aObs - An observer to know if the contents of the Print Settings * object has changed while the dialog is being shown. * For example, some platforms may implement an \"Apply\" button (not required) */`",1113,null],[11,"addref","","",1114,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1114,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIVisitInfo` to one of its base interfaces.",1114,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1114,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetVisitId","","`text /** * The machine-local (internal) id of the visit. */`",1114,null],[11,"GetVisitDate","","`text /** * The time the visit occurred. */`",1114,null],[11,"GetTransitionType","","`text /** * The transition type used to get to this visit. One of the TRANSITION_TYPE * constants on nsINavHistory. * * @see nsINavHistory.idl */`",1114,null],[11,"GetReferrerURI","","`text /** * The referring URI of this visit. This may be null. */`",1114,null],[11,"addref","","",1115,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1115,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIPlaceInfo` to one of its base interfaces.",1115,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1115,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPlaceId","","`text /** * The machine-local (internal) id of the place. */`",1115,null],[11,"GetGuid","","`text /** * The globally unique id of the place. */`",1115,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUri","","`text /** * The URI of the place. */`",1115,null],[11,"GetTitle","","`text /** * The title associated with the place. */`",1115,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFrecency","","`text /** * The frecency of the place. */`",1115,null],[11,"addref","","",1116,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1116,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIVisitInfoCallback` to one of its base interfaces.",1116,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1116,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleError","","`text /** * Called when the given place could not be processed. * * @param aResultCode * nsresult indicating the failure reason. * @param aPlaceInfo * The information that was given to the caller for the place. */`",1116,null],[11,"HandleResult","","`text /** * Called for each place processed successfully. * * @param aPlaceInfo * The current info stored for the place. */`",1116,null],[11,"HandleCompletion","","`text /** * Called when all records were processed. * @param aUpdatedItems * How many items were successfully updated. */`",1116,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIgnoreResults","","`text /** * These two attributes govern whether we attempt to call * handleResult and handleError, respectively, if/once * results/errors occur. */`",1116,null],[11,"GetIgnoreErrors","","`readonly attribute bool ignoreErrors;`",1116,null],[11,"addref","","",1117,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1117,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIVisitedStatusCallback` to one of its base interfaces.",1117,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1117,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsVisited","","`text /** * Notifies whether a certain URI has been visited. * * @param aURI * URI being notified about. * @param aVisitedStatus * The visited status of aURI. */`",1117,null],[11,"addref","","",1118,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1118,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIAsyncHistory` to one of its base interfaces.",1118,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1118,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsURIVisited","","`text /** * Checks if a given URI has been visited. * * @param aURI * The URI to check for. * @param aCallback * A mozIVisitStatusCallback object which receives the visited status. */`",1118,null],[11,"addref","","",1119,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1119,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboardCommands` to one of its base interfaces.",1119,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CanCutSelection","","`text /** * Returns whether there is a selection and it is not read-only. * * @return <code>true</code> if the current selection can be cut, * <code>false</code> otherwise. */`",1119,null],[11,"CanCopySelection","","`text /** * Returns whether there is a selection and it is copyable. * * @return <code>true</code> if there is a selection, * <code>false</code> otherwise. */`",1119,null],[11,"CanCopyLinkLocation","","`text /** * Returns whether we can copy a link location. * * @return <code>true</code> if a link is selected, * <code>false</code> otherwise. */`",1119,null],[11,"CanCopyImageLocation","","`text /** * Returns whether we can copy an image location. * * @return <code>true</code> if an image is selected, <code>false</code> otherwise. */`",1119,null],[11,"CanCopyImageContents","","`text /** * Returns whether we can copy an image's contents. * * @return <code>true</code> if an image is selected, * <code>false</code> otherwise */`",1119,null],[11,"CanPaste","","`text /** * Returns whether the current contents of the clipboard can be * pasted and if the current selection is not read-only. * * @return <code>true</code> there is data to paste on the clipboard * and the current selection is not read-only, * <code>false</code> otherwise */`",1119,null],[11,"CutSelection","","`text /** * Cut the current selection onto the clipboard. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CopySelection","","`text /** * Copy the current selection onto the clipboard. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CopyLinkLocation","","`text /** * Copy the link location of the current selection (e.g., * the |href| attribute of a selected |a| tag). */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CopyImageLocation","","`text /** * Copy the location of the selected image. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CopyImageContents","","`text /** * Copy the contents of the selected image. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Paste","","`text /** * Paste the contents of the clipboard into the current selection. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectAll","","`text /** * Select the entire contents. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SelectNone","","`text /** * Clear the current selection (if any). Insertion point ends up * at beginning of current selection. */`",1119,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1120,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1120,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFPropagatableDataSource` to one of its base interfaces.",1120,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1120,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPropagateChanges","","`text /** * Set this value to <code>true</code> to enable synchronization * notifications. * * Set this value to <code>false</code> to disable synchronization * notifications. * * By default, this value is <code>true</code>. */`",1120,null],[11,"SetPropagateChanges","","`text /** * Set this value to <code>true</code> to enable synchronization * notifications. * * Set this value to <code>false</code> to disable synchronization * notifications. * * By default, this value is <code>true</code>. */`",1120,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1121,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1121,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentSignatureVerifier` to one of its base interfaces.",1121,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1121,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"VerifyContentSignature","","`text /** * Verifies that the data matches the data that was used to generate the * signature. * * @param aData The data to be tested. * @param aContentSignatureHeader The content-signature header, * url-safe base64 encoded. * @param aCertificateChain The certificate chain to use for verification. * PEM encoded string. * @param aName The (host)name for which the end entity must be valid. * @returns true if the signature matches the data and aCertificateChain is * valid within aContext, false if not. */`",1121,null],[11,"CreateContext","","`text /** * Creates a context to verify a content signature against data that is added * later with update calls. * * @param aData The first chunk of data to be tested. * @param aContentSignatureHeader The signature of the data, url-safe base64 * encoded. * @param aCertificateChain The certificate chain to use for * verification. PEM encoded string. * @param aName The (host)name for which the end entity must be valid. */`",1121,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"CreateContextWithoutCertChain","","`text /** * Creates a context to verify a content signature against data that is added * later with update calls. * This does not require the caller to download the certificate chain. It's * done internally. * It requires the x5u parameter to be present in aContentSignatureHeader * * NOTE: Callers have to wait for aCallback to return before invoking anything * else. Otherwise the ContentSignatureVerifier will fail. * * @param aCallback Callback that's invoked when the cert chain * got fetched. * @param aContentSignatureHeader The signature of the data, url-safe base64 * encoded, and the x5u value. * @param aName The (host)name for which the end entity must be valid. */`",1121,null],[11,"Update","","`text /** * Adds data to the context that was used to generate the signature. * * @param aData More data to be tested. */`",1121,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"End","","`text /** * Finalises the signature and returns the result of the signature * verification. * * @returns true if the signature matches the data added with createContext * and update, false if not. */`",1121,null],[11,"addref","","",1122,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1122,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentSignatureReceiverCallback` to one of its base interfaces.",1122,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1122,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ContextCreated","","`text /** * Callback for nsIContentSignatureVerifier. * { 0x1eb90707, 0xdf59, 0x48b7, \\ * { 0x9d, 0x42, 0xd8, 0xbf, 0x63, 0x0a, 0xe7, 0x44 } } */ /** * Notification callback that's called by nsIContentSignatureVerifier when * the cert chain is downloaded. * If download and initialisation were successful, successful is true, * otherwise false. If successful is false, the verification must be aborted. */`",1122,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1123,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1123,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentViewer` to one of its base interfaces.",1123,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ePrompt","","`text /** * aPermitUnloadFlags are passed to PermitUnload to indicate what action to take * if a beforeunload handler wants to prompt the user. It is also used by * permitUnloadInternal to ensure we only prompt once. * * ePrompt: Prompt and return the user's choice (default). * eDontPromptAndDontUnload: Don't prompt and return false (unload not permitted) * if the document (or its children) asks us to prompt. * eDontPromptAndUnload: Don't prompt and return true (unload permitted) no matter what. */`",1123,null],[18,"eDontPromptAndDontUnload","","",1123,null],[18,"eDontPromptAndUnload","","",1123,null],[18,"eDelayResize","","`text /** * The 'aFlags' argument to setBoundsWithFlags is a set of these bits. */`",1123,null],[11,"GetContainer","","`attribute nsIDocShell container;`",1123,null],[11,"SetContainer","","`attribute nsIDocShell container;`",1123,null],[11,"LoadComplete","","`void loadComplete (in nsresult aStatus);`",1123,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"GetLoadCompleted","","`[noscript] readonly attribute boolean loadCompleted;`",1123,null],[11,"GetIsStopped","","`[noscript] readonly attribute boolean isStopped;`",1123,null],[11,"PermitUnload","","`text /** * Overload PermitUnload method for C++ consumers with no aPermitUnloadFlags * argument. */ /** * Checks if the document wants to prevent unloading by firing beforeunload on * the document, and if it does, takes action directed by aPermitUnloadFlags. * The result is returned. */`",1123,null],[11,"GetInPermitUnload","","`text /** * Exposes whether we're blocked in a call to permitUnload. */`",1123,null],[11,"GetBeforeUnloadFiring","","`text /** * Exposes whether we're in the process of firing the beforeunload event. * In this case, the corresponding docshell will not allow navigation. */`",1123,null],[11,"PageHide","","`void pageHide (in boolean isUnload);`",1123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Close","","`text /** * All users of a content viewer are responsible for calling both * close() and destroy(), in that order. * * close() should be called when the load of a new page for the next * content viewer begins, and destroy() should be called when the next * content viewer replaces this one. * * |historyEntry| sets the session history entry for the content viewer. If * this is null, then Destroy() will be called on the document by close(). * If it is non-null, the document will not be destroyed, and the following * actions will happen when destroy() is called (*): * - Sanitize() will be called on the viewer's document * - The content viewer will set the contentViewer property on the * history entry, and release its reference (ownership reversal). * - hide() will be called, and no further destruction will happen. * * (*) unless the document is currently being printed, in which case * it will never be saved in session history. * */`",1123,null],[11,"Destroy","","`void destroy ();`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Stop","","`void stop ();`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDOMDocument","","`attribute nsIDOMDocument DOMDocument;`",1123,null],[11,"SetDOMDocument","","`attribute nsIDOMDocument DOMDocument;`",1123,null],[11,"GetDocument","","`text /** * Returns DOMDocument as nsIDocument and without addrefing. */`",1123,null],[11,"GetPreviousViewer","","`text /** * The previous content viewer, which has been |close|d but not * |destroy|ed. */`",1123,null],[11,"SetPreviousViewer","","`text /** * The previous content viewer, which has been |close|d but not * |destroy|ed. */`",1123,null],[11,"Move","","`void move (in long aX, in long aY);`",1123,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"Show","","`void show ();`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Hide","","`void hide ();`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetSticky","","`attribute boolean sticky;`",1123,null],[11,"SetSticky","","`attribute boolean sticky;`",1123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RequestWindowClose","","`boolean requestWindowClose ();`",1123,null],[11,"Open","","`text /** * Attach the content viewer to its DOM window and docshell. * @param aState A state object that might be useful in attaching the DOM * window. * @param aSHEntry The history entry that the content viewer was stored in. * The entry must have the docshells for all of the child * documents stored in its child shell list. */`",1123,null],[11,"ClearHistoryEntry","","`text /** * Clears the current history entry. This is used if we need to clear out * the saved presentation state. */`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetPageMode","","`text /** * Change the layout to view the document with page layout (like print preview), but * dynamic and editable (like Galley layout). */`",1123,null],[11,"GetHistoryEntry","","`text /** * Get the history entry that this viewer will save itself into when * destroyed. Can return null */`",1123,null],[11,"GetIsTabModalPromptAllowed","","`text /** * Indicates when we're in a state where content shouldn't be allowed to * trigger a tab-modal prompt (as opposed to a window-modal prompt) because * we're part way through some operation (eg beforeunload) that shouldn't be * rentrant if the user closes the tab while the prompt is showing. * See bug 613800. */`",1123,null],[11,"GetIsHidden","","`text /** * Returns whether this content viewer is in a hidden state. * * @note Only Gecko internal code should set the attribute! */`",1123,null],[11,"SetIsHidden","","`text /** * Returns whether this content viewer is in a hidden state. * * @note Only Gecko internal code should set the attribute! */`",1123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetDocumentInternal","","`[noscript] void setDocumentInternal (in nsIDocument aDocument, in boolean aForceReuseInnerWindow);`",1123,null],[11,"ScrollToNode","","`void scrollToNode (in nsIDOMNode node);`",1123,null],[11,"GetTextZoom","","`text /** The amount by which to scale all text. Default is 1.0. */`",1123,null],[11,"SetTextZoom","","`text /** The amount by which to scale all text. Default is 1.0. */`",1123,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetEffectiveTextZoom","","`text /** The actual text zoom in effect, as modified by the system font scale. */`",1123,null],[11,"GetFullZoom","","`text /** The amount by which to scale all lengths. Default is 1.0. */`",1123,null],[11,"SetFullZoom","","`text /** The amount by which to scale all lengths. Default is 1.0. */`",1123,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetDeviceFullZoom","","`text /** * The actual full zoom in effect, as modified by the device context. * For a requested full zoom, the device context may choose a slightly * different effectiveFullZoom to accomodate integer rounding of app units * per dev pixel. This property returns the actual zoom amount in use, * though it may not be good user experience to report that a requested zoom * of 90% is actually 89.1%, for example. This value is provided primarily to * support media queries of dppx values, because those queries are matched * against the actual native device pixel ratio and the actual full zoom. */`",1123,null],[11,"GetOverrideDPPX","","`text /** * The value used to override devicePixelRatio and media queries dppx. * Default is 0.0, that means no overriding is done (only a positive value * is applied). */`",1123,null],[11,"SetOverrideDPPX","","`text /** * The value used to override devicePixelRatio and media queries dppx. * Default is 0.0, that means no overriding is done (only a positive value * is applied). */`",1123,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetAuthorStyleDisabled","","`text /** Disable entire author style level (including HTML presentation hints) */`",1123,null],[11,"SetAuthorStyleDisabled","","`text /** Disable entire author style level (including HTML presentation hints) */`",1123,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForceCharacterSet","","`text /** * XXX comm-central only: bug 829543. Not the Character Encoding menu in * browser! */`",1123,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetForceCharacterSet","","`text /** * XXX comm-central only: bug 829543. Not the Character Encoding menu in * browser! */`",1123,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHintCharacterSet","","`text /** * XXX comm-central only: bug 829543. */`",1123,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetHintCharacterSet","","`text /** * XXX comm-central only: bug 829543. */`",1123,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetHintCharacterSetSource","","`text /** * XXX comm-central only: bug 829543. */`",1123,null],[11,"SetHintCharacterSetSource","","`text /** * XXX comm-central only: bug 829543. */`",1123,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetContentSize","","`text /** * Requests the size of the content to the container. */`",1123,null],[11,"GetContentSizeConstrained","","`text /** * Returns the preferred width and height of the content, constrained to the * given maximum values. If either maxWidth or maxHeight is less than zero, * that dimension is not constrained. * * All input and output values are in device pixels, rather than CSS pixels. */`",1123,null],[11,"GetMinFontSize","","`text /** The minimum font size */`",1123,null],[11,"SetMinFontSize","","`text /** The minimum font size */`",1123,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"PausePainting","","`text /** * Instruct the refresh driver to discontinue painting until further * notice. */`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumePainting","","`text /** * Instruct the refresh driver to resume painting after a previous call to * pausePainting(). */`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EmulateMedium","","`void emulateMedium (in AString aMediaType);`",1123,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"StopEmulatingMedium","","`void stopEmulatingMedium ();`",1123,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1124,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1124,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDataChannel` to one of its base interfaces.",1124,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1124,{"inputs":[{"name":"self"}],"output":{"name":"nsidomeventtarget"}}],[11,"GetLabel","","`readonly attribute DOMString label;`",1124,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetProtocol","","`readonly attribute DOMString protocol;`",1124,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReliable","","`readonly attribute boolean reliable;`",1124,null],[11,"GetOrdered","","`readonly attribute boolean ordered;`",1124,null],[11,"GetReadyState","","`readonly attribute DOMString readyState;`",1124,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBufferedAmount","","`readonly attribute unsigned long bufferedAmount;`",1124,null],[11,"GetId","","`readonly attribute unsigned short id;`",1124,null],[11,"GetBinaryType","","`attribute DOMString binaryType;`",1124,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetBinaryType","","`attribute DOMString binaryType;`",1124,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Close","","`void close ();`",1124,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1125,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1125,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICryptoHMAC` to one of its base interfaces.",1125,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1125,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MD5","","`text /** * Hashing Algorithms. These values are to be used by the |init| method to * indicate which hashing function to use. These values map onto the values * defined in mozilla/security/nss/lib/softoken/pkcs11t.h and are switched * to a CKM_*_HMAC constant. */`",1125,null],[18,"SHA1","","",1125,null],[18,"SHA256","","",1125,null],[18,"SHA384","","",1125,null],[18,"SHA512","","",1125,null],[11,"Init","","`text /** * Initialize the hashing object. This method may be * called multiple times with different algorithm types. * * @param aAlgorithm the algorithm type to be used. * This value must be one of the above valid * algorithm types. * * @param aKeyObject * Object holding a key. To create the key object use for instance: * var keyObject = Components.classes[\"@mozilla.org/security/keyobjectfactory;1\"] * .getService(Components.interfaces.nsIKeyObjectFactory) * .keyFromString(Components.interfaces.nsIKeyObject.HMAC, rawKeyData); * * WARNING: This approach is not FIPS compliant. * * @throws NS_ERROR_INVALID_ARG if an unsupported algorithm * type is passed. * * NOTE: This method must be called before any other method on this * interface is called. */`",1125,null],[11,"Update","","`text /** * @param aData a buffer to calculate the hash over * * @param aLen the length of the buffer |aData| * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. */`",1125,null],[11,"UpdateFromStream","","`text /** * Calculates and updates a new hash based on a given data stream. * * @param aStream an input stream to read from. * * @param aLen How much to read from the given |aStream|. Passing UINT32_MAX * indicates that all data available will be used to update the hash. * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. * * @throws NS_ERROR_NOT_AVAILABLE If the requested amount of data to be * calculated into the hash is not available. * */`",1125,null],[11,"Finish","","`text /** * Completes this HMAC object and produces the actual HMAC digest data. * * @param aASCII If true then the returned value is a base64 encoded string. * If false, then the returned value is binary data. * * @return a hash of the data that was read by this object. This can * be either binary data or base 64 encoded. * * @throws NS_ERROR_NOT_INITIALIZED If |init| has not been called. * * NOTE: This method may be called any time after |init| * is called. This call resets the object to its * pre-init state. */`",1125,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Reset","","`text /** * Reinitialize HMAC context to be reused with the same settings (the key * and hash algorithm) but on a different set of data. */`",1125,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1126,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1126,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIDNSService` to one of its base interfaces.",1126,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1126,{"inputs":[{"name":"self"}],"output":{"name":"nsidnsservice"}}],[11,"Init","","`text /** * called to initialize the DNS service. */`",1126,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Shutdown","","`text /** * called to shutdown the DNS service. any pending asynchronous * requests will be canceled, and the local cache of DNS records * will be cleared. NOTE: the operating system may still have * its own cache of DNS records, which would be unaffected by * this method. */`",1126,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetPrefetchEnabled","","`text /** * Whether or not DNS prefetching (aka RESOLVE_SPECULATE) is enabled */`",1126,null],[11,"SetPrefetchEnabled","","`text /** * Whether or not DNS prefetching (aka RESOLVE_SPECULATE) is enabled */`",1126,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1127,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1127,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScreen` to one of its base interfaces.",1127,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1127,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRect","","`text /** * These report screen dimensions in (screen-specific) device pixels */`",1127,null],[11,"GetAvailRect","","`void GetAvailRect (out long left, out long top, out long width, out long height);`",1127,null],[11,"GetRectDisplayPix","","`text /** * And these report in desktop pixels */`",1127,null],[11,"GetAvailRectDisplayPix","","`void GetAvailRectDisplayPix (out long left, out long top, out long width, out long height);`",1127,null],[11,"GetPixelDepth","","`readonly attribute long pixelDepth;`",1127,null],[11,"GetColorDepth","","`readonly attribute long colorDepth;`",1127,null],[11,"GetContentsScaleFactor","","`text /** * The number of device pixels per desktop pixel for this screen (for * hidpi configurations where there may be multiple device pixels per * desktop px and/or per CSS px). * * This seems poorly named (something like devicePixelsPerDesktopPixel * would be more accurate/explicit), but given that it is exposed to * front-end code and may also be used by add-ons, it's probably not * worth the disruption of changing it. * * Returns 1.0 if HiDPI mode is disabled or unsupported, or if the * host OS uses device pixels as its desktop pixel units (e.g. Windows 7 or * GTK/X11). Per-monitor DPI is available in Windows 8.1+, GTK/Wayland or * macOS. */`",1127,null],[11,"GetDefaultCSSScaleFactor","","`text /** * The default number of device pixels per unscaled CSS pixel for this * screen. This is probably what contentsScaleFactor originally meant * to be, prior to confusion between CSS pixels and desktop pixel units. */`",1127,null],[11,"GetDpi","","`text /** * The DPI of the screen. */`",1127,null],[11,"addref","","",1128,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1128,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorMailSupport` to one of its base interfaces.",1128,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1128,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"PasteAsQuotation","","`text /** Paste the text in the OS clipboard at the cursor position, * as a quotation (whose representation is dependant on the editor type), * replacing the selected text (if any). * @param aSelectionType Text or html? */`",1128,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InsertAsQuotation","","`text /** Insert a string as quoted text * (whose representation is dependant on the editor type), * replacing the selected text (if any). * @param aQuotedText The actual text to be quoted * @return The node which was inserted */`",1128,null],[11,"InsertTextWithQuotations","","`text /** * Inserts a plaintext string at the current location, * with special processing for lines beginning with \">\", * which will be treated as mail quotes and inserted * as plaintext quoted blocks. * If the selection is not collapsed, the selection is deleted * and the insertion takes place at the resulting collapsed selection. * * @param aString the string to be inserted */`",1128,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"PasteAsCitedQuotation","","`text /** Paste a string as quoted text, * whose representation is dependant on the editor type, * replacing the selected text (if any) * @param aCitation The \"mid\" URL of the source message * @param aSelectionType Text or html? */`",1128,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"InsertAsCitedQuotation","","`text /** Insert a string as quoted text * (whose representation is dependant on the editor type), * replacing the selected text (if any), * including, if possible, a \"cite\" attribute. * @param aQuotedText The actual text to be quoted * @param aCitation The \"mid\" URL of the source message * @param aInsertHTML Insert as html? (vs plaintext) * @return The node which was inserted */`",1128,null],[11,"Rewrap","","`text /** * Rewrap the selected part of the document, re-quoting if necessary. * @param aRespectNewlines Try to maintain newlines in the original? */`",1128,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"StripCites","","`text /** * Strip any citations in the selected part of the document. */`",1128,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetEmbeddedObjects","","`text /** * Get a list of IMG and OBJECT tags in the current document. */`",1128,null],[11,"addref","","",1129,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1129,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMKeyEvent` to one of its base interfaces.",1129,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1129,{"inputs":[{"name":"self"}],"output":{"name":"nsidomuievent"}}],[18,"DOM_VK_CANCEL","","",1129,null],[18,"DOM_VK_HELP","","",1129,null],[18,"DOM_VK_BACK_SPACE","","",1129,null],[18,"DOM_VK_TAB","","",1129,null],[18,"DOM_VK_CLEAR","","",1129,null],[18,"DOM_VK_RETURN","","",1129,null],[18,"DOM_VK_SHIFT","","",1129,null],[18,"DOM_VK_CONTROL","","",1129,null],[18,"DOM_VK_ALT","","",1129,null],[18,"DOM_VK_PAUSE","","",1129,null],[18,"DOM_VK_CAPS_LOCK","","",1129,null],[18,"DOM_VK_KANA","","",1129,null],[18,"DOM_VK_HANGUL","","",1129,null],[18,"DOM_VK_EISU","","",1129,null],[18,"DOM_VK_JUNJA","","",1129,null],[18,"DOM_VK_FINAL","","",1129,null],[18,"DOM_VK_HANJA","","",1129,null],[18,"DOM_VK_KANJI","","",1129,null],[18,"DOM_VK_ESCAPE","","",1129,null],[18,"DOM_VK_CONVERT","","",1129,null],[18,"DOM_VK_NONCONVERT","","",1129,null],[18,"DOM_VK_ACCEPT","","",1129,null],[18,"DOM_VK_MODECHANGE","","",1129,null],[18,"DOM_VK_SPACE","","",1129,null],[18,"DOM_VK_PAGE_UP","","",1129,null],[18,"DOM_VK_PAGE_DOWN","","",1129,null],[18,"DOM_VK_END","","",1129,null],[18,"DOM_VK_HOME","","",1129,null],[18,"DOM_VK_LEFT","","",1129,null],[18,"DOM_VK_UP","","",1129,null],[18,"DOM_VK_RIGHT","","",1129,null],[18,"DOM_VK_DOWN","","",1129,null],[18,"DOM_VK_SELECT","","",1129,null],[18,"DOM_VK_PRINT","","",1129,null],[18,"DOM_VK_EXECUTE","","",1129,null],[18,"DOM_VK_PRINTSCREEN","","",1129,null],[18,"DOM_VK_INSERT","","",1129,null],[18,"DOM_VK_DELETE","","",1129,null],[18,"DOM_VK_0","","",1129,null],[18,"DOM_VK_1","","",1129,null],[18,"DOM_VK_2","","",1129,null],[18,"DOM_VK_3","","",1129,null],[18,"DOM_VK_4","","",1129,null],[18,"DOM_VK_5","","",1129,null],[18,"DOM_VK_6","","",1129,null],[18,"DOM_VK_7","","",1129,null],[18,"DOM_VK_8","","",1129,null],[18,"DOM_VK_9","","",1129,null],[18,"DOM_VK_COLON","","",1129,null],[18,"DOM_VK_SEMICOLON","","",1129,null],[18,"DOM_VK_LESS_THAN","","",1129,null],[18,"DOM_VK_EQUALS","","",1129,null],[18,"DOM_VK_GREATER_THAN","","",1129,null],[18,"DOM_VK_QUESTION_MARK","","",1129,null],[18,"DOM_VK_AT","","",1129,null],[18,"DOM_VK_A","","",1129,null],[18,"DOM_VK_B","","",1129,null],[18,"DOM_VK_C","","",1129,null],[18,"DOM_VK_D","","",1129,null],[18,"DOM_VK_E","","",1129,null],[18,"DOM_VK_F","","",1129,null],[18,"DOM_VK_G","","",1129,null],[18,"DOM_VK_H","","",1129,null],[18,"DOM_VK_I","","",1129,null],[18,"DOM_VK_J","","",1129,null],[18,"DOM_VK_K","","",1129,null],[18,"DOM_VK_L","","",1129,null],[18,"DOM_VK_M","","",1129,null],[18,"DOM_VK_N","","",1129,null],[18,"DOM_VK_O","","",1129,null],[18,"DOM_VK_P","","",1129,null],[18,"DOM_VK_Q","","",1129,null],[18,"DOM_VK_R","","",1129,null],[18,"DOM_VK_S","","",1129,null],[18,"DOM_VK_T","","",1129,null],[18,"DOM_VK_U","","",1129,null],[18,"DOM_VK_V","","",1129,null],[18,"DOM_VK_W","","",1129,null],[18,"DOM_VK_X","","",1129,null],[18,"DOM_VK_Y","","",1129,null],[18,"DOM_VK_Z","","",1129,null],[18,"DOM_VK_WIN","","",1129,null],[18,"DOM_VK_CONTEXT_MENU","","",1129,null],[18,"DOM_VK_SLEEP","","",1129,null],[18,"DOM_VK_NUMPAD0","","",1129,null],[18,"DOM_VK_NUMPAD1","","",1129,null],[18,"DOM_VK_NUMPAD2","","",1129,null],[18,"DOM_VK_NUMPAD3","","",1129,null],[18,"DOM_VK_NUMPAD4","","",1129,null],[18,"DOM_VK_NUMPAD5","","",1129,null],[18,"DOM_VK_NUMPAD6","","",1129,null],[18,"DOM_VK_NUMPAD7","","",1129,null],[18,"DOM_VK_NUMPAD8","","",1129,null],[18,"DOM_VK_NUMPAD9","","",1129,null],[18,"DOM_VK_MULTIPLY","","",1129,null],[18,"DOM_VK_ADD","","",1129,null],[18,"DOM_VK_SEPARATOR","","",1129,null],[18,"DOM_VK_SUBTRACT","","",1129,null],[18,"DOM_VK_DECIMAL","","",1129,null],[18,"DOM_VK_DIVIDE","","",1129,null],[18,"DOM_VK_F1","","",1129,null],[18,"DOM_VK_F2","","",1129,null],[18,"DOM_VK_F3","","",1129,null],[18,"DOM_VK_F4","","",1129,null],[18,"DOM_VK_F5","","",1129,null],[18,"DOM_VK_F6","","",1129,null],[18,"DOM_VK_F7","","",1129,null],[18,"DOM_VK_F8","","",1129,null],[18,"DOM_VK_F9","","",1129,null],[18,"DOM_VK_F10","","",1129,null],[18,"DOM_VK_F11","","",1129,null],[18,"DOM_VK_F12","","",1129,null],[18,"DOM_VK_F13","","",1129,null],[18,"DOM_VK_F14","","",1129,null],[18,"DOM_VK_F15","","",1129,null],[18,"DOM_VK_F16","","",1129,null],[18,"DOM_VK_F17","","",1129,null],[18,"DOM_VK_F18","","",1129,null],[18,"DOM_VK_F19","","",1129,null],[18,"DOM_VK_F20","","",1129,null],[18,"DOM_VK_F21","","",1129,null],[18,"DOM_VK_F22","","",1129,null],[18,"DOM_VK_F23","","",1129,null],[18,"DOM_VK_F24","","",1129,null],[18,"DOM_VK_NUM_LOCK","","",1129,null],[18,"DOM_VK_SCROLL_LOCK","","",1129,null],[18,"DOM_VK_WIN_OEM_FJ_JISHO","","",1129,null],[18,"DOM_VK_WIN_OEM_FJ_MASSHOU","","",1129,null],[18,"DOM_VK_WIN_OEM_FJ_TOUROKU","","",1129,null],[18,"DOM_VK_WIN_OEM_FJ_LOYA","","",1129,null],[18,"DOM_VK_WIN_OEM_FJ_ROYA","","",1129,null],[18,"DOM_VK_CIRCUMFLEX","","",1129,null],[18,"DOM_VK_EXCLAMATION","","",1129,null],[18,"DOM_VK_DOUBLE_QUOTE","","",1129,null],[18,"DOM_VK_HASH","","",1129,null],[18,"DOM_VK_DOLLAR","","",1129,null],[18,"DOM_VK_PERCENT","","",1129,null],[18,"DOM_VK_AMPERSAND","","",1129,null],[18,"DOM_VK_UNDERSCORE","","",1129,null],[18,"DOM_VK_OPEN_PAREN","","",1129,null],[18,"DOM_VK_CLOSE_PAREN","","",1129,null],[18,"DOM_VK_ASTERISK","","",1129,null],[18,"DOM_VK_PLUS","","",1129,null],[18,"DOM_VK_PIPE","","",1129,null],[18,"DOM_VK_HYPHEN_MINUS","","",1129,null],[18,"DOM_VK_OPEN_CURLY_BRACKET","","",1129,null],[18,"DOM_VK_CLOSE_CURLY_BRACKET","","",1129,null],[18,"DOM_VK_TILDE","","",1129,null],[18,"DOM_VK_VOLUME_MUTE","","",1129,null],[18,"DOM_VK_VOLUME_DOWN","","",1129,null],[18,"DOM_VK_VOLUME_UP","","",1129,null],[18,"DOM_VK_COMMA","","",1129,null],[18,"DOM_VK_PERIOD","","",1129,null],[18,"DOM_VK_SLASH","","",1129,null],[18,"DOM_VK_BACK_QUOTE","","",1129,null],[18,"DOM_VK_OPEN_BRACKET","","",1129,null],[18,"DOM_VK_BACK_SLASH","","",1129,null],[18,"DOM_VK_CLOSE_BRACKET","","",1129,null],[18,"DOM_VK_QUOTE","","",1129,null],[18,"DOM_VK_META","","",1129,null],[18,"DOM_VK_ALTGR","","",1129,null],[18,"DOM_VK_WIN_ICO_HELP","","",1129,null],[18,"DOM_VK_WIN_ICO_00","","",1129,null],[18,"DOM_VK_WIN_ICO_CLEAR","","",1129,null],[18,"DOM_VK_WIN_OEM_RESET","","",1129,null],[18,"DOM_VK_WIN_OEM_JUMP","","",1129,null],[18,"DOM_VK_WIN_OEM_PA1","","",1129,null],[18,"DOM_VK_WIN_OEM_PA2","","",1129,null],[18,"DOM_VK_WIN_OEM_PA3","","",1129,null],[18,"DOM_VK_WIN_OEM_WSCTRL","","",1129,null],[18,"DOM_VK_WIN_OEM_CUSEL","","",1129,null],[18,"DOM_VK_WIN_OEM_ATTN","","",1129,null],[18,"DOM_VK_WIN_OEM_FINISH","","",1129,null],[18,"DOM_VK_WIN_OEM_COPY","","",1129,null],[18,"DOM_VK_WIN_OEM_AUTO","","",1129,null],[18,"DOM_VK_WIN_OEM_ENLW","","",1129,null],[18,"DOM_VK_WIN_OEM_BACKTAB","","",1129,null],[18,"DOM_VK_ATTN","","",1129,null],[18,"DOM_VK_CRSEL","","",1129,null],[18,"DOM_VK_EXSEL","","",1129,null],[18,"DOM_VK_EREOF","","",1129,null],[18,"DOM_VK_PLAY","","",1129,null],[18,"DOM_VK_ZOOM","","",1129,null],[18,"DOM_VK_PA1","","",1129,null],[18,"DOM_VK_WIN_OEM_CLEAR","","",1129,null],[18,"DOM_KEY_LOCATION_STANDARD","","",1129,null],[18,"DOM_KEY_LOCATION_LEFT","","",1129,null],[18,"DOM_KEY_LOCATION_RIGHT","","",1129,null],[18,"DOM_KEY_LOCATION_NUMPAD","","",1129,null],[11,"GetCharCode","","`readonly attribute unsigned long charCode;`",1129,null],[11,"GetKeyCode","","`readonly attribute unsigned long keyCode;`",1129,null],[11,"GetAltKey","","`readonly attribute boolean altKey;`",1129,null],[11,"GetCtrlKey","","`readonly attribute boolean ctrlKey;`",1129,null],[11,"GetShiftKey","","`readonly attribute boolean shiftKey;`",1129,null],[11,"GetMetaKey","","`readonly attribute boolean metaKey;`",1129,null],[11,"InitKeyEvent","","`void initKeyEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in mozIDOMWindow viewArg, in boolean ctrlKeyArg, in boolean altKeyArg, in boolean shiftKeyArg, in boolean metaKeyArg, in unsigned long keyCodeArg, in unsigned long charCodeArg);`",1129,null],[11,"GetModifierState","","`bool getModifierState (in DOMString keyArg);`",1129,null],[11,"GetLocation","","`readonly attribute unsigned long location;`",1129,null],[11,"GetRepeat","","`readonly attribute boolean repeat;`",1129,null],[11,"GetKey","","`readonly attribute DOMString key;`",1129,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1130,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1130,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMultiplexInputStream` to one of its base interfaces.",1130,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1130,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCount","","`text /** * Number of streams in this multiplex-stream */`",1130,null],[11,"AppendStream","","`text /** * Appends a stream to the end of the streams. The cursor of the stream * should be located at the beginning of the stream if the implementation * of this nsIMultiplexInputStream also is used as an nsISeekableStream. * @param stream stream to append */`",1130,null],[11,"GetStream","","`text /** * Get stream at specified index. * @param index return stream at this index, must be < count * @return stream at specified index */`",1130,null],[11,"addref","","",1131,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1131,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICrashReporter` to one of its base interfaces.",1131,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1131,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEnabled","","`text /** * Get the enabled status of the crash reporter. */`",1131,null],[11,"SetEnabled","","`text /** * Enable or disable crash reporting at runtime. Not available to script * because the JS engine relies on proper exception handler chaining. */`",1131,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetServerURL","","`text /** * Get or set the URL to which crash reports will be submitted. * Only https and http URLs are allowed, as the submission is handled * by OS-native networking libraries. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting is not initialized * @throw NS_ERROR_INVALID_ARG on set if a non-http(s) URL is assigned * @throw NS_ERROR_FAILURE on get if no URL is set */`",1131,null],[11,"SetServerURL","","`text /** * Get or set the URL to which crash reports will be submitted. * Only https and http URLs are allowed, as the submission is handled * by OS-native networking libraries. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting is not initialized * @throw NS_ERROR_INVALID_ARG on set if a non-http(s) URL is assigned * @throw NS_ERROR_FAILURE on get if no URL is set */`",1131,null],[11,"GetMinidumpPath","","`text /** * Get or set the path on the local system to which minidumps will be * written when a crash happens. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting is not initialized */`",1131,null],[11,"SetMinidumpPath","","`text /** * Get or set the path on the local system to which minidumps will be * written when a crash happens. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting is not initialized */`",1131,null],[11,"GetMinidumpForID","","`text /** * Get the minidump file corresponding to the specified ID. * * @param id * ID of the crash. Likely a UUID. * * @return The minidump file associated with the ID. * * @throw NS_ERROR_FILE_NOT_FOUND if the minidump could not be found */`",1131,null],[11,"GetExtraFileForID","","`text /** * Get the extra file corresponding to the specified ID. * * @param id * ID of the crash. Likely a UUID. * * @return The extra file associated with the ID. * * @throw NS_ERROR_FILE_NOT_FOUND if the extra file could not be found */`",1131,null],[11,"AnnotateCrashReport","","`text /** * Add some extra data to be submitted with a crash report. * * @param key * Name of the data to be added. * @param data * Data to be added. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting not initialized * @throw NS_ERROR_INVALID_ARG if key or data contain invalid characters. * Invalid characters for key are '=' and * '\\n'. Invalid character for data is '\\0'. */`",1131,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"AppendAppNotesToCrashReport","","`text /** * Append some data to the \"Notes\" field, to be submitted with a crash report. * Unlike annotateCrashReport, this method will append to existing data. * * @param data * Data to be added. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting not initialized * @throw NS_ERROR_INVALID_ARG if data contains invalid characters. * The only invalid character is '\\0'. */`",1131,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"RegisterAppMemory","","`text /** * Register a given memory range to be included in the crash report. * * @param ptr * The starting address for the bytes. * @param size * The number of bytes to include. * * @throw NS_ERROR_NOT_INITIALIZED if crash reporting not initialized * @throw NS_ERROR_NOT_IMPLEMENTED if unavailable on the current OS */`",1131,{"inputs":[{"name":"self"},{"name":"uint64_t"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"WriteMinidumpForException","","`text /** * Write a minidump immediately, with the user-supplied exception * information. This is implemented on Windows only, because * SEH (structured exception handling) exists on Windows only. * * @param aExceptionInfo EXCEPTION_INFO* provided by Window's SEH */`",1131,null],[11,"AppendObjCExceptionInfoToAppNotes","","`text /** * Append note containing an Obj-C exception's info. * * @param aException NSException object to append note for */`",1131,null],[11,"GetSubmitReports","","`text /** * User preference for submitting crash reports. */`",1131,null],[11,"SetSubmitReports","","`text /** * User preference for submitting crash reports. */`",1131,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"UpdateCrashEventsDir","","`text /** * Cause the crash reporter to re-evaluate where crash events should go. * * This should be called during application startup and whenever profiles * change. */`",1131,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SaveMemoryReport","","`text /** * Save an anonymized memory report file for inclusion in a future crash * report in this session. * * @throws NS_ERROR_NOT_INITIALIZED if crash reporting is disabled. */`",1131,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetTelemetrySessionId","","`text /** * Set the telemetry session ID which is recorded in crash metadata. This is * saved in the crash manager and telemetry but is not submitted as a * crash-stats annotation. */`",1131,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1132,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1132,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `xpcIJSWeakReference` to one of its base interfaces.",1132,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1132,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1133,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1133,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISyncStreamListener` to one of its base interfaces.",1133,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1133,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"GetInputStream","","`text /** * Returns an input stream that when read will fetch data delivered to the * sync stream listener. The nsIInputStream implementation will wait for * OnDataAvailable events before returning from Read. * * NOTE: Reading from the returned nsIInputStream may spin the current * thread's event queue, which could result in any event being processed. */`",1133,null],[11,"addref","","",1134,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1134,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICollationFactory` to one of its base interfaces.",1134,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1134,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateCollation","","`text /** * Create a new collation for the current application locale. * * @return A new collation. */`",1134,null],[11,"CreateCollationForLocale","","`text /** * Create a new collation for a given locale. * * @return A new collation. */`",1134,null],[11,"addref","","",1135,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1135,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICollation` to one of its base interfaces.",1135,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1135,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"kCollationStrengthDefault","","",1135,null],[18,"kCollationCaseInsensitiveAscii","","",1135,null],[18,"kCollationAccentInsenstive","","",1135,null],[18,"kCollationCaseSensitive","","",1135,null],[18,"kCollationCaseInSensitive","","",1135,null],[11,"Initialize","","`void initialize (in ACString locale);`",1135,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"CompareString","","`long compareString (in long strength, in AString string1, in AString string2);`",1135,null],[11,"AllocateRawSortKey","","`[noscript] void allocateRawSortKey (in long strength, in AString stringIn, [array, size_is (outLen)] out octet key, out unsigned long outLen);`",1135,null],[11,"CompareRawSortKey","","`[noscript] long compareRawSortKey ([array, size_is (len1), const] in octet key1, in unsigned long len1, [array, size_is (len2), const] in octet key2, in unsigned long len2);`",1135,null],[11,"addref","","",1136,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1136,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocumentEncoderNodeFixup` to one of its base interfaces.",1136,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1136,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FixupNode","","`text /** * Create a fixed up version of a node. This method is called before * each node in a document is about to be persisted. The implementor * may return a new node with fixed up attributes or null. If null is * returned the node should be used as-is. * @param aNode Node to fixup. * @param [OUT] aSerializeCloneKids True if the document encoder should * apply recursive serialization to the children of the fixed up node * instead of the children of the original node. * @return The resulting fixed up node. */`",1136,null],[11,"addref","","",1137,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1137,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocumentEncoder` to one of its base interfaces.",1137,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1137,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"OutputSelectionOnly","","`text /** * Output only the selection (as opposed to the whole document). */`",1137,null],[18,"OutputFormatted","","`text /** Plaintext output: Convert html to plaintext that looks like the html. * Implies wrap (except inside <pre>), since html wraps. * HTML, XHTML and XML output: do prettyprinting, ignoring existing formatting. * XML output : it doesn't implicitly wrap */`",1137,null],[18,"OutputRaw","","`text /** Don't do prettyprinting. Don't do any wrapping that's not in the existing * HTML/XML source. This option overrides OutputFormatted if both are set. * HTML/XHTML output: If neither are set, there won't be prettyprinting too, but * long lines will be wrapped. * Supported also in XML and Plaintext output. * @note This option does not affect entity conversion. */`",1137,null],[18,"OutputBodyOnly","","`text /** * Do not print html head tags. * XHTML/HTML output only. */`",1137,null],[18,"OutputPreformatted","","`text /** * Output as though the content is preformatted * (e.g. maybe it's wrapped in a PRE or PRE_WRAP style tag) * Plaintext output only. * XXXbz How does this interact with * OutputFormatted/OutputRaw/OutputPreformatted/OutputFormatFlowed? */`",1137,null],[18,"OutputWrap","","`text /** * Wrap even if we're not doing formatted output (e.g. for text fields). * Supported in XML, XHTML, HTML and Plaintext output. * Set implicitly in HTML/XHTML output when no OutputRaw. * Ignored when OutputRaw. * XXXLJ: set implicitly in HTML/XHTML output, to keep compatible behaviors * for old callers of this interface * XXXbz How does this interact with OutputFormatFlowed? */`",1137,null],[18,"OutputFormatFlowed","","`text /** * Output for format flowed (RFC 2646). This is used when converting * to text for mail sending. This differs just slightly * but in an important way from normal formatted, and that is that * lines are space stuffed. This can't (correctly) be done later. * PlainText output only. * XXXbz How does this interact with * OutputFormatted/OutputRaw/OutputPreformatted/OutputWrap? */`",1137,null],[18,"OutputAbsoluteLinks","","`text /** * Convert links, image src, and script src to absolute URLs when possible. * XHTML/HTML output only. */`",1137,null],[18,"OutputCRLineBreak","","`text /** * LineBreak processing: if this flag is set than CR line breaks will * be written. If neither this nor OutputLFLineBreak is set, then we * will use platform line breaks. The combination of the two flags will * cause CRLF line breaks to be written. */`",1137,null],[18,"OutputLFLineBreak","","`text /** * LineBreak processing: if this flag is set than LF line breaks will * be written. If neither this nor OutputCRLineBreak is set, then we * will use platform line breaks. The combination of the two flags will * cause CRLF line breaks to be written. */`",1137,null],[18,"OutputNoScriptContent","","`text /** * Output the content of noscript elements (only for serializing * to plaintext). */`",1137,null],[18,"OutputNoFramesContent","","`text /** * Output the content of noframes elements (only for serializing * to plaintext). (Used only internally in the plain text serializer; * ignored if passed by the caller.) */`",1137,null],[18,"OutputNoFormattingInPre","","`text /** * Don't allow any formatting nodes (e.g. <br>, <b>) inside a <pre>. * This is used primarily by mail. XHTML/HTML output only. */`",1137,null],[18,"OutputEncodeBasicEntities","","`text /** * Encode entities when outputting to a string. * E.g. If set, we'll output &nbsp; if clear, we'll output 0xa0. * The basic set is just &nbsp; &amp; &lt; &gt; &quot; for interoperability * with older products that don't support &alpha; and friends. * HTML output only. */`",1137,null],[18,"OutputPersistNBSP","","`text /** * Normally &nbsp; is replaced with a space character when * encoding data as plain text, set this flag if that's * not desired. * Plaintext output only. */`",1137,null],[18,"OutputDontRewriteEncodingDeclaration","","`text /** * Normally when serializing the whole document using the HTML or * XHTML serializer, the encoding declaration is rewritten to match. * This flag suppresses that behavior. */`",1137,null],[18,"SkipInvisibleContent","","`text /** * When using the HTML or XHTML serializer, skip elements that are not * visible when this flag is set. Elements are not visible when they * have CSS style display:none or visibility:collapse, for example. */`",1137,null],[18,"OutputFormatDelSp","","`text /** * Output for delsp=yes (RFC 3676). This is used with OutputFormatFlowed * when converting to text for mail sending. * PlainText output only. */`",1137,null],[18,"OutputDropInvisibleBreak","","`text /** * Drop <br> elements considered \"invisible\" by the editor. OutputPreformatted * implies this flag. */`",1137,null],[18,"OutputIgnoreMozDirty","","`text /** * Don't check for _moz_dirty attributes when deciding whether to * pretty-print if this flag is set (bug 599983). */`",1137,null],[18,"OutputNonTextContentAsPlaceholder","","`text /** * Output the content of non-text elements as the placehodler character * U+FFFC (OBJECT REPLACEMENT CHARACTER, only for serializing to plaintext). */`",1137,null],[18,"OutputDontRemoveLineEndingSpaces","","`text /** * Don't Strip ending spaces from a line (only for serializing to plaintext). */`",1137,null],[18,"OutputForPlainTextClipboardCopy","","`text /** * Serialize in a way that is suitable for copying a plaintext version of the * document to the clipboard. This can for example cause line endings to be * injected at preformatted block element boundaries. */`",1137,null],[18,"OutputRubyAnnotation","","`text /** * Include ruby annotations and ruby parentheses in the output. * PlainText output only. */`",1137,null],[18,"OutputDisallowLineBreaking","","`text /** * Disallow breaking of long character strings. This is important * for serializing e-mail which contains CJK strings. These must * not be broken just as \"normal\" longs strings aren't broken. */`",1137,null],[18,"RequiresReinitAfterOutput","","`text /** * Release reference of nsIDocument after using encodeTo* method to recycle * this encoder without holding nsIDocument. To use this encoder again, * we have to call init again. */`",1137,null],[11,"Init","","`text /** * Initialize with a pointer to the document and the mime type. * @param aDocument Document to encode. * @param aMimeType MimeType to use. May also be set by SetMimeType. * @param aFlags Flags to use while encoding. May also be set by SetFlags. */`",1137,null],[11,"SetSelection","","`text /** * If the selection is set to a non-null value, then the * selection is used for encoding, otherwise the entire * document is encoded. * @param aSelection The selection to encode. */`",1137,null],[11,"SetRange","","`text /** * If the range is set to a non-null value, then the * range is used for encoding, otherwise the entire * document or selection is encoded. * @param aRange The range to encode. */`",1137,null],[11,"SetNode","","`text /** * If the node is set to a non-null value, then the * node is used for encoding, otherwise the entire * document or range or selection is encoded. * @param aNode The node to encode. */`",1137,null],[11,"SetContainerNode","","`text /** * If the container is set to a non-null value, then its * child nodes are used for encoding, otherwise the entire * document or range or selection or node is encoded. * @param aContainer The node which child nodes will be encoded. */`",1137,null],[11,"SetCharset","","`text /** * Documents typically have an intrinsic character set, * but if no intrinsic value is found, the platform character set * is used. This function overrides both the intrinisc and platform * charset. * @param aCharset Overrides the both the intrinsic or platform * character set when encoding the document. * * Possible result codes: NS_ERROR_NO_CHARSET_CONVERTER */`",1137,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetWrapColumn","","`text /** * Set a wrap column. This may have no effect in some types of encoders. * @param aWrapColumn Column to which to wrap. */`",1137,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetMimeType","","`text /** * The mime type preferred by the encoder. This piece of api was * added because the copy encoder may need to switch mime types on you * if you ask it to copy html that really represents plaintext content. * Call this AFTER Init() and SetSelection() have both been called. */`",1137,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"EncodeToStream","","`text /** * Encode the document and send the result to the nsIOutputStream. * * Possible result codes are the stream errors which might have * been encountered. * @param aStream Stream into which to encode. */`",1137,null],[11,"EncodeToString","","`text /** * Encode the document into a string. * * @return The document encoded into a string. */`",1137,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"EncodeToStringWithContext","","`text /** * Encode the document into a string. Stores the extra context information * into the two arguments. * @param [OUT] aContextString The string where the parent hierarchy * information will be stored. * @param [OUT] aInfoString The string where extra context info will * be stored. * @return The document encoded as a string. * */`",1137,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"EncodeToStringWithMaxLength","","`text /** * Encode the document into a string of limited size. * @param aMaxLength After aMaxLength characters, the encoder will stop * encoding new data. * Only values > 0 will be considered. * The returned string may be slightly larger than * aMaxLength because some serializers (eg. HTML) * may need to close some tags after they stop * encoding new data, or finish a line (72 columns * by default for the plain text serializer). * * @return The document encoded into a string. */`",1137,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetNodeFixup","","`text /** * Set the fixup object associated with node persistence. * @param aFixup The fixup object. */`",1137,null],[11,"addref","","",1138,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1138,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpProtocolHandler` to one of its base interfaces.",1138,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1138,{"inputs":[{"name":"self"}],"output":{"name":"nsiproxiedprotocolhandler"}}],[11,"GetUserAgent","","`text /** * Get the HTTP advertised user agent string. */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppName","","`text /** * Get the application name. * * @return The name of this application (eg. \"Mozilla\"). */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppVersion","","`text /** * Get the application version string. * * @return The complete version (major and minor) string. (eg. \"5.0\") */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPlatform","","`text /** * Get the current platform. * * @return The platform this application is running on * (eg. \"Windows\", \"Macintosh\", \"X11\") */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOscpu","","`text /** * Get the current oscpu. * * @return The oscpu this application is running on */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMisc","","`text /** * Get the application comment misc portion. */`",1138,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1139,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1139,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFileProtocolHandler` to one of its base interfaces.",1139,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1139,{"inputs":[{"name":"self"}],"output":{"name":"nsiprotocolhandler"}}],[11,"NewFileURI","","`text /** * This method constructs a new file URI * * @param aFile nsIFile * @return reference to a new nsIURI object */`",1139,null],[11,"GetURLSpecFromFile","","`text /** * Converts the nsIFile to the corresponding URL string. NOTE: under * some platforms this is a lossy conversion (e.g., Mac Carbon build). * If the nsIFile is a local file, then the result will be a file:// * URL string. * * The resulting string may contain URL-escaped characters. * NOTE: Callers should use getURLSpecFromActualFile or * getURLSpecFromDirFile if possible, for performance reasons. */`",1139,null],[11,"GetURLSpecFromActualFile","","`text /** * Converts the nsIFile to the corresponding URL string. Should * only be called on files which are not directories. Otherwise * identical to getURLSpecFromFile, but is usually more efficient. * WARNING: This restriction may not be enforced at runtime! */`",1139,null],[11,"GetURLSpecFromDir","","`text /** * Converts the nsIFile to the corresponding URL string. Should * only be called on files which are directories. Otherwise * identical to getURLSpecFromFile, but is usually more efficient. * WARNING: This restriction may not be enforced at runtime! */`",1139,null],[11,"GetFileFromURLSpec","","`text /** * Converts the URL string into the corresponding nsIFile if possible. * A local file will be created if the URL string begins with file://. */`",1139,null],[11,"ReadURLFile","","`text /** * Takes a local file and tries to interpret it as an internet shortcut * (e.g. .url files on windows). * @param file The local file to read * @return The URI the file refers to * * @throw NS_ERROR_NOT_AVAILABLE if the OS does not support such files. * @throw NS_ERROR_NOT_AVAILABLE if this file is not an internet shortcut. */`",1139,null],[11,"addref","","",1140,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1140,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHTTPHeaderListener` to one of its base interfaces.",1140,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1140,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NewResponseHeader","","`text /** * Called for each HTTP Response header. * NOTE: You must copy the values of the params. */`",1140,null],[11,"StatusLine","","`text /** * Called once for the HTTP Response status line. * Value does NOT include a terminating newline. * NOTE: You must copy this value. */`",1140,null],[11,"addref","","",1141,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1141,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClipboardOwner` to one of its base interfaces.",1141,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1141,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LosingOwnership","","`text /** * Notifies the owner of the clipboard transferable that the * transferable is being removed from the clipboard * * @param aTransferable The transferable * @result NS_Ok if no errors */`",1141,null],[11,"addref","","",1142,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1142,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIComponentManager` to one of its base interfaces.",1142,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1142,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClassObject","","`text /** * getClassObject * * Returns the factory object that can be used to create instances of * CID aClass * * @param aClass The classid of the factory that is being requested */`",1142,null],[11,"GetClassObjectByContractID","","`text /** * getClassObjectByContractID * * Returns the factory object that can be used to create instances of * CID aClass * * @param aClass The classid of the factory that is being requested */`",1142,null],[11,"CreateInstance","","`text /** * createInstance * * Create an instance of the CID aClass and return the interface aIID. * * @param aClass : ClassID of object instance requested * @param aDelegate : Used for aggregation * @param aIID : IID of interface requested */`",1142,null],[11,"CreateInstanceByContractID","","`text /** * createInstanceByContractID * * Create an instance of the CID that implements aContractID and return the * interface aIID. * * @param aContractID : aContractID of object instance requested * @param aDelegate : Used for aggregation * @param aIID : IID of interface requested */`",1142,null],[11,"AddBootstrappedManifestLocation","","`text /** * addBootstrappedManifestLocation * * Adds a bootstrapped manifest location on runtime. * * @param aLocation : A directory where chrome.manifest resides, * or an XPI with it on the root. */`",1142,null],[11,"RemoveBootstrappedManifestLocation","","`text /** * removeBootstrappedManifestLocation * * Removes a bootstrapped manifest location on runtime. * * @param aLocation : A directory where chrome.manifest resides, * or an XPI with it on the root. */`",1142,null],[11,"GetManifestLocations","","`text /** * getManifestLocations * * Get an array of nsIURIs of all registered and builtin manifest locations. */`",1142,null],[11,"addref","","",1143,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1143,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoginManagerPrompter` to one of its base interfaces.",1143,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1143,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize the prompter. Must be called before using other interfaces. * * @param aWindow * The window in which the user is doing some login-related action that's * resulting in a need to prompt them for something. The prompt * will be associated with this window (or, if a notification bar * is being used, topmost opener in some cases). * * aWindow can be null if there is no associated window, e.g. in a JSM * or Sandbox. In this case there will be no checkbox to save the login * since the window is needed to know if this is a private context. * * If this window is a content window, the corresponding window and browser * elements will be calculated. If this window is a chrome window, the * corresponding browser element needs to be set using setBrowser. */`",1143,null],[11,"GetBrowser","","`text /** * The browser this prompter is being created for. * This is required if the init function received a chrome window as argument. */`",1143,null],[11,"SetBrowser","","`text /** * The browser this prompter is being created for. * This is required if the init function received a chrome window as argument. */`",1143,null],[11,"GetOpener","","`text /** * The opener that was used to open the window passed to init. * The opener can be used to determine in which window the prompt * should be shown. Must be a content window that is not a frame window, * make sure to pass the top window using e.g. window.top. */`",1143,null],[11,"SetOpener","","`text /** * The opener that was used to open the window passed to init. * The opener can be used to determine in which window the prompt * should be shown. Must be a content window that is not a frame window, * make sure to pass the top window using e.g. window.top. */`",1143,null],[11,"PromptToSavePassword","","`text /** * Ask the user if they want to save a login (Yes, Never, Not Now) * * @param aLogin * The login to be saved. */`",1143,null],[11,"PromptToChangePassword","","`text /** * Ask the user if they want to change a login's password or username. * If the user consents, modifyLogin() will be called. * * @param aOldLogin * The existing login (with the old password). * @param aNewLogin * The new login. */`",1143,null],[11,"PromptToChangePasswordWithUsernames","","`text /** * Ask the user if they want to change the password for one of * multiple logins, when the caller can't determine exactly which * login should be changed. If the user consents, modifyLogin() will * be called. * * @param logins * An array of existing logins. * @param count * (length of the array) * @param aNewLogin * The new login. * * Note: Because the caller does not know the username of the login * to be changed, aNewLogin.username and aNewLogin.usernameField * will be set (using the user's selection) before modifyLogin() * is called. */`",1143,null],[11,"addref","","",1144,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1144,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPromptService` to one of its base interfaces.",1144,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1144,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"BUTTON_POS_0","","`text /** * Button Flags * * The following flags are combined to form the aButtonFlags parameter passed * to confirmEx. See confirmEx for more information on how the flags may be * combined. */ /** * Button Position Flags */`",1144,null],[18,"BUTTON_POS_1","","",1144,null],[18,"BUTTON_POS_2","","",1144,null],[18,"BUTTON_TITLE_OK","","`text /** * Button Title Flags (used to set the labels of buttons in the prompt) */`",1144,null],[18,"BUTTON_TITLE_CANCEL","","",1144,null],[18,"BUTTON_TITLE_YES","","",1144,null],[18,"BUTTON_TITLE_NO","","",1144,null],[18,"BUTTON_TITLE_SAVE","","",1144,null],[18,"BUTTON_TITLE_DONT_SAVE","","",1144,null],[18,"BUTTON_TITLE_REVERT","","",1144,null],[18,"BUTTON_TITLE_IS_STRING","","",1144,null],[18,"BUTTON_POS_0_DEFAULT","","`text /** * Button Default Flags (used to select which button is the default one) */`",1144,null],[18,"BUTTON_POS_1_DEFAULT","","",1144,null],[18,"BUTTON_POS_2_DEFAULT","","",1144,null],[18,"BUTTON_DELAY_ENABLE","","`text /** * Causes the buttons to be initially disabled. They are enabled after a * timeout expires. The implementation may interpret this loosely as the * intent is to ensure that the user does not click through a security dialog * too quickly. Strictly speaking, the implementation could choose to ignore * this flag. */`",1144,null],[18,"STD_OK_CANCEL_BUTTONS","","`text /** * Selects the standard set of OK/Cancel buttons. */`",1144,null],[18,"STD_YES_NO_BUTTONS","","`text /** * Selects the standard set of Yes/No buttons. */`",1144,null],[11,"Alert","","`text /** * Puts up an alert dialog with an OK button. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. */`",1144,null],[11,"AlertCheck","","`text /** * Puts up an alert dialog with an OK button and a labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aCheckMsg * Text to appear with the checkbox. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. */`",1144,null],[11,"Confirm","","`text /** * Puts up a dialog with OK and Cancel buttons. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * * @return true for OK, false for Cancel */`",1144,null],[11,"ConfirmCheck","","`text /** * Puts up a dialog with OK and Cancel buttons and a labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aCheckMsg * Text to appear with the checkbox. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. * * @return true for OK, false for Cancel */`",1144,null],[11,"ConfirmEx","","`text /** * Puts up a dialog with up to 3 buttons and an optional, labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aButtonFlags * A combination of Button Flags. * @param aButton0Title * Used when button 0 uses TITLE_IS_STRING * @param aButton1Title * Used when button 1 uses TITLE_IS_STRING * @param aButton2Title * Used when button 2 uses TITLE_IS_STRING * @param aCheckMsg * Text to appear with the checkbox. Null if no checkbox. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. * * @return index of the button pressed. * * Buttons are numbered 0 - 2. The implementation can decide whether the * sequence goes from right to left or left to right. Button 0 is the * default button unless one of the Button Default Flags is specified. * * A button may use a predefined title, specified by one of the Button Title * Flags values. Each title value can be multiplied by a position value to * assign the title to a particular button. If BUTTON_TITLE_IS_STRING is * used for a button, the string parameter for that button will be used. If * the value for a button position is zero, the button will not be shown. * * In general, aButtonFlags is constructed per the following example: * * aButtonFlags = (BUTTON_POS_0) * (BUTTON_TITLE_AAA) + * (BUTTON_POS_1) * (BUTTON_TITLE_BBB) + * BUTTON_POS_1_DEFAULT; * * where \"AAA\" and \"BBB\" correspond to one of the button titles. */`",1144,null],[11,"Prompt","","`text /** * Puts up a dialog with an edit field and an optional, labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aValue * Contains the default value for the dialog field when this method * is called (null value is ok). Upon return, if the user pressed * OK, then this parameter contains a newly allocated string value. * Otherwise, the parameter's value is unmodified. * @param aCheckMsg * Text to appear with the checkbox. If null, check box will not be shown. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. * * @return true for OK, false for Cancel. */`",1144,null],[11,"PromptUsernameAndPassword","","`text /** * Puts up a dialog with an edit field, a password field, and an optional, * labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aUsername * Contains the default value for the username field when this method * is called (null value is ok). Upon return, if the user pressed OK, * then this parameter contains a newly allocated string value. * Otherwise, the parameter's value is unmodified. * @param aPassword * Contains the default value for the password field when this method * is called (null value is ok). Upon return, if the user pressed OK, * then this parameter contains a newly allocated string value. * Otherwise, the parameter's value is unmodified. * @param aCheckMsg * Text to appear with the checkbox. If null, check box will not be shown. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. * * @return true for OK, false for Cancel. */`",1144,null],[11,"PromptPassword","","`text /** * Puts up a dialog with a password field and an optional, labeled checkbox. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aPassword * Contains the default value for the password field when this method * is called (null value is ok). Upon return, if the user pressed OK, * then this parameter contains a newly allocated string value. * Otherwise, the parameter's value is unmodified. * @param aCheckMsg * Text to appear with the checkbox. If null, check box will not be shown. * @param aCheckState * Contains the initial checked state of the checkbox when this method * is called and the final checked state after this method returns. * * @return true for OK, false for Cancel. */`",1144,null],[11,"Select","","`text /** * Puts up a dialog box which has a list box of strings from which the user * may make a single selection. * * @param aParent * The parent window or null. * @param aDialogTitle * Text to appear in the title of the dialog. * @param aText * Text to appear in the body of the dialog. * @param aCount * The length of the aSelectList array parameter. * @param aSelectList * The list of strings to display. * @param aOutSelection * Contains the index of the selected item in the list when this * method returns true. * * @return true for OK, false for Cancel. */`",1144,null],[11,"PromptAuth","","`boolean promptAuth (in mozIDOMWindowProxy aParent, in nsIChannel aChannel, in uint32_t level, in nsIAuthInformation authInfo, in wstring checkboxLabel, inout boolean checkValue);`",1144,null],[11,"AsyncPromptAuth","","`nsICancelable asyncPromptAuth (in mozIDOMWindowProxy aParent, in nsIChannel aChannel, in nsIAuthPromptCallback aCallback, in nsISupports aContext, in uint32_t level, in nsIAuthInformation authInfo, in wstring checkboxLabel, inout boolean checkValue);`",1144,null],[11,"addref","","",1145,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1145,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSPrimitiveValue` to one of its base interfaces.",1145,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1145,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssvalue"}}],[18,"CSS_UNKNOWN","","`text /** * The nsIDOMCSSPrimitiveValue interface is a datatype for a primitive * CSS value in the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",1145,null],[18,"CSS_NUMBER","","",1145,null],[18,"CSS_PERCENTAGE","","",1145,null],[18,"CSS_EMS","","",1145,null],[18,"CSS_EXS","","",1145,null],[18,"CSS_PX","","",1145,null],[18,"CSS_CM","","",1145,null],[18,"CSS_MM","","",1145,null],[18,"CSS_IN","","",1145,null],[18,"CSS_PT","","",1145,null],[18,"CSS_PC","","",1145,null],[18,"CSS_DEG","","",1145,null],[18,"CSS_RAD","","",1145,null],[18,"CSS_GRAD","","",1145,null],[18,"CSS_MS","","",1145,null],[18,"CSS_S","","",1145,null],[18,"CSS_HZ","","",1145,null],[18,"CSS_KHZ","","",1145,null],[18,"CSS_DIMENSION","","",1145,null],[18,"CSS_STRING","","",1145,null],[18,"CSS_URI","","",1145,null],[18,"CSS_IDENT","","",1145,null],[18,"CSS_ATTR","","",1145,null],[18,"CSS_COUNTER","","",1145,null],[18,"CSS_RECT","","",1145,null],[18,"CSS_RGBCOLOR","","",1145,null],[11,"GetPrimitiveType","","`readonly attribute unsigned short primitiveType;`",1145,null],[11,"SetFloatValue","","`void setFloatValue (in unsigned short unitType, in float floatValue) raises (DOMException);`",1145,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetFloatValue","","`float getFloatValue (in unsigned short unitType) raises (DOMException);`",1145,null],[11,"SetStringValue","","`void setStringValue (in unsigned short stringType, in DOMString stringValue) raises (DOMException);`",1145,{"inputs":[{"name":"self"},{"name":"uint16_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetStringValue","","`DOMString getStringValue () raises (DOMException);`",1145,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCounterValue","","`nsIDOMCounter getCounterValue () raises (DOMException);`",1145,null],[11,"GetRectValue","","`nsIDOMRect getRectValue () raises (DOMException);`",1145,null],[11,"addref","","",1146,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1146,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFNode` to one of its base interfaces.",1146,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1146,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"EqualsNode","","`boolean EqualsNode (in nsIRDFNode aNode);`",1146,null],[11,"addref","","",1147,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1147,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `imgINotificationObserver` to one of its base interfaces.",1147,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1147,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SIZE_AVAILABLE","","",1147,null],[18,"FRAME_UPDATE","","",1147,null],[18,"FRAME_COMPLETE","","",1147,null],[18,"LOAD_COMPLETE","","",1147,null],[18,"DECODE_COMPLETE","","",1147,null],[18,"DISCARD","","",1147,null],[18,"UNLOCKED_DRAW","","",1147,null],[18,"IS_ANIMATED","","",1147,null],[18,"HAS_TRANSPARENCY","","",1147,null],[11,"addref","","",1148,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1148,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMediaDevice` to one of its base interfaces.",1148,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1148,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`readonly attribute DOMString type;`",1148,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`readonly attribute DOMString name;`",1148,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetId","","`readonly attribute DOMString id;`",1148,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetMediaSource","","`readonly attribute DOMString mediaSource;`",1148,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRawId","","`readonly attribute DOMString rawId;`",1148,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetScary","","`readonly attribute boolean scary;`",1148,null],[11,"addref","","",1149,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1149,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGetUserMediaDevicesSuccessCallback` to one of its base interfaces.",1149,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1149,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSuccess","","`void onSuccess (in nsIVariant devices);`",1149,null],[11,"addref","","",1150,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1150,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGetUserMediaSuccessCallback` to one of its base interfaces.",1150,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1150,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnSuccess","","`void onSuccess (in nsISupports value);`",1150,null],[11,"addref","","",1151,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1151,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMGetUserMediaErrorCallback` to one of its base interfaces.",1151,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1151,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnError","","`void onError (in nsISupports error);`",1151,null],[11,"addref","","",1152,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1152,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteInput` to one of its base interfaces.",1152,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1152,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TEXTVALUE_REASON_UNKNOWN","","",1152,null],[18,"TEXTVALUE_REASON_COMPLETEDEFAULT","","",1152,null],[18,"TEXTVALUE_REASON_COMPLETESELECTED","","",1152,null],[18,"TEXTVALUE_REASON_REVERT","","",1152,null],[18,"TEXTVALUE_REASON_ENTERMATCH","","",1152,null],[11,"GetPopup","","`readonly attribute nsIAutoCompletePopup popup;`",1152,null],[11,"GetController","","`readonly attribute nsIAutoCompleteController controller;`",1152,null],[11,"GetPopupOpen","","`attribute boolean popupOpen;`",1152,null],[11,"SetPopupOpen","","`attribute boolean popupOpen;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDisableAutoComplete","","`attribute boolean disableAutoComplete;`",1152,null],[11,"SetDisableAutoComplete","","`attribute boolean disableAutoComplete;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCompleteDefaultIndex","","`attribute boolean completeDefaultIndex;`",1152,null],[11,"SetCompleteDefaultIndex","","`attribute boolean completeDefaultIndex;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCompleteSelectedIndex","","`attribute boolean completeSelectedIndex;`",1152,null],[11,"SetCompleteSelectedIndex","","`attribute boolean completeSelectedIndex;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetForceComplete","","`attribute boolean forceComplete;`",1152,null],[11,"SetForceComplete","","`attribute boolean forceComplete;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMinResultsForPopup","","`attribute unsigned long minResultsForPopup;`",1152,null],[11,"SetMinResultsForPopup","","`attribute unsigned long minResultsForPopup;`",1152,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetMaxRows","","`attribute unsigned long maxRows;`",1152,null],[11,"SetMaxRows","","`attribute unsigned long maxRows;`",1152,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetShowCommentColumn","","`attribute boolean showCommentColumn;`",1152,null],[11,"SetShowCommentColumn","","`attribute boolean showCommentColumn;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetShowImageColumn","","`attribute boolean showImageColumn;`",1152,null],[11,"SetShowImageColumn","","`attribute boolean showImageColumn;`",1152,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTimeout","","`attribute unsigned long timeout;`",1152,null],[11,"SetTimeout","","`attribute unsigned long timeout;`",1152,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetSearchParam","","`attribute AString searchParam;`",1152,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSearchParam","","`attribute AString searchParam;`",1152,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSearchCount","","`readonly attribute unsigned long searchCount;`",1152,null],[11,"GetSearchAt","","`ACString getSearchAt (in unsigned long index);`",1152,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetTextValue","","`attribute AString textValue;`",1152,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTextValue","","`attribute AString textValue;`",1152,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTextValueWithReason","","`void setTextValueWithReason (in AString aValue, in unsigned short aReason);`",1152,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetSelectionStart","","`readonly attribute long selectionStart;`",1152,null],[11,"GetSelectionEnd","","`readonly attribute long selectionEnd;`",1152,null],[11,"SelectTextRange","","`void selectTextRange (in long startIndex, in long endIndex);`",1152,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnSearchBegin","","`void onSearchBegin ();`",1152,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnSearchComplete","","`void onSearchComplete ();`",1152,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnTextEntered","","`boolean onTextEntered ([optional] in nsIDOMEvent aEvent);`",1152,null],[11,"OnTextReverted","","`boolean onTextReverted ();`",1152,null],[11,"GetConsumeRollupEvent","","`readonly attribute boolean consumeRollupEvent;`",1152,null],[11,"GetInPrivateContext","","`readonly attribute boolean inPrivateContext;`",1152,null],[11,"GetNoRollupOnCaretMove","","`readonly attribute boolean noRollupOnCaretMove;`",1152,null],[11,"GetUserContextId","","`text /** * The userContextId of the current browser. */`",1152,null],[11,"addref","","",1153,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1153,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleRelation` to one of its base interfaces.",1153,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1153,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"RELATION_LABELLED_BY","","`text /** * This object is labelled by a target object. */`",1153,null],[18,"RELATION_LABEL_FOR","","`text /** * This object is label for a target object. */`",1153,null],[18,"RELATION_DESCRIBED_BY","","`text /** * This object is described by the target object. */`",1153,null],[18,"RELATION_DESCRIPTION_FOR","","`text /** * This object is describes the target object. */`",1153,null],[18,"RELATION_NODE_CHILD_OF","","`text /** * This object is a child of a target object. */`",1153,null],[18,"RELATION_NODE_PARENT_OF","","`text /** * This object is a parent of a target object. A dual relation to * RELATION_NODE_CHILD_OF */`",1153,null],[18,"RELATION_CONTROLLED_BY","","`text /** * Some attribute of this object is affected by a target object. */`",1153,null],[18,"RELATION_CONTROLLER_FOR","","`text /** * This object is interactive and controls some attribute of a target object. */`",1153,null],[18,"RELATION_FLOWS_TO","","`text /** * Content flows from this object to a target object, i.e. has content that * flows logically to another object in a sequential way, e.g. text flow. */`",1153,null],[18,"RELATION_FLOWS_FROM","","`text /** * Content flows to this object from a target object, i.e. has content that * flows logically from another object in a sequential way, e.g. text flow. */`",1153,null],[18,"RELATION_MEMBER_OF","","`text /** * This object is a member of a group of one or more objects. When there is * more than one object in the group each member may have one and the same * target, e.g. a grouping object. It is also possible that each member has * multiple additional targets, e.g. one for every other member in the group. */`",1153,null],[18,"RELATION_SUBWINDOW_OF","","`text /** * This object is a sub window of a target object. */`",1153,null],[18,"RELATION_EMBEDS","","`text /** * This object embeds a target object. This relation can be used on the * OBJID_CLIENT accessible for a top level window to show where the content * areas are. */`",1153,null],[18,"RELATION_EMBEDDED_BY","","`text /** * This object is embedded by a target object. */`",1153,null],[18,"RELATION_POPUP_FOR","","`text /** * This object is a transient component related to the target object. When * this object is activated the target object doesn't lose focus. */`",1153,null],[18,"RELATION_PARENT_WINDOW_OF","","`text /** * This object is a parent window of the target object. */`",1153,null],[18,"RELATION_DEFAULT_BUTTON","","`text /** * Part of a form/dialog with a related default button. It is used for * MSAA/XPCOM, it isn't for IA2 or ATK. */`",1153,null],[18,"RELATION_CONTAINING_DOCUMENT","","`text /** * The target object is the containing document object. */`",1153,null],[18,"RELATION_CONTAINING_TAB_PANE","","`text /** * The target object is the topmost containing document object in the tab pane. */`",1153,null],[18,"RELATION_CONTAINING_WINDOW","","`text /** * The target object is the containing window object. */`",1153,null],[18,"RELATION_CONTAINING_APPLICATION","","`text /** * The target object is the containing application object. */`",1153,null],[18,"RELATION_DETAILS","","`text /** * The target object provides the detailed, extended description for this * object. It provides more detailed information than would normally be * provided using the DESCRIBED_BY relation. A common use for this relation is * in digital publishing where an extended description needs to be conveyed in * a book that requires structural markup or the embedding of other technology * to provide illustrative content. */`",1153,null],[18,"RELATION_DETAILS_FOR","","`text /** * This object provides the detailed, extended description for the target * object. See DETAILS relation. */`",1153,null],[18,"RELATION_ERRORMSG","","`text /** * The target object is the error message for this object. */`",1153,null],[18,"RELATION_ERRORMSG_FOR","","`text /** * This object is the error message for the target object. */`",1153,null],[11,"GetRelationType","","`text /** * Returns the type of the relation. */`",1153,null],[11,"GetTargetsCount","","`text /** * Returns the number of targets for this relation. */`",1153,null],[11,"GetTarget","","`text /** * Returns one accessible relation target. * @param index - 0 based index of relation target. */`",1153,null],[11,"GetTargets","","`text /** * Returns multiple accessible relation targets. */`",1153,null],[11,"addref","","",1154,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1154,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextInputProcessorNotification` to one of its base interfaces.",1154,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1154,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * type attribute represents what's notified or requested. Value must be * one of following values: * * \"request-to-commit\" (required to be handled) * This is requested when Gecko believes that active composition should be * committed. nsITextInputProcessorCallback::onNotify() has to handle this * notification. * * \"request-to-cancel\" (required to be handled) * This is requested when Gecko believes that active composition should be * canceled. I.e., composition should be committed with empty string. * nsITextInputProcessorCallback::onNotify() has to handle this * notification. * * \"notify-end-input-transaction\" (optional) * This is notified when the callback is detached from * nsITextInputProcessor. I.e., the TextInputProcessor lost the rights * to input text and needs to call .beginInputTransaction() before next * input. * * \"notify-focus\" (optional) * This is notified when an editable editor gets focus and Gecko starts * to observe changes in the content. E.g., selection changes. * IME shouldn't change DOM tree, focus nor something when this is notified. * * \"notify-blur\" (optional) * This is notified when an editable editor loses focus and Gecko stops * observing the changes in the content. * * \"notify-text-change\" (optional) * This is notified when text in the focused editor is modified. * Some attributes below are available to retrieve the detail. * IME shouldn't change DOM tree, focus nor something when this is notified. * Note that when there is no chance to notify you of some text changes * safely, this represents all changes as a change. * * \"notify-selection-change\" (optional) * This is notified when selection in the focused editor is changed. * Some attributes below are available to retrieve the detail. * IME shouldn't change DOM tree, focus nor something when this is notified. * Note that when there was no chance to notify you of this safely, this * represents the latest selection change. * * \"notify-position-change\" (optional) * This is notified when layout is changed in the editor or the window * is moved. * IME shouldn't change DOM tree, focus nor something when this is notified. * Note that when there was no chance to notify you of this safely, this * represents the latest layout change. */`",1154,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOffset","","`text /** * Be careful, line breakers in the editor are treated as native line * breakers. I.e., on Windows, a line breaker is \"\\r\\n\" (CRLF). On the * others, it is \"\\n\" (LF). If you want TextInputProcessor to treat line * breakers on Windows as XP line breakers (LF), please file a bug with * the reason why you need the behavior. */ /** * This attribute has a valid value when type is \"notify-text-change\" or * \"notify-selection-change\". * This is offset of the start of modified text range if type is * \"notify-text-change\". Or offset of start of selection if type is * \"notify-selection-change\". */`",1154,null],[11,"GetText","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * This is selected text. I.e., the length is selected length and * it's empty if the selection is collapsed. */`",1154,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCollapsed","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * This is set to true when the selection is collapsed. Otherwise, false. */`",1154,null],[11,"GetLength","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * This is selected length. I.e., if this is 0, collapsed is set to true. */`",1154,null],[11,"GetReversed","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * When selection is created from latter point to former point, this is * set to true. Otherwise, false. * I.e., if this is true, offset + length is the anchor of selection. */`",1154,null],[11,"GetWritingMode","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * This indicates the start of the selection's writing mode. * The value can be \"horizontal-tb\", \"vertical-rl\" or \"vertical-lr\". */`",1154,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetCausedByComposition","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * If the selection change was caused by composition, this is set to true. * Otherwise, false. */`",1154,null],[11,"GetCausedBySelectionEvent","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * If the selection change was caused by selection event, this is set to true. * Otherwise, false. */`",1154,null],[11,"GetOccurredDuringComposition","","`text /** * This attribute has a valid value when type is \"notify-selection-change\". * If the selection change occurred during composition, this is set to true. * Otherwise, false. */`",1154,null],[11,"GetRemovedLength","","`text /** * This attribute has a valid value when type is \"notify-text-change\". * This is removed text length by the change(s). If this is empty, new text * was just inserted. Otherwise, the text is replaced with new text. */`",1154,null],[11,"GetAddedLength","","`text /** * This attribute has a valid value when type is \"notify-text-change\". * This is added text length by the change(s). If this is empty, old text * was just deleted. Otherwise, the text replaces the old text. */`",1154,null],[11,"GetCausedOnlyByComposition","","`text /** * This attribute has a valid value when type is \"notify-text-change\". * If the text change(s) was caused only by composition, this is set to true. * Otherwise, false. I.e., if one of text changes are caused by JS or * modifying without composition, this is set to false. */`",1154,null],[11,"GetIncludingChangesDuringComposition","","`text /** * This attribute has a valid value when type is \"notify-text-change\". * If at least one text change not caused by composition occurred during * composition, this is set to true. Otherwise, false. * Note that this is set to false when new change is caused by neither * composition nor occurred during composition because it's outdated for * new composition. * In other words, when text changes not caused by composition occurred * during composition and it may cause committing composition, this is * set to true. */`",1154,null],[11,"GetIncludingChangesWithoutComposition","","`text /** * This attribute has a valid value when type is \"notify-text-change\". * If at least one text change occurred when there was no composition, this * is set to true. Otherwise, false. */`",1154,null],[11,"addref","","",1155,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1155,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextInputProcessorCallback` to one of its base interfaces.",1155,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1155,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnNotify","","`text /** * When Gecko notifies IME of something or requests something to IME, * this is called. * * @param aTextInputProcessor Reference to the nsITextInputProcessor service * which is the original receiver of the request * or notification. * @param aNotification Stores type of notifications and additional * information. * @return Return true if it succeeded or does nothing. * Otherwise, return false. * * Example #1 The simplest implementation of nsITextInputProcessorCallback is: * * function simpleCallback(aTIP, aNotification) * { * try { * switch (aNotification.type) { * case \"request-to-commit\": * aTIP.commitComposition(); * break; * case \"request-to-cancel\": * aTIP.cancelComposition(); * break; * } * } catch (e) { * return false; * } * return true; * } * * var TIP = Components.classes[\"@mozilla.org/text-input-processor;1\"]. * createInstance(Components.interfaces.nsITextInputProcessor); * if (!TIP.init(window, simpleCallback)) { * return; * } */`",1155,null],[11,"addref","","",1156,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1156,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPluginInputStream` to one of its base interfaces.",1156,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1156,{"inputs":[{"name":"self"}],"output":{"name":"nsiinputstream"}}],[11,"GetLastModified","","`text /** * Corresponds to NPStream's lastmodified field.) */`",1156,null],[11,"addref","","",1157,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1157,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDeviceSensorData` to one of its base interfaces.",1157,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1157,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_ORIENTATION","","",1157,null],[18,"TYPE_ACCELERATION","","",1157,null],[18,"TYPE_PROXIMITY","","",1157,null],[18,"TYPE_LINEAR_ACCELERATION","","",1157,null],[18,"TYPE_GYROSCOPE","","",1157,null],[18,"TYPE_LIGHT","","",1157,null],[18,"TYPE_ROTATION_VECTOR","","",1157,null],[18,"TYPE_GAME_ROTATION_VECTOR","","",1157,null],[11,"GetType","","`readonly attribute unsigned long type;`",1157,null],[11,"GetX","","`readonly attribute double x;`",1157,null],[11,"GetY","","`readonly attribute double y;`",1157,null],[11,"GetZ","","`readonly attribute double z;`",1157,null],[11,"addref","","",1158,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1158,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDeviceSensors` to one of its base interfaces.",1158,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1158,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HasWindowListener","","`text /** * Returns true if the given window has any listeners of the given type */`",1158,null],[11,"AddWindowListener","","`[noscript] void addWindowListener (in unsigned long aType, in nsIDOMWindow aWindow);`",1158,null],[11,"RemoveWindowListener","","`[noscript] void removeWindowListener (in unsigned long aType, in nsIDOMWindow aWindow);`",1158,null],[11,"RemoveWindowAsListener","","`[noscript] void removeWindowAsListener (in nsIDOMWindow aWindow);`",1158,null],[11,"addref","","",1159,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1159,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageRow` to one of its base interfaces.",1159,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1159,{"inputs":[{"name":"self"}],"output":{"name":"mozistoragevaluearray"}}],[11,"GetResultByIndex","","`text /** * Obtains the result of a given column specified by aIndex. * * @param aIndex * Zero-based index of the result to get from the tuple. * @returns the result of the specified column. */`",1159,null],[11,"GetResultByName","","`text /** * Obtains the result of a given column specified by aName. * * @param aName * Name of the result to get from the tuple. * @returns the result of the specified column. * @note The name of a result column is the value of the \"AS\" clause for that * column. If there is no AS clause then the name of the column is * unspecified and may change from one release to the next. */`",1159,null],[11,"addref","","",1160,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1160,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISound` to one of its base interfaces.",1160,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1160,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EVENT_NEW_MAIL_RECEIVED","","`text /** * In some situations, playEventSound will be called. Then, each * implementations will play a system sound for the event if it's necessary. * * NOTE: Don't change these values because they are used in * nsPIPromptService.idl. So, if they are changed, that makes big impact for * the embedders. */`",1160,null],[18,"EVENT_ALERT_DIALOG_OPEN","","",1160,null],[18,"EVENT_CONFIRM_DIALOG_OPEN","","",1160,null],[18,"EVENT_PROMPT_DIALOG_OPEN","","",1160,null],[18,"EVENT_SELECT_DIALOG_OPEN","","",1160,null],[18,"EVENT_MENU_EXECUTE","","",1160,null],[18,"EVENT_MENU_POPUP","","",1160,null],[18,"EVENT_EDITOR_MAX_LEN","","",1160,null],[11,"Play","","`void play (in nsIURL aURL);`",1160,null],[11,"PlaySystemSound","","`text /** * for playing system sounds * * NS_SYSSOUND_* params are obsolete. The new events will not be supported by * this method. You should use playEventSound method instaed. */`",1160,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"Beep","","`void beep ();`",1160,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Init","","`text /** * Not strictly necessary, but avoids delay before first sound. * The various methods on nsISound call Init() if they need to. */`",1160,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PlayEventSound","","`void playEventSound (in unsigned long aEventId);`",1160,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1161,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1161,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSServiceInfo` to one of its base interfaces.",1161,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1161,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetHost","","`text /** * The host name of the service. (E.g. \"Android.local.\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetHost","","`text /** * The host name of the service. (E.g. \"Android.local.\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAddress","","`text /** * The IP address of the service. * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetAddress","","`text /** * The IP address of the service. * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * The port number of the service. (E.g. 80) * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,null],[11,"SetPort","","`text /** * The port number of the service. (E.g. 80) * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"GetServiceName","","`text /** * The service name of the service for display. (E.g. \"My TV\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetServiceName","","`text /** * The service name of the service for display. (E.g. \"My TV\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetServiceType","","`text /** * The type of the service. (E.g. \"_http._tcp\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetServiceType","","`text /** * The type of the service. (E.g. \"_http._tcp\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetDomainName","","`text /** * The domain name of the service. (E.g. \"local.\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetDomainName","","`text /** * The domain name of the service. (E.g. \"local.\") * @throws NS_ERROR_NOT_INITIALIZED when getting unset value. */`",1161,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAttributes","","`text /** * The attributes of the service. */`",1161,null],[11,"SetAttributes","","`text /** * The attributes of the service. */`",1161,null],[11,"addref","","",1162,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1162,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSServiceDiscoveryListener` to one of its base interfaces.",1162,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1162,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDiscoveryStarted","","`text /** * Callback when the discovery begins. * @param aServiceType * the service type of |startDiscovery|. */`",1162,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnDiscoveryStopped","","`text /** * Callback when the discovery ends. * @param aServiceType * the service type of |startDiscovery|. */`",1162,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnServiceFound","","`text /** * Callback when the a service is found. * @param aServiceInfo * the info about the found service, where |serviceName|, |aServiceType|, and |domainName| are set. */`",1162,null],[11,"OnServiceLost","","`text /** * Callback when the a service is lost. * @param aServiceInfo * the info about the lost service, where |serviceName|, |aServiceType|, and |domainName| are set. */`",1162,null],[11,"OnStartDiscoveryFailed","","`text /** * Callback when the discovery cannot start. * @param aServiceType * the service type of |startDiscovery|. * @param aErrorCode * the error code. */`",1162,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnStopDiscoveryFailed","","`text /** * Callback when the discovery cannot stop. * @param aServiceType * the service type of |startDiscovery|. * @param aErrorCode * the error code. */`",1162,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1163,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1163,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSRegistrationListener` to one of its base interfaces.",1163,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1163,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ERROR_SERVICE_NOT_RUNNING","","",1163,null],[11,"OnServiceRegistered","","`text /** * Callback when the service is registered successfully. * @param aServiceInfo * the info about the registered service, * where |serviceName|, |aServiceType|, and |domainName| are set. */`",1163,null],[11,"OnServiceUnregistered","","`text /** * Callback when the service is unregistered successfully. * @param aServiceInfo * the info about the unregistered service. */`",1163,null],[11,"OnRegistrationFailed","","`text /** * Callback when the service cannot be registered. * @param aServiceInfo * the info about the service to be registered. * @param aErrorCode * the error code. */`",1163,null],[11,"OnUnregistrationFailed","","`text /** * Callback when the service cannot be unregistered. * @param aServiceInfo * the info about the registered service. * @param aErrorCode * the error code. */`",1163,null],[11,"addref","","",1164,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1164,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSServiceResolveListener` to one of its base interfaces.",1164,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1164,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnServiceResolved","","`text /** * Callback when the service is resolved successfully. * @param aServiceInfo * the info about the resolved service, where |host| and |port| are set. */`",1164,null],[11,"OnResolveFailed","","`text /** * Callback when the service cannot be resolved. * @param aServiceInfo * the info about the service to be resolved. * @param aErrorCode * the error code. */`",1164,null],[11,"addref","","",1165,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1165,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSServiceDiscovery` to one of its base interfaces.",1165,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1165,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"StartDiscovery","","`text /** * Browse for instances of a service. * @param aServiceType * the service type to be discovered, E.g. \"_http._tcp\". * @param aListener * callback interface for discovery notifications. * @return An object that can be used to cancel the service discovery. */`",1165,null],[11,"RegisterService","","`text /** * Register a service that is discovered via |startDiscovery| and |resolveService| calls. * @param aServiceInfo * the service information to be registered. * |port| and |aServiceType| are required attributes. * @param aListener * callback interface for registration notifications. * @return An object that can be used to cancel the service registration. */`",1165,null],[11,"ResolveService","","`text /** * Resolve a service name discovered via |startDiscovery| to a target host name, port number. * @param aServiceInfo * the service information to be registered. * |serviceName|, |aServiceType|, and |domainName| are required attributes as reported to the |onServiceFound| callback. * @param aListener * callback interface for registration notifications. */`",1165,null],[11,"addref","","",1166,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1166,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMDocumentType` to one of its base interfaces.",1166,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1166,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"GetName","","`text /** * Each Document has a doctype attribute whose value is either null * or a DocumentType object. * The nsIDOMDocumentType interface in the DOM Core provides an * interface to the list of entities that are defined for the document. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",1166,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPublicId","","`readonly attribute DOMString publicId;`",1166,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSystemId","","`readonly attribute DOMString systemId;`",1166,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetInternalSubset","","`readonly attribute DOMString internalSubset;`",1166,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1167,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1167,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationCacheNamespace` to one of its base interfaces.",1167,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1167,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NAMESPACE_BYPASS","","`text /** * Items matching this namespace can be fetched from the network * when loading from this cache. The \"data\" attribute is unused. */`",1167,null],[18,"NAMESPACE_FALLBACK","","`text /** * Items matching this namespace can be fetched from the network * when loading from this cache. If the load fails, the cache entry * specified by the \"data\" attribute should be loaded instead. */`",1167,null],[18,"NAMESPACE_OPPORTUNISTIC","","`text /** * Items matching this namespace should be cached * opportunistically. Successful toplevel loads of documents * in this namespace should be placed in the application cache. * Namespaces specifying NAMESPACE_OPPORTUNISTIC may also specify * NAMESPACE_FALLBACK to supply a fallback entry. */`",1167,null],[11,"Init","","`text /** * Initialize the namespace. */`",1167,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetItemType","","`text /** * The namespace type. */`",1167,null],[11,"GetNamespaceSpec","","`text /** * The prefix of this namespace. This should be the asciiSpec of the * URI prefix. */`",1167,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetData","","`text /** * Data associated with this namespace, such as a fallback. URI data should * use the asciiSpec of the URI. */`",1167,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1168,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1168,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationCache` to one of its base interfaces.",1168,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1168,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ITEM_MANIFEST","","`text /** * Entries in an application cache can be marked as one or more of * the following types. */`",1168,null],[18,"ITEM_EXPLICIT","","",1168,null],[18,"ITEM_IMPLICIT","","",1168,null],[18,"ITEM_DYNAMIC","","",1168,null],[18,"ITEM_FOREIGN","","",1168,null],[18,"ITEM_FALLBACK","","",1168,null],[18,"ITEM_OPPORTUNISTIC","","",1168,null],[11,"InitAsHandle","","`text /** * Init this application cache instance to just hold the group ID and * the client ID to work just as a handle to the real cache. Used on * content process to simplify the application cache code. */`",1168,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetManifestURI","","`text /** * URI of the manfiest specifying this application cache. **/`",1168,null],[11,"GetGroupID","","`text /** * The group ID for this cache group. It is an internally generated string * and cannot be used as manifest URL spec. **/`",1168,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetClientID","","`text /** * The client ID for this application cache. Clients can open a * session with nsICacheService::createSession() using this client * ID and a storage policy of STORE_OFFLINE to access this cache. */`",1168,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetActive","","`text /** * TRUE if the cache is the active cache for this group. */`",1168,null],[11,"GetUsage","","`text /** * The disk usage of the application cache, in bytes. */`",1168,null],[11,"Activate","","`text /** * Makes this cache the active application cache for this group. * Future loads associated with this group will come from this * cache. Other caches from this cache group will be deactivated. */`",1168,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Discard","","`text /** * Discard this application cache. Removes all cached resources * for this cache. If this is the active application cache for the * group, the group will be removed. */`",1168,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"MarkEntry","","`text /** * Adds item types to a given entry. */`",1168,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"UnmarkEntry","","`text /** * Removes types from a given entry. If the resulting entry has * no types left, the entry is removed. */`",1168,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetTypes","","`text /** * Gets the types for a given entry. */`",1168,null],[11,"GatherEntries","","`text /** * Returns any entries in the application cache whose type matches * one or more of the bits in typeBits. */`",1168,null],[11,"AddNamespaces","","`text /** * Add a set of namespace entries to the application cache. * @param namespaces * An nsIArray of nsIApplicationCacheNamespace entries. */`",1168,null],[11,"GetMatchingNamespace","","`text /** * Get the most specific namespace matching a given key. */`",1168,null],[11,"GetProfileDirectory","","`text /** * If set, this offline cache is placed in a different directory * than the current application profile. */`",1168,null],[11,"addref","","",1169,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1169,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExternalHelperAppService` to one of its base interfaces.",1169,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1169,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DoContent","","`text /** * Binds an external helper application to a stream listener. The caller * should pump data into the returned stream listener. When the OnStopRequest * is issued, the stream listener implementation will launch the helper app * with this data. * @param aMimeContentType The content type of the incoming data * @param aRequest The request corresponding to the incoming data * @param aContentContext Used in processing content document refresh * headers after target content is downloaded. Note in e10s land * this is likely a CPOW that points to a window in the child process. * @param aForceSave True to always save this content to disk, regardless of * nsIMIMEInfo and other such influences. * @param aWindowContext Used in parenting helper app dialogs, usually * points to the parent browser window. This parameter may be null, * in which case dialogs will be parented to aContentContext. * @return A nsIStreamListener which the caller should pump the data into. */`",1169,null],[11,"ApplyDecodingForExtension","","`text /** * Returns true if data from a URL with this extension combination * is to be decoded from aEncodingType prior to saving or passing * off to helper apps, false otherwise. */`",1169,null],[11,"addref","","",1170,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1170,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsPIExternalAppLauncher` to one of its base interfaces.",1170,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1170,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DeleteTemporaryFileOnExit","","`text /** * mscott --> eventually I should move this into a new service so other * consumers can add temporary files they want deleted on exit. * @param aTemporaryFile A temporary file we should delete on exit. */`",1170,null],[11,"DeleteTemporaryPrivateFileWhenPossible","","`text /** * Delete a temporary file created inside private browsing mode when * the private browsing mode has ended. */`",1170,null],[11,"addref","","",1171,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1171,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHelperAppLauncher` to one of its base interfaces.",1171,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1171,{"inputs":[{"name":"self"}],"output":{"name":"nsicancelable"}}],[11,"GetMIMEInfo","","`text /** * The mime info object associated with the content type this helper app * launcher is currently attempting to load */`",1171,null],[11,"GetSource","","`text /** * The source uri */`",1171,null],[11,"GetSuggestedFileName","","`text /** * The suggested name for this file */`",1171,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SaveToDisk","","`text /** * Saves the final destination of the file. Does not actually perform the * save. * NOTE: This will release the reference to the * nsIHelperAppLauncherDialog. */`",1171,null],[11,"LaunchWithApplication","","`text /** * Remembers that aApplication should be used to launch this content. Does * not actually launch the application. * NOTE: This will release the reference to the nsIHelperAppLauncherDialog. * @param aApplication nsIFile corresponding to the location of the application to use. * @param aRememberThisPreference TRUE if we should remember this choice. */`",1171,null],[11,"SaveDestinationAvailable","","`text /** * Callback invoked by nsIHelperAppLauncherDialog::promptForSaveToFileAsync * after the user has chosen a file through the File Picker (or dismissed it). * @param aFile The file that was chosen by the user (or null if dialog was dismissed). */`",1171,null],[11,"SetWebProgressListener","","`text /** * The following methods are used by the progress dialog to get or set * information on the current helper app launcher download. * This reference will be released when the download is finished (after the * listener receives the STATE_STOP notification). */`",1171,null],[11,"GetTargetFile","","`text /** * The file we are saving to */`",1171,null],[11,"GetTargetFileIsExecutable","","`text /** * The executable-ness of the target file */`",1171,null],[11,"GetTimeDownloadStarted","","`text /** * Time when the download started */`",1171,null],[11,"GetContentLength","","`text /** * The download content length, or -1 if the length is not available. */`",1171,null],[11,"addref","","",1172,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1172,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULContainerItemElement` to one of its base interfaces.",1172,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1172,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetParentContainer","","`text /** * Returns the parent container if any. */`",1172,null],[11,"addref","","",1173,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1173,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULContainerElement` to one of its base interfaces.",1173,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1173,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulcontaineritemelement"}}],[11,"AppendItem","","`text /** * Creates an item for the given label and value and appends it to the * container. * * @param aLabel - the label for the new item * @param aValue - the value of the new item */`",1173,null],[11,"InsertItemAt","","`text /** * Creates an item for the given label and value and inserts it into the * container at the specified position. * * @param aIndex - the index where the new item will be inserted * @param aLabel - the label for the new item * @param aValue - the value of the new item */`",1173,null],[11,"RemoveItemAt","","`text /** * Removes an item from the container. * * @param aIndex - index of the item to remove */`",1173,null],[11,"GetItemCount","","`text /** * Returns a count of items in the container. */`",1173,null],[11,"GetIndexOfItem","","`text /** * Returns the index of an item or -1 if the item is not in the container. * * @param aItem - the item to determine the index of */`",1173,null],[11,"GetItemAtIndex","","`text /** * Returns the item at a given index or null if the item is not is the * container. * * @param aIndex - the index of the item to return */`",1173,null],[11,"addref","","",1174,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1174,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMText` to one of its base interfaces.",1174,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1174,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcharacterdata"}}],[11,"SplitText","","`text /** * The nsIDOMText interface inherits from nsIDOMCharacterData and represents * the textual content (termed character data in XML) of an Element or Attr. * * For more information on this interface please see * http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html */`",1174,null],[11,"GetWholeText","","`text /** * The concatenation of all logically adjacent text nodes with this text * node, where \"logically adjacent\" consists of all text nodes which can be * reached by traversing the document tree in either direction without * passing an element, comment, or processing-instruction boundary. */`",1174,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1175,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1175,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSValueList` to one of its base interfaces.",1175,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1175,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssvalue"}}],[11,"addref","","",1176,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1176,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULSelectControlItemElement` to one of its base interfaces.",1176,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1176,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDisabled","","`attribute boolean disabled;`",1176,null],[11,"SetDisabled","","`attribute boolean disabled;`",1176,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCrop","","`attribute DOMString crop;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCrop","","`attribute DOMString crop;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetImage","","`attribute DOMString image;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetImage","","`attribute DOMString image;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLabel","","`attribute DOMString label;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetLabel","","`attribute DOMString label;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAccessKey","","`attribute DOMString accessKey;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAccessKey","","`attribute DOMString accessKey;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCommand","","`attribute DOMString command;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCommand","","`attribute DOMString command;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`attribute DOMString value;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute DOMString value;`",1176,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSelected","","`readonly attribute boolean selected;`",1176,null],[11,"GetControl","","`readonly attribute nsIDOMXULSelectControlElement control;`",1176,null],[11,"addref","","",1177,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1177,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJARChannel` to one of its base interfaces.",1177,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1177,{"inputs":[{"name":"self"}],"output":{"name":"nsichannel"}}],[11,"GetIsUnsafe","","`text /** * Returns TRUE if the JAR file is not safe (if the content type reported * by the server for a remote JAR is not of an expected type). Scripting, * redirects, and plugins should be disabled when loading from this * channel. */`",1177,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetJarFile","","`text /** * Returns the JAR file. May be null if the jar is remote. * Setting the JAR file is optional and overrides the JAR * file used for local file JARs. Setting the JAR file after * the channel has been opened is not permitted. */`",1177,null],[11,"SetJarFile","","`text /** * Returns the JAR file. May be null if the jar is remote. * Setting the JAR file is optional and overrides the JAR * file used for local file JARs. Setting the JAR file after * the channel has been opened is not permitted. */`",1177,null],[11,"GetZipEntry","","`text /** * Returns the zip entry if the file is synchronously accessible. * This will work even without opening the channel. */`",1177,null],[11,"EnsureCached","","`text /** * If the JAR file is cached in the JAR cache, returns true and * holds a reference to the cached zip reader to be used when * the channel is read from, ensuring the cached reader will be used. * For a successful read from the cached reader, close() should not * be called on the reader--per nsIZipReader::getZip() documentation. * Returns false if the JAR file is not cached. Calling this method * after the channel has been opened is not permitted. */`",1177,null],[11,"addref","","",1178,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1178,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationChooserFinishedCallback` to one of its base interfaces.",1178,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1178,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Done","","`void done (in nsIHandlerApp handlerApp);`",1178,null],[11,"addref","","",1179,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1179,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationChooser` to one of its base interfaces.",1179,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1179,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize the application chooser picker widget. The application chooser * is not valid until this method is called. * * @param parent nsIDOMWindow parent. This dialog will be dependent * on this parent. parent must be non-null. * @param title The title for the file widget * */`",1179,null],[11,"Open","","`text /** * Open application chooser dialog. * * @param contentType content type of file to open * @param applicationChooserFinishedCallback callback fuction to run when dialog is closed */`",1179,null],[11,"addref","","",1180,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1180,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSMediaRule` to one of its base interfaces.",1180,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1180,{"inputs":[{"name":"self"}],"output":{"name":"nsidomcssconditionrule"}}],[11,"GetMedia","","`readonly attribute nsIDOMMediaList media;`",1180,null],[11,"addref","","",1181,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1181,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITaggingService` to one of its base interfaces.",1181,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1181,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"MAX_TAG_LENGTH","","`text /** * Defines the maximal length of a tag. Related to the bug 407821 * (https://bugzilla.mozilla.org/show_bug.cgi?id=407821) */`",1181,null],[11,"TagURI","","`text /** * Tags a URL with the given set of tags. Current tags set for the URL * persist. Tags in aTags which are already set for the given URL are * ignored. * * @param aURI * the URL to tag. * @param aTags * Array of tags to set for the given URL. Each element within the * array can be either a tag name (non-empty string) or a concrete * itemId of a tag container. * @param [optional] aSource * A change source constant from nsINavBookmarksService::SOURCE_*. * Defaults to SOURCE_DEFAULT if omitted. */`",1181,null],[11,"UntagURI","","`text /** * Removes tags from a URL. Tags from aTags which are not set for the * given URL are ignored. * * @param aURI * the URL to un-tag. * @param aTags * Array of tags to unset. Pass null to remove all tags from the given * url. Each element within the array can be either a tag name * (non-empty string) or a concrete itemId of a tag container. * @param [optional] aSource * A change source constant from nsINavBookmarksService::SOURCE_*. * Defaults to SOURCE_DEFAULT if omitted. */`",1181,null],[11,"GetURIsForTag","","`text /** * Retrieves all URLs tagged with the given tag. * * @param aTag * tag name * @returns Array of uris tagged with aTag. */`",1181,null],[11,"GetTagsForURI","","`text /** * Retrieves all tags set for the given URL. * * @param aURI * a URL. * @returns array of tags (sorted by name). */`",1181,null],[11,"GetAllTags","","`text /** * Retrieves all tags used to tag URIs in the data-base (sorted by name). */`",1181,null],[11,"GetHasTags","","`text /** * Whether any tags exist. * * @note This is faster than allTags.length, since doesn't need to sort tags. */`",1181,null],[11,"addref","","",1182,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1182,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHEntry` to one of its base interfaces.",1182,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1182,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetURI","","`text /** * A readonly property that returns the URI * of the current entry. The object returned is * of type nsIURI */`",1182,null],[11,"GetOriginalURI","","`text /** * A readonly property that returns the original URI of the current entry. * If an entry is the result of a redirect this attribute holds original * URI. The object returned is of type nsIURI */`",1182,null],[11,"SetOriginalURI","","`text /** * A readonly property that returns the original URI of the current entry. * If an entry is the result of a redirect this attribute holds original * URI. The object returned is of type nsIURI */`",1182,null],[11,"GetResultPrincipalURI","","`text /** * URL as stored from nsILoadInfo.resultPrincipalURI. See nsILoadInfo * for more details. */`",1182,null],[11,"SetResultPrincipalURI","","`text /** * URL as stored from nsILoadInfo.resultPrincipalURI. See nsILoadInfo * for more details. */`",1182,null],[11,"GetLoadReplace","","`text /** * This flag remembers whether channel has LOAD_REPLACE set. */`",1182,null],[11,"SetLoadReplace","","`text /** * This flag remembers whether channel has LOAD_REPLACE set. */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`text /** * A readonly property that returns the title * of the current entry. The object returned * is a encoded string */`",1182,null],[11,"GetIsSubFrame","","`text /** * A readonly property that returns a boolean * flag which indicates if the entry was created as a * result of a subframe navigation. This flag will be * 'false' when a frameset page is visited for * the first time. This flag will be 'true' for all * history entries created as a result of a subframe * navigation. */`",1182,null],[11,"SetURI","","`text /** URI for the document */`",1182,null],[11,"GetReferrerURI","","`text /** Referrer URI */`",1182,null],[11,"SetReferrerURI","","`text /** Referrer URI */`",1182,null],[11,"GetReferrerPolicy","","`text /** Referrer policy, holding one of the values (REFERRER_POLICY_*) * defined in nsIHttpChannel. */`",1182,null],[11,"SetReferrerPolicy","","`text /** Referrer policy, holding one of the values (REFERRER_POLICY_*) * defined in nsIHttpChannel. */`",1182,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetContentViewer","","`text /** Content viewer, for fast restoration of presentation */`",1182,null],[11,"SetContentViewer","","`text /** Content viewer, for fast restoration of presentation */`",1182,null],[11,"GetSticky","","`text /** Whether the content viewer is marked \"sticky\" */`",1182,null],[11,"SetSticky","","`text /** Whether the content viewer is marked \"sticky\" */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWindowState","","`text /** Saved state of the global window object */`",1182,null],[11,"SetWindowState","","`text /** Saved state of the global window object */`",1182,null],[11,"AddChildShell","","`text /** * Saved child docshells corresponding to contentViewer. The child shells * are restored as children of the parent docshell, in this order, when the * parent docshell restores a saved presentation. */ /** Append a child shell to the end of our list. */`",1182,null],[11,"ChildShellAt","","`text /** * Get the child shell at |index|; returns null if |index| is out of bounds. */`",1182,null],[11,"ClearChildShells","","`text /** * Clear the child shell list. */`",1182,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRefreshURIList","","`text /** Saved refresh URI list for the content viewer */`",1182,null],[11,"SetRefreshURIList","","`text /** Saved refresh URI list for the content viewer */`",1182,null],[11,"SyncPresentationState","","`text /** * Ensure that the cached presentation members are self-consistent. * If either |contentViewer| or |windowState| are null, then all of the * following members are cleared/reset: * contentViewer, sticky, windowState, viewerBounds, childShells, * refreshURIList. */`",1182,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetTitle","","`text /** Title for the document */`",1182,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPostData","","`text /** Post Data for the document */`",1182,null],[11,"SetPostData","","`text /** Post Data for the document */`",1182,null],[11,"GetLayoutHistoryState","","`text /** LayoutHistoryState for scroll position and form values */`",1182,null],[11,"SetLayoutHistoryState","","`text /** LayoutHistoryState for scroll position and form values */`",1182,null],[11,"InitLayoutHistoryState","","`text /** * Initialises the LayoutHistoryState if it doesn't already exist * and returns a reference to it. */`",1182,null],[11,"GetParent","","`text /** parent of this entry */`",1182,null],[11,"SetParent","","`text /** parent of this entry */`",1182,null],[11,"GetLoadType","","`text /** * The loadType for this entry. This is typically loadHistory except * when reload is pressed, it has the appropriate reload flag */`",1182,null],[11,"SetLoadType","","`text /** * The loadType for this entry. This is typically loadHistory except * when reload is pressed, it has the appropriate reload flag */`",1182,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetID","","`text /** * An ID to help identify this entry from others during * subframe navigation */`",1182,null],[11,"SetID","","`text /** * An ID to help identify this entry from others during * subframe navigation */`",1182,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetCacheKey","","`text /** attribute to set and get the cache key for the entry */`",1182,null],[11,"SetCacheKey","","`text /** attribute to set and get the cache key for the entry */`",1182,null],[11,"GetSaveLayoutStateFlag","","`text /** attribute to indicate whether layoutHistoryState should be saved */`",1182,null],[11,"SetSaveLayoutStateFlag","","`text /** attribute to indicate whether layoutHistoryState should be saved */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetExpirationStatus","","`text /** attribute to indicate whether the page is already expired in cache */`",1182,null],[11,"SetExpirationStatus","","`text /** attribute to indicate whether the page is already expired in cache */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetContentType","","`text /** * attribute to indicate the content-type of the document that this * is a session history entry for */`",1182,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetContentType","","`text /** * attribute to indicate the content-type of the document that this * is a session history entry for */`",1182,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetURIWasModified","","`text /** * If we created this SHEntry via history.pushState or modified it via * history.replaceState, and if we changed the SHEntry's URI via the * push/replaceState call, and if the SHEntry's new URI differs from its * old URI by more than just the hash, then we set this field to true. * * Additionally, if this SHEntry was created by calling pushState from a * SHEntry whose URI was modified, this SHEntry's URIWasModified field is * true. * */`",1182,null],[11,"SetURIWasModified","","`text /** * If we created this SHEntry via history.pushState or modified it via * history.replaceState, and if we changed the SHEntry's URI via the * push/replaceState call, and if the SHEntry's new URI differs from its * old URI by more than just the hash, then we set this field to true. * * Additionally, if this SHEntry was created by calling pushState from a * SHEntry whose URI was modified, this SHEntry's URIWasModified field is * true. * */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetScrollPosition","","`text /** Set/Get scrollers' positon in anchored pages */`",1182,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetScrollPosition","","`void getScrollPosition (out long x, out long y);`",1182,null],[11,"Create","","`text /** Additional ways to create an entry */`",1182,null],[11,"Clone","","`nsISHEntry clone ();`",1182,null],[11,"SetIsSubFrame","","`text /** Attribute that indicates if this entry is for a subframe navigation */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAnyContentViewer","","`text /** Return any content viewer present in or below this node in the nsSHEntry tree. This will differ from contentViewer in the case where a child nsSHEntry has the content viewer for this tree. */`",1182,null],[11,"GetTriggeringPrincipal","","`text /** * Get the principal, if any, that was associated with the channel * that the document that was loaded to create this history entry * came from. */`",1182,null],[11,"SetTriggeringPrincipal","","`text /** * Get the principal, if any, that was associated with the channel * that the document that was loaded to create this history entry * came from. */`",1182,null],[11,"GetPrincipalToInherit","","`text /** * Get the principal, if any, that is used when the inherit flag * is set. */`",1182,null],[11,"SetPrincipalToInherit","","`text /** * Get the principal, if any, that is used when the inherit flag * is set. */`",1182,null],[11,"GetStateData","","`text /** * Get/set data associated with this history state via a pushState() call, * serialized using structured clone. **/`",1182,null],[11,"SetStateData","","`text /** * Get/set data associated with this history state via a pushState() call, * serialized using structured clone. **/`",1182,null],[11,"HasDetachedEditor","","`text /** Returns true if this shistory entry is storing a detached editor. */`",1182,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"IsDynamicallyAdded","","`text /** * Returns true if the related docshell was added because of * dynamic addition of an iframe/frame. */`",1182,null],[11,"HasDynamicallyAddedChild","","`text /** * Returns true if any of the child entries returns true * when isDynamicallyAdded is called on it. */`",1182,null],[11,"GetDocshellID","","`text /** * The history ID of the docshell. */`",1182,null],[11,"SetDocshellID","","`text /** * The history ID of the docshell. */`",1182,null],[11,"DocshellID","","`text /** * Helper method for accessing this value from C++ */`",1182,{"inputs":[{"name":"self"}],"output":{"name":"nsid"}}],[11,"GetBFCacheEntry","","`readonly attribute nsIBFCacheEntry BFCacheEntry;`",1182,null],[11,"HasBFCacheEntry","","`text /** * Does this SHEntry point to the given BFCache entry? If so, evicting * the BFCache entry will evict the SHEntry, since the two entries * correspond to the same document. */`",1182,null],[11,"AdoptBFCacheEntry","","`text /** * Adopt aEntry's BFCacheEntry, so now both this and aEntry point to * aEntry's BFCacheEntry. */`",1182,null],[11,"AbandonBFCacheEntry","","`text /** * Create a new BFCache entry and drop our reference to our old one. This * call unlinks this SHEntry from any other SHEntries for its document. */`",1182,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SharesDocumentWith","","`text /** * Does this SHEntry correspond to the same document as aEntry? This is * true iff the two SHEntries have the same BFCacheEntry. So in * particular, sharesDocumentWith(aEntry) is guaranteed to return true if * it's preceeded by a call to adoptBFCacheEntry(aEntry). */`",1182,null],[11,"GetIsSrcdocEntry","","`text /** * True if this SHEntry corresponds to a document created by a srcdoc iframe. * Set when a value is assigned to srcdocData. */`",1182,null],[11,"GetSrcdocData","","`text /** * Contents of the srcdoc attribute in a srcdoc iframe to be loaded instead * of the URI. Similar to a Data URI, this information is needed to * recreate the document at a later stage. * Setting this sets isSrcdocEntry to true */`",1182,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetSrcdocData","","`text /** * Contents of the srcdoc attribute in a srcdoc iframe to be loaded instead * of the URI. Similar to a Data URI, this information is needed to * recreate the document at a later stage. * Setting this sets isSrcdocEntry to true */`",1182,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetBaseURI","","`text /** * When isSrcdocEntry is true, this contains the baseURI of the srcdoc * document for use in situations where it cannot otherwise be determined, * for example with view-source. */`",1182,null],[11,"SetBaseURI","","`text /** * When isSrcdocEntry is true, this contains the baseURI of the srcdoc * document for use in situations where it cannot otherwise be determined, * for example with view-source. */`",1182,null],[11,"GetScrollRestorationIsManual","","`text /** * Sets/gets the current scroll restoration state, * if true == \"manual\", false == \"auto\". */`",1182,null],[11,"SetScrollRestorationIsManual","","`text /** * Sets/gets the current scroll restoration state, * if true == \"manual\", false == \"auto\". */`",1182,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLoadedInThisProcess","","`text /** * Flag to indicate that the history entry was originally loaded in the * current process. This flag does not survive a browser process switch. */`",1182,null],[11,"GetSHistory","","`text /** * The session history it belongs to. It's usually only set on root entries. * SHEntry is strictly bound to the SHistory it belongs to; it should not be * changed once set to a non-null value. */`",1182,null],[11,"SetSHistory","","`text /** * The session history it belongs to. It's usually only set on root entries. * SHEntry is strictly bound to the SHistory it belongs to; it should not be * changed once set to a non-null value. */`",1182,null],[11,"addref","","",1183,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1183,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISHEntryInternal` to one of its base interfaces.",1183,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1183,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RemoveFromBFCacheAsync","","`[notxpcom] void RemoveFromBFCacheAsync ();`",1183,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"RemoveFromBFCacheSync","","`[notxpcom] void RemoveFromBFCacheSync ();`",1183,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"GetLastTouched","","`text /** * A number that is assigned by the sHistory when the entry is activated */`",1183,null],[11,"SetLastTouched","","`text /** * A number that is assigned by the sHistory when the entry is activated */`",1183,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1184,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1184,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIRefObject` to one of its base interfaces.",1184,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1184,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetNode","","`attribute nsIDOMNode node;`",1184,null],[11,"SetNode","","`attribute nsIDOMNode node;`",1184,null],[11,"Reset","","`text /** * Go back to the beginning of the attribute list. */`",1184,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetNextURI","","`text /** * Return the next rewritable URI. */`",1184,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RewriteAllURIs","","`text /** * Go back to the beginning of the attribute list * * @param aOldPat Old pattern to be replaced, e.g. file:///a/b/ * @param aNewPat New pattern to be replaced, e.g. http://mypage.aol.com/ * @param aMakeRel Rewrite links as relative vs. absolute */`",1184,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1185,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1185,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptErrorNote` to one of its base interfaces.",1185,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1185,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetErrorMessage","","`readonly attribute AString errorMessage;`",1185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSourceName","","`readonly attribute AString sourceName;`",1185,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLineNumber","","`readonly attribute uint32_t lineNumber;`",1185,null],[11,"GetColumnNumber","","`readonly attribute uint32_t columnNumber;`",1185,null],[11,"ToString","","`AUTF8String toString ();`",1185,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1186,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1186,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptError` to one of its base interfaces.",1186,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1186,{"inputs":[{"name":"self"}],"output":{"name":"nsiconsolemessage"}}],[18,"errorFlag","","`text /** pseudo-flag for default case */`",1186,null],[18,"warningFlag","","`text /** message is warning */`",1186,null],[18,"exceptionFlag","","`text /** exception was thrown for this case - exception-aware hosts can ignore */`",1186,null],[18,"strictFlag","","`text /** error or warning is due to strict option */`",1186,null],[18,"infoFlag","","`text /** just a log message */`",1186,null],[11,"GetErrorMessage","","`text /** * The error message without any context/line number information. * * @note nsIConsoleMessage.message will return the error formatted * with file/line information. */`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSourceName","","`readonly attribute AString sourceName;`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSourceLine","","`readonly attribute AString sourceLine;`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLineNumber","","`readonly attribute uint32_t lineNumber;`",1186,null],[11,"GetColumnNumber","","`readonly attribute uint32_t columnNumber;`",1186,null],[11,"GetFlags","","`readonly attribute uint32_t flags;`",1186,null],[11,"GetCategory","","`text /** * Categories I know about - * XUL javascript * content javascript (both of these from nsDocShell, currently) * system javascript (errors in JS components and other system JS) */`",1186,null],[11,"GetOuterWindowID","","`readonly attribute unsigned long long outerWindowID;`",1186,null],[11,"GetInnerWindowID","","`readonly attribute unsigned long long innerWindowID;`",1186,null],[11,"GetIsFromPrivateWindow","","`readonly attribute boolean isFromPrivateWindow;`",1186,null],[11,"GetErrorMessageName","","`text /** * The name of a template string, as found in js.msg, associated with the * error message. */`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetErrorMessageName","","`text /** * The name of a template string, as found in js.msg, associated with the * error message. */`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetNotes","","`readonly attribute nsIArray notes;`",1186,null],[11,"Init","","`void init (in AString message, in AString sourceName, in AString sourceLine, in uint32_t lineNumber, in uint32_t columnNumber, in uint32_t flags, in string category);`",1186,null],[11,"InitWithWindowID","","`void initWithWindowID (in AString message, in AString sourceName, in AString sourceLine, in uint32_t lineNumber, in uint32_t columnNumber, in uint32_t flags, in ACString category, in unsigned long long innerWindowID);`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsacstring"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"InitWithSanitizedSource","","`void initWithSanitizedSource (in AString message, in AString sourceName, in AString sourceLine, in uint32_t lineNumber, in uint32_t columnNumber, in uint32_t flags, in ACString category, in unsigned long long innerWindowID);`",1186,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsacstring"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"InitWithSourceURI","","`void initWithSourceURI (in AString message, in nsIURI sourceURI, in AString sourceLine, in uint32_t lineNumber, in uint32_t columnNumber, in uint32_t flags, in ACString category, in unsigned long long innerWindowID);`",1186,null],[11,"addref","","",1187,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1187,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIImageLoadingContent` to one of its base interfaces.",1187,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1187,{"inputs":[{"name":"self"}],"output":{"name":"imginotificationobserver"}}],[18,"UNKNOWN_REQUEST","","`text /** * Request types. Image loading content nodes attempt to do atomic * image changes when the image url is changed. This means that * when the url changes the new image load will start, but the old * image will remain the \"current\" request until the new image is * fully loaded. At that point, the old \"current\" request will be * discarded and the \"pending\" request will become \"current\". */`",1187,null],[18,"CURRENT_REQUEST","","",1187,null],[18,"PENDING_REQUEST","","",1187,null],[11,"GetLoadingEnabled","","`text /** * loadingEnabled is used to enable and disable loading in * situations where loading images is unwanted. Note that enabling * loading will *not* automatically trigger an image load. */`",1187,null],[11,"SetLoadingEnabled","","`text /** * loadingEnabled is used to enable and disable loading in * situations where loading images is unwanted. Note that enabling * loading will *not* automatically trigger an image load. */`",1187,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetImageBlockingStatus","","`text /** * Returns the image blocking status (@see nsIContentPolicy). This * will always be an nsIContentPolicy REJECT_* status for cases when * the image was blocked. This status always refers to the * CURRENT_REQUEST load. */`",1187,null],[11,"AddNativeObserver","","`text /** * Used to register an image decoder observer. Typically, this will * be a proxy for a frame that wants to paint the image. * Notifications from ongoing image loads will be passed to all * registered observers. Notifications for all request types, * current and pending, will be passed through. * * @param aObserver the observer to register * * @throws NS_ERROR_OUT_OF_MEMORY */`",1187,null],[11,"RemoveNativeObserver","","`text /** * Used to unregister an image decoder observer. * * @param aObserver the observer to unregister */`",1187,null],[11,"AddObserver","","`text /** * Same as addNativeObserver but intended for scripted observers or observers * from another or without a document. */`",1187,null],[11,"RemoveObserver","","`text /** * Same as removeNativeObserver but intended for scripted observers or * observers from another or without a document. */`",1187,null],[11,"GetRequest","","`text /** * Accessor to get the image requests * * @param aRequestType a value saying which request is wanted * * @return the imgIRequest object (may be null, even when no error * is thrown) * * @throws NS_ERROR_UNEXPECTED if the request type requested is not * known */`",1187,null],[11,"SetBlockedRequest","","`text /** * Call this function when the request was blocked by any of the * security policies enforced. * * @param aContentDecision the decision returned from nsIContentPolicy * (any of the types REJECT_*) */`",1187,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"CurrentRequestHasSize","","`text /** * @return true if the current request's size is available. */`",1187,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetRequestType","","`text /** * Used to find out what type of request one is dealing with (eg * which request got passed through to the imgINotificationObserver * interface of an observer) * * @param aRequest the request whose type we want to know * * @return an enum value saying what type this request is * * @throws NS_ERROR_UNEXPECTED if aRequest is not known */`",1187,null],[11,"GetCurrentURI","","`text /** * Gets the URI of the current request, if available. * Otherwise, returns the last URI that this content tried to load, or * null if there haven't been any such attempts. */`",1187,null],[11,"LoadImageWithChannel","","`text /** * loadImageWithChannel allows data from an existing channel to be * used as the image data for this content node. * * @param aChannel the channel that will deliver the data * * @return a stream listener to pump the image data into * * @see imgILoader::loadImageWithChannel * * @throws NS_ERROR_NULL_POINTER if aChannel is null */`",1187,null],[11,"ForceImageState","","`text /** * Enables/disables image state forcing. When |aForce| is PR_TRUE, we force * nsImageLoadingContent::ImageState() to return |aState|. Call again with |aForce| * as PR_FALSE to revert ImageState() to its original behaviour. */`",1187,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetNaturalWidth","","`text /** * The intrinsic size and width of this content. May differ from actual image * size due to things like responsive image density. */`",1187,null],[11,"GetNaturalHeight","","`readonly attribute unsigned long naturalHeight;`",1187,null],[11,"addref","","",1188,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1188,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessible` to one of its base interfaces.",1188,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1188,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetParent","","`text /** * Parent node in accessible tree. */`",1188,null],[11,"GetNextSibling","","`text /** * Next sibling in accessible tree */`",1188,null],[11,"GetPreviousSibling","","`text /** * Previous sibling in accessible tree */`",1188,null],[11,"GetFirstChild","","`text /** * First child in accessible tree */`",1188,null],[11,"GetLastChild","","`text /** * Last child in accessible tree */`",1188,null],[11,"GetChildren","","`text /** * Array of all this element's children. */`",1188,null],[11,"GetChildCount","","`text /** * Number of accessible children */`",1188,null],[11,"GetIndexInParent","","`text /** * The 0-based index of this accessible in its parent's list of children, * or -1 if this accessible does not have a parent. */`",1188,null],[11,"GetDOMNode","","`text /** * The DOM node this nsIAccessible is associated with. */`",1188,null],[11,"GetId","","`text /** * For remote accessibles the id of the related DOM node. */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDocument","","`text /** * The document accessible that this access node resides in. */`",1188,null],[11,"GetRootDocument","","`text /** * The root document accessible that this access node resides in. */`",1188,null],[11,"GetLanguage","","`text /** * The language for the current DOM node, e.g. en, de, etc. */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`text /** * Accessible name -- the main text equivalent for this node. The name is * specified by ARIA or by native markup. Example of ARIA markup is * aria-labelledby attribute placed on element of this accessible. Example * of native markup is HTML label linked with HTML element of this accessible. * * Value can be string or null. A null value indicates that AT may attempt to * compute the name. Any string value, including the empty string, should be * considered author-intentional, and respected. */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`text /** * Accessible value -- a number or a secondary text equivalent for this node * Widgets that use role attribute can force a value using the valuenow attribute */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetDescription","","`text /** * Accessible description -- long text associated with this node */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAccessKey","","`text /** * Provides localized string of accesskey name, such as Alt+D. * The modifier may be affected by user and platform preferences. * Usually alt+letter, or just the letter alone for menu items. */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetKeyboardShortcut","","`text /** * Provides localized string of global keyboard accelerator for default * action, such as Ctrl+O for Open file */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetRole","","`text /** * Enumerated accessible role (see the constants defined in nsIAccessibleRole). * * @note The values might depend on platform because of variations. Widgets * can use ARIA role attribute to force the final role. */`",1188,null],[11,"GetState","","`text /** * Accessible states -- bit fields which describe boolean properties of node. * Many states are only valid given a certain role attribute that supports * them. * * @param aState - the first bit field (see nsIAccessibleStates::STATE_* * constants) * @param aExtraState - the second bit field * (see nsIAccessibleStates::EXT_STATE_* constants) */`",1188,null],[11,"GetHelp","","`text /** * Help text associated with node * * @note As of now, this just returns empty string. */`",1188,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetFocusedChild","","`text /** * Focused accessible child of node */`",1188,null],[11,"GetAttributes","","`text /** * Attributes of accessible */`",1188,null],[11,"GroupPosition","","`text /** * Returns grouping information. Used for tree items, list items, tab panel * labels, radio buttons, etc. Also used for collectons of non-text objects. * * @param groupLevel - 1-based, similar to ARIA 'level' property * @param similarItemsInGroup - 1-based, similar to ARIA 'setsize' property, * inclusive of the current item * @param positionInGroup - 1-based, similar to ARIA 'posinset' property */`",1188,null],[11,"GetChildAtPoint","","`text /** * Accessible child which contains the coordinate at (x, y) in screen pixels. * If the point is in the current accessible but not in a child, the * current accessible will be returned. * If the point is in neither the current accessible or a child, then * null will be returned. * * @param x screen's x coordinate * @param y screen's y coordinate * @return the deepest accessible child containing the given point */`",1188,null],[11,"GetDeepestChildAtPoint","","`text /** * Deepest accessible child which contains the coordinate at (x, y) in screen * pixels. If the point is in the current accessible but not in a child, the * current accessible will be returned. If the point is in neither the current * accessible or a child, then null will be returned. * * @param x screen's x coordinate * @param y screen's y coordinate * @return the deepest accessible child containing the given point */`",1188,null],[11,"GetChildAt","","`text /** * Nth accessible child using zero-based index or last child if index less than zero */`",1188,null],[11,"GetRelationByType","","`text /** * Return accessible relation by the given relation type (see. * constants defined in nsIAccessibleRelation). */`",1188,null],[11,"GetRelations","","`text /** * Returns multiple accessible relations for this object. */`",1188,null],[11,"GetBounds","","`text /** * Return accessible's x and y coordinates relative to the screen and * accessible's width and height. */`",1188,null],[11,"SetSelected","","`text /** * Add or remove this accessible to the current selection */`",1188,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"TakeSelection","","`text /** * Select this accessible node only */`",1188,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"TakeFocus","","`text /** * Focus this accessible node, * The state STATE_FOCUSABLE indicates whether this node is normally focusable. * It is the callers responsibility to determine whether this node is focusable. * accTakeFocus on a node that is not normally focusable (such as a table), * will still set focus on that node, although normally that will not be visually * indicated in most style sheets. */`",1188,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetActionCount","","`text /** * The number of accessible actions associated with this accessible */`",1188,null],[11,"GetActionName","","`text /** * The name of the accessible action at the given zero-based index */`",1188,{"inputs":[{"name":"self"},{"name":"uint8_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetActionDescription","","`text /** * The description of the accessible action at the given zero-based index */`",1188,{"inputs":[{"name":"self"},{"name":"uint8_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"DoAction","","`text /** * Perform the accessible action at the given zero-based index * Action number 0 is the default action */`",1188,{"inputs":[{"name":"self"},{"name":"uint8_t"}],"output":{"name":"nsresult"}}],[11,"ScrollTo","","`text /** * Makes an object visible on screen. * * @param scrollType - defines where the object should be placed on * the screen (see nsIAccessibleScrollType for * available constants). */`",1188,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ScrollToPoint","","`text /** * Moves the top left of an object to a specified location. * * @param coordinateType [in] - specifies whether the coordinates are relative to * the screen or the parent object (for available * constants refer to nsIAccessibleCoordinateType) * @param x [in] - defines the x coordinate * @param y [in] - defines the y coordinate */`",1188,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1189,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1189,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentDispatchChooser` to one of its base interfaces.",1189,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1189,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_CANNOT_HANDLE","","`text /** * This request is passed to the helper app dialog because Gecko can not * handle content of this type. */`",1189,null],[11,"Ask","","`text /** * Asks the user what to do with the content. * * @param aHander * The interface describing the details of how this content should or * can be handled. * @param aWindowContext * The parent window context to show this chooser. This can be null, * and some implementations may not care about it. Generally, you'll * want to pass an nsIDOMWindow in so the chooser can be properly * parented when opened. * @param aURI * The URI of the resource that we are asking about. * @param aReason * The reason why we are asking (see above). */`",1189,null],[11,"addref","","",1190,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1190,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUploadChannel2` to one of its base interfaces.",1190,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1190,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ExplicitSetUploadStream","","`text /** * Sets a stream to be uploaded by this channel with the specified * Content-Type and Content-Length header values. * * Most implementations of this interface require that the stream: * (1) implement threadsafe addRef and release * (2) implement nsIInputStream::readSegments * (3) implement nsISeekableStream::seek * * @param aStream * The stream to be uploaded by this channel. * @param aContentType * This value will replace any existing Content-Type * header on the HTTP request, regardless of whether * or not its empty. * @param aContentLength * A value of -1 indicates that the length of the stream should be * determined by calling the stream's |available| method. * @param aMethod * The HTTP request method to set on the stream. * @param aStreamHasHeaders * True if the stream already contains headers for the HTTP request. */`",1190,null],[11,"GetUploadStreamHasHeaders","","`text /** * Value of aStreamHasHeaders from the last successful call to * explicitSetUploadStream. TRUE indicates the attached upload stream * contians request headers. */`",1190,null],[11,"EnsureUploadStreamIsCloneable","","`text /** * Ensure the upload stream, if any, is cloneable. This may involve * async copying, so a callback runnable must be provided. It will * invoked on the current thread when the upload stream is ready * for cloning. If the stream is already cloneable, then the callback * will be invoked synchronously. */`",1190,null],[11,"CloneUploadStream","","`text /** * Clones the upload stream. May return failure if the upload stream * is not cloneable. If this is not acceptable, use the * ensureUploadStreamIsCloneable() method first. * aContentLength could be -1 in case the size of the stream is unknown, * otherwise it will contain the known size of the stream. */`",1190,null],[11,"addref","","",1191,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1191,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConsoleService` to one of its base interfaces.",1191,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1191,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"LogMessage","","`void logMessage (in nsIConsoleMessage message);`",1191,null],[11,"LogStringMessage","","`text /** * Convenience method for logging simple messages. */`",1191,null],[11,"GetMessageArray","","`text /** * Get an array of all the messages logged so far. If no messages * are logged, this function will return a count of 0, but still * will allocate one word for messages, so as to show up as a * 0-length array when called from script. */`",1191,null],[11,"RegisterListener","","`text /** * To guard against stack overflows from listeners that could log * messages (it's easy to do this inadvertently from listeners * implemented in JavaScript), we don't call any listeners when * another error is already being logged. */`",1191,null],[11,"UnregisterListener","","`text /** * Each registered listener should also be unregistered. */`",1191,null],[11,"Reset","","`text /** * Clear the message buffer (e.g. for privacy reasons). */`",1191,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1192,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1192,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMWindowCollection` to one of its base interfaces.",1192,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1192,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`text /** * The nsIDOMWindowCollection interface is an interface for a * collection of DOM window objects. */ /** * Accessor for the number of windows in this collection. */`",1192,null],[11,"Item","","`text /** * Method for accessing an item in this collection by index. */`",1192,null],[11,"NamedItem","","`text /** * Method for accessing an item in this collection by window name. */`",1192,null],[11,"addref","","",1193,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1193,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNodeFilter` to one of its base interfaces.",1193,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1193,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FILTER_ACCEPT","","",1193,null],[18,"FILTER_REJECT","","",1193,null],[18,"FILTER_SKIP","","",1193,null],[18,"SHOW_ALL","","",1193,null],[18,"SHOW_ELEMENT","","",1193,null],[18,"SHOW_ATTRIBUTE","","",1193,null],[18,"SHOW_TEXT","","",1193,null],[18,"SHOW_CDATA_SECTION","","",1193,null],[18,"SHOW_ENTITY_REFERENCE","","",1193,null],[18,"SHOW_ENTITY","","",1193,null],[18,"SHOW_PROCESSING_INSTRUCTION","","",1193,null],[18,"SHOW_COMMENT","","",1193,null],[18,"SHOW_DOCUMENT","","",1193,null],[18,"SHOW_DOCUMENT_TYPE","","",1193,null],[18,"SHOW_DOCUMENT_FRAGMENT","","",1193,null],[18,"SHOW_NOTATION","","",1193,null],[11,"AcceptNode","","`short acceptNode (in nsIDOMNode n);`",1193,null],[11,"addref","","",1194,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1194,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAudioDeviceInfo` to one of its base interfaces.",1194,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1194,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"TYPE_UNKNOWN","","",1194,null],[18,"TYPE_INPUT","","",1194,null],[18,"TYPE_OUTPUT","","",1194,null],[18,"STATE_DISABLED","","",1194,null],[18,"STATE_UNPLUGGED","","",1194,null],[18,"STATE_ENABLED","","",1194,null],[18,"PREF_NONE","","",1194,null],[18,"PREF_MULTIMEDIA","","",1194,null],[18,"PREF_VOICE","","",1194,null],[18,"PREF_NOTIFICATION","","",1194,null],[18,"PREF_ALL","","",1194,null],[18,"FMT_S16LE","","",1194,null],[18,"FMT_S16BE","","",1194,null],[18,"FMT_F32LE","","",1194,null],[18,"FMT_F32BE","","",1194,null],[11,"GetName","","`readonly attribute DOMString name;`",1194,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetGroupId","","`readonly attribute DOMString groupId;`",1194,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVendor","","`readonly attribute DOMString vendor;`",1194,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`readonly attribute unsigned short type;`",1194,null],[11,"GetState","","`readonly attribute unsigned short state;`",1194,null],[11,"GetPreferred","","`readonly attribute unsigned short preferred;`",1194,null],[11,"GetSupportedFormat","","`readonly attribute unsigned short supportedFormat;`",1194,null],[11,"GetDefaultFormat","","`readonly attribute unsigned short defaultFormat;`",1194,null],[11,"GetMaxChannels","","`readonly attribute unsigned long maxChannels;`",1194,null],[11,"GetDefaultRate","","`readonly attribute unsigned long defaultRate;`",1194,null],[11,"GetMaxRate","","`readonly attribute unsigned long maxRate;`",1194,null],[11,"GetMinRate","","`readonly attribute unsigned long minRate;`",1194,null],[11,"GetMaxLatency","","`readonly attribute unsigned long maxLatency;`",1194,null],[11,"GetMinLatency","","`readonly attribute unsigned long minLatency;`",1194,null],[11,"addref","","",1195,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1195,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIDNService` to one of its base interfaces.",1195,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1195,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConvertUTF8toACE","","`text /** * Prepares the input hostname according to IDNA ToASCII operation, * the input hostname is assumed to be UTF8-encoded. */`",1195,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ConvertACEtoUTF8","","`text /** * This is the ToUnicode operation as specified in the IDNA proposal, * with an additional step to encode the result in UTF-8. * It takes an ACE-encoded hostname and performs ToUnicode to it, then * encodes the resulting string into UTF8. */`",1195,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsACE","","`text /** * Checks if the input string is ACE encoded or not. */`",1195,null],[11,"Normalize","","`text /** * Performs the unicode normalization needed for hostnames in IDN, * for callers that want early normalization. */`",1195,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ConvertToDisplayIDN","","`text /** * Normalizes and converts a host to UTF-8 if the host is in the IDN * whitelist, otherwise converts it to ACE. This is useful for display * purposes and to ensure an encoding consistent with nsIURI::GetHost(). * If the result is ASCII or ACE encoded, |isASCII| will be true. */`",1195,null],[11,"addref","","",1196,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1196,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequestObserver` to one of its base interfaces.",1196,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1196,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStartRequest","","`text /** * Called to signify the beginning of an asynchronous request. * * @param aRequest request being observed * @param aContext user defined context * * An exception thrown from onStartRequest has the side-effect of * causing the request to be canceled. */`",1196,null],[11,"OnStopRequest","","`text /** * Called to signify the end of an asynchronous request. This * call is always preceded by a call to onStartRequest. * * @param aRequest request being observed * @param aContext user defined context * @param aStatusCode reason for stopping (NS_OK if completed successfully) * * An exception thrown from onStopRequest is generally ignored. */`",1196,null],[11,"addref","","",1197,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1197,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `IUrlClassifierUITelemetry` to one of its base interfaces.",1197,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1197,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"WARNING_MALWARE_PAGE_TOP","","",1197,null],[18,"WARNING_MALWARE_PAGE_TOP_WHY_BLOCKED","","",1197,null],[18,"WARNING_MALWARE_PAGE_TOP_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_MALWARE_PAGE_TOP_IGNORE_WARNING","","",1197,null],[18,"WARNING_MALWARE_PAGE_FRAME","","",1197,null],[18,"WARNING_MALWARE_PAGE_FRAME_WHY_BLOCKED","","",1197,null],[18,"WARNING_MALWARE_PAGE_FRAME_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_MALWARE_PAGE_FRAME_IGNORE_WARNING","","",1197,null],[18,"WARNING_PHISHING_PAGE_TOP","","",1197,null],[18,"WARNING_PHISHING_PAGE_TOP_WHY_BLOCKED","","",1197,null],[18,"WARNING_PHISHING_PAGE_TOP_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_PHISHING_PAGE_TOP_IGNORE_WARNING","","",1197,null],[18,"WARNING_PHISHING_PAGE_FRAME","","",1197,null],[18,"WARNING_PHISHING_PAGE_FRAME_WHY_BLOCKED","","",1197,null],[18,"WARNING_PHISHING_PAGE_FRAME_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_PHISHING_PAGE_FRAME_IGNORE_WARNING","","",1197,null],[18,"WARNING_UNWANTED_PAGE_TOP","","",1197,null],[18,"WARNING_UNWANTED_PAGE_TOP_WHY_BLOCKED","","",1197,null],[18,"WARNING_UNWANTED_PAGE_TOP_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_UNWANTED_PAGE_TOP_IGNORE_WARNING","","",1197,null],[18,"WARNING_UNWANTED_PAGE_FRAME","","",1197,null],[18,"WARNING_UNWANTED_PAGE_FRAME_WHY_BLOCKED","","",1197,null],[18,"WARNING_UNWANTED_PAGE_FRAME_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_UNWANTED_PAGE_FRAME_IGNORE_WARNING","","",1197,null],[18,"WARNING_HARMFUL_PAGE_TOP","","",1197,null],[18,"WARNING_HARMFUL_PAGE_TOP_WHY_BLOCKED","","",1197,null],[18,"WARNING_HARMFUL_PAGE_TOP_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_HARMFUL_PAGE_TOP_IGNORE_WARNING","","",1197,null],[18,"WARNING_HARMFUL_PAGE_FRAME","","",1197,null],[18,"WARNING_HARMFUL_PAGE_FRAME_WHY_BLOCKED","","",1197,null],[18,"WARNING_HARMFUL_PAGE_FRAME_GET_ME_OUT_OF_HERE","","",1197,null],[18,"WARNING_HARMFUL_PAGE_FRAME_IGNORE_WARNING","","",1197,null],[11,"addref","","",1198,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1198,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIChannelEventSink` to one of its base interfaces.",1198,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1198,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REDIRECT_TEMPORARY","","`text /** * This is a temporary redirect. New requests for this resource should * continue to use the URI of the old channel. * * The new URI may be identical to the old one. */`",1198,null],[18,"REDIRECT_PERMANENT","","`text /** * This is a permanent redirect. New requests for this resource should use * the URI of the new channel (This might be an HTTP 301 reponse). * If this flag is not set, this is a temporary redirect. * * The new URI may be identical to the old one. */`",1198,null],[18,"REDIRECT_INTERNAL","","`text /** * This is an internal redirect, i.e. it was not initiated by the remote * server, but is specific to the channel implementation. * * The new URI may be identical to the old one. */`",1198,null],[18,"REDIRECT_STS_UPGRADE","","`text /** * This is a special-cased redirect coming from hitting HSTS upgrade * redirect from http to https only. In some cases this type of redirect * may be considered as safe despite not being the-same-origin redirect. */`",1198,null],[11,"AsyncOnChannelRedirect","","`text /** * Called when a redirect occurs. This may happen due to an HTTP 3xx status * code. The purpose of this method is to notify the sink that a redirect * is about to happen, but also to give the sink the right to veto the * redirect by throwing or passing a failure-code in the callback. * * Note that vetoing the redirect simply means that |newChannel| will not * be opened. It is important to understand that |oldChannel| will continue * loading as if it received a HTTP 200, which includes notifying observers * and possibly display or process content attached to the HTTP response. * If the sink wants to prevent this loading it must explicitly deal with * it, e.g. by calling |oldChannel->Cancel()| * * There is a certain freedom in implementing this method: * * If the return-value indicates success, a callback on |callback| is * required. This callback can be done from within asyncOnChannelRedirect * (effectively making the call synchronous) or at some point later * (making the call asynchronous). Repeat: A callback must be done * if this method returns successfully. * * If the return value indicates error (method throws an exception) * the redirect is vetoed and no callback must be done. Repeat: No * callback must be done if this method throws! * * @see nsIAsyncVerifyRedirectCallback::onRedirectVerifyCallback() * * @param oldChannel * The channel that's being redirected. * @param newChannel * The new channel. This channel is not opened yet. * @param flags * Flags indicating the type of redirect. A bitmask consisting * of flags from above. * One of REDIRECT_TEMPORARY and REDIRECT_PERMANENT will always be * set. * @param callback * Object to inform about the async result of this method * * @throw <any> Throwing an exception will cause the redirect to be * cancelled */`",1198,null],[11,"addref","","",1199,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1199,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCharacterData` to one of its base interfaces.",1199,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1199,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"GetData","","`text /** * The nsIDOMCharacterData interface extends nsIDOMNode with a set of * attributes and methods for accessing character data in the DOM. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",1199,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetData","","`text /** * The nsIDOMCharacterData interface extends nsIDOMNode with a set of * attributes and methods for accessing character data in the DOM. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",1199,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",1199,null],[11,"SubstringData","","`DOMString substringData (in unsigned long offset, in unsigned long count) raises (DOMException);`",1199,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendData","","`void appendData (in DOMString arg) raises (DOMException);`",1199,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InsertData","","`void insertData (in unsigned long offset, in DOMString arg) raises (DOMException);`",1199,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"DeleteData","","`void deleteData (in unsigned long offset, in unsigned long count) raises (DOMException);`",1199,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"ReplaceData","","`void replaceData (in unsigned long offset, in unsigned long count, in DOMString arg) raises (DOMException);`",1199,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1200,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1200,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGNOMEShellService` to one of its base interfaces.",1200,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1200,{"inputs":[{"name":"self"}],"output":{"name":"nsishellservice"}}],[11,"GetCanSetDesktopBackground","","`text /** * Used to determine whether or not to offer \"Set as desktop background\" * functionality. Even if shell service is available it is not * guaranteed that it is able to set the background for every desktop * which is especially true for Linux with its many different desktop * environments. */`",1200,null],[11,"addref","","",1201,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1201,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIDOMWindow` to one of its base interfaces.",1201,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1201,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1202,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1202,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIDOMWindowProxy` to one of its base interfaces.",1202,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1202,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1203,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1203,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPresentationLocalDevice` to one of its base interfaces.",1203,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1203,{"inputs":[{"name":"self"}],"output":{"name":"nsipresentationdevice"}}],[11,"GetWindowId","","`readonly attribute AUTF8String windowId;`",1203,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1204,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1204,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentViewerContainer` to one of its base interfaces.",1204,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1204,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Embed","","`void embed (in nsIContentViewer aDocViewer, in string aCommand, in nsISupports aExtraInfo);`",1204,null],[11,"SetIsPrinting","","`text /** * Allows nsPrintJob to make this call on an internal interface to the * DocShell. */`",1204,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1205,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1205,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebNavigation` to one of its base interfaces.",1205,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1205,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LOAD_FLAGS_MASK","","`text /**************************************************************************** * The following flags may be bitwise combined to form the load flags * parameter passed to either the loadURI or reload method. Some of these * flags are only applicable to loadURI. */ /** * This flags defines the range of bits that may be specified. Flags * outside this range may be used, but may not be passed to Reload(). */`",1205,null],[18,"LOAD_FLAGS_NONE","","`text /** * This is the default value for the load flags parameter. */`",1205,null],[18,"LOAD_FLAGS_IS_REFRESH","","`text /** * Flags 0x1, 0x2, 0x4, 0x8 are reserved for internal use by * nsIWebNavigation implementations for now. */ /** * This flag specifies that the load should have the semantics of an HTML * Meta-refresh tag (i.e., that the cache should be bypassed). This flag * is only applicable to loadURI. * XXX the meaning of this flag is poorly defined. * XXX no one uses this, so we should probably deprecate and remove it. */`",1205,null],[18,"LOAD_FLAGS_IS_LINK","","`text /** * This flag specifies that the load should have the semantics of a link * click. This flag is only applicable to loadURI. * XXX the meaning of this flag is poorly defined. */`",1205,null],[18,"LOAD_FLAGS_BYPASS_HISTORY","","`text /** * This flag specifies that history should not be updated. This flag is only * applicable to loadURI. */`",1205,null],[18,"LOAD_FLAGS_REPLACE_HISTORY","","`text /** * This flag specifies that any existing history entry should be replaced. * This flag is only applicable to loadURI. */`",1205,null],[18,"LOAD_FLAGS_BYPASS_CACHE","","`text /** * This flag specifies that the local web cache should be bypassed, but an * intermediate proxy cache could still be used to satisfy the load. */`",1205,null],[18,"LOAD_FLAGS_BYPASS_PROXY","","`text /** * This flag specifies that any intermediate proxy caches should be bypassed * (i.e., that the content should be loaded from the origin server). */`",1205,null],[18,"LOAD_FLAGS_CHARSET_CHANGE","","`text /** * This flag specifies that a reload was triggered as a result of detecting * an incorrect character encoding while parsing a previously loaded * document. */`",1205,null],[18,"LOAD_FLAGS_STOP_CONTENT","","`text /** * If this flag is set, Stop() will be called before the load starts * and will stop both content and network activity (the default is to * only stop network activity). Effectively, this passes the * STOP_CONTENT flag to Stop(), in addition to the STOP_NETWORK flag. */`",1205,null],[18,"LOAD_FLAGS_FROM_EXTERNAL","","`text /** * A hint this load was prompted by an external program: take care! */`",1205,null],[18,"LOAD_FLAGS_ALLOW_MIXED_CONTENT","","`text /** This flag is set when a user explicitly disables the Mixed Content Blocker, and allows Mixed Content to load on an https page. */`",1205,null],[18,"LOAD_FLAGS_FIRST_LOAD","","`text /** * This flag specifies that this is the first load in this object. * Set with care, since setting incorrectly can cause us to assume that * nothing was actually loaded in this object if the load ends up being * handled by an external application. This flag must not be passed to * Reload. */`",1205,null],[18,"LOAD_FLAGS_ALLOW_POPUPS","","`text /** * This flag specifies that the load should not be subject to popup * blocking checks. This flag must not be passed to Reload. */`",1205,null],[18,"LOAD_FLAGS_BYPASS_CLASSIFIER","","`text /** * This flag specifies that the URI classifier should not be checked for * this load. This flag must not be passed to Reload. */`",1205,null],[18,"LOAD_FLAGS_FORCE_ALLOW_COOKIES","","`text /** * Force relevant cookies to be sent with this load even if normally they * wouldn't be. */`",1205,null],[18,"LOAD_FLAGS_DISALLOW_INHERIT_PRINCIPAL","","`text /** * Prevent the owner principal from being inherited for this load. * Note: Within Gecko we use the term principal rather than owners * but some legacy addons might still rely on the outdated term. */`",1205,null],[18,"LOAD_FLAGS_DISALLOW_INHERIT_OWNER","","",1205,null],[18,"LOAD_FLAGS_ERROR_LOAD_CHANGES_RV","","`text /** * Overwrite the returned error code with a specific result code * when an error page is displayed. */`",1205,null],[18,"LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP","","`text /** * This flag specifies that the URI may be submitted to a third-party * server for correction. This should only be applied to non-sensitive * URIs entered by users. This flag must not be passed to Reload. */`",1205,null],[18,"LOAD_FLAGS_FIXUP_SCHEME_TYPOS","","`text /** * This flag specifies that common scheme typos should be corrected. */`",1205,null],[18,"LOAD_FLAGS_FORCE_ALLOW_DATA_URI","","`text /** * Allows a top-level data: navigation to occur. E.g. view-image * is an explicit user action which should be allowed. */`",1205,null],[18,"STOP_NETWORK","","`text /**************************************************************************** * The following flags may be passed as the stop flags parameter to the stop * method defined on this interface. */ /** * This flag specifies that all network activity should be stopped. This * includes both active network loads and pending META-refreshes. */`",1205,null],[18,"STOP_CONTENT","","`text /** * This flag specifies that all content activity should be stopped. This * includes animated images, plugins and pending Javascript timeouts. */`",1205,null],[18,"STOP_ALL","","`text /** * This flag specifies that all activity should be stopped. */`",1205,null],[11,"GetCanGoBack","","`text /** * Indicates if the object can go back. If true this indicates that * there is back session history available for navigation. */`",1205,null],[11,"GetCanGoForward","","`text /** * Indicates if the object can go forward. If true this indicates that * there is forward session history available for navigation */`",1205,null],[11,"GoBack","","`text /** * Tells the object to navigate to the previous session history item. When a * page is loaded from session history, all content is loaded from the cache * (if available) and page state (such as form values and scroll position) is * restored. * * @throw NS_ERROR_UNEXPECTED * Indicates that the call was unexpected at this time, which implies * that canGoBack is false. */`",1205,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GoForward","","`text /** * Tells the object to navigate to the next session history item. When a * page is loaded from session history, all content is loaded from the cache * (if available) and page state (such as form values and scroll position) is * restored. * * @throw NS_ERROR_UNEXPECTED * Indicates that the call was unexpected at this time, which implies * that canGoForward is false. */`",1205,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GotoIndex","","`text /** * Tells the object to navigate to the session history item at a given index. * * @throw NS_ERROR_UNEXPECTED * Indicates that the call was unexpected at this time, which implies * that session history entry at the given index does not exist. */`",1205,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"LoadURI","","`text /** * Loads a given URI. This will give priority to loading the requested URI * in the object implementing this interface. If it can't be loaded here * however, the URI dispatcher will go through its normal process of content * loading. * * @param aURI * The URI string to load. For HTTP and FTP URLs and possibly others, * characters above U+007F will be converted to UTF-8 and then URL- * escaped per the rules of RFC 2396. * @param aLoadFlags * Flags modifying load behaviour. This parameter is a bitwise * combination of the load flags defined above. (Undefined bits are * reserved for future use.) Generally you will pass LOAD_FLAGS_NONE * for this parameter. * @param aReferrer * The referring URI. If this argument is null, then the referring * URI will be inferred internally. * @param aPostData * If the URI corresponds to a HTTP request, then this stream is * appended directly to the HTTP request headers. It may be prefixed * with additional HTTP headers. This stream must contain a \"\\r\\n\" * sequence separating any HTTP headers from the HTTP request body. * This parameter is optional and may be null. * @param aHeaders * If the URI corresponds to a HTTP request, then any HTTP headers * contained in this stream are set on the HTTP request. The HTTP * header stream is formatted as: * ( HEADER \"\\r\\n\" )* * This parameter is optional and may be null. * @param aTriggeringPrincipal * The principal that initiated the load of aURI. If omitted docShell * tries to create a codeBasePrincipal from aReferrer if not null. If * aReferrer is also null docShell peforms a load using the * SystemPrincipal as the triggeringPrincipal. */`",1205,null],[11,"LoadURIWithOptions","","`text /** * Loads a given URI. This will give priority to loading the requested URI * in the object implementing this interface. If it can't be loaded here * however, the URI dispatcher will go through its normal process of content * loading. * * Behaves like loadURI, but allows passing of additional parameters. * * @param aURI * The URI string to load. For HTTP and FTP URLs and possibly others, * characters above U+007F will be converted to UTF-8 and then URL- * escaped per the rules of RFC 2396. * @param aLoadFlags * Flags modifying load behaviour. This parameter is a bitwise * combination of the load flags defined above. (Undefined bits are * reserved for future use.) Generally you will pass LOAD_FLAGS_NONE * for this parameter. * @param aReferrer * The referring URI. If this argument is null, then the referring * URI will be inferred internally. * @param aReferrerPolicy * One of the REFERRER_POLICY_* constants from nsIHttpChannel. * Normal case is REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE. * @param aPostData * If the URI corresponds to a HTTP request, then this stream is * appended directly to the HTTP request headers. It may be prefixed * with additional HTTP headers. This stream must contain a \"\\r\\n\" * sequence separating any HTTP headers from the HTTP request body. * This parameter is optional and may be null. * @param aHeaders * If the URI corresponds to a HTTP request, then any HTTP headers * contained in this stream are set on the HTTP request. The HTTP * header stream is formatted as: * ( HEADER \"\\r\\n\" )* * This parameter is optional and may be null. * @param aBaseURI * Set to indicate a base URI to be associated with the load. Note * that at present this argument is only used with view-source aURIs * and cannot be used to resolve aURI. * This parameter is optional and may be null. * @param aTriggeringPrincipal * The principal that initiated the load of aURI. If omitted docShell * tries to create a codeBasePrincipal from aReferrer if not null. If * aReferrer is also null docShell peforms a load using the * SystemPrincipal as the triggeringPrincipal. */`",1205,null],[11,"Reload","","`text /** * Tells the Object to reload the current page. There may be cases where the * user will be asked to confirm the reload (for example, when it is * determined that the request is non-idempotent). * * @param aReloadFlags * Flags modifying load behaviour. This parameter is a bitwise * combination of the Load Flags defined above. (Undefined bits are * reserved for future use.) Generally you will pass LOAD_FLAGS_NONE * for this parameter. * * @throw NS_BINDING_ABORTED * Indicating that the user canceled the reload. */`",1205,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"Stop","","`text /** * Stops a load of a URI. * * @param aStopFlags * This parameter is one of the stop flags defined above. */`",1205,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDocument","","`text /** * Retrieves the current DOM document for the frame, or lazily creates a * blank document if there is none. This attribute never returns null except * for unexpected error situations. */`",1205,null],[11,"GetCurrentURI","","`text /** * The currently loaded URI or null. */`",1205,null],[11,"GetReferringURI","","`text /** * The referring URI for the currently loaded URI or null. */`",1205,null],[11,"GetSessionHistory","","`text /** * The session history object used by this web navigation instance. */`",1205,null],[11,"SetSessionHistory","","`text /** * The session history object used by this web navigation instance. */`",1205,null],[11,"addref","","",1206,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1206,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIStandardURL` to one of its base interfaces.",1206,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1206,{"inputs":[{"name":"self"}],"output":{"name":"nsimutable"}}],[18,"URLTYPE_STANDARD","","`text /** * blah:foo/bar => blah://foo/bar * blah:/foo/bar => blah:///foo/bar * blah://foo/bar => blah://foo/bar * blah:///foo/bar => blah:///foo/bar */`",1206,null],[18,"URLTYPE_AUTHORITY","","`text /** * blah:foo/bar => blah://foo/bar * blah:/foo/bar => blah://foo/bar * blah://foo/bar => blah://foo/bar * blah:///foo/bar => blah://foo/bar */`",1206,null],[18,"URLTYPE_NO_AUTHORITY","","`text /** * blah:foo/bar => blah:///foo/bar * blah:/foo/bar => blah:///foo/bar * blah://foo/bar => blah://foo/bar * blah:///foo/bar => blah:///foo/bar */`",1206,null],[11,"Init","","`text /** * Initialize a standard URL. * * @param aUrlType - one of the URLTYPE_ flags listed above. * @param aDefaultPort - if the port parsed from the URL string matches * this port, then the port will be removed from the * canonical form of the URL. * @param aSpec - URL string. * @param aOriginCharset - the charset from which this URI string * originated. this corresponds to the charset * that should be used when communicating this * URI to an origin server, for example. if * null, then provide aBaseURI implements this * interface, the origin charset of aBaseURI will * be assumed, otherwise defaulting to UTF-8 (i.e., * no charset transformation from aSpec). * @param aBaseURI - if null, aSpec must specify an absolute URI. * otherwise, aSpec will be resolved relative * to aBaseURI. */`",1206,null],[11,"SetDefaultPort","","`text /** * Set the default port. * * Note: If this object is already using its default port (i.e. if it has * mPort == -1), then it will now implicitly be using the new default port. * * @param aNewDefaultPort - if the URI has (or is later given) a port that * matches this default, then we won't include a * port number in the canonical form of the URL. */`",1206,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1207,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1207,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStoragePendingStatement` to one of its base interfaces.",1207,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1207,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Cancel","","`text /** * Cancels a pending statement, if possible. This will only fail if you try * cancel more than once. * * @note For read statements (such as SELECT), you will no longer receive any * notifications about results once cancel is called. */`",1207,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1208,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1208,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISandboxReport` to one of its base interfaces.",1208,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1208,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMsecAgo","","`readonly attribute uint64_t msecAgo;`",1208,null],[11,"GetPid","","`readonly attribute int32_t pid;`",1208,null],[11,"GetTid","","`readonly attribute int32_t tid;`",1208,null],[11,"GetProcType","","`readonly attribute ACString procType;`",1208,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSyscall","","`readonly attribute uint32_t syscall;`",1208,null],[11,"GetNumArgs","","`readonly attribute uint32_t numArgs;`",1208,null],[11,"GetArg","","`ACString getArg (in uint32_t aIndex);`",1208,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1209,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1209,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISandboxReportArray` to one of its base interfaces.",1209,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1209,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBegin","","`readonly attribute uint64_t begin;`",1209,null],[11,"GetEnd","","`readonly attribute uint64_t end;`",1209,null],[11,"GetElement","","`mozISandboxReport getElement (in uint64_t aIndex);`",1209,null],[11,"addref","","",1210,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1210,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozISandboxReporter` to one of its base interfaces.",1210,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1210,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Snapshot","","`mozISandboxReportArray snapshot ();`",1210,null],[11,"addref","","",1211,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1211,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILineInputStream` to one of its base interfaces.",1211,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1211,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ReadLine","","`text /** * Read a single line from the stream, where a line is a * possibly zero length sequence of 8bit chars terminated by a * CR, LF, CRLF, LFCR, or eof. * The line terminator is not returned. * @retval false * End of file. This line is the last line of the file * (aLine is valid). * @retval true * The file contains further lines. * @note Do not mix readLine with other read functions. * Doing so can cause various problems and is not supported. */`",1211,null],[11,"addref","","",1212,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1212,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFxAccountsUIGlue` to one of its base interfaces.",1212,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1212,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1213,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1213,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRedirectChannelRegistrar` to one of its base interfaces.",1213,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1213,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RegisterChannel","","`text /** * Register the redirect target channel and obtain a unique ID for that * channel. * * Primarily used in HttpChannelParentListener::AsyncOnChannelRedirect to get * a channel id sent to the HttpChannelChild being redirected. */`",1213,null],[11,"LinkChannels","","`text /** * First, search for the channel registered under the id. If found return * it. Then, register under the same id the parent side of IPC protocol * to let it be later grabbed back by the originator of the redirect and * notifications from the real channel could be forwarded to this parent * channel. * * Primarily used in parent side of an IPC protocol implementation * in reaction to nsIChildChannel.connectParent(id) called from the child * process. */`",1213,null],[11,"GetRegisteredChannel","","`text /** * Returns back the channel previously registered under the ID with * registerChannel method. * * Primarilly used in chrome IPC side of protocols when attaching a redirect * target channel to an existing 'real' channel implementation. */`",1213,null],[11,"GetParentChannel","","`text /** * Returns the stream listener that shall be attached to the redirect target * channel, all notification from the redirect target channel will be * forwarded to this stream listener. * * Primarilly used in HttpChannelParentListener::OnRedirectResult callback * to grab the created parent side of the channel and forward notifications * to it. */`",1213,null],[11,"DeregisterChannels","","`text /** * To not force all channel implementations to support weak reference * consumers of this service must ensure release of registered channels them * self. This releases both the real and parent channel registered under * the id. * * Primarilly used in HttpChannelParentListener::OnRedirectResult callback. */`",1213,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1214,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1214,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedGenerator` to one of its base interfaces.",1214,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1214,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedelementbase"}}],[11,"GetAgent","","`text /** * The name of the software. */`",1214,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetAgent","","`text /** * The name of the software. */`",1214,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVersion","","`text /** * The version of the software. */`",1214,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetVersion","","`text /** * The version of the software. */`",1214,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUri","","`text /** * A URI associated with the software. */`",1214,null],[11,"SetUri","","`text /** * A URI associated with the software. */`",1214,null],[11,"addref","","",1215,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1215,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncShutdownBlocker` to one of its base interfaces.",1215,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1215,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`text /** * The *unique* name of the blocker. * * By convention, it should respect the following format: * \"MyModuleName: Doing something while it's time\" * e.g. * \"OS.File: Flushing before profile-before-change\" * * This attribute is uploaded as part of crash reports. */`",1215,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"BlockShutdown","","`text /** * Inform the blocker that the stage of shutdown has started. * Shutdown will NOT proceed until `aBarrierClient.removeBlocker(this)` * has been called. */`",1215,null],[11,"GetState","","`text /** * The current state of the blocker. * * In case of crash, this is converted to JSON and attached to * the crash report. * * This field may be used to provide JSON-style data structures. * For this purpose, use * - nsIPropertyBag to represent objects; * - nsIVariant to represent field values (which may hold nsIPropertyBag * themselves). */`",1215,null],[11,"addref","","",1216,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1216,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncShutdownClient` to one of its base interfaces.",1216,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1216,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`text /** * A client for a nsIAsyncShutdownBarrier. */ /** * The name of the barrier. */`",1216,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddBlocker","","`text /** * Add a blocker. * * After a `blocker` has been added with `addBlocker`, if it is not * removed with `removeBlocker`, this will, by design, eventually * CAUSE A CRASH. * * Calling `addBlocker` once nsIAsyncShutdownBarrier::wait() has been * called on the owning barrier returns an error. * * @param aBlocker The blocker to add. Once * nsIAsyncShutdownBarrier::wait() has been called, it will not * call its `aOnReady` callback until all blockers have been * removed, each by a call to `removeBlocker`. * @param aFileName The filename of the callsite, as given by `__FILE__`. * @param aLineNumber The linenumber of the callsite, as given by `__LINE__`. * @param aStack Information on the stack that lead to this call. Generally * empty when called from C++. */`",1216,null],[11,"RemoveBlocker","","`text /** * Remove a blocker. * * @param aBlocker A blocker previously added to this client through * `addBlocker`. Noop if the blocker has never been added or has been * removed already. */`",1216,null],[11,"addref","","",1217,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1217,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncShutdownCompletionCallback` to one of its base interfaces.",1217,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1217,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Done","","`text /** * The operation has been completed. */`",1217,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1218,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1218,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncShutdownBarrier` to one of its base interfaces.",1218,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1218,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClient","","`text /** * The blocker registration capability. Most services may wish to * publish this capability to let services that depend on it register * blockers. */`",1218,null],[11,"GetState","","`text /** * The state of all the blockers of the barrier. * * See the documentation of `nsIAsyncShutdownBlocker` for the * format. */`",1218,null],[11,"Wait","","`text /** * Wait for all blockers to complete. * * Method `aOnReady` will be called once all blockers have finished. * The callback always receives NS_OK. */`",1218,null],[11,"addref","","",1219,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1219,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncShutdownService` to one of its base interfaces.",1219,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1219,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"MakeBarrier","","`text /** * Create a new barrier. * * By convention, the name should respect the following format: * \"MyModuleName: Doing something while it's time\" * e.g. * \"OS.File: Waiting for clients to flush before shutting down\" * * This attribute is uploaded as part of crash reports. */`",1219,null],[11,"GetProfileBeforeChange","","`text /** * Barrier for notification profile-before-change. */`",1219,null],[11,"GetProfileChangeTeardown","","`text /** * Barrier for notification profile-change-teardown. */`",1219,null],[11,"GetQuitApplicationGranted","","`text /** * Barrier for notification quit-application-granted. */`",1219,null],[11,"GetSendTelemetry","","`text /** * Barrier for notification profile-before-change-telemetry. */`",1219,null],[11,"GetWebWorkersShutdown","","`text /** * Barrier for notification web-workers-shutdown. */`",1219,null],[11,"GetXpcomWillShutdown","","`text /** * Barrier for notification xpcom-will-shutdown. */`",1219,null],[11,"addref","","",1220,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1220,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleHideEvent` to one of its base interfaces.",1220,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1220,{"inputs":[{"name":"self"}],"output":{"name":"nsiaccessibleevent"}}],[11,"GetTargetParent","","`text /** * Return an accessible that was a parent of the target. */`",1220,null],[11,"GetTargetNextSibling","","`text /** * Return an accessible that was a next sibling of the target */`",1220,null],[11,"GetTargetPrevSibling","","`text /** * Return an accessible that was a parent of the target */`",1220,null],[11,"addref","","",1221,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1221,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMarionette` to one of its base interfaces.",1221,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1221,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRunning","","`text /** Indicates whether the remote protocol is enabled. */`",1221,null],[11,"addref","","",1222,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1222,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirIndexListener` to one of its base interfaces.",1222,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1222,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnIndexAvailable","","`text /** * Called for each directory entry * * @param request - the request * @param ctxt - opaque parameter * @param index - new index to add */`",1222,null],[11,"OnInformationAvailable","","`text /** * Called for each information line * * @param request - the request * @param ctxt - opaque parameter * @param info - new info to add */`",1222,null],[11,"addref","","",1223,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1223,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDirIndexParser` to one of its base interfaces.",1223,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1223,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"GetListener","","`text /** * The interface to use as a callback for new entries */`",1223,null],[11,"SetListener","","`text /** * The interface to use as a callback for new entries */`",1223,null],[11,"GetComment","","`text /** * The comment given, if any * This result is only valid _after_ OnStopRequest has occurred, * because it can occur anywhere in the datastream */`",1223,null],[11,"GetEncoding","","`text /** * The encoding to use */`",1223,null],[11,"SetEncoding","","`text /** * The encoding to use */`",1223,null],[11,"addref","","",1224,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1224,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrivateBrowsingTrackingProtectionWhitelist` to one of its base interfaces.",1224,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1224,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddToAllowList","","`text /** * Add a URI to the list of allowed tracking sites in Private Browsing mode * (essentially a tracking whitelist). This operation will cause the URI to * be registered if it does not currently exist. If it already exists, then * the operation is essentially a no-op. * * @param uri the uri to add to the list */`",1224,null],[11,"RemoveFromAllowList","","`text /** * Remove a URI from the list of allowed tracking sites in Private Browsing * mode (the tracking whitelist). If the URI is not already in the list, * then the operation is essentially a no-op. * * @param uri the uri to remove from the list */`",1224,null],[11,"ExistsInAllowList","","`text /** * Check if a URI exists in the list of allowed tracking sites in Private * Browsing mode (the tracking whitelist). * * @param uri the uri to look for in the list */`",1224,null],[11,"addref","","",1225,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1225,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFactory` to one of its base interfaces.",1225,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1225,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateInstance","","`text /** * Creates an instance of a component. * * @param aOuter Pointer to a component that wishes to be aggregated * in the resulting instance. This will be nullptr if no * aggregation is requested. * @param iid The IID of the interface being requested in * the component which is being currently created. * @param result [out] Pointer to the newly created instance, if successful. * @throws NS_NOINTERFACE - Interface not accessible. * @throws NS_ERROR_NO_AGGREGATION - if an 'outer' object is supplied, but the * component is not aggregatable. * NS_ERROR* - Method failure. */`",1225,null],[11,"LockFactory","","`text /** * LockFactory provides the client a way to keep the component * in memory until it is finished with it. The client can call * LockFactory(PR_TRUE) to lock the factory and LockFactory(PR_FALSE) * to release the factory. * * @param lock - Must be PR_TRUE or PR_FALSE * @throws NS_ERROR* - Method failure. */`",1225,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1226,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1226,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIClassifiedChannel` to one of its base interfaces.",1226,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1226,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetMatchedInfo","","`text /** * Sets matched info of the classified channel. * * @param aList * Name of the Safe Browsing list that matched (e.g. goog-phish-shavar). * @param aProvider * Name of the Safe Browsing provider that matched (e.g. google) * @param aFullHash * Full hash of URL that matched Safe Browsing list. */`",1226,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMatchedList","","`text /** * Name of the list that matched */`",1226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMatchedProvider","","`text /** * Name of provider that matched */`",1226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetMatchedFullHash","","`text /** * Full hash of URL that matched */`",1226,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1227,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1227,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJSID` to one of its base interfaces.",1227,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1227,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetName","","`readonly attribute string name;`",1227,null],[11,"GetNumber","","`readonly attribute string number;`",1227,null],[11,"GetValid","","`readonly attribute boolean valid;`",1227,null],[11,"Equals","","`boolean equals (in nsIJSID other);`",1227,null],[11,"ToString","","`string toString ();`",1227,null],[11,"Initialize","","`[noscript] void initialize (in string idString);`",1227,null],[11,"addref","","",1228,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1228,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJSIID` to one of its base interfaces.",1228,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1228,{"inputs":[{"name":"self"}],"output":{"name":"nsijsid"}}],[11,"addref","","",1229,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1229,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIJSCID` to one of its base interfaces.",1229,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1229,{"inputs":[{"name":"self"}],"output":{"name":"nsijsid"}}],[11,"addref","","",1230,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1230,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDNSService` to one of its base interfaces.",1230,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1230,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"RESOLVE_BYPASS_CACHE","","`text /************************************************************************* * Listed below are the various flags that may be OR'd together to form * the aFlags parameter passed to asyncResolve() and resolve(). */ /** * if set, this flag suppresses the internal DNS lookup cache. */`",1230,null],[18,"RESOLVE_CANONICAL_NAME","","`text /** * if set, the canonical name of the specified host will be queried. */`",1230,null],[18,"RESOLVE_PRIORITY_MEDIUM","","`text /** * if set, the query is given lower priority. Medium takes precedence * if both are used. */`",1230,null],[18,"RESOLVE_PRIORITY_LOW","","",1230,null],[18,"RESOLVE_SPECULATE","","`text /** * if set, indicates request is speculative. Speculative requests * return errors if prefetching is disabled by configuration. */`",1230,null],[18,"RESOLVE_DISABLE_IPV6","","`text /** * If set, only IPv4 addresses will be returned from resolve/asyncResolve. */`",1230,null],[18,"RESOLVE_OFFLINE","","`text /** * If set, only literals and cached entries will be returned from resolve/ * asyncResolve. */`",1230,null],[18,"RESOLVE_DISABLE_IPV4","","`text /** * If set, only IPv6 addresses will be returned from resolve/asyncResolve. */`",1230,null],[18,"RESOLVE_ALLOW_NAME_COLLISION","","`text /** * If set, allow name collision results (127.0.53.53) which are normally filtered. */`",1230,null],[11,"GetMyHostName","","`text /** * @return the hostname of the operating system. */`",1230,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1231,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1231,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserElementNextPaintListener` to one of its base interfaces.",1231,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1231,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RecvNextPaint","","`void recvNextPaint ();`",1231,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1232,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1232,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserElementAPI` to one of its base interfaces.",1232,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FIND_CASE_SENSITIVE","","",1232,null],[18,"FIND_CASE_INSENSITIVE","","",1232,null],[18,"FIND_FORWARD","","",1232,null],[18,"FIND_BACKWARD","","",1232,null],[11,"DestroyFrameScripts","","`text /** * Notify frame scripts that support the API to destroy. */`",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetFrameLoader","","`void setFrameLoader (in nsIFrameLoader frameLoader);`",1232,null],[11,"SendMouseEvent","","`void sendMouseEvent (in DOMString type, in uint32_t x, in uint32_t y, in uint32_t button, in uint32_t clickCount, in uint32_t mifiers);`",1232,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SendTouchEvent","","`void sendTouchEvent (in DOMString aType, [array, size_is (count), const] in uint32_t aIdentifiers, [array, size_is (count), const] in int32_t aXs, [array, size_is (count), const] in int32_t aYs, [array, size_is (count), const] in uint32_t aRxs, [array, size_is (count), const] in uint32_t aRys, [array, size_is (count), const] in float aRotationAngles, [array, size_is (count), const] in float aForces, in uint32_t count, in long aModifiers);`",1232,null],[11,"GoBack","","`void goBack ();`",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GoForward","","`void goForward ();`",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Reload","","`void reload (in boolean hardReload);`",1232,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Stop","","`void stop ();`",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"PurgeHistory","","`nsIDOMDOMRequest purgeHistory ();`",1232,null],[11,"GetScreenshot","","`nsIDOMDOMRequest getScreenshot (in uint32_t width, in uint32_t height, [optional] in DOMString mimeType);`",1232,null],[11,"Zoom","","`void zoom (in float zoom);`",1232,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetCanGoBack","","`nsIDOMDOMRequest getCanGoBack ();`",1232,null],[11,"GetCanGoForward","","`nsIDOMDOMRequest getCanGoForward ();`",1232,null],[11,"GetContentDimensions","","`nsIDOMDOMRequest getContentDimensions ();`",1232,null],[11,"FindAll","","`void findAll (in DOMString searchString, in long caseSensitivity);`",1232,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"FindNext","","`void findNext (in long direction);`",1232,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"ClearMatch","","`void clearMatch ();`",1232,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddNextPaintListener","","`void addNextPaintListener (in nsIBrowserElementNextPaintListener listener);`",1232,null],[11,"RemoveNextPaintListener","","`void removeNextPaintListener (in nsIBrowserElementNextPaintListener listener);`",1232,null],[11,"GetWebManifest","","`text /** * Returns an object that represents a Web Manifest: * http://w3c.github.io/manifest/ */`",1232,null],[11,"addref","","",1233,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1233,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIChannelWithDivertableParentListener` to one of its base interfaces.",1233,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1233,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"MessageDiversionStop","","`text /** * The message diversion has finished the calls to * SuspendMessageDiversion/ResumeMessageDiversion are not necessary anymore. */`",1233,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SuspendInternal","","`text /** * Internal versions of Suspend/Resume that suspend (or resume) the channel * but do not suspend the ParentChannel's IPDL message queue. */`",1233,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumeInternal","","`void ResumeInternal ();`",1233,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1234,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1234,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheStorage` to one of its base interfaces.",1234,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1234,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"OPEN_NORMALLY","","`text /** * Placeholder for specifying \"no special flags\" during open. */`",1234,null],[18,"OPEN_TRUNCATE","","`text /** * Rewrite any existing data when opening a URL. */`",1234,null],[18,"OPEN_READONLY","","`text /** * Only open an existing entry. Don't create a new one. */`",1234,null],[18,"OPEN_PRIORITY","","`text /** * Use for first-paint blocking loads. */`",1234,null],[18,"OPEN_BYPASS_IF_BUSY","","`text /** * Bypass the cache load when write is still in progress. */`",1234,null],[18,"CHECK_MULTITHREADED","","`text /** * Perform the cache entry check (onCacheEntryCheck invocation) on any thread * for optimal perfomance optimization. If this flag is not specified it is * ensured that onCacheEntryCheck is called on the same thread as respective * asyncOpen has been called. */`",1234,null],[18,"OPEN_SECRETLY","","`text /** * Don't automatically update any 'last used' metadata of the entry. */`",1234,null],[18,"OPEN_INTERCEPTED","","`text /** * Entry is being opened as part of a service worker interception. Do not * allow the cache to be disabled in this case. */`",1234,null],[11,"AsyncOpenURI","","`text /** * Asynchronously opens a cache entry for the specified URI. * Result is fetched asynchronously via the callback. * * @param aURI * The URI to search in cache or to open for writting. * @param aIdExtension * Any string that will extend (distinguish) the entry. Two entries * with the same aURI but different aIdExtension will be comletely * different entries. If you don't know what aIdExtension should be * leave it empty. * @param aFlags * OPEN_NORMALLY - open cache entry normally for read and write * OPEN_TRUNCATE - delete any existing entry before opening it * OPEN_READONLY - don't create an entry if there is none * OPEN_PRIORITY - give this request a priority over others * OPEN_BYPASS_IF_BUSY - backward compatibility only, LOAD_BYPASS_LOCAL_CACHE_IF_BUSY * CHECK_MULTITHREADED - onCacheEntryCheck may be called on any thread, consumer * implementation is thread-safe * @param aCallback * The consumer that receives the result. * IMPORTANT: The callback may be called sooner the method returns. */`",1234,null],[11,"OpenTruncate","","`text /** * Immediately opens a new and empty cache entry in the storage, any existing * entries are immediately doomed. This is similar to the recreate() method * on nsICacheEntry. * * Storage may not implement this method and throw NS_ERROR_NOT_IMPLEMENTED. * In that case consumer must use asyncOpen with OPEN_TRUNCATE flag and get * the new entry via a callback. * * @param aURI @see asyncOpenURI * @param aIdExtension @see asyncOpenURI */`",1234,null],[11,"Exists","","`text /** * Synchronously check on existance of an entry. In case of disk entries * this uses information from the cache index. When the index data are not * up to date or index is still building, NS_ERROR_NOT_AVAILABLE is thrown. * The same error may throw any storage implementation that cannot determine * entry state without blocking the caller. */`",1234,null],[11,"GetCacheIndexEntryAttrs","","`text /** * Synchronously check on existance of alternative data and size of the * content. When the index data are not up to date or index is still building, * NS_ERROR_NOT_AVAILABLE is thrown. The same error may throw any storage * implementation that cannot determine entry state without blocking the caller. */`",1234,null],[11,"AsyncDoomURI","","`text /** * Asynchronously removes an entry belonging to the URI from the cache. */`",1234,null],[11,"AsyncEvictStorage","","`text /** * Asynchronously removes all cached entries under this storage. * NOTE: Disk storage also evicts memory storage. */`",1234,null],[11,"AsyncVisitStorage","","`text /** * Visits the storage and its entries. * NOTE: Disk storage also visits memory storage. */`",1234,null],[11,"addref","","",1235,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1235,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPropertyBag` to one of its base interfaces.",1235,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1235,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEnumerator","","`text /** * Get a nsISimpleEnumerator whose elements are nsIProperty objects. */`",1235,null],[11,"GetProperty","","`text /** * Get a property value for the given name. * @throws NS_ERROR_FAILURE if a property with that name doesn't * exist. */`",1235,null],[11,"addref","","",1236,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1236,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDownloadManagerUI` to one of its base interfaces.",1236,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1236,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_USER_INTERACTED","","`text /** * The reason that should be passed when the user requests to show the * download manager's UI. */`",1236,null],[18,"REASON_NEW_DOWNLOAD","","`text /** * The reason that should be passed to the show method when we are displaying * the UI because a new download is being added to it. */`",1236,null],[11,"Show","","`text /** * Shows the Download Manager's UI to the user. * * @param [optional] aWindowContext * The parent window context to show the UI. * @param [optional] aDownload * The download to be preselected upon opening. * @param [optional] aReason * The reason to show the download manager's UI. This defaults to * REASON_USER_INTERACTED, and should be one of the previously listed * constants. * @param [optional] aUsePrivateUI * Pass true as this argument to hint to the implementation that it * should only display private downloads in the UI, if possible. */`",1236,null],[11,"GetVisible","","`text /** * Indicates if the UI is visible or not. */`",1236,null],[11,"GetAttention","","`text /** * Brings attention to the UI if it is already visible * * @throws NS_ERROR_UNEXPECTED if the UI is not visible. */`",1236,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1237,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1237,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFXMLSource` to one of its base interfaces.",1237,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1237,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Serialize","","`text /** * Serialize the contents of the datasource to aStream. * @param aStream the output stream the will receive the * RDF/XML. Currently, the output stream need only * implement the |write()| method. */`",1237,null],[11,"addref","","",1238,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1238,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadInternal` to one of its base interfaces.",1238,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1238,{"inputs":[{"name":"self"}],"output":{"name":"nsithread"}}],[11,"GetObserver","","`text /** * Get/set the current thread observer (may be null). This attribute may be * read from any thread, but must only be set on the thread corresponding to * this thread object. The observer will be released on the thread * corresponding to this thread object after all other events have been * processed during a call to Shutdown. */`",1238,null],[11,"SetObserver","","`text /** * Get/set the current thread observer (may be null). This attribute may be * read from any thread, but must only be set on the thread corresponding to * this thread object. The observer will be released on the thread * corresponding to this thread object after all other events have been * processed during a call to Shutdown. */`",1238,null],[11,"AddObserver","","`text /** * Add an observer that will *only* receive onProcessNextEvent, * beforeProcessNextEvent. and afterProcessNextEvent callbacks. Always called * on the target thread, and the implementation does not have to be * threadsafe. Order of callbacks is not guaranteed (i.e. * afterProcessNextEvent may be called first depending on whether or not the * observer is added in a nested loop). Holds a strong ref. */`",1238,null],[11,"RemoveObserver","","`text /** * Remove an observer added via the addObserver call. Once removed the * observer will never be called again by the thread. */`",1238,null],[11,"addref","","",1239,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1239,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIThreadObserver` to one of its base interfaces.",1239,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1239,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnDispatchedEvent","","`text /** * This interface provides the observer with hooks to implement a layered * event queue. For example, it is possible to overlay processing events * for a GUI toolkit on top of the events for a thread: * * var NativeQueue; * Observer = { * onDispatchedEvent() { * NativeQueue.signal(); * } * onProcessNextEvent(thread, mayWait) { * if (NativeQueue.hasNextEvent()) * NativeQueue.processNextEvent(); * while (mayWait && !thread.hasPendingEvent()) { * NativeQueue.wait(); * NativeQueue.processNextEvent(); * } * } * }; * * NOTE: The implementation of this interface must be threadsafe. * * NOTE: It is valid to change the thread's observer during a call to an * observer method. * * NOTE: Will be split into two interfaces soon: one for onProcessNextEvent and * afterProcessNextEvent, then another that inherits the first and adds * onDispatchedEvent. */ /** * This method is called after an event has been dispatched to the thread. * This method may be called from any thread. */`",1239,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnProcessNextEvent","","`text /** * This method is called when nsIThread::ProcessNextEvent is called. It does * not guarantee that an event is actually going to be processed. This method * is only called on the target thread. * * @param thread * The thread being asked to process another event. * @param mayWait * Indicates whether or not the method is allowed to block the calling * thread. For example, this parameter is false during thread shutdown. */`",1239,null],[11,"AfterProcessNextEvent","","`text /** * This method is called (from nsIThread::ProcessNextEvent) after an event * is processed. It does not guarantee that an event was actually processed * (depends on the value of |eventWasProcessed|. This method is only called * on the target thread. DO NOT EVER RUN SCRIPT FROM THIS CALLBACK!!! * * @param thread * The thread that processed another event. * @param eventWasProcessed * Indicates whether an event was actually processed. May be false if the * |mayWait| flag was false when calling nsIThread::ProcessNextEvent(). */`",1239,null],[11,"addref","","",1240,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1240,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIGeckoMediaPluginService` to one of its base interfaces.",1240,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1240,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetThread","","`text /** * The GMP thread. Callable from any thread. */`",1240,null],[11,"RunPluginCrashCallbacks","","`text /** * Run through windows registered registered for pluginId, sending * 'PluginCrashed' chrome-only event */`",1240,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1241,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1241,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserPersist` to one of its base interfaces.",1241,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1241,{"inputs":[{"name":"self"}],"output":{"name":"nsicancelable"}}],[18,"PERSIST_FLAGS_NONE","","`text /** No special persistence behaviour. */`",1241,null],[18,"PERSIST_FLAGS_FROM_CACHE","","`text /** Use cached data if present (skipping validation), else load from network */`",1241,null],[18,"PERSIST_FLAGS_BYPASS_CACHE","","`text /** Bypass the cached data. */`",1241,null],[18,"PERSIST_FLAGS_IGNORE_REDIRECTED_DATA","","`text /** Ignore any redirected data (usually adverts). */`",1241,null],[18,"PERSIST_FLAGS_IGNORE_IFRAMES","","`text /** Ignore IFRAME content (usually adverts). */`",1241,null],[18,"PERSIST_FLAGS_NO_CONVERSION","","`text /** Do not run the incoming data through a content converter e.g. to decompress it */`",1241,null],[18,"PERSIST_FLAGS_REPLACE_EXISTING_FILES","","`text /** Replace existing files on the disk (use with due diligence!) */`",1241,null],[18,"PERSIST_FLAGS_NO_BASE_TAG_MODIFICATIONS","","`text /** Don't modify or add base tags */`",1241,null],[18,"PERSIST_FLAGS_FIXUP_ORIGINAL_DOM","","`text /** Make changes to original dom rather than cloning nodes */`",1241,null],[18,"PERSIST_FLAGS_FIXUP_LINKS_TO_DESTINATION","","`text /** Fix links relative to destination location (not origin) */`",1241,null],[18,"PERSIST_FLAGS_DONT_FIXUP_LINKS","","`text /** Don't make any adjustments to links */`",1241,null],[18,"PERSIST_FLAGS_SERIALIZE_OUTPUT","","`text /** Force serialization of output (one file at a time; not concurrent) */`",1241,null],[18,"PERSIST_FLAGS_DONT_CHANGE_FILENAMES","","`text /** Don't make any adjustments to filenames */`",1241,null],[18,"PERSIST_FLAGS_FAIL_ON_BROKEN_LINKS","","`text /** Fail on broken inline links */`",1241,null],[18,"PERSIST_FLAGS_CLEANUP_ON_FAILURE","","`text /** * Automatically cleanup after a failed or cancelled operation, deleting all * created files and directories. This flag does nothing for failed upload * operations to remote servers. */`",1241,null],[18,"PERSIST_FLAGS_AUTODETECT_APPLY_CONVERSION","","`text /** * Let the WebBrowserPersist decide whether the incoming data is encoded * and whether it needs to go through a content converter e.g. to * decompress it. */`",1241,null],[18,"PERSIST_FLAGS_APPEND_TO_FILE","","`text /** * Append the downloaded data to the target file. * This can only be used when persisting to a local file. */`",1241,null],[18,"PERSIST_FLAGS_FORCE_ALLOW_COOKIES","","`text /** * Force relevant cookies to be sent with this load even if normally they * wouldn't be. */`",1241,null],[18,"PERSIST_STATE_READY","","`text /** Persister is ready to save data */`",1241,null],[18,"PERSIST_STATE_SAVING","","`text /** Persister is saving data */`",1241,null],[18,"PERSIST_STATE_FINISHED","","`text /** Persister has finished saving data */`",1241,null],[18,"ENCODE_FLAGS_SELECTION_ONLY","","`text /** Output only the current selection as opposed to the whole document. */`",1241,null],[18,"ENCODE_FLAGS_FORMATTED","","`text /** * For plaintext output. Convert html to plaintext that looks like the html. * Implies wrap (except inside &lt;pre&gt;), since html wraps. * HTML output: always do prettyprinting, ignoring existing formatting. */`",1241,null],[18,"ENCODE_FLAGS_RAW","","`text /** * Output without formatting or wrapping the content. This flag * may be used to preserve the original formatting as much as possible. */`",1241,null],[18,"ENCODE_FLAGS_BODY_ONLY","","`text /** Output only the body section, no HTML tags. */`",1241,null],[18,"ENCODE_FLAGS_PREFORMATTED","","`text /** Wrap even if when not doing formatted output (e.g. for text fields). */`",1241,null],[18,"ENCODE_FLAGS_WRAP","","`text /** Wrap documents at the specified column. */`",1241,null],[18,"ENCODE_FLAGS_FORMAT_FLOWED","","`text /** * For plaintext output. Output for format flowed (RFC 2646). This is used * when converting to text for mail sending. This differs just slightly * but in an important way from normal formatted, and that is that * lines are space stuffed. This can't (correctly) be done later. */`",1241,null],[18,"ENCODE_FLAGS_ABSOLUTE_LINKS","","`text /** Convert links to absolute links where possible. */`",1241,null],[18,"ENCODE_FLAGS_CR_LINEBREAKS","","`text /** * Output with carriage return line breaks. May also be combined with * ENCODE_FLAGS_LF_LINEBREAKS and if neither is specified, the platform * default format is used. */`",1241,null],[18,"ENCODE_FLAGS_LF_LINEBREAKS","","`text /** * Output with linefeed line breaks. May also be combined with * ENCODE_FLAGS_CR_LINEBREAKS and if neither is specified, the platform * default format is used. */`",1241,null],[18,"ENCODE_FLAGS_NOSCRIPT_CONTENT","","`text /** For plaintext output. Output the content of noscript elements. */`",1241,null],[18,"ENCODE_FLAGS_NOFRAMES_CONTENT","","`text /** For plaintext output. Output the content of noframes elements. */`",1241,null],[18,"ENCODE_FLAGS_ENCODE_BASIC_ENTITIES","","`text /** * Encode basic entities, e.g. output &nbsp; instead of character code 0xa0. * The basic set is just &nbsp; &amp; &lt; &gt; &quot; for interoperability * with older products that don't support &alpha; and friends. */`",1241,null],[11,"GetPersistFlags","","`text /** * Flags governing how data is fetched and saved from the network. * It is best to set this value explicitly unless you are prepared * to accept the default values. */`",1241,null],[11,"SetPersistFlags","","`text /** * Flags governing how data is fetched and saved from the network. * It is best to set this value explicitly unless you are prepared * to accept the default values. */`",1241,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetCurrentState","","`text /** * Current state of the persister object. */`",1241,null],[11,"GetResult","","`text /** * Value indicating the success or failure of the persist * operation. * * @throws NS_BINDING_ABORTED Operation cancelled. * @throws NS_ERROR_FAILURE Non-specific failure. */`",1241,null],[11,"GetProgressListener","","`text /** * Callback listener for progress notifications. The object that the * embbedder supplies may also implement nsIInterfaceRequestor and be * prepared to return nsIAuthPrompt or other interfaces that may be required * to download data. * * @see nsIAuthPrompt * @see nsIInterfaceRequestor */`",1241,null],[11,"SetProgressListener","","`text /** * Callback listener for progress notifications. The object that the * embbedder supplies may also implement nsIInterfaceRequestor and be * prepared to return nsIAuthPrompt or other interfaces that may be required * to download data. * * @see nsIAuthPrompt * @see nsIInterfaceRequestor */`",1241,null],[11,"SaveURI","","`text /** * Save the specified URI to file. * * @param aURI URI to save to file. Some implementations of this interface * may also support <CODE>nullptr</CODE> to imply the currently * loaded URI. * @param aCacheKey An object representing the URI in the cache or * <CODE>nullptr</CODE>. This can be a necko cache key, * an nsIWebPageDescriptor, or the currentDescriptor of an * nsIWebPageDescriptor. * @param aReferrer The referrer URI to pass with an HTTP request or * <CODE>nullptr</CODE>. * @param aReferrerPolicy The referrer policy for when and what to send via * HTTP Referer header. Ignored if aReferrer is * <CODE>nullptr</CODE>. Taken from REFERRER_POLICY * constants in nsIHttpChannel. * @param aPostData Post data to pass with an HTTP request or * <CODE>nullptr</CODE>. * @param aExtraHeaders Additional headers to supply with an HTTP request * or <CODE>nullptr</CODE>. * @param aFile Target file. This may be a nsIFile object or an * nsIURI object with a file scheme or a scheme that * supports uploading (e.g. ftp). * @param aPrivacyContext A context from which the privacy status of this * save operation can be determined. Must only be null * in situations in which no such context is available * (eg. the operation has no logical association with any * window or document) * * @see nsIFile * @see nsIURI * @see nsIInputStream * * @throws NS_ERROR_INVALID_ARG One or more arguments was invalid. */`",1241,null],[11,"SavePrivacyAwareURI","","`text /** * @param aIsPrivate Treat the save operation as private (ie. with * regards to networking operations and persistence * of intermediate data, etc.) * @see saveURI for all other parameter descriptions */`",1241,null],[11,"SaveChannel","","`text /** * Save a channel to a file. It must not be opened yet. * @see saveURI */`",1241,null],[11,"SaveDocument","","`text /** * Save the specified DOM document to file and optionally all linked files * (e.g. images, CSS, JS & subframes). Do not call this method until the * document has finished loading! * * @param aDocument Document to save to file. Some implementations of * this interface may also support <CODE>nullptr</CODE> * to imply the currently loaded document. Can be an * nsIWebBrowserPersistDocument or nsIDOMDocument. * @param aFile Target local file. This may be a nsIFile object or an * nsIURI object with a file scheme or a scheme that * supports uploading (e.g. ftp). * @param aDataPath Path to directory where URIs linked to the document * are saved or nullptr if no linked URIs should be saved. * This may be a nsIFile object or an nsIURI object * with a file scheme. * @param aOutputContentType The desired MIME type format to save the * document and all subdocuments into or nullptr to use * the default behaviour. * @param aEncodingFlags Flags to pass to the encoder. * @param aWrapColumn For text documents, indicates the desired width to * wrap text at. Parameter is ignored if wrapping is not * specified by the encoding flags. * * @see nsIWebBrowserPersistDocument * @see nsIWebBrowserPersistable * @see nsIFile * @see nsIURI * * @throws NS_ERROR_INVALID_ARG One or more arguments was invalid. */`",1241,null],[11,"CancelSave","","`text /** * Cancels the current operation. The caller is responsible for cleaning up * partially written files or directories. This has the same effect as calling * cancel with an argument of NS_BINDING_ABORTED. */`",1241,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1242,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1242,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRunnable` to one of its base interfaces.",1242,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1242,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Run","","`text /** * The function implementing the task to be run. */`",1242,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1243,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1243,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRunnablePriority` to one of its base interfaces.",1243,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1243,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"PRIORITY_NORMAL","","",1243,null],[18,"PRIORITY_INPUT","","",1243,null],[18,"PRIORITY_HIGH","","",1243,null],[11,"GetPriority","","`readonly attribute unsigned long priority;`",1243,null],[11,"addref","","",1244,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1244,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAnnotationObserver` to one of its base interfaces.",1244,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1244,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPageAnnotationSet","","`text /** * Called when an annotation value is set. It could be a new annotation, * or it could be a new value for an existing annotation. */`",1244,null],[11,"OnItemAnnotationSet","","`void onItemAnnotationSet (in long long aItemId, in AUTF8String aName, in unsigned short aSource, in boolean aDontUpdateLastModified);`",1244,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"uint16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"OnPageAnnotationRemoved","","`text /** * Called when an annotation is deleted. If aName is empty, then ALL * annotations for the given URI have been deleted. This is not called when * annotations are expired (normally happens when the app exits). */`",1244,null],[11,"OnItemAnnotationRemoved","","`void onItemAnnotationRemoved (in long long aItemId, in AUTF8String aName, in unsigned short aSource);`",1244,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1245,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1245,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAnnotationService` to one of its base interfaces.",1245,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1245,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"EXPIRE_SESSION","","`text /** * Valid values for aExpiration, which sets the expiration policy for your * annotation. The times for the days, weeks and months policies are * measured since the last visit date of the page in question. These * will not expire so long as the user keeps visiting the page from time * to time. */`",1245,null],[18,"EXPIRE_WEEKS","","",1245,null],[18,"EXPIRE_MONTHS","","",1245,null],[18,"EXPIRE_NEVER","","",1245,null],[18,"EXPIRE_WITH_HISTORY","","",1245,null],[18,"EXPIRE_DAYS","","",1245,null],[18,"TYPE_INT32","","",1245,null],[18,"TYPE_DOUBLE","","",1245,null],[18,"TYPE_STRING","","",1245,null],[18,"TYPE_INT64","","",1245,null],[11,"SetPageAnnotation","","`text /** * Sets an annotation, overwriting any previous annotation with the same * URL/name. IT IS YOUR JOB TO NAMESPACE YOUR ANNOTATION NAMES. * Use the form \"namespace/value\", so your name would be like * \"bills_extension/page_state\" or \"history/thumbnail\". * * Do not use characters that are not valid in URLs such as spaces, \":\", * commas, or most other symbols. You should stick to ASCII letters and * numbers plus \"_\", \"-\", and \"/\". * * aExpiration is one of EXPIRE_* above. aFlags should be 0 for now, some * flags will be defined in the future. * * NOTE: ALL PAGE ANNOTATIONS WILL GET DELETED WHEN THE PAGE IS REMOVED FROM * HISTORY IF THE PAGE IS NOT BOOKMARKED. This means that if you create an * annotation on an unvisited URI, it will get deleted when the browser * shuts down. Otherwise, URIs can exist in history as annotations but the * user has no way of knowing it, potentially violating their privacy * expectations about actions such as \"Clear history\". * If there is an important annotation that the user or extension wants to * keep, you should add a bookmark for the page and use an EXPIRE_NEVER * annotation. This will ensure the annotation exists until the item is * removed by the user. * See EXPIRE_* constants above for further information. * * For item annotations, aSource should be a change source constant from * nsINavBookmarksService::SOURCE_*, and defaults to SOURCE_DEFAULT if * omitted. Setting an item annotation also notifies * `nsINavBookmarkObserver::onItemChanged` for the affected item. * * The annotation \"favicon\" is special. Favicons are stored in the favicon * service, but are special cased in the protocol handler so they look like * annotations. Do not set favicons using this service, it will not work. * * Only C++ consumers may use the type-specific methods. * * @throws NS_ERROR_ILLEGAL_VALUE if the page or the bookmark doesn't exist. */`",1245,null],[11,"SetItemAnnotation","","`void setItemAnnotation (in long long aItemId, in AUTF8String aName, in nsIVariant aValue, in long aFlags, in unsigned short aExpiration, [optional] in unsigned short aSource, [optional] in bool aDontUpdateLastModified);`",1245,null],[11,"SetPageAnnotationString","","`text /** * @throws NS_ERROR_ILLEGAL_VALUE if the page or the bookmark doesn't exist. */`",1245,null],[11,"SetItemAnnotationString","","`[noscript] void setItemAnnotationString (in long long aItemId, in AUTF8String aName, in AString aValue, in long aFlags, in unsigned short aExpiration, [optional] in unsigned short aSource, [optional] in bool aDontUpdateLastModified);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"int32_t"},{"name":"uint16_t"},{"name":"uint16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetPageAnnotationInt32","","`text /** * Sets an annotation just like setAnnotationString, but takes an Int32 as * input. * * @throws NS_ERROR_ILLEGAL_VALUE if the page or the bookmark doesn't exist. */`",1245,null],[11,"SetItemAnnotationInt32","","`[noscript] void setItemAnnotationInt32 (in long long aItemId, in AUTF8String aName, in long aValue, in long aFlags, in unsigned short aExpiration, [optional] in unsigned short aSource, [optional] in bool aDontUpdateLastModified);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"int32_t"},{"name":"int32_t"},{"name":"uint16_t"},{"name":"uint16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetPageAnnotationInt64","","`text /** * Sets an annotation just like setAnnotationString, but takes an Int64 as * input. * * @throws NS_ERROR_ILLEGAL_VALUE if the page or the bookmark doesn't exist. */`",1245,null],[11,"SetItemAnnotationInt64","","`[noscript] void setItemAnnotationInt64 (in long long aItemId, in AUTF8String aName, in long long aValue, in long aFlags, in unsigned short aExpiration, [optional] in unsigned short aSource, [optional] in bool aDontUpdateLastModified);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"int64_t"},{"name":"int32_t"},{"name":"uint16_t"},{"name":"uint16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetPageAnnotationDouble","","`text /** * Sets an annotation just like setAnnotationString, but takes a double as * input. * * @throws NS_ERROR_ILLEGAL_VALUE if the page or the bookmark doesn't exist. */`",1245,null],[11,"SetItemAnnotationDouble","","`[noscript] void setItemAnnotationDouble (in long long aItemId, in AUTF8String aName, in double aValue, in long aFlags, in unsigned short aExpiration, [optional] in unsigned short aSource, [optional] in boolean aDontUpdateLastModified);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"c_double"},{"name":"int32_t"},{"name":"uint16_t"},{"name":"uint16_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPageAnnotation","","`text /** * Retrieves the value of a given annotation. Throws an error if the * annotation does not exist. C++ consumers may use the type-specific * methods. * * The type-specific methods throw if the given annotation is set in * a different type. */`",1245,null],[11,"GetItemAnnotation","","`nsIVariant getItemAnnotation (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"GetPageAnnotationString","","`text /** * @see getPageAnnotation */`",1245,null],[11,"GetItemAnnotationString","","`[noscript] AString getItemAnnotationString (in long long aItemId, in AUTF8String aName);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPageAnnotationInt32","","`text /** * @see getPageAnnotation */`",1245,null],[11,"GetItemAnnotationInt32","","`[noscript] long getItemAnnotationInt32 (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"GetPageAnnotationInt64","","`text /** * @see getPageAnnotation */`",1245,null],[11,"GetItemAnnotationInt64","","`[noscript] long long getItemAnnotationInt64 (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"GetPageAnnotationDouble","","`text /** * @see getPageAnnotation */`",1245,null],[11,"GetItemAnnotationDouble","","`[noscript] double getItemAnnotationDouble (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"GetPageAnnotationInfo","","`text /** * Retrieves info about an existing annotation. * * aType will be one of TYPE_* constansts above * * example JS: * var flags = {}, exp = {}, type = {}; * annotator.getAnnotationInfo(myURI, \"foo\", flags, exp, type); * // now you can use 'exp.value' and 'flags.value' */`",1245,null],[11,"GetItemAnnotationInfo","","`void getItemAnnotationInfo (in long long aItemId, in AUTF8String aName, out long aFlags, out unsigned short aExpiration, out unsigned short aType);`",1245,null],[11,"GetPageAnnotationType","","`text /** * Retrieves the type of an existing annotation * Use getAnnotationInfo if you need this along with the mime-type etc. * * @param aURI * the uri on which the annotation is set * @param aName * the annotation name * @return one of the TYPE_* constants above * @throws if the annotation is not set */`",1245,null],[11,"GetItemAnnotationType","","`uint16_t getItemAnnotationType (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"GetPagesWithAnnotation","","`text /** * Returns a list of all URIs having a given annotation. */`",1245,null],[11,"GetItemsWithAnnotation","","`void getItemsWithAnnotation (in AUTF8String name, [optional] out unsigned long resultCount, [array, size_is (resultCount), retval] out long long results);`",1245,null],[11,"GetAnnotationsWithName","","`text /** * Returns a list of mozIAnnotation(s), having a given annotation name. * * @param name * The annotation to search for. * @return list of mozIAnnotation objects. */`",1245,null],[11,"GetPageAnnotationNames","","`text /** * Get the names of all annotations for this URI. * * example JS: * var annotations = annotator.getPageAnnotations(myURI, {}); */`",1245,null],[11,"GetItemAnnotationNames","","`void getItemAnnotationNames (in long long aItemId, [optional] out unsigned long count, [array, size_is (count), retval] out nsIVariant result);`",1245,null],[11,"PageHasAnnotation","","`text /** * Test for annotation existence. */`",1245,null],[11,"ItemHasAnnotation","","`boolean itemHasAnnotation (in long long aItemId, in AUTF8String aName);`",1245,null],[11,"RemovePageAnnotation","","`text /** * Removes a specific annotation. Succeeds even if the annotation is * not found. * * Removing an item annotation also notifies * `nsINavBookmarkObserver::onItemChanged` for the affected item. */`",1245,null],[11,"RemoveItemAnnotation","","`void removeItemAnnotation (in long long aItemId, in AUTF8String aName, [optional] in unsigned short aSource);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"nsacstring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"RemovePageAnnotations","","`text /** * Removes all annotations for the given page/item. * We may want some other similar functions to get annotations with given * flags (once we have flags defined). * * Unlike the other item methods, `removeItemAnnotations` does *not* notify * `nsINavBookmarkObserver::onItemChanged` for the affected item. */`",1245,null],[11,"RemoveItemAnnotations","","`void removeItemAnnotations (in long long aItemId, [optional] in unsigned short aSource);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"CopyPageAnnotations","","`text /** * Copies all annotations from the source to the destination URI/item. If * the destination already has an annotation with the same name as one on * the source, it will be overwritten if aOverwriteDest is set. Otherwise, * the original annotation will be preferred. * * All the source annotations will stay as-is. If you don't want them * any more, use removePageAnnotations on that URI. */`",1245,null],[11,"CopyItemAnnotations","","`void copyItemAnnotations (in long long aSourceItemId, in long long aDestItemId, in boolean aOverwriteDest, [optional] in unsigned short aSource);`",1245,{"inputs":[{"name":"self"},{"name":"int64_t"},{"name":"int64_t"},{"name":"bool"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"AddObserver","","`text /** * Adds an annotation observer. The annotation service will keep an owning * reference to the observer object. */`",1245,null],[11,"RemoveObserver","","`text /** * Removes an annotaton observer previously registered by addObserver. */`",1245,null],[11,"GetObservers","","`text /** * Gets an array of registered nsIAnnotationObserver objects. */`",1245,null],[11,"addref","","",1246,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1246,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIAnnotatedResult` to one of its base interfaces.",1246,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1246,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetGuid","","`text /** * Represents a place annotated with a given annotation. If a place has * multiple annotations, it can be represented by multiple * mozIAnnotatedResult(s). */ /** * The globally unique identifier of the place with this annotation. * * @note if itemId is valid this is the guid of the bookmark, otherwise * of the page. */`",1246,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetUri","","`text /** * The URI of the place with this annotation, if available, null otherwise. */`",1246,null],[11,"GetItemId","","`text /** * The bookmark id of the place with this annotation, if available, * -1 otherwise. * * @note if itemId is -1, it doesn't mean the page is not bookmarked, just * that this annotation is relative to the page, not to the bookmark. */`",1246,null],[11,"GetAnnotationName","","`text /** * Name of the annotation. */`",1246,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAnnotationValue","","`text /** * Value of the annotation. */`",1246,null],[11,"addref","","",1247,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1247,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_InterfacesByID` to one of its base interfaces.",1247,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1247,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1248,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1248,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Interfaces` to one of its base interfaces.",1248,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1248,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1249,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1249,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Classes` to one of its base interfaces.",1249,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1249,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Initialize","","`void initialize (in nsIJSCID cid, in string idString);`",1249,null],[11,"addref","","",1250,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1250,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_ClassesByID` to one of its base interfaces.",1250,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1250,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1251,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1251,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Results` to one of its base interfaces.",1251,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1251,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1252,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1252,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_ID` to one of its base interfaces.",1252,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1252,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1253,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1253,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Exception` to one of its base interfaces.",1253,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1253,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1254,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1254,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Constructor` to one of its base interfaces.",1254,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1254,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1255,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1255,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCConstructor` to one of its base interfaces.",1255,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1255,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetClassID","","`readonly attribute nsIJSCID classID;`",1255,null],[11,"GetInterfaceID","","`readonly attribute nsIJSIID interfaceID;`",1255,null],[11,"GetInitializer","","`readonly attribute string initializer;`",1255,null],[11,"addref","","",1256,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1256,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_utils_Sandbox` to one of its base interfaces.",1256,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1256,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1257,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1257,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `ScheduledGCCallback` to one of its base interfaces.",1257,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1257,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback ();`",1257,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1258,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1258,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBlockThreadedExecutionCallback` to one of its base interfaces.",1258,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1258,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Callback","","`void callback ();`",1258,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1259,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1259,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents_Utils` to one of its base interfaces.",1259,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSandbox","","`readonly attribute nsIXPCComponents_utils_Sandbox Sandbox;`",1259,null],[11,"IsModuleLoaded","","`text /** * Returns true if the js file located at 'registryLocation' location has * been loaded previously via the import method above. Returns false * otherwise. * * @param resourceURI A resource:// URI string representing the location of * the js file to be checked if it is already loaded or not. * @returns boolean, true if the js file has been loaded via import. false * otherwise */`",1259,null],[11,"Unload","","`void unload (in AUTF8String registryLocation);`",1259,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"ForceGC","","`void forceGC ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ForceCC","","`void forceCC ([optional] in nsICycleCollectorListener aListener);`",1259,null],[11,"FinishCC","","`void finishCC ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CcSlice","","`void ccSlice (in long long budget);`",1259,{"inputs":[{"name":"self"},{"name":"int64_t"}],"output":{"name":"nsresult"}}],[11,"GetMaxCCSliceTimeSinceClear","","`long getMaxCCSliceTimeSinceClear ();`",1259,null],[11,"ClearMaxCCTime","","`void clearMaxCCTime ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ForceShrinkingGC","","`void forceShrinkingGC ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SchedulePreciseGC","","`void schedulePreciseGC (in ScheduledGCCallback callback);`",1259,null],[11,"SchedulePreciseShrinkingGC","","`void schedulePreciseShrinkingGC (in ScheduledGCCallback callback);`",1259,null],[11,"UnlinkGhostWindows","","`void unlinkGhostWindows ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsInAutomation","","`readonly attribute boolean isInAutomation;`",1259,null],[11,"CrashIfNotInAutomation","","`void crashIfNotInAutomation ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDOMClassInfo","","`text /** * Get a DOM classinfo for the given classname. Only some class * names are supported. */`",1259,null],[11,"GetWatchdogTimestamp","","`text /** * Retrieve the last time, in microseconds since epoch, that a given * watchdog-related event occured. * * Valid categories: * \"ContextStateChange\" - Context switching between active and inactive states * \"WatchdogWakeup\" - Watchdog waking up from sleeping * \"WatchdogHibernateStart\" - Watchdog begins hibernating * \"WatchdogHibernateStop\" - Watchdog stops hibernating */`",1259,null],[11,"GetWebIDLCallerPrincipal","","`nsIPrincipal getWebIDLCallerPrincipal ();`",1259,null],[11,"Now","","`double now ();`",1259,null],[11,"ReadUTF8File","","`AUTF8String readUTF8File (in nsIFile file);`",1259,null],[11,"ReadUTF8URI","","`AUTF8String readUTF8URI (in nsIURI url);`",1259,null],[11,"BlockThreadedExecution","","`text /** * If the main thread is using any kind of fancy cooperative * scheduling (e.g., Quantum DOM scheduling), * blockThreadedExecution disables it temporarily. The * aBlockedCallback is called when it has been completely disabled * and events are back to running sequentially on a single main * thread. Calling unblockThreadedExecution will re-enable thread * scheduling of the main thread. Multiple calls to * blockThreadedExecution will require the same number of calls to * unblockThreadedExecution in order to resume cooperative * scheduling. */`",1259,null],[11,"UnblockThreadedExecution","","`void unblockThreadedExecution ();`",1259,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1260,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1260,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponentsBase` to one of its base interfaces.",1260,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1260,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetInterfaces","","`readonly attribute nsIXPCComponents_Interfaces interfaces;`",1260,null],[11,"GetInterfacesByID","","`readonly attribute nsIXPCComponents_InterfacesByID interfacesByID;`",1260,null],[11,"GetResults","","`readonly attribute nsIXPCComponents_Results results;`",1260,null],[11,"IsSuccessCode","","`boolean isSuccessCode (in nsresult result);`",1260,null],[11,"addref","","",1261,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1261,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIXPCComponents` to one of its base interfaces.",1261,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1261,{"inputs":[{"name":"self"}],"output":{"name":"nsixpccomponentsbase"}}],[11,"GetClasses","","`readonly attribute nsIXPCComponents_Classes classes;`",1261,null],[11,"GetClassesByID","","`readonly attribute nsIXPCComponents_ClassesByID classesByID;`",1261,null],[11,"GetStack","","`readonly attribute nsIStackFrame stack;`",1261,null],[11,"GetManager","","`readonly attribute nsIComponentManager manager;`",1261,null],[11,"GetUtils","","`readonly attribute nsIXPCComponents_Utils utils;`",1261,null],[11,"GetID","","`readonly attribute nsIXPCComponents_ID ID;`",1261,null],[11,"GetException","","`readonly attribute nsIXPCComponents_Exception Exception;`",1261,null],[11,"GetConstructor","","`readonly attribute nsIXPCComponents_Constructor Constructor;`",1261,null],[11,"addref","","",1262,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1262,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleValue` to one of its base interfaces.",1262,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1262,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetMaximumValue","","`readonly attribute double maximumValue;`",1262,null],[11,"GetMinimumValue","","`readonly attribute double minimumValue;`",1262,null],[11,"GetCurrentValue","","`attribute double currentValue;`",1262,null],[11,"SetCurrentValue","","`attribute double currentValue;`",1262,{"inputs":[{"name":"self"},{"name":"c_double"}],"output":{"name":"nsresult"}}],[11,"GetMinimumIncrement","","`readonly attribute double minimumIncrement;`",1262,null],[11,"addref","","",1263,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1263,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierCallback` to one of its base interfaces.",1263,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1263,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleEvent","","`void handleEvent (in ACString value);`",1263,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1264,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1264,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierUpdateObserver` to one of its base interfaces.",1264,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1264,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"UpdateUrlRequested","","`text /** * The update requested a new URL whose contents should be downloaded * and sent to the classifier as a new stream. * * @param url The url that was requested. * @param table The table name that this URL's contents will be associated * with. This should be passed back to beginStream(). */`",1264,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"StreamFinished","","`text /** * A stream update has completed. * * @param status The state of the update process. * @param delay The amount of time the updater should wait to fetch the * next URL in ms. */`",1264,{"inputs":[{"name":"self"},{"name":"nsresult"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"UpdateError","","`void updateError (in nsresult error);`",1264,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"UpdateSuccess","","`text /** * The update has completed successfully. * * @param requestedTimeout The number of seconds that the caller should * wait before trying to update again. **/`",1264,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1265,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1265,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierDBService` to one of its base interfaces.",1265,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Lookup","","`text /** * Looks up a URI in the specified tables. * * @param principal: The principal containing the URI to search. * @param c: The callback will be called with a comma-separated list * of tables to which the key belongs. */`",1265,null],[11,"GetTables","","`text /** * Lists the tables along with their meta info in the following format: * * tablename;[metadata]\\n * tablename2;[metadata]\\n * * For v2 tables, the metadata is the chunks info such as * * goog-phish-shavar;a:10,14,30-40s:56,67 * goog-unwanted-shavar;a:1-3,5 * * For v4 tables, base64 encoded state is currently the only info in the * metadata (can be extended whenever necessary). For exmaple, * * goog-phish-proto;Cg0IARAGGAEiAzAwMTABEKqTARoCGAjT1gDD:oCGAjT1gDD\\n * goog-malware-proto;Cg0IAhAGGAEiAzAwMTABENCQARoCGAjx5Yty:BENCQARoCGAj\\n * * Note that the metadata is colon-separated. * */`",1265,null],[11,"SetHashCompleter","","`text /** * Set the nsIUrlClassifierCompleter object for a given table. This * object will be used to request complete versions of partial * hashes. */`",1265,null],[11,"ClearLastResults","","`text /** * Forget the results that were used in the last DB update. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginUpdate","","`text /** * Begin an update process. Will throw NS_ERROR_NOT_AVAILABLE if there * is already an update in progress. * * @param updater The update observer tied to this update. * @param tables A comma-separated list of tables included in this update. */`",1265,null],[11,"BeginStream","","`text /** * Begin a stream update. This should be called once per url being * fetched. * * @param table The table the contents of this stream will be associated * with, or empty for the initial stream. */`",1265,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"UpdateStream","","`text /** * Update the table incrementally. */`",1265,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"FinishStream","","`text /** * Finish an individual stream update. Must be called for every * beginStream() call, before the next beginStream() or finishUpdate(). * * The update observer's streamFinished will be called once the * stream has been processed. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"FinishUpdate","","`text /** * Finish an incremental update. This will attempt to commit any * pending changes and resets the update interface. * * The update observer's updateSucceeded or updateError methods * will be called when the update has been processed. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CancelUpdate","","`text /** * Cancel an incremental update. This rolls back any pending changes. * and resets the update interface. * * The update observer's updateError method will be called when the * update has been rolled back. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResetDatabase","","`text /** * Reset the url-classifier database. This call will delete the existing * database, emptying all tables. Mostly intended for use in unit tests. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ReloadDatabase","","`text /** * Reload he url-classifier database. This will empty all cache for * completions from gethash, and reload it from database. Mostly intended * for use in tests. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ClearCache","","`text /** * Empty all the caches. */`",1265,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1266,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1266,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierLookupCallback` to one of its base interfaces.",1266,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1266,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1267,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1267,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUrlClassifierClassifyCallback` to one of its base interfaces.",1267,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1267,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleResult","","`text /** * The function is called each time the URL matches a Safe Browsing list * The function could be called multiple times if URL matches multiple lists * */`",1267,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1268,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1268,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationReputationService` to one of its base interfaces.",1268,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1268,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"VERDICT_SAFE","","`text /** * Indicates the reason for the application reputation block. */`",1268,null],[18,"VERDICT_DANGEROUS","","",1268,null],[18,"VERDICT_UNCOMMON","","",1268,null],[18,"VERDICT_POTENTIALLY_UNWANTED","","",1268,null],[18,"VERDICT_DANGEROUS_HOST","","",1268,null],[11,"QueryReputation","","`text /** * Start querying the application reputation service. * * @param aQuery * The nsIApplicationReputationQuery containing metadata of the * downloaded file. * * @param aCallback * The callback for receiving the results of the query. * * @remarks aCallback may not be null. onComplete is guaranteed to be called * on aCallback. This function may not be called more than once with * the same query object. If any of the attributes of aQuery have * not been set or have been set with empty data (with the exception * of sourceURI), then a valid request can still be constructed and * will solicit a valid response, but won't produce any useful * information. */`",1268,null],[11,"addref","","",1269,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1269,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationReputationQuery` to one of its base interfaces.",1269,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1269,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSourceURI","","`text /** * A single-use, write-once interface for recording the metadata of the * downloaded file. nsIApplicationReputationService.Start() may only be called * once with a single query. */`",1269,null],[11,"GetReferrerURI","","`readonly attribute nsIURI referrerURI;`",1269,null],[11,"GetSuggestedFileName","","`readonly attribute AUTF8String suggestedFileName;`",1269,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileSize","","`readonly attribute unsigned long fileSize;`",1269,null],[11,"GetSha256Hash","","`readonly attribute ACString sha256Hash;`",1269,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSignatureInfo","","`readonly attribute nsIArray signatureInfo;`",1269,null],[11,"GetRedirects","","`readonly attribute nsIArray redirects;`",1269,null],[11,"addref","","",1270,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1270,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIApplicationReputationCallback` to one of its base interfaces.",1270,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1270,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnComplete","","`text /** * Callback for the result of the application reputation query. * @param aStatus * NS_OK if and only if the query succeeded. If it did, then * shouldBlock is meaningful (otherwise it defaults to false). This * may be NS_ERROR_FAILURE if the response cannot be parsed, or * NS_ERROR_NOT_AVAILABLE if the service has been disabled or is not * reachable. * @param aShouldBlock * Whether or not the download should be blocked. * @param aVerdict * Indicates the result of the lookup that determines whether the * download should be blocked, according to the \"VERDICT_\" constants. * This may be set to a value different than \"VERDICT_SAFE\" even if * aShouldBlock is false, so you should always check aShouldBlock. */`",1270,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"nsresult"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1271,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1271,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleEditableText` to one of its base interfaces.",1271,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1271,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SetTextContents","","`text /** * Replaces the text represented by this object by the given text. */`",1271,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"InsertText","","`text /** * Inserts text at the specified position. * * @param text - text that is inserted. * @param position - index at which to insert the text. */`",1271,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CopyText","","`text /** * Copies the text range into the clipboard. * * @param startPos - start index of the text to moved into the clipboard. * @param endPos - end index of the text to moved into the clipboard. */`",1271,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CutText","","`text /** * Deletes a range of text and copies it to the clipboard. * * @param startPos - start index of the text to be deleted. * @param endOffset - end index of the text to be deleted. */`",1271,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"DeleteText","","`text /** * Deletes a range of text. * * @param startPos - start index of the text to be deleted. * @param endPos - end index of the text to be deleted. */`",1271,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"PasteText","","`text /** * Pastes text from the clipboard. * * @param position - index at which to insert the text from the system * clipboard into the text represented by this object. */`",1271,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1272,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1272,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMTransitionEvent` to one of its base interfaces.",1272,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1272,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPropertyName","","`readonly attribute DOMString propertyName;`",1272,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetElapsedTime","","`readonly attribute float elapsedTime;`",1272,null],[11,"GetPseudoElement","","`readonly attribute DOMString pseudoElement;`",1272,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1273,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1273,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedEntry` to one of its base interfaces.",1273,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1273,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedcontainer"}}],[11,"GetSummary","","`text /** * Uses description, subtitle, summary, content and extensions * to generate a summary. * */`",1273,null],[11,"SetSummary","","`text /** * Uses description, subtitle, summary, content and extensions * to generate a summary. * */`",1273,null],[11,"GetPublished","","`text /** * The date the entry was published, in RFC822 form. Parsable by JS * and mail code. */`",1273,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetPublished","","`text /** * The date the entry was published, in RFC822 form. Parsable by JS * and mail code. */`",1273,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetContent","","`text /** * Uses atom:content and content:encoded to provide * a 'full text' view of an entry. * */`",1273,null],[11,"SetContent","","`text /** * Uses atom:content and content:encoded to provide * a 'full text' view of an entry. * */`",1273,null],[11,"GetEnclosures","","`text /** * Enclosures are podcasts, photocasts, etc. */`",1273,null],[11,"SetEnclosures","","`text /** * Enclosures are podcasts, photocasts, etc. */`",1273,null],[11,"GetMediaContent","","`text /** * Enclosures, etc. that might be displayed inline. */`",1273,null],[11,"SetMediaContent","","`text /** * Enclosures, etc. that might be displayed inline. */`",1273,null],[11,"addref","","",1274,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1274,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSStyleDeclaration` to one of its base interfaces.",1274,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1274,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetPropertyValue","","`DOMString getPropertyValue (in DOMString propertyName);`",1274,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPropertyCSSValue","","`nsIDOMCSSValue getPropertyCSSValue (in DOMString propertyName);`",1274,null],[11,"RemoveProperty","","`DOMString removeProperty (in DOMString propertyName) raises (DOMException);`",1274,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPropertyPriority","","`DOMString getPropertyPriority (in DOMString propertyName);`",1274,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetLength","","`readonly attribute unsigned long length;`",1274,null],[11,"Item","","`DOMString item (in unsigned long index);`",1274,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParentRule","","`readonly attribute nsIDOMCSSRule parentRule;`",1274,null],[11,"addref","","",1275,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1275,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageFunction` to one of its base interfaces.",1275,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1275,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnFunctionCall","","`text /** * onFunctionCall is called when execution of a custom * function should occur. * * @param aNumArguments The number of arguments * @param aFunctionArguments The arguments passed in to the function * * @returns any value as Variant type. */`",1275,null],[11,"addref","","",1276,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1276,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMCSSRule` to one of its base interfaces.",1276,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1276,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"UNKNOWN_RULE","","`text /** * The nsIDOMCSSRule interface is a datatype for a CSS style rule in * the Document Object Model. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Style */`",1276,null],[18,"STYLE_RULE","","",1276,null],[18,"CHARSET_RULE","","",1276,null],[18,"IMPORT_RULE","","",1276,null],[18,"MEDIA_RULE","","",1276,null],[18,"FONT_FACE_RULE","","",1276,null],[18,"PAGE_RULE","","",1276,null],[18,"KEYFRAMES_RULE","","",1276,null],[18,"KEYFRAME_RULE","","",1276,null],[18,"MOZ_KEYFRAMES_RULE","","",1276,null],[18,"MOZ_KEYFRAME_RULE","","",1276,null],[18,"NAMESPACE_RULE","","",1276,null],[18,"COUNTER_STYLE_RULE","","",1276,null],[18,"SUPPORTS_RULE","","",1276,null],[18,"DOCUMENT_RULE","","",1276,null],[18,"FONT_FEATURE_VALUES_RULE","","",1276,null],[11,"GetType","","`readonly attribute unsigned short type;`",1276,null],[11,"GetCssText","","`attribute DOMString cssText;`",1276,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCssText","","`attribute DOMString cssText;`",1276,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetParentStyleSheet","","`readonly attribute nsIDOMCSSStyleSheet parentStyleSheet;`",1276,null],[11,"GetParentRule","","`readonly attribute nsIDOMCSSRule parentRule;`",1276,null],[11,"addref","","",1277,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1277,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIIdleObserver` to one of its base interfaces.",1277,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1277,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTime","","`readonly attribute unsigned long time;`",1277,null],[11,"Onidle","","`void onidle ();`",1277,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Onactive","","`void onactive ();`",1277,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1278,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1278,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBaseWindow` to one of its base interfaces.",1278,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1278,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eRepaint","","`text /** * The 'flags' argument to setPositionAndSize is a set of these bits. */`",1278,null],[18,"eDelayResize","","",1278,null],[11,"Create","","`void create ();`",1278,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Destroy","","`void destroy ();`",1278,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetPosition","","`void setPosition (in long x, in long y);`",1278,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetPositionDesktopPix","","`void setPositionDesktopPix (in long x, in long y);`",1278,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetPosition","","`void getPosition (out long x, out long y);`",1278,null],[11,"SetSize","","`void setSize (in long cx, in long cy, in boolean fRepaint);`",1278,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSize","","`void getSize (out long cx, out long cy);`",1278,null],[11,"SetPositionAndSize","","`void setPositionAndSize (in long x, in long y, in long cx, in long cy, in unsigned long flags);`",1278,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"int32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetPositionAndSize","","`void getPositionAndSize (out long x, out long y, out long cx, out long cy);`",1278,null],[11,"Repaint","","`text /** * Tell the window to repaint itself * @param aForce - if true, repaint immediately * if false, the window may defer repainting as it sees fit. */`",1278,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetParentNativeWindow","","`attribute nativeWindow parentNativeWindow;`",1278,null],[11,"SetParentNativeWindow","","`attribute nativeWindow parentNativeWindow;`",1278,{"inputs":[{"name":"self"},{"name":"nativewindow"}],"output":{"name":"nsresult"}}],[11,"GetNativeHandle","","`readonly attribute DOMString nativeHandle;`",1278,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetVisibility","","`attribute boolean visibility;`",1278,null],[11,"SetVisibility","","`attribute boolean visibility;`",1278,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEnabled","","`attribute boolean enabled;`",1278,null],[11,"SetEnabled","","`attribute boolean enabled;`",1278,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetUnscaledDevicePixelsPerCSSPixel","","`readonly attribute double unscaledDevicePixelsPerCSSPixel;`",1278,null],[11,"GetDevicePixelsPerDesktopPixel","","`readonly attribute double devicePixelsPerDesktopPixel;`",1278,null],[11,"SetFocus","","`text /** * Give the window focus. */`",1278,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetTitle","","`attribute AString title;`",1278,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTitle","","`attribute AString title;`",1278,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1279,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1279,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormSubmitObserver` to one of its base interfaces.",1279,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1279,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Notify","","`void notify (in nsIDOMHTMLFormElement formNode, in mozIDOMWindow window, in nsIURI actionURL, out boolean cancelSubmit);`",1279,null],[11,"NotifyInvalidSubmit","","`void notifyInvalidSubmit (in nsIDOMHTMLFormElement formNode, in nsIArray invalidElements);`",1279,null],[11,"addref","","",1280,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1280,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocumentStateListener` to one of its base interfaces.",1280,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1280,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyDocumentCreated","","`void NotifyDocumentCreated ();`",1280,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyDocumentWillBeDestroyed","","`void NotifyDocumentWillBeDestroyed ();`",1280,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"NotifyDocumentStateChanged","","`void NotifyDocumentStateChanged (in boolean nowDirty);`",1280,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1281,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1281,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNSEditableElement` to one of its base interfaces.",1281,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1281,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEditor","","`[noscript] readonly attribute nsIEditor editor;`",1281,null],[11,"SetUserInput","","`[noscript] void setUserInput (in DOMString input);`",1281,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1282,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1282,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIConverterOutputStream` to one of its base interfaces.",1282,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1282,{"inputs":[{"name":"self"}],"output":{"name":"nsiunicharoutputstream"}}],[11,"Init","","`text /** * Initialize this stream. Must be called before any other method on this * interface, or you will crash. The output stream passed to this method * must not be null, or you will crash. * * @param aOutStream * The underlying output stream to which the converted strings will * be written. * @param aCharset * The character set to use for encoding the characters. A null * charset will be interpreted as UTF-8. */`",1282,null],[11,"addref","","",1283,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1283,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRequest` to one of its base interfaces.",1283,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1283,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LOAD_REQUESTMASK","","`text /** * Mask defining the bits reserved for nsIRequest LoadFlags */`",1283,null],[18,"LOAD_NORMAL","","`text /************************************************************************** * Listed below are the various load flags which may be or'd together. */ /** * No special load flags: */`",1283,null],[18,"LOAD_BACKGROUND","","`text /** * Do not deliver status notifications to the nsIProgressEventSink and * do not block the loadgroup from completing (should this load belong to one). * Note: Progress notifications will still be delivered. */`",1283,null],[18,"LOAD_HTML_OBJECT_DATA","","`text /** * This flag marks the request as being made to load the data for an html * <object> tag. This means that the LOAD_DOCUMENT_URI flag may be set after * the channel has been provided with the MIME type. */`",1283,null],[18,"LOAD_DOCUMENT_NEEDS_COOKIE","","`text /** * This flag marks the request as belonging to a document that requires access * to the document.cookies API. */`",1283,null],[18,"INHIBIT_CACHING","","`text /************************************************************************** * The following flags control the flow of data into the cache. */ /** * This flag prevents caching of any kind. It does not, however, prevent * cached content from being used to satisfy this request. */`",1283,null],[18,"INHIBIT_PERSISTENT_CACHING","","`text /** * This flag prevents caching on disk (or other persistent media), which * may be needed to preserve privacy. */`",1283,null],[18,"LOAD_BYPASS_CACHE","","`text /************************************************************************** * The following flags control what happens when the cache contains data * that could perhaps satisfy this request. They are listed in descending * order of precidence. */ /** * Force an end-to-end download of content data from the origin server. * This flag is used for a shift-reload. */`",1283,null],[18,"LOAD_FROM_CACHE","","`text /** * Attempt to force a load from the cache, bypassing ALL validation logic * (note: this is stronger than VALIDATE_NEVER, which still validates for * certain conditions). * * If the resource is not present in cache, it will be loaded from the * network. Combine this flag with LOAD_ONLY_FROM_CACHE if you wish to * perform cache-only loads without validation checks. * * This flag is used when browsing via history. It is not recommended for * normal browsing as it may likely violate reasonable assumptions made by * the server and confuse users. */`",1283,null],[18,"VALIDATE_ALWAYS","","`text /** * The following flags control the frequency of cached content validation * when neither LOAD_BYPASS_CACHE or LOAD_FROM_CACHE are set. By default, * cached content is automatically validated if necessary before reuse. * * VALIDATE_ALWAYS forces validation of any cached content independent of * its expiration time (unless it is https with Cache-Control: immutable) * * VALIDATE_NEVER disables validation of cached content, unless it arrived * with the \"Cache: no-store\" header, or arrived via HTTPS with the * \"Cache: no-cache\" header. * * VALIDATE_ONCE_PER_SESSION disables validation of expired content, * provided it has already been validated (at least once) since the start * of this session. * * NOTE TO IMPLEMENTORS: * These flags are intended for normal browsing, and they should therefore * not apply to content that must be validated before each use. Consider, * for example, a HTTP response with a \"Cache-control: no-cache\" header. * According to RFC2616, this response must be validated before it can * be taken from a cache. Breaking this requirement could result in * incorrect and potentially undesirable side-effects. */`",1283,null],[18,"VALIDATE_NEVER","","",1283,null],[18,"VALIDATE_ONCE_PER_SESSION","","",1283,null],[18,"LOAD_ANONYMOUS","","`text /** * When set, this flag indicates that no user-specific data should be added * to the request when opened. This means that things like authorization * tokens or cookie headers should not be added. */`",1283,null],[18,"LOAD_FRESH_CONNECTION","","`text /** * When set, this flag indicates that caches of network connections, * particularly HTTP persistent connections, should not be used. */`",1283,null],[11,"GetName","","`text /** * The name of the request. Often this is the URI of the request. */`",1283,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsPending","","`text /** * Indicates whether the request is pending. nsIRequest::isPending is * true when there is an outstanding asynchronous event that will make * the request no longer be pending. Requests do not necessarily start * out pending; in some cases, requests have to be explicitly initiated * (e.g. nsIChannel implementations are only pending once asyncOpen * returns successfully). * * Requests can become pending multiple times during their lifetime. * * @return TRUE if the request has yet to reach completion. * @return FALSE if the request has reached completion (e.g., after * OnStopRequest has fired). * @note Suspended requests are still considered pending. */`",1283,null],[11,"GetStatus","","`text /** * The error status associated with the request. */`",1283,null],[11,"Cancel","","`text /** * Cancels the current request. This will close any open input or * output streams and terminate any async requests. Users should * normally pass NS_BINDING_ABORTED, although other errors may also * be passed. The error passed in will become the value of the * status attribute. * * Implementations must not send any notifications (e.g. via * nsIRequestObserver) synchronously from this function. Similarly, * removal from the load group (if any) must also happen asynchronously. * * Requests that use nsIStreamListener must not call onDataAvailable * anymore after cancel has been called. * * @param aStatus the reason for canceling this request. * * NOTE: most nsIRequest implementations expect aStatus to be a * failure code; however, some implementations may allow aStatus to * be a success code such as NS_OK. In general, aStatus should be * a failure code. */`",1283,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"Suspend","","`text /** * Suspends the current request. This may have the effect of closing * any underlying transport (in order to free up resources), although * any open streams remain logically opened and will continue delivering * data when the transport is resumed. * * Calling cancel() on a suspended request must not send any * notifications (such as onstopRequest) until the request is resumed. * * NOTE: some implementations are unable to immediately suspend, and * may continue to deliver events already posted to an event queue. In * general, callers should be capable of handling events even after * suspending a request. */`",1283,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Resume","","`text /** * Resumes the current request. This may have the effect of re-opening * any underlying transport and will resume the delivery of data to * any open streams. */`",1283,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetLoadGroup","","`text /** * The load group of this request. While pending, the request is a * member of the load group. It is the responsibility of the request * to implement this policy. */`",1283,null],[11,"SetLoadGroup","","`text /** * The load group of this request. While pending, the request is a * member of the load group. It is the responsibility of the request * to implement this policy. */`",1283,null],[11,"GetLoadFlags","","`text /** * The load flags of this request. Bits 0-15 are reserved. * * When added to a load group, this request's load flags are merged with * the load flags of the load group. */`",1283,null],[11,"SetLoadFlags","","`text /** * The load flags of this request. Bits 0-15 are reserved. * * When added to a load group, this request's load flags are merged with * the load flags of the load group. */`",1283,{"inputs":[{"name":"self"},{"name":"nsloadflags"}],"output":{"name":"nsresult"}}],[11,"addref","","",1284,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1284,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozITXTToHTMLConv` to one of its base interfaces.",1284,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1284,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamconverter"}}],[18,"kEntities","","",1284,null],[18,"kURLs","","",1284,null],[18,"kGlyphSubstitution","","",1284,null],[18,"kStructPhrase","","",1284,null],[11,"ScanTXT","","`text /** @param text: plain text to scan. May be a line, paragraph (recommended) or just a substring.<p> Must be non-escaped, pure unicode.<p> <em>Note:</em> ScanTXT(a, o) + ScanTXT(b, o) may be != Scan(a + b, o) @param whattodo: Bitfield describing the modes of operation @result \"<\", \">\" and \"&\" are escaped and HTML tags are inserted where appropriate. */`",1284,null],[11,"ScanHTML","","",1284,null],[11,"CiteLevelTXT","","`text /** @param line: line in original msg, possibly starting starting with txt quote tags like \">\" @param logLineStart: pos in line, where the real content (logical line) begins, i.e. pos after all txt quote tags. E.g. position of \"t\" in \"> > text\". Initial value must be 0, unless line is not real line. @return Cite Level, i.e. number of txt quote tags found, i.e. number of nested quotes. */`",1284,null],[11,"FindURLInPlaintext","","",1284,null],[11,"addref","","",1285,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1285,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `ScriptableOK` to one of its base interfaces.",1285,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1285,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Method1","","`void method1 ();`",1285,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1286,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1286,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `ScriptableWithNotXPCOM` to one of its base interfaces.",1286,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1286,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Method2","","`[notxpcom] void method2 ();`",1286,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"addref","","",1287,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1287,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `ScriptableWithNotXPCOMBase` to one of its base interfaces.",1287,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1287,{"inputs":[{"name":"self"}],"output":{"name":"scriptablewithnotxpcom"}}],[11,"Method3","","`void method3 ();`",1287,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1288,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1288,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptChannel` to one of its base interfaces.",1288,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1288,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"NO_EXECUTION","","`text /** * Possible ways of executing the program. */ /** * Don't execute at all. */`",1288,null],[18,"EXECUTE_NORMAL","","`text /** * There used to be an EXECUTE_IN_SANDBOX = 1 value. It has been removed, but * we're not changing the value of EXECUTE_NORMAL to avoid breaking compat. */ /** * Execute against the target environment if the principals allow it. */`",1288,null],[11,"GetExecutionPolicy","","`text /** * Whether and how the program represented by this channel is to be executed. * The default value if this property has never been set on this channel MUST * be either EXECUTE_IN_SANDBOX or NO_EXECUTION. * * @throws NS_ERROR_INVALID_ARG when set to an unrecognized value. */`",1288,null],[11,"SetExecutionPolicy","","`text /** * Whether and how the program represented by this channel is to be executed. * The default value if this property has never been set on this channel MUST * be either EXECUTE_IN_SANDBOX or NO_EXECUTION. * * @throws NS_ERROR_INVALID_ARG when set to an unrecognized value. */`",1288,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetExecuteAsync","","`text /** * Control whether the program should be executed synchronosly when * the channel's AsyncOpen method is called or whether it should be * executed asynchronously. In both cases, any data that the * channel returns will be returned asynchronously; the only thing * this property affects is when the program executes. * * The default value of this property is TRUE. * * Setting this property after asyncOpen has been called on the * channel has no effect. */`",1288,null],[11,"SetExecuteAsync","","`text /** * Control whether the program should be executed synchronosly when * the channel's AsyncOpen method is called or whether it should be * executed asynchronously. In both cases, any data that the * channel returns will be returned asynchronously; the only thing * this property affects is when the program executes. * * The default value of this property is TRUE. * * Setting this property after asyncOpen has been called on the * channel has no effect. */`",1288,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1289,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1289,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpUpgradeListener` to one of its base interfaces.",1289,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1289,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnTransportAvailable","","`[must_use] void onTransportAvailable (in nsISocketTransport aTransport, in nsIAsyncInputStream aSocketIn, in nsIAsyncOutputStream aSocketOut);`",1289,null],[11,"addref","","",1290,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1290,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpChannelInternal` to one of its base interfaces.",1290,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1290,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"THIRD_PARTY_FORCE_ALLOW","","`text /** * This flag is set to force relevant cookies to be sent with this load * even if normally they wouldn't be. */`",1290,null],[18,"CORS_MODE_SAME_ORIGIN","","",1290,null],[18,"CORS_MODE_NO_CORS","","",1290,null],[18,"CORS_MODE_CORS","","",1290,null],[18,"CORS_MODE_NAVIGATE","","",1290,null],[18,"REDIRECT_MODE_FOLLOW","","",1290,null],[18,"REDIRECT_MODE_ERROR","","",1290,null],[18,"REDIRECT_MODE_MANUAL","","",1290,null],[18,"FETCH_CACHE_MODE_DEFAULT","","",1290,null],[18,"FETCH_CACHE_MODE_NO_STORE","","",1290,null],[18,"FETCH_CACHE_MODE_RELOAD","","",1290,null],[18,"FETCH_CACHE_MODE_NO_CACHE","","",1290,null],[18,"FETCH_CACHE_MODE_FORCE_CACHE","","",1290,null],[18,"FETCH_CACHE_MODE_ONLY_IF_CACHED","","",1290,null],[11,"GetDocumentURI","","`text /** * An http channel can own a reference to the document URI */`",1290,null],[11,"SetDocumentURI","","`text /** * An http channel can own a reference to the document URI */`",1290,null],[11,"GetRequestVersion","","`text /** * Get the major/minor version numbers for the request */`",1290,null],[11,"GetResponseVersion","","`text /** * Get the major/minor version numbers for the response */`",1290,null],[11,"SetCookie","","`text /** * Helper method to set a cookie with a consumer-provided * cookie header, _but_ using the channel's other information * (URI's, prompters, date headers etc). * * @param aCookieHeader * The cookie header to be parsed. */`",1290,null],[11,"SetupFallbackChannel","","`text /** * Setup this channel as an application cache fallback channel. */`",1290,null],[11,"GetThirdPartyFlags","","`text /** * When set, these flags modify the algorithm used to decide whether to * send 3rd party cookies for a given channel. */`",1290,null],[11,"SetThirdPartyFlags","","`text /** * When set, these flags modify the algorithm used to decide whether to * send 3rd party cookies for a given channel. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetForceAllowThirdPartyCookie","","`text /** * This attribute was added before the \"flags\" above and is retained here * for compatibility. When set to true, has the same effect as * THIRD_PARTY_FORCE_ALLOW, described above. */`",1290,null],[11,"SetForceAllowThirdPartyCookie","","`text /** * This attribute was added before the \"flags\" above and is retained here * for compatibility. When set to true, has the same effect as * THIRD_PARTY_FORCE_ALLOW, described above. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCanceled","","`text /** * True iff the channel has been canceled. */`",1290,null],[11,"GetChannelIsForDownload","","`text /** * External handlers may set this to true to notify the channel * that it is open on behalf of a download. */`",1290,null],[11,"SetChannelIsForDownload","","`text /** * External handlers may set this to true to notify the channel * that it is open on behalf of a download. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetLocalAddress","","`text /** * The local IP address to which this channel is bound, in the * format produced by PR_NetAddrToString. May be IPv4 or IPv6. * Note: in the presence of NAT, this may not be the same as the * address that the remote host thinks it's talking to. * * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's * endpoints are not yet determined, or in any case when * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207. */`",1290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetLocalPort","","`text /** * The local port number to which this channel is bound. * * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's * endpoints are not yet determined, or in any case when * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207. */`",1290,null],[11,"GetRemoteAddress","","`text /** * The IP address of the remote host that this channel is * connected to, in the format produced by PR_NetAddrToString. * * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's * endpoints are not yet determined, or in any case when * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207. */`",1290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRemotePort","","`text /** * The remote port number that this channel is connected to. * * May throw NS_ERROR_NOT_AVAILABLE if accessed when the channel's * endpoints are not yet determined, or in any case when * nsIHttpActivityObserver.isActive is false. See bugs 534698 and 526207. */`",1290,null],[11,"HTTPUpgrade","","`text /** * HTTPUpgrade allows for the use of HTTP to bootstrap another protocol * via the RFC 2616 Upgrade request header in conjunction with a 101 level * response. The nsIHttpUpgradeListener will have its * onTransportAvailable() method invoked if a matching 101 is processed. * The arguments to onTransportAvailable provide the new protocol the low * level tranport streams that are no longer used by HTTP. * * The onStartRequest and onStopRequest events are still delivered and the * listener gets full control over the socket if and when onTransportAvailable * is delievered. * * @param aProtocolName * The value of the HTTP Upgrade request header * @param aListener * The callback object used to handle a successful upgrade */`",1290,null],[11,"GetAllowSpdy","","`text /** * Enable/Disable Spdy negotiation on per channel basis. * The network.http.spdy.enabled preference is still a pre-requisite * for starting spdy. */`",1290,null],[11,"SetAllowSpdy","","`text /** * Enable/Disable Spdy negotiation on per channel basis. * The network.http.spdy.enabled preference is still a pre-requisite * for starting spdy. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetResponseTimeoutEnabled","","`text /** * This attribute en/disables the timeout for the first byte of an HTTP * response. Enabled by default. */`",1290,null],[11,"SetResponseTimeoutEnabled","","`text /** * This attribute en/disables the timeout for the first byte of an HTTP * response. Enabled by default. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInitialRwin","","`text /** * If the underlying transport supports RWIN manipulation, this is the * intiial window value for the channel. HTTP/2 implements this. * 0 means no override from system default. Set before opening channel. */`",1290,null],[11,"SetInitialRwin","","`text /** * If the underlying transport supports RWIN manipulation, this is the * intiial window value for the channel. HTTP/2 implements this. * 0 means no override from system default. Set before opening channel. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetApiRedirectToURI","","`text /** * Get value of the URI passed to nsIHttpChannel.redirectTo() if any. * May return null when redirectTo() has not been called. */`",1290,null],[11,"GetAllowAltSvc","","`text /** * Enable/Disable use of Alternate Services with this channel. * The network.http.altsvc.enabled preference is still a pre-requisite. */`",1290,null],[11,"SetAllowAltSvc","","`text /** * Enable/Disable use of Alternate Services with this channel. * The network.http.altsvc.enabled preference is still a pre-requisite. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetBeConservative","","`text /** * If true, do not use newer protocol features that might have interop problems * on the Internet. Intended only for use with critical infra like the updater. * default is false. */`",1290,null],[11,"SetBeConservative","","`text /** * If true, do not use newer protocol features that might have interop problems * on the Internet. Intended only for use with critical infra like the updater. * default is false. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetTlsFlags","","`text /** * An opaque flags for non-standard behavior of the TLS system. * It is unlikely this will need to be set outside of telemetry studies * relating to the TLS implementation. */`",1290,null],[11,"SetTlsFlags","","`text /** * An opaque flags for non-standard behavior of the TLS system. * It is unlikely this will need to be set outside of telemetry studies * relating to the TLS implementation. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetLastModifiedTime","","`[must_use] readonly attribute PRTime lastModifiedTime;`",1290,null],[11,"GetResponseSynthesized","","`[must_use] readonly attribute boolean responseSynthesized;`",1290,null],[11,"GetCorsIncludeCredentials","","`text /** * Set by nsCORSListenerProxy if credentials should be included in * cross-origin requests. false indicates \"same-origin\", users should still * check flag LOAD_ANONYMOUS! */`",1290,null],[11,"SetCorsIncludeCredentials","","`text /** * Set by nsCORSListenerProxy if credentials should be included in * cross-origin requests. false indicates \"same-origin\", users should still * check flag LOAD_ANONYMOUS! */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCorsMode","","`text /** * Set by nsCORSListenerProxy to indicate CORS load type. Defaults to CORS_MODE_NO_CORS. */`",1290,null],[11,"SetCorsMode","","`text /** * Set by nsCORSListenerProxy to indicate CORS load type. Defaults to CORS_MODE_NO_CORS. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetRedirectMode","","`text /** * Set to indicate Request.redirect mode exposed during ServiceWorker * interception. No policy enforcement is performed by the channel for this * value. */`",1290,null],[11,"SetRedirectMode","","`text /** * Set to indicate Request.redirect mode exposed during ServiceWorker * interception. No policy enforcement is performed by the channel for this * value. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetFetchCacheMode","","`text /** * Set to indicate Request.cache mode, which simulates the fetch API * semantics, and is also used for exposing this value to the Web page * during service worker interception. */`",1290,null],[11,"SetFetchCacheMode","","`text /** * Set to indicate Request.cache mode, which simulates the fetch API * semantics, and is also used for exposing this value to the Web page * during service worker interception. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetTopWindowURI","","`text /** * The URI of the top-level window that's associated with this channel. */`",1290,null],[11,"SetTopWindowURIIfUnknown","","`text /** * Set top-level window URI to this channel only when the topWindowURI * is null and there is no window associated to this channel. * Note that the current usage of this method is only for xpcshell test. */`",1290,null],[11,"GetNetworkInterfaceId","","`text /** * The network interface id that's associated with this channel. */`",1290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetNetworkInterfaceId","","`text /** * The network interface id that's associated with this channel. */`",1290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetProxyURI","","`text /** * Read the proxy URI, which, if non-null, will be used to resolve * proxies for this channel. */`",1290,null],[11,"GetBlockAuthPrompt","","`text /** * When set to true, the channel will not pop any authentication prompts up * to the user. When provided or cached credentials lead to an * authentication failure, that failure will be propagated to the channel * listener. Must be called before opening the channel, otherwise throws. */`",1290,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetBlockAuthPrompt","","`text /** * When set to true, the channel will not pop any authentication prompts up * to the user. When provided or cached credentials lead to an * authentication failure, that failure will be propagated to the channel * listener. Must be called before opening the channel, otherwise throws. */`",1290,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIntegrityMetadata","","`text /** * Set to indicate Request.integrity. */`",1290,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetIntegrityMetadata","","`text /** * Set to indicate Request.integrity. */`",1290,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetConnectionInfoHashKey","","`text /** * The connection info's hash key. We use it to test connection separation. */`",1290,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetLastRedirectFlags","","`text /** * If this channel was created as the result of a redirect, then this * value will reflect the redirect flags passed to the * SetupReplacementChannel() method. */`",1290,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"SetLastRedirectFlags","","`text /** * If this channel was created as the result of a redirect, then this * value will reflect the redirect flags passed to the * SetupReplacementChannel() method. */`",1290,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1291,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1291,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIArray` to one of its base interfaces.",1291,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1291,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetLength","","`text /** * length * * number of elements in the array. */`",1291,null],[11,"QueryElementAt","","`text /** * queryElementAt() * * Retrieve a specific element of the array, and QueryInterface it * to the specified interface. null is a valid result for * this method, but exceptions are thrown in other circumstances * * @param index position of element * @param uuid the IID of the requested interface * @param result the object, QI'd to the requested interface * * @throws NS_ERROR_NO_INTERFACE when an entry exists at the * specified index, but the requested interface is not * available. * @throws NS_ERROR_ILLEGAL_VALUE when index > length-1 * */`",1291,null],[11,"IndexOf","","`text /** * indexOf() * * Get the position of a specific element. Note that since null is * a valid input, exceptions are used to indicate that an element * is not found. * * @param startIndex The initial element to search in the array * To start at the beginning, use 0 as the * startIndex * @param element The element you are looking for * @returns a number >= startIndex which is the position of the * element in the array. * @throws NS_ERROR_FAILURE if the element was not in the array. */`",1291,null],[11,"Enumerate","","`text /** * enumerate the array * * @returns a new enumerator positioned at the start of the array * @throws NS_ERROR_FAILURE if the array is empty (to make it easy * to detect errors), or NS_ERROR_OUT_OF_MEMORY if out of memory. */`",1291,null],[11,"addref","","",1292,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1292,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfilerStartParams` to one of its base interfaces.",1292,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1292,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetEntries","","`readonly attribute uint32_t entries;`",1292,null],[11,"GetInterval","","`readonly attribute double interval;`",1292,null],[11,"GetFeatures","","`readonly attribute uint32_t features;`",1292,null],[11,"addref","","",1293,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1293,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfiler` to one of its base interfaces.",1293,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1293,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CanProfile","","`boolean CanProfile ();`",1293,null],[11,"StartProfiler","","`void StartProfiler (in uint32_t aEntries, in double aInterval, [array, size_is (aFeatureCount)] in string aFeatures, in uint32_t aFeatureCount, [array, size_is (aFilterCount), optional] in string aFilters, [optional] in uint32_t aFilterCount);`",1293,null],[11,"StopProfiler","","`void StopProfiler ();`",1293,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsPaused","","`boolean IsPaused ();`",1293,null],[11,"PauseSampling","","`void PauseSampling ();`",1293,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumeSampling","","`void ResumeSampling ();`",1293,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"AddMarker","","`void AddMarker (in string aMarker);`",1293,null],[11,"GetProfile","","`string GetProfile ([optional] in double aSinceTime);`",1293,null],[11,"IsActive","","`boolean IsActive ();`",1293,null],[11,"GetFeatures","","`text /** * Returns an array of the features that are supported in this build. * Features may vary depending on platform and build flags. */`",1293,null],[11,"GetAllFeatures","","`text /** * Returns an array of all features that are supported by the profiler. * The array may contain features that are not supported in this build. */`",1293,null],[11,"GetStartParams","","`text /** * The starting parameters that were sent to the profiler for sampling. * If the profiler is not currently sampling, this will return null. */`",1293,null],[11,"GetBufferInfo","","`void GetBufferInfo (out uint32_t aCurrentPosition, out uint32_t aTotalSize, out uint32_t aGeneration);`",1293,null],[11,"GetElapsedTime","","`text /** * Returns the elapsed time, in milliseconds, since the profiler's epoch. * The epoch is guaranteed to be constant for the duration of the * process, but is otherwise arbitrary. */`",1293,null],[11,"DumpProfileToFile","","`text /** * Dump the collected profile to a file. */`",1293,null],[11,"addref","","",1294,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1294,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAppStartup` to one of its base interfaces.",1294,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"eConsiderQuit","","`text /** * The following flags may be passed as the aMode parameter to the quit * method. One and only one of the \"Quit\" flags must be specified. The * eRestart flag may be bit-wise combined with one of the \"Quit\" flags to * cause the application to restart after it quits. */ /** * Attempt to quit if all windows are closed. */`",1294,null],[18,"eAttemptQuit","","`text /** * Try to close all windows, then quit if successful. */`",1294,null],[18,"eForceQuit","","`text /** * Quit, damnit! */`",1294,null],[18,"eRestart","","`text /** * Restart the application after quitting. The application will be * restarted with the same profile and an empty command line. */`",1294,null],[18,"eRestartNotSameProfile","","`text /** * Restart the application after quitting. The application will be * restarted with an empty command line and the normal profile selection * process will take place on startup. */`",1294,null],[11,"CreateHiddenWindow","","`text /** * Create the hidden window. */`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DestroyHiddenWindow","","`text /** * Destroys the hidden window. This will have no effect if the hidden window * has not yet been created. */`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Run","","",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"EnterLastWindowClosingSurvivalArea","","`text /** * There are situations where all application windows will be * closed but we don't want to take this as a signal to quit the * app. Bracket the code where the last window could close with * these. */`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ExitLastWindowClosingSurvivalArea","","`void exitLastWindowClosingSurvivalArea ();`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetAutomaticSafeModeNecessary","","`text /** * Startup Crash Detection * * Keeps track of application startup begining and success using flags to * determine whether the application is crashing on startup. * When the number of crashes crosses the acceptable threshold, safe mode * or other repair procedures are performed. */ /** * Whether automatic safe mode is necessary at this time. This gets set * in trackStartupCrashBegin. * * @see trackStartupCrashBegin */`",1294,null],[11,"RestartInSafeMode","","`text /** * Restart the application in safe mode * @param aQuitMode * This parameter modifies how the app is shutdown. * @see nsIAppStartup::quit */`",1294,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"CreateInstanceWithProfile","","`text /** * Run a new instance of this app with a specified profile * @param aProfile * The profile we want to use. * @see nsIAppStartup::quit */`",1294,null],[11,"TrackStartupCrashBegin","","`text /** * If the last startup crashed then increment a counter. * Set a flag so on next startup we can detect whether TrackStartupCrashEnd * was called (and therefore the application crashed). * @return whether safe mode is necessary */`",1294,null],[11,"TrackStartupCrashEnd","","`text /** * We have succesfully started without crashing. Clear flags that were * tracking past crashes. */`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Quit","","`text /** * Exit the event loop, and shut down the app. * * @param aMode * This parameter modifies how the app is shutdown, and it is * constructed from the constants defined above. */`",1294,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetShuttingDown","","`text /** * True if the application is in the process of shutting down. */`",1294,null],[11,"GetStartingUp","","`text /** * True if the application is in the process of starting up. * * Startup is complete once all observers of final-ui-startup have returned. */`",1294,null],[11,"DoneStartingUp","","`text /** * Mark the startup as completed. * * Called at the end of startup by nsAppRunner. */`",1294,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRestarting","","`text /** * True if the application is being restarted */`",1294,null],[11,"GetWasRestarted","","`text /** * True if this is the startup following restart, i.e. if the application * was restarted using quit(eRestart*). */`",1294,null],[11,"GetInterrupted","","`text /** * True if startup was interrupted by an interactive prompt. */`",1294,null],[11,"SetInterrupted","","`text /** * True if startup was interrupted by an interactive prompt. */`",1294,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1295,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1295,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMWebGLRenderingContext` to one of its base interfaces.",1295,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1295,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"MozGetUnderlyingParamString","","`[noscript] DOMString mozGetUnderlyingParamString (in unsigned long pname);`",1295,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1296,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1296,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFormPOSTActionChannel` to one of its base interfaces.",1296,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1296,{"inputs":[{"name":"self"}],"output":{"name":"nsiuploadchannel"}}],[11,"addref","","",1297,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1297,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIOpenURIInFrameParams` to one of its base interfaces.",1297,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1297,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetReferrer","","`attribute DOMString referrer;`",1297,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetReferrer","","`attribute DOMString referrer;`",1297,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetReferrerPolicy","","`attribute unsigned long referrerPolicy;`",1297,null],[11,"SetReferrerPolicy","","`attribute unsigned long referrerPolicy;`",1297,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsPrivate","","`readonly attribute boolean isPrivate;`",1297,null],[11,"GetTriggeringPrincipal","","`attribute nsIPrincipal triggeringPrincipal;`",1297,null],[11,"SetTriggeringPrincipal","","`attribute nsIPrincipal triggeringPrincipal;`",1297,null],[11,"GetOpenerBrowser","","`readonly attribute nsIFrameLoaderOwner openerBrowser;`",1297,null],[11,"addref","","",1298,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1298,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIBrowserDOMWindow` to one of its base interfaces.",1298,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1298,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"OPEN_DEFAULTWINDOW","","`text /** * Values for createContentWindow's and openURI's aWhere parameter. */ /** * Do whatever the default is based on application state, user preferences, * and the value of the aContext parameter to openURI. */`",1298,null],[18,"OPEN_CURRENTWINDOW","","`text /** * Open in the \"current window\". If aOpener is provided, this should be the * top window in aOpener's window hierarchy, but exact behavior is * application-dependent. If aOpener is not provided, it's up to the * application to decide what constitutes a \"current window\". */`",1298,null],[18,"OPEN_NEWWINDOW","","`text /** * Open in a new window. */`",1298,null],[18,"OPEN_NEWTAB","","`text /** * Open in a new content tab in the toplevel browser window corresponding to * this nsIBrowserDOMWindow. */`",1298,null],[18,"OPEN_SWITCHTAB","","`text /** * Open in an existing content tab based on the URI. If a match can't be * found, revert to OPEN_NEWTAB behavior. */`",1298,null],[18,"OPEN_NEW","","`text /** * Values for createContentWindow's and openURI's aFlags parameter. * This is a bitflags field. * * The 0x1 bit decides the behavior of OPEN_DEFAULTWINDOW, and the 0x4 bit * controls whether or not to set the window.opener property on the newly * opened window. * * NOTE: The 0x2 bit is ignored for backwards compatibility with addons, as * OPEN_NEW used to have the value 2. The values 0 and 2 are treated * the same way internally. */ /** * Internal open new window. */`",1298,null],[18,"OPEN_EXTERNAL","","`text /** * External link (load request from another application, xremote, etc). */`",1298,null],[18,"OPEN_NO_OPENER","","`text /** * Don't set the window.opener property on the window which is being opened. */`",1298,null],[11,"CreateContentWindow","","",1298,null],[11,"CreateContentWindowInFrame","","`text /** * As above, but return the nsIFrameLoaderOwner for the new window. * * Additional Parameters: * @param aNextTabParentId The TabParent to associate the window with. * @param aName The name to give the window opened in the new tab. * @return The nsIFrameLoaderOwner for the newly opened window. */`",1298,null],[11,"OpenURI","","",1298,null],[11,"OpenURIInFrame","","`text /** * As above, but return the nsIFrameLoaderOwner for the new window. * * Additional Parameters: * @param aNextTabParentId The TabParent to associate the window with. * @param aName The name to give the window opened in the new tab. * @return The nsIFrameLoaderOwner for the newly opened window. // XXXbz is this the right API? // See bug 537428 */`",1298,null],[11,"IsTabContentWindow","","`text /** * @param aWindow the window to test. * @return whether the window is the main content window for any * currently open tab in this toplevel browser window. */`",1298,null],[11,"CanClose","","`text /** * This function is responsible for calling * nsIContentViewer::PermitUnload on each frame in the window. It * returns true if closing the window is allowed. See canClose() in * BrowserUtils.jsm for a simple implementation of this method. */`",1298,null],[11,"addref","","",1299,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1299,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULCommandEvent` to one of its base interfaces.",1299,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1299,{"inputs":[{"name":"self"}],"output":{"name":"nsidomuievent"}}],[11,"GetCtrlKey","","`text /** * Command events support the same set of modifier keys as mouse and key * events. */`",1299,null],[11,"GetShiftKey","","`readonly attribute boolean shiftKey;`",1299,null],[11,"GetAltKey","","`readonly attribute boolean altKey;`",1299,null],[11,"GetMetaKey","","`readonly attribute boolean metaKey;`",1299,null],[11,"GetInputSource","","`text /** * The input source, if this event was triggered by a mouse event. */`",1299,null],[11,"GetSourceEvent","","`text /** * If the command event was redispatched because of a command= attribute * on the original target, sourceEvent will be set to the original DOM Event. * Otherwise, sourceEvent is null. */`",1299,null],[11,"InitCommandEvent","","`text /** * Creates a new command event with the given attributes. */`",1299,null],[11,"addref","","",1300,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1300,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICacheInfoChannel` to one of its base interfaces.",1300,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1300,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCacheTokenFetchCount","","`text /** * Get the number of times the cache entry has been opened. This attribute is * equivalent to nsICachingChannel.cacheToken.fetchCount. * * @throws NS_ERROR_NOT_AVAILABLE if the cache entry or the alternate data * cache entry cannot be read. */`",1300,null],[11,"GetCacheTokenExpirationTime","","`text /** * Get expiration time from cache token. This attribute is equivalent to * nsICachingChannel.cacheToken.expirationTime. */`",1300,null],[11,"GetCacheTokenCachedCharset","","`text /** * Set/get charset of cache entry. Accessing this attribute is equivalent to * calling nsICachingChannel.cacheToken.getMetaDataElement(\"charset\") and * nsICachingChannel.cacheToken.setMetaDataElement(\"charset\"). */`",1300,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetCacheTokenCachedCharset","","`text /** * Set/get charset of cache entry. Accessing this attribute is equivalent to * calling nsICachingChannel.cacheToken.getMetaDataElement(\"charset\") and * nsICachingChannel.cacheToken.setMetaDataElement(\"charset\"). */`",1300,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"IsFromCache","","`text /** * TRUE if this channel's data is being loaded from the cache. This value * is undefined before the channel fires its OnStartRequest notification * and after the channel fires its OnStopRequest notification. */`",1300,null],[11,"GetCacheEntryId","","`text /** * The unique ID of the corresponding nsICacheEntry from which the response is * retrieved. By comparing the returned value, we can judge whether the data * of two distinct nsICacheInfoChannels is from the same nsICacheEntry. This * scenario could be useful when verifying whether the alternative data from * one nsICacheInfochannel matches the main data from another one. * * Note: NS_ERROR_NOT_AVAILABLE is thrown when a nsICacheInfoChannel has no * valid corresponding nsICacheEntry. */`",1300,null],[11,"GetCacheKey","","`text /** * Set/get the cache key... uniquely identifies the data in the cache * for this channel. Holding a reference to this key does NOT prevent * the cached data from being removed. * * A cache key retrieved from a particular instance of nsICacheInfoChannel * could be set on another instance of nsICacheInfoChannel provided the * underlying implementations are compatible and provided the new * channel instance was created with the same URI. The implementation of * nsICacheInfoChannel would be expected to use the cache entry identified * by the cache token. Depending on the value of nsIRequest::loadFlags, * the cache entry may be validated, overwritten, or simply read. * * The cache key may be NULL indicating that the URI of the channel is * sufficient to locate the same cache entry. Setting a NULL cache key * is likewise valid. */`",1300,null],[11,"SetCacheKey","","`text /** * Set/get the cache key... uniquely identifies the data in the cache * for this channel. Holding a reference to this key does NOT prevent * the cached data from being removed. * * A cache key retrieved from a particular instance of nsICacheInfoChannel * could be set on another instance of nsICacheInfoChannel provided the * underlying implementations are compatible and provided the new * channel instance was created with the same URI. The implementation of * nsICacheInfoChannel would be expected to use the cache entry identified * by the cache token. Depending on the value of nsIRequest::loadFlags, * the cache entry may be validated, overwritten, or simply read. * * The cache key may be NULL indicating that the URI of the channel is * sufficient to locate the same cache entry. Setting a NULL cache key * is likewise valid. */`",1300,null],[11,"GetAllowStaleCacheContent","","`text /** * Tells the channel to behave as if the LOAD_FROM_CACHE flag has been set, * but without affecting the loads for the entire loadGroup in case of this * channel being the default load group's channel. */`",1300,null],[11,"SetAllowStaleCacheContent","","`text /** * Tells the channel to behave as if the LOAD_FROM_CACHE flag has been set, * but without affecting the loads for the entire loadGroup in case of this * channel being the default load group's channel. */`",1300,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"PreferAlternativeDataType","","`text /** * Calling this method instructs the channel to serve the alternative data * if that was previously saved in the cache, otherwise it will serve the * real data. * Must be called before AsyncOpen. */`",1300,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPreferredAlternativeDataType","","`text /** * Get the preferred alternative data type set by preferAlternativeDataType(). * This attribute stands for the desired data type instead of the type of the * information retrieved from the network stack. */`",1300,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAlternativeDataType","","`text /** * Holds the type of the alternative data representation that the channel * is returning. * Is empty string if no alternative data representation was requested, or * if the requested representation wasn't found in the cache. * Can only be called during or after OnStartRequest. */`",1300,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OpenAlternativeOutputStream","","`text /** * Opens and returns an output stream that a consumer may use to save an * alternate representation of the data. * Must be called after the OnStopRequest that delivered the real data. * The consumer may choose to replace the saved alt representation. * Opening the output stream will fail if there are any open input streams * reading the already saved alt representation. */`",1300,null],[11,"addref","","",1301,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1301,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMutableArray` to one of its base interfaces.",1301,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1301,{"inputs":[{"name":"self"}],"output":{"name":"nsiarrayextensions"}}],[11,"AppendElement","","`text /** * appendElement() * * Append an element at the end of the array. * * @param element The element to append. */`",1301,null],[11,"RemoveElementAt","","`text /** * removeElementAt() * * Remove an element at a specific position, moving all elements * stored at a higher position down one. * To remove a specific element, use indexOf() to find the index * first, then call removeElementAt(). * * @param index the position of the item * */`",1301,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"InsertElementAt","","`text /** * insertElementAt() * * Insert an element at the given position, moving the element * currently located in that position, and all elements in higher * position, up by one. * * @param element The element to insert * @param index The position in the array: * If the position is lower than the current length * of the array, the elements at that position and * onwards are bumped one position up. * If the position is equal to the current length * of the array, the new element is appended. * An index lower than 0 or higher than the current * length of the array is invalid and will be ignored. */`",1301,null],[11,"ReplaceElementAt","","`text /** * replaceElementAt() * * Replace the element at the given position. * * @param element The new element to insert * @param index The position in the array * If the position is lower than the current length * of the array, an existing element will be replaced. * If the position is equal to the current length * of the array, the new element is appended. * If the position is higher than the current length * of the array, empty elements are appended followed * by the new element at the specified position. * An index lower than 0 is invalid and will be ignored. */`",1301,null],[11,"Clear","","`text /** * clear() * * clear the entire array, releasing all stored objects */`",1301,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1302,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1302,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGConfService` to one of its base interfaces.",1302,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1302,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBool","","`boolean getBool (in AUTF8String key);`",1302,null],[11,"GetString","","`AUTF8String getString (in AUTF8String key);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetInt","","`long getInt (in AUTF8String key);`",1302,null],[11,"GetFloat","","`float getFloat (in AUTF8String key);`",1302,null],[11,"GetStringList","","`nsIArray getStringList (in AUTF8String key);`",1302,null],[11,"SetBool","","`void setBool (in AUTF8String key, in boolean value);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetString","","`void setString (in AUTF8String key, in AUTF8String value);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetInt","","`void setInt (in AUTF8String key, in long value);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetFloat","","`void setFloat (in AUTF8String key, in float value);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetAppForProtocol","","`AUTF8String getAppForProtocol (in AUTF8String scheme, out boolean enabled);`",1302,null],[11,"HandlerRequiresTerminal","","`boolean handlerRequiresTerminal (in AUTF8String scheme);`",1302,null],[11,"SetAppForProtocol","","`void setAppForProtocol (in AUTF8String scheme, in AUTF8String command);`",1302,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1303,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1303,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPropertyBag2` to one of its base interfaces.",1303,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1303,{"inputs":[{"name":"self"}],"output":{"name":"nsipropertybag"}}],[11,"GetPropertyAsInt32","","`int32_t getPropertyAsInt32 (in AString prop);`",1303,null],[11,"GetPropertyAsUint32","","`uint32_t getPropertyAsUint32 (in AString prop);`",1303,null],[11,"GetPropertyAsInt64","","`int64_t getPropertyAsInt64 (in AString prop);`",1303,null],[11,"GetPropertyAsUint64","","`uint64_t getPropertyAsUint64 (in AString prop);`",1303,null],[11,"GetPropertyAsDouble","","`double getPropertyAsDouble (in AString prop);`",1303,null],[11,"GetPropertyAsAString","","`AString getPropertyAsAString (in AString prop);`",1303,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetPropertyAsACString","","`ACString getPropertyAsACString (in AString prop);`",1303,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPropertyAsAUTF8String","","`AUTF8String getPropertyAsAUTF8String (in AString prop);`",1303,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPropertyAsBool","","`boolean getPropertyAsBool (in AString prop);`",1303,null],[11,"GetPropertyAsInterface","","`text /** * This method returns null if the value exists, but is null. */`",1303,null],[11,"Get","","`text /** * This method returns null if the value does not exist, * or exists but is null. */`",1303,null],[11,"HasKey","","`text /** * Check for the existence of a key. */`",1303,null],[11,"addref","","",1304,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1304,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeechTaskCallback` to one of its base interfaces.",1304,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1304,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnPause","","`text /** * The user or application has paused the speech. */`",1304,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnResume","","`text /** * The user or application has resumed the speech. */`",1304,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnCancel","","`text /** * The user or application has canceled the speech. */`",1304,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"OnVolumeChanged","","`text /** * The user or application has changed the volume of this speech. */`",1304,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"addref","","",1305,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1305,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeechTask` to one of its base interfaces.",1305,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1305,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Setup","","`text /** * Prepare browser for speech. * * @param aCallback callback object for mid-speech operations. */`",1305,null],[11,"DispatchStart","","`text /** * Dispatch start event. */`",1305,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"DispatchEnd","","`text /** * Dispatch end event. * * @param aElapsedTime time in seconds since speech has started. * @param aCharIndex offset of spoken characters. */`",1305,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DispatchPause","","`text /** * Dispatch pause event. * * @param aElapsedTime time in seconds since speech has started. * @param aCharIndex offset of spoken characters. */`",1305,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DispatchResume","","`text /** * Dispatch resume event. * * @param aElapsedTime time in seconds since speech has started. * @param aCharIndex offset of spoken characters. */`",1305,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DispatchError","","`text /** * Dispatch error event. * * @param aElapsedTime time in seconds since speech has started. * @param aCharIndex offset of spoken characters. */`",1305,{"inputs":[{"name":"self"},{"name":"c_float"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"DispatchMark","","`text /** * Dispatch mark event. * * @param aName mark identifier. * @param aElapsedTime time in seconds since speech has started. * @param aCharIndex offset of spoken characters. */`",1305,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"c_float"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1306,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1306,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISpeechService` to one of its base interfaces.",1306,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1306,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Speak","","`text /** * Speak the given text using the voice identified byu the given uri. See * W3C Speech API spec for information about pitch and rate. * https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#utterance-attributes * * @param aText text to utter. * @param aUri unique voice identifier. * @param aVolume volume to speak voice in. Only relevant for indirect audio. * @param aRate rate to speak voice in. * @param aPitch pitch to speak voice in. * @param aTask task instance for utterance, used for sending events or audio * data back to browser. */`",1306,null],[11,"addref","","",1307,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1307,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMAttr` to one of its base interfaces.",1307,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1307,{"inputs":[{"name":"self"}],"output":{"name":"nsidomnode"}}],[11,"GetName","","`text /** * The nsIDOMAttr interface represents an attribute in an \"Element\" object. * Typically the allowable values for the attribute are defined in a document * type definition. * * For more information on this interface please see * http://www.w3.org/TR/DOM-Level-2-Core/ */`",1307,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetSpecified","","`readonly attribute boolean specified;`",1307,null],[11,"GetValue","","`attribute DOMString value;`",1307,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute DOMString value;`",1307,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOwnerElement","","`readonly attribute nsIDOMElement ownerElement;`",1307,null],[11,"GetIsId","","`readonly attribute boolean isId;`",1307,null],[11,"addref","","",1308,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1308,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMNodeIterator` to one of its base interfaces.",1308,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1308,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRoot","","`readonly attribute nsIDOMNode root;`",1308,null],[11,"GetWhatToShow","","`readonly attribute unsigned long whatToShow;`",1308,null],[11,"GetFilter","","`readonly attribute nsIDOMNodeFilter filter;`",1308,null],[11,"NextNode","","`nsIDOMNode nextNode () raises (DOMException);`",1308,null],[11,"PreviousNode","","`nsIDOMNode previousNode () raises (DOMException);`",1308,null],[11,"Detach","","`void detach ();`",1308,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetReferenceNode","","`readonly attribute nsIDOMNode referenceNode;`",1308,null],[11,"GetPointerBeforeReferenceNode","","`readonly attribute boolean pointerBeforeReferenceNode;`",1308,null],[11,"addref","","",1309,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1309,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICookie` to one of its base interfaces.",1309,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1309,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATUS_UNKNOWN","","`text /** * @DEPRECATED status implementation will return STATUS_UNKNOWN in all cases. */`",1309,null],[18,"STATUS_ACCEPTED","","",1309,null],[18,"STATUS_DOWNGRADED","","",1309,null],[18,"STATUS_FLAGGED","","",1309,null],[18,"STATUS_REJECTED","","",1309,null],[18,"POLICY_UNKNOWN","","`text /** * @DEPRECATED policy implementation will return POLICY_UNKNOWN in all cases. */`",1309,null],[18,"POLICY_NONE","","",1309,null],[18,"POLICY_NO_CONSENT","","",1309,null],[18,"POLICY_IMPLICIT_CONSENT","","",1309,null],[18,"POLICY_EXPLICIT_CONSENT","","",1309,null],[18,"POLICY_NO_II","","",1309,null],[11,"GetName","","`text /** * the name of the cookie */`",1309,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`text /** * the cookie value */`",1309,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsDomain","","`text /** * true if the cookie is a domain cookie, false otherwise */`",1309,null],[11,"GetHost","","`text /** * the host (possibly fully qualified) of the cookie */`",1309,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPath","","`text /** * the path pertaining to the cookie */`",1309,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIsSecure","","`text /** * true if the cookie was transmitted over ssl, false otherwise */`",1309,null],[11,"GetExpires","","`text /** * @DEPRECATED use nsICookie2.expiry and nsICookie2.isSession instead. * * expiration time in seconds since midnight (00:00:00), January 1, 1970 UTC. * expires = 0 represents a session cookie. * expires = 1 represents an expiration time earlier than Jan 1, 1970. */`",1309,null],[11,"GetStatus","","`readonly attribute nsCookieStatus status;`",1309,null],[11,"GetPolicy","","`readonly attribute nsCookiePolicy policy;`",1309,null],[11,"addref","","",1310,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1310,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICloneableInputStream` to one of its base interfaces.",1310,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1310,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCloneable","","`[infallible] readonly attribute boolean cloneable;`",1310,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"Clone","","`nsIInputStream clone ();`",1310,null],[11,"addref","","",1311,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1311,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICloneableInputStreamWithRange` to one of its base interfaces.",1311,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1311,{"inputs":[{"name":"self"}],"output":{"name":"nsicloneableinputstream"}}],[11,"CloneWithRange","","`nsIInputStream cloneWithRange (in uint64_t start, in uint64_t length);`",1311,null],[11,"addref","","",1312,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1312,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPropertyElement` to one of its base interfaces.",1312,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1312,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetKey","","`attribute AUTF8String key;`",1312,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetKey","","`attribute AUTF8String key;`",1312,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`attribute AString value;`",1312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute AString value;`",1312,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1313,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1313,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPersistentProperties` to one of its base interfaces.",1313,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1313,{"inputs":[{"name":"self"}],"output":{"name":"nsiproperties"}}],[11,"Load","","`text /** * load a set of name/value pairs from the input stream * names and values should be in UTF8 */`",1313,null],[11,"Save","","`text /** * output the values to the stream - results will be in UTF8 */`",1313,null],[11,"Enumerate","","`text /** * get an enumeration of nsIPropertyElement objects, * which are read-only (i.e. setting properties on the element will * not make changes back into the source nsIPersistentProperties */`",1313,null],[11,"GetStringProperty","","`text /** * shortcut to nsIProperty's get() which retrieves a string value * directly (and thus faster) */`",1313,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetStringProperty","","`text /** * shortcut to nsIProperty's set() which sets a string value * directly (and thus faster). If the given property already exists, * then the old value will be returned */`",1313,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1314,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1314,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMSimpleGestureEvent` to one of its base interfaces.",1314,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1314,{"inputs":[{"name":"self"}],"output":{"name":"nsidommouseevent"}}],[18,"DIRECTION_UP","","",1314,null],[18,"DIRECTION_DOWN","","",1314,null],[18,"DIRECTION_LEFT","","",1314,null],[18,"DIRECTION_RIGHT","","",1314,null],[18,"ROTATION_COUNTERCLOCKWISE","","",1314,null],[18,"ROTATION_CLOCKWISE","","",1314,null],[11,"GetAllowedDirections","","`attribute unsigned long allowedDirections;`",1314,null],[11,"SetAllowedDirections","","`attribute unsigned long allowedDirections;`",1314,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDirection","","`readonly attribute unsigned long direction;`",1314,null],[11,"GetDelta","","`readonly attribute double delta;`",1314,null],[11,"GetClickCount","","`readonly attribute unsigned long clickCount;`",1314,null],[11,"addref","","",1315,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1315,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIScriptableUnescapeHTML` to one of its base interfaces.",1315,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1315,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Unescape","","`text /** * Converts HTML to plain text. This is equivalent to calling * nsIParserUtils::convertToPlainText(src, * nsIDocumentEncoder::OutputSelectionOnly | * nsIDocumentEncoder::OutputAbsoluteLinks, 0). * * You should call nsIParserUtils::convertToPlainText() instead of calling * this method. * * @param src The HTML string to convert to plain text. */`",1315,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ParseFragment","","`text /** * Parses markup into a sanitized document fragment. This is equivalent to * calling nsIParserUtils::parseFragment(fragment, 0, isXML, baseURI, * element). * * You should call nsIParserUtils::parseFragment() instead of calling this * method. * @param fragment the input markup * @param isXML true if |fragment| is XML and false if HTML * @param baseURI the base URL for this fragment * @param element the context node for the fragment parsing algorithm */`",1315,null],[11,"addref","","",1316,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1316,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITooltipListener` to one of its base interfaces.",1316,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1316,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnShowTooltip","","`text /** * Called when a tooltip should be displayed. * * @param aXCoords The tooltip left edge X coordinate. * @param aYCoords The tooltip top edge Y coordinate. * @param aTipText The text to display in the tooltip, typically obtained * from the TITLE attribute of the node (or containing parent) * over which the pointer has been positioned. * @param aTipDir The direction (ltr or rtl) in which to display the text * * @note * Coordinates are specified in pixels, relative to the top-left * corner of the browser area. * * @return <code>NS_OK</code> if the tooltip was displayed. */`",1316,null],[11,"OnHideTooltip","","`text /** * Called when the tooltip should be hidden, either because the pointer * has moved or the tooltip has timed out. */`",1316,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1317,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1317,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEncodedChannel` to one of its base interfaces.",1317,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1317,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetContentEncodings","","`text /** * This attribute holds the MIME types corresponding to the content * encodings on the channel. The enumerator returns nsISupportsCString * objects. The first one corresponds to the outermost encoding on the * channel and then we work our way inward. \"identity\" is skipped and not * represented on the list. Unknown encodings make the enumeration stop. * If you want the actual Content-Encoding value, use * getResponseHeader(\"Content-Encoding\"). * * When there is no Content-Encoding header, this property is null. * * Modifying the Content-Encoding header on the channel will cause * this enumerator to have undefined behavior. Don't do it. * * Also note that contentEncodings only exist during or after OnStartRequest. * Calling contentEncodings before OnStartRequest is an error. */`",1317,null],[11,"GetApplyConversion","","`text /** * This attribute controls whether or not content conversion should be * done per the Content-Encoding response header. applyConversion can only * be set before or during OnStartRequest. Calling this during * OnDataAvailable is an error. * * TRUE by default. */`",1317,null],[11,"SetApplyConversion","","`text /** * This attribute controls whether or not content conversion should be * done per the Content-Encoding response header. applyConversion can only * be set before or during OnStartRequest. Calling this during * OnDataAvailable is an error. * * TRUE by default. */`",1317,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DoApplyContentConversions","","`text /** * This function will start converters if they are available. * aNewNextListener will be nullptr if no converter is available. */`",1317,null],[11,"addref","","",1318,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1318,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentURIGrouper` to one of its base interfaces.",1318,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1318,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Group","","`text /** * Determine the group to which the URI belongs. * * @param aURI the URI to group * * @returns the group to which the URI belongs */`",1318,null],[11,"addref","","",1319,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1319,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIController` to one of its base interfaces.",1319,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1319,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsCommandEnabled","","`boolean isCommandEnabled (in string command);`",1319,null],[11,"SupportsCommand","","`boolean supportsCommand (in string command);`",1319,null],[11,"DoCommand","","`void doCommand (in string command);`",1319,null],[11,"OnEvent","","`void onEvent (in string eventName);`",1319,null],[11,"addref","","",1320,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1320,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandController` to one of its base interfaces.",1320,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1320,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCommandStateWithParams","","`void getCommandStateWithParams (in string command, in nsICommandParams aCommandParams);`",1320,null],[11,"DoCommandWithParams","","`void doCommandWithParams (in string command, in nsICommandParams aCommandParams);`",1320,null],[11,"GetSupportedCommands","","`void getSupportedCommands (out unsigned long count, [array, size_is (count), retval] out string commands);`",1320,null],[11,"addref","","",1321,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1321,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIControllerCommandGroup` to one of its base interfaces.",1321,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1321,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AddCommandToGroup","","`void addCommandToGroup (in string aCommand, in string aGroup);`",1321,null],[11,"RemoveCommandFromGroup","","`void removeCommandFromGroup (in string aCommand, in string aGroup);`",1321,null],[11,"IsCommandInGroup","","`boolean isCommandInGroup (in string aCommand, in string aGroup);`",1321,null],[11,"GetGroupsEnumerator","","`nsISimpleEnumerator getGroupsEnumerator ();`",1321,null],[11,"GetEnumeratorForGroup","","`nsISimpleEnumerator getEnumeratorForGroup (in string aGroup);`",1321,null],[11,"addref","","",1322,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1322,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICachingChannel` to one of its base interfaces.",1322,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1322,{"inputs":[{"name":"self"}],"output":{"name":"nsicacheinfochannel"}}],[18,"LOAD_NO_NETWORK_IO","","`text /************************************************************************** * Caching channel specific load flags: */ /** * This load flag inhibits fetching from the net. An error of * NS_ERROR_DOCUMENT_NOT_CACHED will be sent to the listener's * onStopRequest if network IO is necessary to complete the request. * * This flag can be used to find out whether fetching this URL would * cause validation of the cache entry via the network. * * Combining this flag with LOAD_BYPASS_LOCAL_CACHE will cause all * loads to fail. This flag differs from LOAD_ONLY_FROM_CACHE in that * this flag fails the load if validation is required while * LOAD_ONLY_FROM_CACHE skips validation where possible. */`",1322,null],[18,"LOAD_CHECK_OFFLINE_CACHE","","`text /** * This load flag causes the offline cache to be checked when fetching * a request. It will be set automatically if the browser is offline. * * This flag will not be transferred through a redirect. */`",1322,null],[18,"LOAD_BYPASS_LOCAL_CACHE","","`text /** * This load flag causes the local cache to be skipped when fetching a * request. Unlike LOAD_BYPASS_CACHE, it does not force an end-to-end load * (i.e., it does not affect proxy caches). */`",1322,null],[18,"LOAD_BYPASS_LOCAL_CACHE_IF_BUSY","","`text /** * This load flag causes the local cache to be skipped if the request * would otherwise block waiting to access the cache. */`",1322,null],[18,"LOAD_ONLY_FROM_CACHE","","`text /** * This load flag inhibits fetching from the net if the data in the cache * has been evicted. An error of NS_ERROR_DOCUMENT_NOT_CACHED will be sent * to the listener's onStopRequest in this case. This flag is set * automatically when the application is offline. */`",1322,null],[18,"LOAD_ONLY_IF_MODIFIED","","`text /** * This load flag controls what happens when a document would be loaded * from the cache to satisfy a call to AsyncOpen. If this attribute is * set to TRUE, then the document will not be loaded from the cache. A * stream listener can check nsICachingChannel::isFromCache to determine * if the AsyncOpen will actually result in data being streamed. * * If this flag has been set, and the request can be satisfied via the * cache, then the OnDataAvailable events will be skipped. The listener * will only see OnStartRequest followed by OnStopRequest. */`",1322,null],[11,"GetCacheToken","","`text /** * Set/get the cache token... uniquely identifies the data in the cache. * Holding a reference to this token prevents the cached data from being * removed. * * A cache token retrieved from a particular instance of nsICachingChannel * could be set on another instance of nsICachingChannel provided the * underlying implementations are compatible. The implementation of * nsICachingChannel would be expected to only read from the cache entry * identified by the cache token and not try to validate it. * * The cache token can be QI'd to a nsICacheEntryInfo if more detail * about the cache entry is needed (e.g., expiration time). */`",1322,null],[11,"SetCacheToken","","`text /** * Set/get the cache token... uniquely identifies the data in the cache. * Holding a reference to this token prevents the cached data from being * removed. * * A cache token retrieved from a particular instance of nsICachingChannel * could be set on another instance of nsICachingChannel provided the * underlying implementations are compatible. The implementation of * nsICachingChannel would be expected to only read from the cache entry * identified by the cache token and not try to validate it. * * The cache token can be QI'd to a nsICacheEntryInfo if more detail * about the cache entry is needed (e.g., expiration time). */`",1322,null],[11,"GetOfflineCacheToken","","`text /** * The same as above but accessing the offline app cache token if there * is any. * * @throws * NS_ERROR_NOT_AVAILABLE when there is not offline cache token */`",1322,null],[11,"SetOfflineCacheToken","","`text /** * The same as above but accessing the offline app cache token if there * is any. * * @throws * NS_ERROR_NOT_AVAILABLE when there is not offline cache token */`",1322,null],[11,"GetCacheOnlyMetadata","","`text /** * Instructs the channel to only store the metadata of the entry, and not * the content. When reading an existing entry, this automatically sets * LOAD_ONLY_IF_MODIFIED flag. * Must be called before asyncOpen(). */`",1322,null],[11,"SetCacheOnlyMetadata","","`text /** * Instructs the channel to only store the metadata of the entry, and not * the content. When reading an existing entry, this automatically sets * LOAD_ONLY_IF_MODIFIED flag. * Must be called before asyncOpen(). */`",1322,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPin","","`text /** * Tells the channel to use the pinning storage. */`",1322,null],[11,"SetPin","","`text /** * Tells the channel to use the pinning storage. */`",1322,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"ForceCacheEntryValidFor","","`text /** * Overrides cache validation for a time specified in seconds. * * @param aSecondsToTheFuture * */`",1322,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1323,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1323,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteSimpleResult` to one of its base interfaces.",1323,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1323,{"inputs":[{"name":"self"}],"output":{"name":"nsiautocompleteresult"}}],[11,"SetSearchString","","`text /** * A writer for the readonly attribute 'searchString' which should contain * the string that the user typed. */`",1323,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetErrorDescription","","`text /** * A writer for the readonly attribute 'errorDescription'. */`",1323,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetDefaultIndex","","`text /** * A writer for the readonly attribute 'defaultIndex' which should contain * the index of the list that will be selected by default (normally 0). */`",1323,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"SetSearchResult","","`text /** * A writer for the readonly attribute 'searchResult' which should contain * one of the constants nsIAutoCompleteResult.RESULT_* indicating the success * of the search. */`",1323,{"inputs":[{"name":"self"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"InsertMatchAt","","`text /** * Inserts a match consisting of the given value, comment, image, style and * the value to use for defaultIndex completion at a given position. * @param aIndex * The index to insert at * @param aValue * The value to autocomplete to * @param aComment * Comment shown in the autocomplete widget to describe this match * @param aImage * Image shown in the autocomplete widget for this match. * @param aStyle * Describes how to style the match in the autocomplete widget * @param aFinalCompleteValue * Value used when the user confirms selecting this match. If not * provided, aValue will be used. */`",1323,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendMatch","","`text /** * Appends a match consisting of the given value, comment, image, style and * the value to use for defaultIndex completion. * @param aValue * The value to autocomplete to * @param aComment * Comment shown in the autocomplete widget to describe this match * @param aImage * Image shown in the autocomplete widget for this match. * @param aStyle * Describes how to style the match in the autocomplete widget * @param aFinalCompleteValue * Value used when the user confirms selecting this match. If not * provided, aValue will be used. */`",1323,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveMatchAt","","`text /** * Removes an existing match. * @note this is different from removeValueAt, since it's not a consequence of * a user action, and as such it won't notify onValueRemoved. */`",1323,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetListener","","`text /** * Gets the listener for changes in the result. */`",1323,null],[11,"SetListener","","`text /** * Sets a listener for changes in the result. */`",1323,null],[11,"addref","","",1324,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1324,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAutoCompleteSimpleResultListener` to one of its base interfaces.",1324,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1324,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnValueRemoved","","`text /** * Dispatched after a value is removed from the result. * @param aResult * The result from which aValue has been removed. * @param aValue * The removed value. * @param aRemoveFromDb * Whether the value should be removed from persistent storage as well. */`",1324,null],[11,"addref","","",1325,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1325,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMXULSelectControlElement` to one of its base interfaces.",1325,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1325,{"inputs":[{"name":"self"}],"output":{"name":"nsidomxulcontrolelement"}}],[11,"GetSelectedItem","","`attribute nsIDOMXULSelectControlItemElement selectedItem;`",1325,null],[11,"SetSelectedItem","","`attribute nsIDOMXULSelectControlItemElement selectedItem;`",1325,null],[11,"GetSelectedIndex","","`attribute long selectedIndex;`",1325,null],[11,"SetSelectedIndex","","`attribute long selectedIndex;`",1325,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`attribute DOMString value;`",1325,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetValue","","`attribute DOMString value;`",1325,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendItem","","`nsIDOMXULSelectControlItemElement appendItem (in DOMString label, in DOMString value);`",1325,null],[11,"InsertItemAt","","`nsIDOMXULSelectControlItemElement insertItemAt (in long index, in DOMString label, in DOMString value);`",1325,null],[11,"RemoveItemAt","","`nsIDOMXULSelectControlItemElement removeItemAt (in long index);`",1325,null],[11,"GetItemCount","","`readonly attribute unsigned long itemCount;`",1325,null],[11,"GetIndexOfItem","","`long getIndexOfItem (in nsIDOMXULSelectControlItemElement item);`",1325,null],[11,"GetItemAtIndex","","`nsIDOMXULSelectControlItemElement getItemAtIndex (in long index);`",1325,null],[11,"addref","","",1326,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1326,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAccessibleHyperLink` to one of its base interfaces.",1326,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1326,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetStartIndex","","`text /** * Returns the offset of the link within the parent accessible. */`",1326,null],[11,"GetEndIndex","","`text /** * Returns the end index of the link within the parent accessible. * * @note The link itself is represented by one embedded character within the * parent text, so the endIndex should be startIndex + 1. */`",1326,null],[11,"GetValid","","`text /** * Determines whether the link is valid (e. g. points to a valid URL). * * @note XXX Currently only used with ARIA links, and the author has to * specify that the link is invalid via the aria-invalid=\"true\" attribute. * In all other cases, TRUE is returned. */`",1326,null],[11,"GetAnchorCount","","`text /** * The numbber of anchors within this Hyperlink. Is normally 1 for anchors. * This anchor is, for example, the visible output of the html:a tag. * With an Image Map, reflects the actual areas within the map. */`",1326,null],[11,"GetURI","","`text /** * Returns the URI at the given index. * * @note ARIA hyperlinks do not have an URI to point to, since clicks are * processed via JavaScript. Therefore this property does not work on ARIA * links. * * @param index The 0-based index of the URI to be returned. * * @return the nsIURI object containing the specifications for the URI. */`",1326,null],[11,"GetAnchor","","`text /** * Returns a reference to the object at the given index. * * @param index The 0-based index whose object is to be returned. * * @return the nsIAccessible object at the desired index. */`",1326,null],[11,"addref","","",1327,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1327,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITextInputProcessor` to one of its base interfaces.",1327,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1327,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ATTR_RAW_CLAUSE","","",1327,null],[18,"ATTR_SELECTED_RAW_CLAUSE","","",1327,null],[18,"ATTR_CONVERTED_CLAUSE","","",1327,null],[18,"ATTR_SELECTED_CLAUSE","","",1327,null],[18,"KEY_DEFAULT_PREVENTED","","",1327,null],[18,"KEY_NON_PRINTABLE_KEY","","",1327,null],[18,"KEY_FORCE_PRINTABLE_KEY","","",1327,null],[18,"KEY_KEEP_KEY_LOCATION_STANDARD","","",1327,null],[18,"KEY_KEEP_KEYCODE_ZERO","","",1327,null],[18,"KEY_DONT_DISPATCH_MODIFIER_KEY_EVENT","","",1327,null],[18,"KEYEVENT_NOT_CONSUMED","","",1327,null],[18,"KEYDOWN_IS_CONSUMED","","",1327,null],[18,"KEYPRESS_IS_CONSUMED","","",1327,null],[11,"GetHasComposition","","`text /** * Returns true if this instance was dispatched compositionstart but hasn't * dispatched compositionend yet. */`",1327,null],[11,"BeginInputTransaction","","`text /** * When you create an instance, you must call beginInputTransaction() first * except when you created the instance for automated tests. * * @param aWindow A DOM window. The instance will look for a top * level widget from this. * @param aCallback Callback interface which handles requests to * IME and notifications to IME. This must not be * null. * @return If somebody uses internal text input service for a * composition, this returns false. Otherwise, returns * true. I.e., only your TIP can create composition * when this returns true. If this returns false, * your TIP should wait next chance. */`",1327,null],[11,"SetPendingCompositionString","","`text /** * Set new composition string. Pending composition will be flushed by * a call of flushPendingComposition(). However, if the new composition * string isn't empty, you need to call appendClauseToPendingComposition() to * fill all characters of aString with one or more clauses before flushing. * Note that if you need to commit or cancel composition, use * commitComposition(), commitCompositionWith() or cancelComposition(). */`",1327,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AppendClauseToPendingComposition","","`text /** * Append a clause to the pending composition. * * If you need to fill the pending composition string with a clause, you * should call this once. For example: * appendClauseToPendingComposition(compositionString.length, * ATTR_RAW_CLAUSE); * is enough. If you need to separate the pending composition string to * multiple clauses, you need to call this multiple times. For example, * if your pending composition string has three clauses and the second clause * is being converted: * appendClauseToPendingComposition(firstClauseLength, * ATTR_CONVERTED_CLAUSE); * appendClauseToPendingComposition(secondClauseLength, * ATTR_SELECTED_CLAUSE); * appendClauseToPendingComposition(thirdClauseLength, * ATTR_CONVERTED_CLAUSE); * Note that if sum of aLength mismatches length of the pending composition * string, flushPendingComposition() will throw an exception. I.e., * |firstClauseLength + secondClauseLength + thirdClauseLength| must be * same as the length of pending composition string. * * TODO: Should be able to specify custom clause style. * * @param aLength Length of the clause. * @param aAttribute One of ATTR_* constants. */`",1327,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"SetCaretInPendingComposition","","`text /** * Set caret offset in the pending composition string. If you don't need to * show a caret, you don't need to call this. * * @param aOffset Caret offset in the pending composition string. * This must be between 0 and length of the pending * composition string. */`",1327,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetModifierState","","`text /** * getModifierState() returns modifier state managed by this instance. * * @param aModifier One of modifier key names. This doesn't support * virtual modifiers like \"Accel\". * @return true if the modifier key is active. Otherwise, * false. */`",1327,null],[11,"ShareModifierStateOf","","`text /** * shareModifierStateOf() makes the instance shares modifier state of * another instance. When this is called, the instance refers the modifier * state of another instance. After that, changes to either this and the * other instance's modifier state is synchronized. * * @param aOther Another instance which will be referred by the * instance. If this is null, the instance restarts * to manage modifier state independently. */`",1327,null],[11,"addref","","",1328,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1328,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowCreator` to one of its base interfaces.",1328,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1328,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"CreateChromeWindow","","`text /** Create a new window. Gecko will/may call this method, if made available to it, to create new windows. @param parent parent window, if any. null if not. the newly created window should be made a child/dependent window of the parent, if any (and if the concept applies to the underlying OS). @param chromeFlags chrome features from nsIWebBrowserChrome @return the new window */`",1328,null],[11,"addref","","",1329,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1329,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIObjectOutputStream` to one of its base interfaces.",1329,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1329,{"inputs":[{"name":"self"}],"output":{"name":"nsibinaryoutputstream"}}],[11,"WriteObject","","`text /** * Write the object whose \"root\" or XPCOM-identity nsISupports is aObject. * The cause for writing this object is a strong or weak reference, so the * aIsStrongRef argument must tell which kind of pointer is being followed * here during serialization. * * If the object has only one strong reference in the serialization and no * weak refs, use writeSingleRefObject. This is a valuable optimization: * it saves space in the stream, and cycles on both ends of the process. * * If the reference being serialized is a pointer to an interface not on * the primary inheritance chain ending in the root nsISupports, you must * call writeCompoundObject instead of this method. */`",1329,null],[11,"WriteSingleRefObject","","`text /** * Write an object referenced singly and strongly via its root nsISupports * or a subclass of its root nsISupports. There must not be other refs to * aObject in memory, or in the serialization. */`",1329,null],[11,"WriteCompoundObject","","`text /** * Write the object referenced by an interface pointer at aObject that * inherits from a non-primary nsISupports, i.e., a reference to one of * the multiply inherited interfaces derived from an nsISupports other * than the root or XPCOM-identity nsISupports; or a reference to an * inner object in the case of true XPCOM aggregation. aIID identifies * this interface. */`",1329,null],[11,"WriteID","","`void writeID (in nsIDRef aID);`",1329,{"inputs":[{"name":"self"},{"name":"nsid"}],"output":{"name":"nsresult"}}],[11,"GetBuffer","","`text /** * Optimized serialization support -- see nsIStreamBufferAccess.idl. */`",1329,null],[11,"PutBuffer","","`[notxpcom] void putBuffer (in charPtr aBuffer, in uint32_t aLength);`",1329,null],[11,"addref","","",1330,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1330,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIMozIconURI` to one of its base interfaces.",1330,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1330,{"inputs":[{"name":"self"}],"output":{"name":"nsiuri"}}],[11,"GetIconURL","","`attribute nsIURL iconURL;`",1330,null],[11,"SetIconURL","","`attribute nsIURL iconURL;`",1330,null],[11,"GetImageSize","","`attribute unsigned long imageSize;`",1330,null],[11,"SetImageSize","","`attribute unsigned long imageSize;`",1330,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetStockIcon","","`readonly attribute ACString stockIcon;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIconSize","","`readonly attribute ACString iconSize;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetIconState","","`readonly attribute ACString iconState;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetContentType","","`attribute ACString contentType;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetContentType","","`attribute ACString contentType;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetFileExtension","","`readonly attribute ACString fileExtension;`",1330,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1331,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1331,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIRDFXMLSerializer` to one of its base interfaces.",1331,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1331,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Init","","`text /** * Initialize the serializer with the specified datasource. * @param aDataSource the datasource from which data will be * serialized */`",1331,null],[11,"addref","","",1332,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1332,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPrincipal` to one of its base interfaces.",1332,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1332,{"inputs":[{"name":"self"}],"output":{"name":"nsiserializable"}}],[11,"Equals","","`text /** * Returns whether the other principal is equivalent to this principal. * Principals are considered equal if they are the same principal, or * they have the same origin. */`",1332,null],[11,"EqualsConsideringDomain","","`text /** * Like equals, but takes document.domain changes into account. */`",1332,null],[11,"GetHashValue","","`text /** * Returns a hash value for the principal. */`",1332,null],[11,"GetURI","","`text /** * The codebase URI to which this principal pertains. This is * generally the document URI. */`",1332,null],[11,"GetDomain","","`text /** * The domain URI to which this principal pertains. * This is null unless script successfully sets document.domain to our URI * or a superdomain of our URI. * Setting this has no effect on the URI. * See https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin */`",1332,null],[11,"SetDomain","","`text /** * The domain URI to which this principal pertains. * This is null unless script successfully sets document.domain to our URI * or a superdomain of our URI. * Setting this has no effect on the URI. * See https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy#Changing_origin */`",1332,null],[11,"Subsumes","","`text /** * Returns whether the other principal is equal to or weaker than this * principal. Principals are equal if they are the same object or they * have the same origin. * * Thus a principal always subsumes itself. * * The system principal subsumes itself and all other principals. * * A null principal (corresponding to an unknown, hence assumed minimally * privileged, security context) is not equal to any other principal * (including other null principals), and therefore does not subsume * anything but itself. */`",1332,null],[11,"SubsumesConsideringDomain","","`text /** * Same as the previous method, subsumes(), but takes document.domain into * account. */`",1332,null],[11,"SubsumesConsideringDomainIgnoringFPD","","`text /** * Same as the subsumesConsideringDomain(), but ignores the first party * domain in its originAttributes. */`",1332,null],[11,"CheckMayLoad","","`text /** * Checks whether this principal is allowed to load the network resource * located at the given URI under the same-origin policy. This means that * codebase principals are only allowed to load resources from the same * domain, the system principal is allowed to load anything, and null * principals can only load URIs where they are the principal. This is * changed by the optional flag allowIfInheritsPrincipal (which defaults to * false) which allows URIs that inherit their loader's principal. * * If the load is allowed this function does nothing. If the load is not * allowed the function throws NS_ERROR_DOM_BAD_URI. * * NOTE: Other policies might override this, such as the Access-Control * specification. * NOTE: The 'domain' attribute has no effect on the behaviour of this * function. * * * @param uri The URI about to be loaded. * @param report If true, will report a warning to the console service * if the load is not allowed. * @param allowIfInheritsPrincipal If true, the load is allowed if the * loadee inherits the principal of the * loader. * @throws NS_ERROR_DOM_BAD_URI if the load is not allowed. */`",1332,null],[11,"GetCsp","","`text /** * A Content Security Policy associated with this principal. * Use this function to query the associated CSP with this principal. * Please *only* use this function to *set* a CSP when you know exactly what you are doing. * Most likely you want to call ensureCSP instead of setCSP. */`",1332,null],[11,"SetCsp","","`text /** * A Content Security Policy associated with this principal. * Use this function to query the associated CSP with this principal. * Please *only* use this function to *set* a CSP when you know exactly what you are doing. * Most likely you want to call ensureCSP instead of setCSP. */`",1332,null],[11,"EnsureCSP","","`[noscript] nsIContentSecurityPolicy ensureCSP (in nsIDOMDocument aDocument);`",1332,null],[11,"GetPreloadCsp","","`text /** * A speculative Content Security Policy associated with this * principal. Set during speculative loading (preloading) and * used *only* for preloads. * * If you want to query the CSP associated with that principal, * then this is *not* what you want. Instead query 'csp'. */`",1332,null],[11,"EnsurePreloadCSP","","`[noscript] nsIContentSecurityPolicy ensurePreloadCSP (in nsIDOMDocument aDocument);`",1332,null],[11,"GetCspJSON","","`text /** * The CSP of the principal in JSON notation. * Note, that the CSP itself is not exposed to JS, but script * should be able to obtain a JSON representation of the CSP. */`",1332,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetOrigin","","`text /** * A canonical representation of the origin for this principal. This * consists of a base string (which, for codebase principals, is of the * format scheme://host:port), concatenated with |originAttributes| (see * below). * * We maintain the invariant that principalA.equals(principalB) if and only * if principalA.origin == principalB.origin. */`",1332,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOriginNoSuffix","","`text /** * The base part of |origin| without the concatenation with |originSuffix|. * This doesn't have the important invariants described above with |origin|, * and as such should only be used for legacy situations. */`",1332,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOriginSuffix","","`text /** * A string of the form !key1=value1&key2=value2, where each pair represents * an attribute with a non-default value. If all attributes have default * values, this is the empty string. * * The value of .originSuffix is automatically serialized into .origin, so any * consumers using that are automatically origin-attribute-aware. Consumers with * special requirements must inspect and compare .originSuffix manually. */`",1332,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetBaseDomain","","`text /** * The base domain of the codebase URI to which this principal pertains * (generally the document URI), handling null principals and * non-hierarchical schemes correctly. */`",1332,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAppId","","`text /** * Gets the id of the app this principal is inside. If this principal is * not inside an app, returns nsIScriptSecurityManager::NO_APP_ID. * * Note that this principal does not necessarily have the permissions of * the app identified by appId. For example, this principal might * correspond to an iframe whose origin differs from that of the app frame * containing it. In this case, the iframe will have the appId of its * containing app frame, but the iframe must not run with the app's * permissions. * * Similarly, this principal might correspond to an <iframe mozbrowser> * inside an app frame; in this case, the content inside the iframe should * not have any of the app's permissions, even if the iframe is at the same * origin as the app. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetAddonId","","`text /** * Gets the ID of the add-on this principal belongs to. */`",1332,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAddonPolicy","","`readonly attribute nsISupports addonPolicy;`",1332,null],[11,"GetUserContextId","","`text /** * Gets the id of the user context this principal is inside. If this * principal is inside the default userContext, this returns * nsIScriptSecurityManager::DEFAULT_USER_CONTEXT_ID. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetPrivateBrowsingId","","`text /** * Gets the id of the private browsing state of the context containing * this principal. If the principal has a private browsing value of 0, it * is not in private browsing. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetIsInIsolatedMozBrowserElement","","`text /** * Returns true iff the principal is inside an isolated mozbrowser element. * <xul:browser> is not considered to be a mozbrowser element. * <iframe mozbrowser noisolation> does not count as isolated since * isolation is disabled. Isolation can only be disabled if the * containing document is chrome. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsNullPrincipal","","`text /** * Returns true iff this is a null principal (corresponding to an * unknown, hence assumed minimally privileged, security context). */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsCodebasePrincipal","","`text /** * Returns true iff this principal corresponds to a codebase origin. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsExpandedPrincipal","","`text /** * Returns true iff this is an expanded principal. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsSystemPrincipal","","`text /** * Returns true iff this is the system principal. */`",1332,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",1333,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1333,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExpandedPrincipal` to one of its base interfaces.",1333,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1333,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1334,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1334,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertBlocklist` to one of its base interfaces.",1334,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1334,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RevokeCertByIssuerAndSerial","","`text /** * Add details of a revoked certificate : * issuer name (base-64 encoded DER) and serial number (base-64 encoded DER). */`",1334,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"RevokeCertBySubjectAndPubKey","","`text /** * Add details of a revoked certificate : * subject name (base-64 encoded DER) and hash of public key (base-64 encoded * sha-256 hash of the public key). */`",1334,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SaveEntries","","`text /** * Persist (fresh) blocklist entries to the profile (if a profile directory is * available). Note: calling this will result in synchronous I/O. */`",1334,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"IsCertRevoked","","`text /** * Check if a certificate is blocked. * issuer - issuer name, DER encoded * serial - serial number, DER encoded * subject - subject name, DER encoded * pubkey - public key, DER encoded */`",1334,null],[11,"IsBlocklistFresh","","`text /** * Check that the blocklist data is current. Specifically, that the current * time is no more than security.onecrl.maximum_staleness_in_seconds seconds * after the last blocklist update (as stored in the * app.update.lastUpdateTime.blocklist-background-update-timer pref) */`",1334,null],[11,"addref","","",1335,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1335,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsILoadContext` to one of its base interfaces.",1335,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1335,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetAssociatedWindow","","`text /** * associatedWindow is the window with which the load is associated, if any. * Note that the load may be triggered by a document which is different from * the document in associatedWindow, and in fact the source of the load need * not be same-origin with the document in associatedWindow. This attribute * may be null if there is no associated window. */`",1335,null],[11,"GetTopWindow","","`text /** * topWindow is the top window which is of same type as associatedWindow. * This is equivalent to associatedWindow.top, but is provided here as a * convenience. All the same caveats as associatedWindow of apply, of * course. This attribute may be null if there is no associated window. */`",1335,null],[11,"GetTopFrameElement","","`text /** * topFrameElement is the <iframe>, <frame>, or <browser> element which * contains the topWindow with which the load is associated. * * Note that we may have a topFrameElement even when we don't have an * associatedWindow, if the topFrameElement's content lives out of process. * topFrameElement is available in single-process and multiprocess contexts. * Note that topFrameElement may be in chrome even when the nsILoadContext is * associated with content. */`",1335,null],[11,"GetNestedFrameId","","`text /** * If this LoadContext corresponds to a nested remote iframe, we don't have * access to the topFrameElement. Instead, we must use this id to send * messages. A return value of 0 signifies that this load context is not for * a nested frame. */`",1335,null],[11,"GetIsContent","","`text /** * True if the load context is content (as opposed to chrome). This is * determined based on the type of window the load is performed in, NOT based * on any URIs that might be around. */`",1335,null],[11,"GetUsePrivateBrowsing","","`attribute boolean usePrivateBrowsing;`",1335,null],[11,"SetUsePrivateBrowsing","","`attribute boolean usePrivateBrowsing;`",1335,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetUseRemoteTabs","","`text /** * Attribute that determines if remote (out-of-process) tabs should be used. */`",1335,null],[11,"GetUseTrackingProtection","","`attribute boolean useTrackingProtection;`",1335,null],[11,"SetUseTrackingProtection","","`attribute boolean useTrackingProtection;`",1335,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetPrivateBrowsing","","`text /** * Set the private browsing state of the load context, meant to be used internally. */`",1335,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetRemoteTabs","","`text /** * Set the remote tabs state of the load context, meant to be used internally. */`",1335,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetIsInIsolatedMozBrowserElement","","`text /** * Returns true iff the load is occurring inside an isolated mozbrowser * element. <xul:browser> is not considered to be a mozbrowser element. * <iframe mozbrowser noisolation> does not count as isolated since * isolation is disabled. Isolation can only be disabled if the * containing document is chrome. */`",1335,null],[11,"addref","","",1336,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1336,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITXTToHTMLConv` to one of its base interfaces.",1336,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1336,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamconverter"}}],[11,"SetTitle","","`text /** * @param text: Title to set for the HTML document. Only applicable if * preFormatHTML(true) is called. * @result The given title will be used to form an HTML document * from the plain text document. */`",1336,null],[11,"PreFormatHTML","","`text /** * @param value: true to use an HTML header and footer on the document, * false to omit it. * @result The document will use a header and footer if value is * true. */`",1336,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1337,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1337,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDOMMouseEvent` to one of its base interfaces.",1337,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1337,{"inputs":[{"name":"self"}],"output":{"name":"nsidomuievent"}}],[18,"MOZ_SOURCE_UNKNOWN","","",1337,null],[18,"MOZ_SOURCE_MOUSE","","",1337,null],[18,"MOZ_SOURCE_PEN","","",1337,null],[18,"MOZ_SOURCE_ERASER","","",1337,null],[18,"MOZ_SOURCE_CURSOR","","",1337,null],[18,"MOZ_SOURCE_TOUCH","","",1337,null],[18,"MOZ_SOURCE_KEYBOARD","","",1337,null],[11,"GetScreenX","","`readonly attribute long screenX;`",1337,null],[11,"GetScreenY","","`readonly attribute long screenY;`",1337,null],[11,"GetMozMovementX","","`readonly attribute long mozMovementX;`",1337,null],[11,"GetMozMovementY","","`readonly attribute long mozMovementY;`",1337,null],[11,"GetClientX","","`readonly attribute long clientX;`",1337,null],[11,"GetClientY","","`readonly attribute long clientY;`",1337,null],[11,"GetCtrlKey","","`readonly attribute boolean ctrlKey;`",1337,null],[11,"GetShiftKey","","`readonly attribute boolean shiftKey;`",1337,null],[11,"GetAltKey","","`readonly attribute boolean altKey;`",1337,null],[11,"GetMetaKey","","`readonly attribute boolean metaKey;`",1337,null],[11,"GetButton","","`readonly attribute short button;`",1337,null],[11,"GetButtons","","`readonly attribute unsigned short buttons;`",1337,null],[11,"GetRelatedTarget","","`readonly attribute nsIDOMEventTarget relatedTarget;`",1337,null],[11,"InitMouseEvent","","`void initMouseEvent (in DOMString typeArg, in boolean canBubbleArg, in boolean cancelableArg, in mozIDOMWindow viewArg, in long detailArg, in long screenXArg, in long screenYArg, in long clientXArg, in long clientYArg, in boolean ctrlKeyArg, in boolean altKeyArg, in boolean shiftKeyArg, in boolean metaKeyArg, in unsigned short buttonArg, in nsIDOMEventTarget relatedTargetArg);`",1337,null],[11,"GetMozPressure","","`readonly attribute float mozPressure;`",1337,null],[11,"GetMozInputSource","","`readonly attribute unsigned short mozInputSource;`",1337,null],[11,"GetModifierState","","`bool getModifierState (in DOMString keyArg);`",1337,null],[11,"addref","","",1338,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1338,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsINetAddr` to one of its base interfaces.",1338,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1338,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"FAMILY_INET","","`text /** * Network address families. These correspond to all the network address * families supported by the NetAddr struct. */`",1338,null],[18,"FAMILY_INET6","","",1338,null],[18,"FAMILY_LOCAL","","",1338,null],[11,"GetFamily","","`text /** * @return the address family of the network address, which corresponds to * one of the FAMILY_ constants. */`",1338,null],[11,"GetAddress","","`text /** * @return Either the IP address (FAMILY_INET, FAMILY_INET6) or the path * (FAMILY_LOCAL) in string form. IP addresses are in the format produced by * mozilla::net::NetAddrToString. * * Note: Paths for FAMILY_LOCAL may have length limitations which are * implementation dependent and not documented as part of this interface. */`",1338,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetPort","","`text /** * @return the port number for a FAMILY_INET or FAMILY_INET6 address. * * @throws NS_ERROR_NOT_AVAILABLE if the address family is not FAMILY_INET or * FAMILY_INET6. */`",1338,null],[11,"GetFlow","","`text /** * @return the flow label for a FAMILY_INET6 address. * * @see http://www.ietf.org/rfc/rfc3697.txt * * @throws NS_ERROR_NOT_AVAILABLE if the address family is not FAMILY_INET6 */`",1338,null],[11,"GetScope","","`text /** * @return the address scope of a FAMILY_INET6 address. * * @see http://tools.ietf.org/html/rfc4007 * * @throws NS_ERROR_NOT_AVAILABLE if the address family is not FAMILY_INET6 */`",1338,null],[11,"GetIsV4Mapped","","`text /** * @return whether a FAMILY_INET6 address is mapped from FAMILY_INET. * * @throws NS_ERROR_NOT_AVAILABLE if the address family is not FAMILY_INET6 */`",1338,null],[11,"addref","","",1339,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1339,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISAXAttributes` to one of its base interfaces.",1339,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1339,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIndexFromName","","`text /** * Look up the index of an attribute by Namespace name. * @param uri The Namespace URI, or the empty string * if the name has no Namespace URI. * @param localName The attribute's local name. * @return The index of the attribute, or -1 * if it does not appear in the list. */`",1339,null],[11,"GetIndexFromQName","","`text /** * Look up the index of an attribute by XML qualified name. * @param qName The qualified name. * @return The index of the attribute, or -1 * if it does not appear in the list. */`",1339,null],[11,"GetLength","","`text /** * Return the number of attributes in the list. Once you know the * number of attributes, you can iterate through the list. * * @return The number of attributes in the list. */`",1339,null],[11,"GetLocalName","","`text /** * Look up an attribute's local name by index. * @param index The attribute index (zero-based). * @return The local name, or null if the index is out of range. */`",1339,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetQName","","`text /** * Look up an attribute's XML qualified name by index. * @param index The attribute index (zero-based). * @return The XML qualified name, or the empty string if none is * available, or null if the index is out of range. */`",1339,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetType","","`text /** * Look up an attribute's type by index. The attribute type is one * of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", * \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", or \"NOTATION\" (always in upper * case). If the parser has not read a declaration for the * attribute, or if the parser does not report attribute types, then * it must return the value \"CDATA\" as stated in the XML 1.0 * Recommendation (clause 3.3.3, \"Attribute-Value * Normalization\"). For an enumerated attribute that is not a * notation, the parser will report the type as \"NMTOKEN\". * * @param index The attribute index (zero-based). * @return The attribute's type as a string, or null if the index is * out of range. */`",1339,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTypeFromName","","`text /** * Look up an attribute's type by Namespace name. * @param uri The Namespace URI, or the empty string * if the name has no Namespace URI. * @param localName The attribute's local name. * @return The attribute type as a string, or null if the attribute * is not in the list. */`",1339,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetTypeFromQName","","`text /** * Look up an attribute's type by XML qualified name. * @param qName The qualified name. * @return The attribute type as a string, or null if the attribute * is not in the list. */`",1339,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetURI","","`text /** * Look up an attribute's Namespace URI by index. * @param index The attribute index (zero-based). * @return The Namespace URI, or the empty string if none is available, * or null if the index is out of range. */`",1339,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValue","","`text /** * Look up an attribute's value by index. If the attribute value is * a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the tokens will * be concatenated into a single string with each token separated by * a single space. * * @param index The attribute index (zero-based). * @return The attribute's value as a string, or null if the index is * out of range. */`",1339,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValueFromName","","`text /** * Look up an attribute's value by Namespace name. If the attribute * value is a list of tokens (IDREFS, ENTITIES, or NMTOKENS), the * tokens will be concatenated into a single string with each token * separated by a single space. * * @param uri The Namespace URI, or the empty string * if the name has no Namespace URI. * @param localName The attribute's local name. * @return The attribute's value as a string, or null if the attribute is * not in the list. */`",1339,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetValueFromQName","","`text /** * Look up an attribute's value by XML qualified (prefixed) name. * If the attribute value is a list of tokens (IDREFS, ENTITIES, or * NMTOKENS), the tokens will be concatenated into a single string * with each token separated by a single space. * * @param qName The qualified (prefixed) name. * @return The attribute's value as a string, or null if the attribute is * not in the list. */`",1339,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1340,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1340,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `xpcIJSGetFactory` to one of its base interfaces.",1340,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1340,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Get","","`nsIFactory get (in nsCIDRef aCID);`",1340,null],[11,"addref","","",1341,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1341,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIStorageConnection` to one of its base interfaces.",1341,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1341,{"inputs":[{"name":"self"}],"output":{"name":"mozistorageasyncconnection"}}],[18,"TRANSACTION_DEFERRED","","`text /** * Begins a new transaction with the given type. */`",1341,null],[18,"TRANSACTION_IMMEDIATE","","",1341,null],[18,"TRANSACTION_EXCLUSIVE","","",1341,null],[11,"Close","","`text /** * Closes a database connection. Callers must finalize all statements created * for this connection prior to calling this method. It is illegal to use * call this method if any asynchronous statements have been executed on this * connection. * * @throws NS_ERROR_UNEXPECTED * If any statement has been executed asynchronously on this object. * @throws NS_ERROR_UNEXPECTED * If is called on a thread other than the one that opened it. */`",1341,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Clone","","`text /** * Clones a database connection and makes the clone read only if needed. * SQL Functions and attached on-disk databases are applied to the new clone. * * @param aReadOnly * If true, the returned database should be put into read-only mode. * Defaults to false. * @return the cloned database connection. * * @throws NS_ERROR_UNEXPECTED * If this connection is a memory database. * @note If your connection is already read-only, you will get a read-only * clone. * @note Due to a bug in SQLite, if you use the shared cache (openDatabase), * you end up with the same privileges as the first connection opened * regardless of what is specified in aReadOnly. * @note The following pragmas are copied over to a read-only clone: * - cache_size * - temp_store * The following pragmas are copied over to a writeable clone: * - cache_size * - temp_store * - foreign_keys * - journal_size_limit * - synchronous * - wal_autocheckpoint * All SQL functions are copied over to read-only and writeable clones. * Additionally, all temporary tables, triggers, and views, as well as * any indexes on temporary tables, are copied over to writeable clones. * For temporary tables, only the schemas are copied, not their * contents. * */`",1341,null],[11,"GetDefaultPageSize","","`text /** * The default size for SQLite database pages used by mozStorage for new * databases. */`",1341,null],[11,"GetConnectionReady","","`text /** * Indicates if the connection is open and ready to use. This will be false * if the connection failed to open, or it has been closed. */`",1341,null],[11,"GetLastInsertRowID","","`text /** * lastInsertRowID returns the row ID from the last INSERT * operation. */`",1341,null],[11,"GetAffectedRows","","`text /** * affectedRows returns the number of database rows that were changed or * inserted or deleted by last operation. */`",1341,null],[11,"GetLastError","","`text /** * The last error SQLite error code. */`",1341,null],[11,"GetLastErrorString","","`text /** * The last SQLite error as a string (in english, straight from the * sqlite library). */`",1341,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetSchemaVersion","","`text /** * The schema version of the database. This should not be used until the * database is ready. The schema will be reported as zero if it is not set. */`",1341,null],[11,"SetSchemaVersion","","`text /** * The schema version of the database. This should not be used until the * database is ready. The schema will be reported as zero if it is not set. */`",1341,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CreateStatement","","`text /** * Create a mozIStorageStatement for the given SQL expression. The * expression may use ? to indicate sequential numbered arguments, * ?1, ?2 etc. to indicate specific numbered arguments or :name and * $var to indicate named arguments. * * @param aSQLStatement * The SQL statement to execute. * @return a new mozIStorageStatement */`",1341,null],[11,"ExecuteSimpleSQL","","`text /** * Execute a SQL expression, expecting no arguments. * * @param aSQLStatement The SQL statement to execute */`",1341,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"TableExists","","`text /** * Check if the given table exists. * * @param aTableName * The table to check * @return TRUE if table exists, FALSE otherwise. */`",1341,null],[11,"IndexExists","","`text /** * Check if the given index exists. * * @param aIndexName The index to check * @return TRUE if the index exists, FALSE otherwise. */`",1341,null],[11,"GetTransactionInProgress","","`text /** * Returns true if a transaction is active on this connection. */`",1341,null],[11,"BeginTransaction","","`text /** * Begin a new transaction. sqlite default transactions are deferred. * If a transaction is active, throws an error. */`",1341,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginTransactionAs","","`void beginTransactionAs (in int32_t transactionType);`",1341,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"CommitTransaction","","`text /** * Commits the current transaction. If no transaction is active, * @throws NS_ERROR_UNEXPECTED. * @throws NS_ERROR_NOT_INITIALIZED. */`",1341,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"RollbackTransaction","","`text /** * Rolls back the current transaction. If no transaction is active, * @throws NS_ERROR_UNEXPECTED. * @throws NS_ERROR_NOT_INITIALIZED. */`",1341,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"CreateTable","","`text /** * Create the table with the given name and schema. * * If the table already exists, NS_ERROR_FAILURE is thrown. * (XXX at some point in the future it will check if the schema is * the same as what is specified, but that doesn't happen currently.) * * @param aTableName * The table name to be created, consisting of [A-Za-z0-9_], and * beginning with a letter. * @param aTableSchema * The schema of the table; what would normally go between the parens * in a CREATE TABLE statement: e.g., \"foo INTEGER, bar STRING\". * * @throws NS_ERROR_FAILURE * If the table already exists or could not be created for any other * reason. */`",1341,null],[11,"SetGrowthIncrement","","`text /** * Controls SQLITE_FCNTL_CHUNK_SIZE setting in sqlite. This helps avoid fragmentation * by growing/shrinking the database file in SQLITE_FCNTL_CHUNK_SIZE increments. To * conserve memory on systems short on storage space, this function will have no effect * on mobile devices or if less than 500MiB of space is left available. * * @param aIncrement * The database file will grow in multiples of chunkSize. * @param aDatabaseName * Sqlite database name. \"\" means pass NULL for zDbName to sqlite3_file_control. * See http://sqlite.org/c3ref/file_control.html for more details. * @throws NS_ERROR_FILE_TOO_BIG * If the system is short on storage space. */`",1341,{"inputs":[{"name":"self"},{"name":"int32_t"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"EnableModule","","`text /** * Enable a predefined virtual table implementation. * * @param aModuleName * The module to enable. Only \"filesystem\" is currently supported. * * @throws NS_ERROR_FAILURE * For unknown module names. */`",1341,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1342,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1342,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIWithBlobImpl` to one of its base interfaces.",1342,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1342,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetBlobImpl","","`text /** * The BlobImpl associated with the resource returned when loading this uri. */`",1342,null],[11,"addref","","",1343,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1343,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISafeOutputStream` to one of its base interfaces.",1343,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1343,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Finish","","`text /** * Call this method to close the stream and cause the original target * to be overwritten. Note: if any call to |write| failed to write out * all of the data given to it, then calling this method will |close| the * stream and return failure. Further, if closing the stream fails, this * method will return failure. The original target will be overwritten only * if all calls to |write| succeeded and the stream was successfully closed. */`",1343,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1344,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1344,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketFilter` to one of its base interfaces.",1344,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1344,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"SF_INCOMING","","",1344,null],[18,"SF_OUTGOING","","",1344,null],[11,"addref","","",1345,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1345,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISocketFilterHandler` to one of its base interfaces.",1345,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1345,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NewFilter","","`nsISocketFilter newFilter ();`",1345,null],[11,"addref","","",1346,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1346,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICertOverrideService` to one of its base interfaces.",1346,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1346,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ERROR_UNTRUSTED","","`text /** * Override Untrusted */`",1346,null],[18,"ERROR_MISMATCH","","`text /** * Override hostname Mismatch */`",1346,null],[18,"ERROR_TIME","","`text /** * Override Time error */`",1346,null],[11,"RememberValidityOverride","","`text /** * The given cert should always be accepted for the given hostname:port, * regardless of errors verifying the cert. * Host:Port is a primary key, only one entry per host:port can exist. * The implementation will store a fingerprint of the cert. * The implementation will decide which fingerprint alg is used. * * Each override is specific to exactly the errors overridden, so * overriding everything won't match certs at the given host:port * which only exhibit some subset of errors. * * @param aHostName The host (punycode) this mapping belongs to * @param aPort The port this mapping belongs to, if it is -1 then it * is internaly treated as 443 * @param aCert The cert that should always be accepted * @param aOverrideBits The precise set of errors we want to be overriden */`",1346,null],[11,"RememberTemporaryValidityOverrideUsingFingerprint","","`text /** * Certs with the given fingerprint should always be accepted for the * given hostname:port, regardless of errors verifying the cert. * Host:Port is a primary key, only one entry per host:port can exist. * The fingerprint should be an SHA-256 hash of the certificate. * * @param aHostName The host (punycode) this mapping belongs to * @param aPort The port this mapping belongs to, if it is -1 then it * is internaly treated as 443 * @param aCertFingerprint The cert fingerprint that should be accepted, in * the format 'AA:BB:...' (colon-separated upper-case hex bytes). * @param aOverrideBits The errors we want to be overriden */`",1346,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"},{"name":"nsacstring"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"HasMatchingOverride","","`text /** * Return whether this host, port, cert triple has a stored override. * If so, the outparams will contain the specific errors that were * overridden, and whether the override is permanent, or only for the current * session. * * @param aHostName The host (punycode) this mapping belongs to * @param aPort The port this mapping belongs to, if it is -1 then it * is internally treated as 443 * @param aCert The certificate this mapping belongs to * @param aOverrideBits The errors that are currently overridden * @param aIsTemporary Whether the stored override is session-only, * or permanent * @return Whether an override has been stored for this host+port+cert */`",1346,null],[11,"GetValidityOverride","","`text /** * Retrieve the stored override for the given hostname:port. * * @param aHostName The host (punycode) whose entry should be tested * @param aPort The port whose entry should be tested, if it is -1 then it * is internaly treated as 443 * @param aHashAlg On return value True, the fingerprint hash algorithm * as an OID value in dotted notation. * @param aFingerprint On return value True, the stored fingerprint * @param aOverrideBits The errors that are currently overriden * @return whether a matching override entry for aHostNameWithPort * and aFingerprint is currently on file */`",1346,null],[11,"ClearValidityOverride","","`text /** * Remove a override for the given hostname:port. * * @param aHostName The host (punycode) whose entry should be cleared. * @param aPort The port whose entry should be cleared. * If it is -1, then it is internaly treated as 443. * If it is 0 and aHostName is \"all:temporary-certificates\", * then all temporary certificates should be cleared. */`",1346,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"IsCertUsedForOverrides","","`text /** * Is the given cert used in rules? * * @param aCert The cert we're looking for * @return how many override entries are currently on file * for the given certificate */`",1346,null],[11,"addref","","",1347,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1347,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebContentHandlerInfo` to one of its base interfaces.",1347,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1347,{"inputs":[{"name":"self"}],"output":{"name":"nsihandlerapp"}}],[11,"GetContentType","","`text /** * The content type handled by the handler */`",1347,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetUri","","`text /** * The uri of the handler, with an embedded %s where the URI of the loaded * document will be encoded. */`",1347,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetHandlerURI","","`text /** * Gets the service URL Spec, with the loading document URI encoded in it. * @param uri * The URI of the document being loaded * @returns The URI of the service with the loading document URI encoded in * it. */`",1347,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1348,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1348,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebContentConverterService` to one of its base interfaces.",1348,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1348,{"inputs":[{"name":"self"}],"output":{"name":"nsiwebcontenthandlerregistrar"}}],[11,"SetAutoHandler","","`text /** * Specifies the handler to be used to automatically handle all links of a * certain content type from now on. * @param contentType * The content type to automatically load with the specified handler * @param handler * A web service handler. If this is null, no automatic action is * performed and the user must choose. * @throws NS_ERROR_NOT_AVAILABLE if the service refered to by |handler| is * not already registered. */`",1348,null],[11,"GetAutoHandler","","`text /** * Gets the auto handler specified for a particular content type * @param contentType * The content type to look up an auto handler for. * @returns The web service handler that will automatically handle all * documents of the specified type. null if there is no automatic * handler. (Handlers may be registered, just none of them specified * as \"automatic\"). */`",1348,null],[11,"GetWebContentHandlerByURI","","`text /** * Gets a web handler for the specified service URI * @param contentType * The content type of the service being located * @param uri * The service URI of the handler to locate. * @returns A web service handler that uses the specified uri. */`",1348,null],[11,"LoadPreferredHandler","","`text /** * Loads the preferred handler when content of a registered type is about * to be loaded. * @param request * The nsIRequest for the load of the content */`",1348,null],[11,"RemoveProtocolHandler","","`text /** * Removes a registered protocol handler * @param protocol * The protocol scheme to remove a service handler for * @param uri * The uri of the service handler to remove */`",1348,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"RemoveContentHandler","","`text /** * Removes a registered content handler * @param contentType * The content type to remove a service handler for * @param uri * The uri of the service handler to remove */`",1348,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetContentHandlers","","`text /** * Gets the list of content handlers for a particular type. * @param contentType * The content type to get handlers for * @returns An array of nsIWebContentHandlerInfo objects */`",1348,null],[11,"ResetHandlersForType","","`text /** * Resets the list of available content handlers to the default set from * the distribution. * @param contentType * The content type to reset handlers for */`",1348,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1349,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1349,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIServiceManager` to one of its base interfaces.",1349,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1349,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetService","","`text /** * getServiceByContractID * * Returns the instance that implements aClass or aContractID and the * interface aIID. This may result in the instance being created. * * @param aClass or aContractID : aClass or aContractID of object * instance requested * @param aIID : IID of interface requested * @param result : resulting service */`",1349,null],[11,"GetServiceByContractID","","`void getServiceByContractID (in string aContractID, in nsIIDRef aIID, [iid_is (aIID), retval] out nsQIResult result);`",1349,null],[11,"IsServiceInstantiated","","`text /** * isServiceInstantiated * * isServiceInstantiated will return a true if the service has already * been created, or false otherwise. Throws if the service does not * implement the given IID. * * @param aClass or aContractID : aClass or aContractID of object * instance requested * @param aIID : IID of interface requested * @throws NS_NOINTERFACE if the IID given isn't supported by the object */`",1349,null],[11,"IsServiceInstantiatedByContractID","","`boolean isServiceInstantiatedByContractID (in string aContractID, in nsIIDRef aIID);`",1349,null],[11,"addref","","",1350,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1350,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPartialSHistory` to one of its base interfaces.",1350,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1350,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"STATE_INACTIVE","","",1350,null],[18,"STATE_ACTIVE","","",1350,null],[18,"STATE_PRERENDER","","",1350,null],[11,"GetCount","","`[infallible] readonly attribute unsigned long count;`",1350,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetGlobalIndex","","`[infallible] readonly attribute long globalIndex;`",1350,{"inputs":[{"name":"self"}],"output":{"name":"int32_t"}}],[11,"GetGlobalIndexOffset","","`[infallible] readonly attribute unsigned long globalIndexOffset;`",1350,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetOwnerFrameLoader","","`readonly attribute nsIFrameLoader ownerFrameLoader;`",1350,null],[11,"GetGroupedSHistory","","`readonly attribute nsIGroupedSHistory groupedSHistory;`",1350,null],[11,"GetActiveState","","`[infallible] attribute long activeState;`",1350,{"inputs":[{"name":"self"}],"output":{"name":"int32_t"}}],[11,"SetActiveState","","`[infallible] attribute long activeState;`",1350,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"OnAttachGroupedSHistory","","`text /** * Notify that it's been added to a grouped session history. It also implies * it's becoming the active partial history of the group. * * @param aGroup The GroupedSHistory which this partialSHistory * is joining. * * @param aOffset The number of entries in preceding partial * session histories. */`",1350,null],[11,"HandleSHistoryUpdate","","`text /** * This method is used by the TabParent to notify the PartialSHistory * that the state of its corresponding nsISHistory in the content process * has been updated. It is unused in the in-process case. * * @param aCount The number of entries in the associated session history. * @param aLocalIndex The local index of the currently active entry in the * associated session history */`",1350,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"OnActive","","`text /** * Notify that the partial session history has been swapped in as the active * session history. Only an active session history can possibly add / remove / * replace its history entries. * * @param aGlobalLength The up-to-date global length. * @param aTargetLocalIndex The local index to navigate to. */`",1350,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"OnDeactive","","`text /** * Notify that the partial session history has been swapped out and is no * longer active. */`",1350,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1351,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1351,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceGroupDetails` to one of its base interfaces.",1351,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1351,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetGroupId","","`text /** * An identifier unique to the component. * * This identifier is somewhat human-readable to aid with debugging, * but clients should not rely upon the format. */`",1351,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetName","","`text /** * A somewhat human-readable name for the component. */`",1351,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetWindowId","","`text /** * If the component is code executed in a window, the ID of the topmost * outer window (i.e. the tab), otherwise 0. */`",1351,null],[11,"GetIsSystem","","`text /** * `true` if this component is executed with system privileges * (e.g. the platform itself), `false` otherwise * (e.g. webpages). */`",1351,null],[11,"GetProcessId","","`text /** * The process running this group. */`",1351,null],[11,"GetIsContentProcess","","`text /** * `true` if the code is executed in a content process, `false` otherwise. */`",1351,null],[11,"addref","","",1352,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1352,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceStats` to one of its base interfaces.",1352,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1352,{"inputs":[{"name":"self"}],"output":{"name":"nsiperformancegroupdetails"}}],[11,"GetTotalUserTime","","`text /** * Total amount of time spent executing code in this group, in * microseconds. */`",1352,null],[11,"GetTotalSystemTime","","`readonly attribute unsigned long long totalSystemTime;`",1352,null],[11,"GetTotalCPOWTime","","`readonly attribute unsigned long long totalCPOWTime;`",1352,null],[11,"GetTicks","","`text /** * Total number of times code execution entered this group, * since process launch. This may be greater than the number * of times we have entered the event loop. */`",1352,null],[11,"GetDurations","","`text /** * Jank indicator. * * durations[i] == number of times execution of this group * lasted at lest 2^i ms. */`",1352,null],[11,"addref","","",1353,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1353,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceSnapshot` to one of its base interfaces.",1353,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1353,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetComponentsData","","`text /** * Data on all individual components. */`",1353,null],[11,"GetProcessData","","`text /** * Information on the process itself. * * This contains the total amount of time spent executing JS code, * the total amount of time spent waiting for system calls while * executing JS code, the total amount of time performing blocking * inter-process calls, etc. */`",1353,null],[11,"addref","","",1354,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1354,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceAlert` to one of its base interfaces.",1354,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1354,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"REASON_SLOWDOWN","","`text /** * A slowdown was detected. * * See REASON_JANK_* for details on whether this slowdown was user-noticeable. */`",1354,null],[18,"REASON_JANK_IN_ANIMATION","","`text /** * This alert was triggered during a jank in animation. * * In the current implementation, we consider that there is a jank * in animation if delivery of the vsync message to the main thread * has been delayed too much (see * nsIPerformanceStatsService.animationJankLevelThreshold). * * Note that this is a heuristic which may provide false positives, * so clients of this API are expected to perform post-processing to * filter out such false positives. */`",1354,null],[18,"REASON_JANK_IN_INPUT","","`text /** * This alert was triggered during a jank in user input. * * In the current implementation, we consider that there is a jank * in animation if a user input was received either immediately * before executing the offending code (see * nsIPerformanceStatsService.userInputDelayThreshold) or while * executing the offending code. * * Note that this is a heuristic which may provide false positives, * so clients of this API are expected to perform post-processing to * filter out such false positives. */`",1354,null],[11,"GetReason","","`text /** * The reason for the alert, as a bitwise or of the various REASON_* * constants. */`",1354,null],[11,"GetHighestJank","","`text /** * Longest interval spent executing code in this group * since the latest alert, in microseconds. * * Note that the underlying algorithm is probabilistic and may * provide false positives, so clients of this API are expected to * perform post-processing to filter out such false positives. In * particular, a high system load will increase the noise level on * this measure. */`",1354,null],[11,"GetHighestCPOW","","`text /** * Longest interval spent executing CPOW in this group * since the latest alert, in microseconds. * * This measure is reliable and involves no heuristics. However, * note that the duration of CPOWs is increased by high system * loads. */`",1354,null],[11,"addref","","",1355,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1355,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceObserver` to one of its base interfaces.",1355,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1355,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Observe","","`text /** * @param target The performance group that caused the jank. * @param alert The performance cost that triggered the alert. */`",1355,null],[11,"addref","","",1356,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1356,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceObservable` to one of its base interfaces.",1356,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1356,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTarget","","`text /** * If a single group is being observed, information on this group. */`",1356,null],[11,"AddJankObserver","","`text /** * Add an observer that will be informed in case of jank. * * Set `jankAlertThreshold` to determine how much jank is needed * to trigger alerts. * * If the same observer is added more than once, it will be * triggered as many times as it has been added. */`",1356,null],[11,"RemoveJankObserver","","`text /** * Remove an observer previously added with `addJankObserver`. * * Noop if the observer hasn't been added. */`",1356,null],[11,"addref","","",1357,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1357,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPerformanceStatsService` to one of its base interfaces.",1357,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1357,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetJankAlertThreshold","","`text /** * The threshold, in microseconds, above which a performance group is * considered \"slow\" and should raise performance alerts. */`",1357,null],[11,"SetJankAlertThreshold","","`text /** * The threshold, in microseconds, above which a performance group is * considered \"slow\" and should raise performance alerts. */`",1357,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetAnimationJankLevelThreshold","","`text /** * If a user is seeing an animation and we spend too long executing * JS code while blocking refresh, this will be visible to the user. * * We assume that any jank during an animation and lasting more than * 2^animationJankLevelThreshold ms will be visible. */`",1357,null],[11,"SetAnimationJankLevelThreshold","","`text /** * If a user is seeing an animation and we spend too long executing * JS code while blocking refresh, this will be visible to the user. * * We assume that any jank during an animation and lasting more than * 2^animationJankLevelThreshold ms will be visible. */`",1357,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetUserInputDelayThreshold","","`text /** * If a user performs an input (e.g. clicking, pressing a key, but * *NOT* moving the mouse), and we spend too long executing JS code * before displaying feedback, this will be visible to the user even * if there is no ongoing animation. * * We assume that any jank during `userInputDelayThreshold` us after * the user input will be visible. */`",1357,null],[11,"SetUserInputDelayThreshold","","`text /** * If a user performs an input (e.g. clicking, pressing a key, but * *NOT* moving the mouse), and we spend too long executing JS code * before displaying feedback, this will be visible to the user even * if there is no ongoing animation. * * We assume that any jank during `userInputDelayThreshold` us after * the user input will be visible. */`",1357,{"inputs":[{"name":"self"},{"name":"uint64_t"}],"output":{"name":"nsresult"}}],[11,"GetJankAlertBufferingDelay","","`text /** * A buffering delay, in milliseconds, used by the service to * regroup performance alerts, before observers are actually * noticed. Higher delays let the system avoid redundant * notifications for the same group, and are generally better for * performance. */`",1357,null],[11,"SetJankAlertBufferingDelay","","`text /** * A buffering delay, in milliseconds, used by the service to * regroup performance alerts, before observers are actually * noticed. Higher delays let the system avoid redundant * notifications for the same group, and are generally better for * performance. */`",1357,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetObservableWindow","","`text /** * Get a nsIPerformanceObservable representing a DOM window. This * observable may then be used to (un)register for watching * performance alerts for this window. * * Note that this covers only the current process. * * Use special window id 0 to get an observable that may be used to * (un)register for watching performance alerts of all windows at * once. */`",1357,null],[11,"addref","","",1358,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1358,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISSLStatusProvider` to one of its base interfaces.",1358,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1358,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetSSLStatus","","`readonly attribute nsISSLStatus SSLStatus;`",1358,null],[11,"addref","","",1359,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1359,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDiskSpaceWatcher` to one of its base interfaces.",1359,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1359,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetIsDiskFull","","`readonly attribute bool isDiskFull;`",1359,null],[11,"GetFreeSpace","","`readonly attribute unsigned long long freeSpace;`",1359,null],[11,"addref","","",1360,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1360,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISlowScriptDebugCallback` to one of its base interfaces.",1360,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1360,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleSlowScriptDebug","","`void handleSlowScriptDebug (in nsIDOMWindow aWindow);`",1360,null],[11,"addref","","",1361,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1361,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISlowScriptDebuggerStartupCallback` to one of its base interfaces.",1361,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1361,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FinishDebuggerStartup","","`void finishDebuggerStartup ();`",1361,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1362,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1362,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISlowScriptDebugRemoteCallback` to one of its base interfaces.",1362,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1362,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleSlowScriptDebug","","`void handleSlowScriptDebug (in nsIDOMEventTarget aBrowser, in nsISlowScriptDebuggerStartupCallback aCallback);`",1362,null],[11,"addref","","",1363,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1363,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISlowScriptDebug` to one of its base interfaces.",1363,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1363,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetActivationHandler","","`attribute nsISlowScriptDebugCallback activationHandler;`",1363,null],[11,"SetActivationHandler","","`attribute nsISlowScriptDebugCallback activationHandler;`",1363,null],[11,"GetRemoteActivationHandler","","`attribute nsISlowScriptDebugRemoteCallback remoteActivationHandler;`",1363,null],[11,"SetRemoteActivationHandler","","`attribute nsISlowScriptDebugRemoteCallback remoteActivationHandler;`",1363,null],[11,"addref","","",1364,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1364,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIURIContentListener` to one of its base interfaces.",1364,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1364,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStartURIOpen","","`text /** * Gives the original content listener first crack at stopping a load before * it happens. * * @param aURI URI that is being opened. * * @return <code>false</code> if the load can continue; * <code>true</code> if the open should be aborted. */`",1364,null],[11,"DoContent","","`text /** * Notifies the content listener to hook up an nsIStreamListener capable of * consuming the data stream. * * @param aContentType Content type of the data. * @param aIsContentPreferred Indicates whether the content should be * preferred by this listener. * @param aRequest Request that is providing the data. * @param aContentHandler nsIStreamListener that will consume the data. * This should be set to <code>nullptr</code> if * this content listener can't handle the content * type; in this case, doContent should also fail * (i.e., return failure nsresult). * * @return <code>true</code> if the load should * be aborted and consumer wants to * handle the load completely by itself. This * causes the URI Loader do nothing else... * <code>false</code> if the URI Loader should * continue handling the load and call the * returned streamlistener's methods. */`",1364,null],[11,"IsPreferred","","`text /** * When given a uri to dispatch, if the URI is specified as 'preferred * content' then the uri loader tries to find a preferred content handler * for the content type. The thought is that many content listeners may * be able to handle the same content type if they have to. i.e. the mail * content window can handle text/html just like a browser window content * listener. However, if the user clicks on a link with text/html content, * then the browser window should handle that content and not the mail * window where the user may have clicked the link. This is the difference * between isPreferred and canHandleContent. * * @param aContentType Content type of the data. * @param aDesiredContentType Indicates that aContentType must be converted * to aDesiredContentType before processing the * data. This causes a stream converted to be * inserted into the nsIStreamListener chain. * This argument can be <code>nullptr</code> if * the content should be consumed directly as * aContentType. * * @return <code>true</code> if this is a preferred * content handler for aContentType; * <code>false<code> otherwise. */`",1364,null],[11,"CanHandleContent","","`text /** * When given a uri to dispatch, if the URI is not specified as 'preferred * content' then the uri loader calls canHandleContent to see if the content * listener is capable of handling the content. * * @param aContentType Content type of the data. * @param aIsContentPreferred Indicates whether the content should be * preferred by this listener. * @param aDesiredContentType Indicates that aContentType must be converted * to aDesiredContentType before processing the * data. This causes a stream converted to be * inserted into the nsIStreamListener chain. * This argument can be <code>nullptr</code> if * the content should be consumed directly as * aContentType. * * @return <code>true</code> if the data can be consumed. * <code>false</code> otherwise. * * Note: I really envision canHandleContent as a method implemented * by the docshell as the implementation is generic to all doc * shells. The isPreferred decision is a decision made by a top level * application content listener that sits at the top of the docshell * hierarchy. */`",1364,null],[11,"GetLoadCookie","","`text /** * The load context associated with a particular content listener. * The URI Loader stores and accesses this value as needed. */`",1364,null],[11,"SetLoadCookie","","`text /** * The load context associated with a particular content listener. * The URI Loader stores and accesses this value as needed. */`",1364,null],[11,"GetParentContentListener","","`text /** * The parent content listener if this particular listener is part of a chain * of content listeners (i.e. a docshell!) * * @note If this attribute is set to an object that implements * nsISupportsWeakReference, the implementation should get the * nsIWeakReference and hold that. Otherwise, the implementation * should not refcount this interface; it should assume that a non * null value is always valid. In that case, the caller is * responsible for explicitly setting this value back to null if the * parent content listener is destroyed. */`",1364,null],[11,"SetParentContentListener","","`text /** * The parent content listener if this particular listener is part of a chain * of content listeners (i.e. a docshell!) * * @note If this attribute is set to an object that implements * nsISupportsWeakReference, the implementation should get the * nsIWeakReference and hold that. Otherwise, the implementation * should not refcount this interface; it should assume that a non * null value is always valid. In that case, the caller is * responsible for explicitly setting this value back to null if the * parent content listener is destroyed. */`",1364,null],[11,"addref","","",1365,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1365,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIProfileLock` to one of its base interfaces.",1365,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1365,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetDirectory","","`text /** * The main profile directory. */`",1365,null],[11,"GetLocalDirectory","","`text /** * A directory corresponding to the main profile directory that exists for * the purpose of storing data on the local filesystem, including cache * files or other data files that may not represent critical user data. * (e.g., this directory may not be included as part of a backup scheme.) * * In some cases, this directory may just be the main profile directory. */`",1365,null],[11,"GetReplacedLockTime","","`text /** * The timestamp of an existing profile lock at lock time. */`",1365,null],[11,"Unlock","","`text /** * Unlock the profile. */`",1365,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1366,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1366,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIToolkitProfile` to one of its base interfaces.",1366,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1366,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetRootDir","","`text /** * The location of the profile directory. */`",1366,null],[11,"GetLocalDir","","`text /** * The location of the profile local directory, which may be the same as * the root directory. See nsIProfileLock::localDirectory. */`",1366,null],[11,"GetName","","`text /** * The name of the profile. */`",1366,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetName","","`text /** * The name of the profile. */`",1366,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"Remove","","`text /** * Removes the profile from the registry of profiles. * * @param removeFiles * Indicates whether or not the profile directory should be * removed in addition. */`",1366,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveInBackground","","`text /** * Removes the profile from the registry of profiles. * The profile directory is removed in the stream transport thread. */`",1366,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Lock","","`text /** * Lock this profile using platform-specific locking methods. * * @param lockFile If locking fails, this may return a lockFile object * which can be used in platform-specific ways to * determine which process has the file locked. Null * may be passed. * @return An interface which holds a profile lock as long as you reference * it. * @throws NS_ERROR_FILE_ACCESS_DENIED if the profile was already locked. */`",1366,null],[11,"addref","","",1367,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1367,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebSocketListener` to one of its base interfaces.",1367,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1367,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnStart","","`text /** * Called to signify the establishment of the message stream. * * Unlike most other networking channels (which use nsIRequestObserver * instead of this class), we do not guarantee that OnStart is always * called: OnStop is called without calling this function if errors occur * during connection setup. If the websocket connection is successful, * OnStart will be called before any other calls to this API. * * @param aContext user defined context */`",1367,null],[11,"OnStop","","`text /** * Called to signify the completion of the message stream. * OnStop is the final notification the listener will receive and it * completes the WebSocket connection: after it returns the * nsIWebSocketChannel will release its reference to the listener. * * Note: this event can be received in error cases even if * nsIWebSocketChannel::Close() has not been called. * * @param aContext user defined context * @param aStatusCode reason for stopping (NS_OK if completed successfully) */`",1367,null],[11,"OnMessageAvailable","","`text /** * Called to deliver text message. * * @param aContext user defined context * @param aMsg the message data */`",1367,null],[11,"OnBinaryMessageAvailable","","`text /** * Called to deliver binary message. * * @param aContext user defined context * @param aMsg the message data */`",1367,null],[11,"OnAcknowledge","","`text /** * Called to acknowledge message sent via sendMsg() or sendBinaryMsg. * * @param aContext user defined context * @param aSize number of bytes placed in OS send buffer */`",1367,null],[11,"OnServerClose","","`text /** * Called to inform receipt of WebSocket Close message from server. * In the case of errors onStop() can be called without ever * receiving server close. * * No additional messages through onMessageAvailable(), * onBinaryMessageAvailable() or onAcknowledge() will be delievered * to the listener after onServerClose(), though outgoing messages can still * be sent through the nsIWebSocketChannel connection. * * @param aContext user defined context * @param aCode the websocket closing handshake close code. * @param aReason the websocket closing handshake close reason */`",1367,null],[11,"addref","","",1368,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1368,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorBlobListener` to one of its base interfaces.",1368,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1368,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnResult","","`void onResult (in ACString aResult);`",1368,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"OnError","","`void onError (in AString aErrorName);`",1368,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1369,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1369,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIEditorUtils` to one of its base interfaces.",1369,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1369,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"SlurpBlob","","`text /** * Given a blob, returns the data from that blob, asynchronously. */`",1369,null],[11,"addref","","",1370,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1370,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWindowMediatorListener` to one of its base interfaces.",1370,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1370,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"OnOpenWindow","","`void onOpenWindow (in nsIXULWindow window);`",1370,null],[11,"OnCloseWindow","","`void onCloseWindow (in nsIXULWindow window);`",1370,null],[11,"addref","","",1371,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1371,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `amIWebInstallPrompt` to one of its base interfaces.",1371,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1371,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Confirm","","`text /** * Get a confirmation that the user wants to start the installs. * * @param aBrowser * The browser that triggered the installs * @param aUri * The URI of the site that triggered the installs * @param aInstalls * The AddonInstalls that were requested * @param aCount * The number of AddonInstalls */`",1371,null],[11,"addref","","",1372,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1372,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `mozIThirdPartyUtil` to one of its base interfaces.",1372,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1372,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"IsThirdPartyURI","","`text /** * isThirdPartyURI * * Determine whether two URIs are third party with respect to each other. * This is determined by computing the base domain for both URIs. If they can * be determined, and the base domains match, the request is defined as first * party. If it cannot be determined because one or both URIs do not have a * base domain (for instance, in the case of IP addresses, host aliases such * as 'localhost', or a file:// URI), an exact string comparison on host is * performed. * * For example, the URI \"http://mail.google.com/\" is not third party with * respect to \"http://images.google.com/\", but \"http://mail.yahoo.com/\" and * \"http://192.168.1.1/\" are. * * @return true if aFirstURI is third party with respect to aSecondURI. * * @throws if either URI is null, has a malformed host, or has an empty host * and is not a file:// URI. */`",1372,null],[11,"IsThirdPartyWindow","","`text /** * isThirdPartyWindow * * Determine whether the given window hierarchy is third party. This is done * as follows: * * 1) Obtain the URI of the principal associated with 'aWindow'. Call this the * 'bottom URI'. * 2) If 'aURI' is provided, determine if it is third party with respect to * the bottom URI. If so, return. * 3) Find the same-type parent window, if there is one, and its URI. * Determine whether it is third party with respect to the bottom URI. If * so, return. * * Therefore, each level in the window hierarchy is tested. (This means that * nested iframes with different base domains, even though the bottommost and * topmost URIs might be equal, will be considered third party.) * * @param aWindow * The bottommost window in the hierarchy. * @param aURI * A URI to test against. If null, the URI of the principal * associated with 'aWindow' will be used. * * For example, if 'aURI' is \"http://mail.google.com/\", 'aWindow' has a URI * of \"http://google.com/\", and its parent is the topmost content window with * a URI of \"http://mozilla.com\", the result will be true. * * @return true if 'aURI' is third party with respect to any of the URIs * associated with aWindow and its same-type parents. * * @throws if aWindow is null; the same-type parent of any window in the * hierarchy cannot be determined; or the URI associated with any * window in the hierarchy is null, has a malformed host, or has an * empty host and is not a file:// URI. * * @see isThirdPartyURI */`",1372,null],[11,"IsThirdPartyChannel","","`text /** * isThirdPartyChannel * * Determine whether the given channel and its content window hierarchy is * third party. This is done as follows: * * 1) If 'aChannel' is an nsIHttpChannel and has the * 'forceAllowThirdPartyCookie' property set, then: * a) If 'aURI' is null, return false. * b) Otherwise, find the URI of the channel, determine whether it is * foreign with respect to 'aURI', and return. * 2) Find the URI of the channel and determine whether it is third party with * respect to the URI of the channel. If so, return. * 3) Obtain the bottommost nsIDOMWindow, and its same-type parent if it * exists, from the channel's notification callbacks. Then: * a) If the parent is the same as the bottommost window, and the channel * has the LOAD_DOCUMENT_URI flag set, return false. This represents the * case where a toplevel load is occurring and the window's URI has not * yet been updated. (We have already checked that 'aURI' is not foreign * with respect to the channel URI.) * b) Otherwise, return the result of isThirdPartyWindow with arguments * of the channel's bottommost window and the channel URI, respectively. * * Therefore, both the channel's URI and each level in the window hierarchy * associated with the channel is tested. * * @param aChannel * The channel associated with the load. * @param aURI * A URI to test against. If null, the URI of the channel will be used. * * For example, if 'aURI' is \"http://mail.google.com/\", 'aChannel' has a URI * of \"http://google.com/\", and its parent is the topmost content window with * a URI of \"http://mozilla.com\", the result will be true. * * @return true if aURI is third party with respect to the channel URI or any * of the URIs associated with the same-type window hierarchy of the * channel. * * @throws if 'aChannel' is null; the channel has no notification callbacks or * an associated window; or isThirdPartyWindow throws. * * @see isThirdPartyWindow */`",1372,null],[11,"GetBaseDomain","","`text /** * getBaseDomain * * Get the base domain for aHostURI; e.g. for \"www.bbc.co.uk\", this would be * \"bbc.co.uk\". Only properly-formed URI's are tolerated, though a trailing * dot may be present. If aHostURI is an IP address, an alias such as * 'localhost', an eTLD such as 'co.uk', or the empty string, aBaseDomain will * be the exact host. The result of this function should only be used in exact * string comparisons, since substring comparisons will not be valid for the * special cases elided above. * * @param aHostURI * The URI to analyze. * * @return the base domain. */`",1372,null],[11,"GetURIFromWindow","","`text /** * getURIFromWindow * * Returns the URI associated with the script object principal for the * window. */`",1372,null],[11,"GetTopWindowForChannel","","`text /** * getTopWindowForChannel * * Returns the top-level window associated with the given channel. */`",1372,null],[11,"addref","","",1373,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1373,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAuthPrompt2` to one of its base interfaces.",1373,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1373,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"LEVEL_NONE","","`text /** @name Security Levels */ /** * The password will be sent unencrypted. No security provided. */`",1373,null],[18,"LEVEL_PW_ENCRYPTED","","`text /** * Password will be sent encrypted, but the connection is otherwise * insecure. */`",1373,null],[18,"LEVEL_SECURE","","`text /** * The connection, both for password and data, is secure. */`",1373,null],[11,"PromptAuth","","`text /** * Requests a username and a password. Implementations will commonly show a * dialog with a username and password field, depending on flags also a * domain field. * * @param aChannel * The channel that requires authentication. * @param level * One of the level constants from above. See there for descriptions * of the levels. * @param authInfo * Authentication information object. The implementation should fill in * this object with the information entered by the user before * returning. * * @retval true * Authentication can proceed using the values in the authInfo * object. * @retval false * Authentication should be cancelled, usually because the user did * not provide username/password. * * @note Exceptions thrown from this function will be treated like a * return value of false. */`",1373,null],[11,"AsyncPromptAuth","","`text /** * Asynchronously prompt the user for a username and password. * This has largely the same semantics as promptUsernameAndPassword(), * but must return immediately after calling and return the entered * data in a callback. * * If the user closes the dialog using a cancel button or similar, * the callback's nsIAuthPromptCallback::onAuthCancelled method must be * called. * Calling nsICancelable::cancel on the returned object SHOULD close the * dialog and MUST call nsIAuthPromptCallback::onAuthCancelled on the provided * callback. * * This implementation may: * * 1) Coalesce identical prompts. This means prompts that are guaranteed to * want the same auth information from the user. A single prompt will be * shown; then the callbacks for all the coalesced prompts will be notified * with the resulting auth information. * 2) Serialize prompts that are all in the same \"context\" (this might mean * application-wide, for a given window, or something else depending on * the user interface) so that the user is not deluged with prompts. * * @throw * This method may throw any exception when the prompt fails to queue e.g * because of out-of-memory error. It must not throw when the prompt * could already be potentially shown to the user. In that case information * about the failure has to come through the callback. This way we * prevent multiple dialogs shown to the user because consumer may fall * back to synchronous prompt on synchronous failure of this method. */`",1373,null],[11,"addref","","",1374,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1374,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIDocShell` to one of its base interfaces.",1374,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsidocshelltreeitem"}}],[18,"INTERNAL_LOAD_FLAGS_NONE","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_INHERIT_PRINCIPAL","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_DONT_SEND_REFERRER","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_ALLOW_THIRD_PARTY_FIXUP","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_FIRST_LOAD","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_BYPASS_CLASSIFIER","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_FORCE_ALLOW_COOKIES","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_IS_SRCDOC","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_NO_OPENER","","",1374,null],[18,"INTERNAL_LOAD_FLAGS_FORCE_ALLOW_DATA_URI","","",1374,null],[18,"ENUMERATE_FORWARDS","","`text /** * Get an enumerator over this docShell and its children. * * @param aItemType - Only include docShells of this type, or if typeAll, * include all child shells. * Uses types from nsIDocShellTreeItem. * @param aDirection - Whether to enumerate forwards or backwards. */`",1374,null],[18,"ENUMERATE_BACKWARDS","","",1374,null],[18,"APP_TYPE_UNKNOWN","","`text /** * The type of application that created this window */`",1374,null],[18,"APP_TYPE_MAIL","","",1374,null],[18,"APP_TYPE_EDITOR","","",1374,null],[18,"BUSY_FLAGS_NONE","","`text /** * Current busy state for DocShell */`",1374,null],[18,"BUSY_FLAGS_BUSY","","",1374,null],[18,"BUSY_FLAGS_BEFORE_PAGE_LOAD","","",1374,null],[18,"BUSY_FLAGS_PAGE_LOADING","","",1374,null],[18,"LOAD_CMD_NORMAL","","`text /** * Load commands for the document */`",1374,null],[18,"LOAD_CMD_RELOAD","","",1374,null],[18,"LOAD_CMD_HISTORY","","",1374,null],[18,"LOAD_CMD_PUSHSTATE","","",1374,null],[18,"FRAME_TYPE_REGULAR","","`text /** * The type of iframe that this docshell lives. */`",1374,null],[18,"FRAME_TYPE_BROWSER","","",1374,null],[18,"TOUCHEVENTS_OVERRIDE_DISABLED","","`text /** * Override platform/pref default behaviour and force-disable touch events. */`",1374,null],[18,"TOUCHEVENTS_OVERRIDE_ENABLED","","`text /** * Override platform/pref default behaviour and force-enable touch events. */`",1374,null],[18,"TOUCHEVENTS_OVERRIDE_NONE","","`text /** * Don't override the platform/pref default behaviour for touch events. */`",1374,null],[18,"DISPLAY_MODE_BROWSER","","`text /** * Allowed CSS display modes. This needs to be kept in * sync with similar values in nsStyleConsts.h */`",1374,null],[18,"DISPLAY_MODE_MINIMAL_UI","","",1374,null],[18,"DISPLAY_MODE_STANDALONE","","",1374,null],[18,"DISPLAY_MODE_FULLSCREEN","","",1374,null],[11,"LoadURI","","`text /** * Loads a given URI. This will give priority to loading the requested URI * in the object implementing this interface. If it can't be loaded here * however, the URL dispatcher will go through its normal process of content * loading. * * @param uri - The URI to load. * @param loadInfo - This is the extended load info for this load. This * most often will be null, but if you need to do * additional setup for this load you can get a loadInfo * object by calling createLoadInfo. Once you have this * object you can set the needed properties on it and * then pass it to loadURI. * @param aLoadFlags - Flags to modify load behaviour. Flags are defined in * nsIWebNavigation. Note that using flags outside * LOAD_FLAGS_MASK is only allowed if passing in a * non-null loadInfo. And even some of those might not * be allowed. Use at your own risk. */`",1374,null],[11,"LoadStream","","`text /** * Loads a given stream. This will give priority to loading the requested * stream in the object implementing this interface. If it can't be loaded * here however, the URL dispatched will go through its normal process of * content loading. * * @param aStream - The input stream that provides access to the data * to be loaded. This must be a blocking, threadsafe * stream implementation. * @param aURI - The URI representing the stream, or null. * @param aContentType - The type (MIME) of data being loaded (empty if unknown). * @param aContentCharset - The charset of the data being loaded (empty if unknown). * @param aLoadInfo - This is the extended load info for this load. This * most often will be null, but if you need to do * additional setup for this load you can get a * loadInfo object by calling createLoadInfo. Once * you have this object you can set the needed * properties on it and then pass it to loadStream. */`",1374,null],[11,"CreateLoadInfo","","`text /** * Creates a DocShellLoadInfo object that you can manipulate and then pass * to loadURI. */`",1374,null],[11,"PrepareForNewContentModel","","`text /** * Reset state to a new content model within the current document and the document * viewer. Called by the document before initiating an out of band document.write(). */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetCurrentURI","","`text /** * For editors and suchlike who wish to change the URI associated with the * document. Note if you want to get the current URI, use the read-only * property on nsIWebNavigation. */`",1374,null],[11,"FirePageHideNotification","","`text /** * Notify the associated content viewer and all child docshells that they are * about to be hidden. If |isUnload| is true, then the document is being * unloaded and all dynamic subframe history entries are removed as well. * * @param isUnload * True to fire the unload event in addition to the pagehide event, * and remove all dynamic subframe history entries. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetContentViewer","","`text /** * Content Viewer that is currently loaded for this DocShell. This may * change as the underlying content changes. */`",1374,null],[11,"GetChromeEventHandler","","`text /** * This attribute allows chrome to tie in to handle DOM events that may * be of interest to chrome. */`",1374,null],[11,"SetChromeEventHandler","","`text /** * This attribute allows chrome to tie in to handle DOM events that may * be of interest to chrome. */`",1374,null],[11,"GetCustomUserAgent","","`text /** * This allows chrome to set a custom User agent on a specific docshell */`",1374,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCustomUserAgent","","`text /** * This allows chrome to set a custom User agent on a specific docshell */`",1374,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetAllowPlugins","","`text /** * Whether to allow plugin execution */`",1374,null],[11,"SetAllowPlugins","","`text /** * Whether to allow plugin execution */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowJavascript","","`text /** * Whether to allow Javascript execution */`",1374,null],[11,"SetAllowJavascript","","`text /** * Whether to allow Javascript execution */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowMetaRedirects","","`text /** * Attribute stating if refresh based redirects can be allowed */`",1374,null],[11,"SetAllowMetaRedirects","","`text /** * Attribute stating if refresh based redirects can be allowed */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowSubframes","","`text /** * Attribute stating if it should allow subframes (framesets/iframes) or not */`",1374,null],[11,"SetAllowSubframes","","`text /** * Attribute stating if it should allow subframes (framesets/iframes) or not */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowImages","","`text /** * Attribute stating whether or not images should be loaded. */`",1374,null],[11,"SetAllowImages","","`text /** * Attribute stating whether or not images should be loaded. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowMedia","","`text /** * Attribute stating whether or not media (audio/video) should be loaded. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetAllowMedia","","`text /** * Attribute stating whether or not media (audio/video) should be loaded. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowDNSPrefetch","","`text /** * Attribute that determines whether DNS prefetch is allowed for this subtree * of the docshell tree. Defaults to true. Setting this will make it take * effect starting with the next document loaded in the docshell. */`",1374,null],[11,"SetAllowDNSPrefetch","","`text /** * Attribute that determines whether DNS prefetch is allowed for this subtree * of the docshell tree. Defaults to true. Setting this will make it take * effect starting with the next document loaded in the docshell. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowWindowControl","","`text /** * Attribute that determines whether window control (move/resize) is allowed. */`",1374,null],[11,"SetAllowWindowControl","","`text /** * Attribute that determines whether window control (move/resize) is allowed. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowContentRetargeting","","`text /** * True if the docshell allows its content to be handled by a content listener * other than the docshell itself, including the external helper app service, * and false otherwise. Defaults to true. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetAllowContentRetargeting","","`text /** * True if the docshell allows its content to be handled by a content listener * other than the docshell itself, including the external helper app service, * and false otherwise. Defaults to true. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAllowContentRetargetingOnChildren","","`text /** * True if new child docshells should allow content retargeting. * Setting allowContentRetargeting also overwrites this value. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetAllowContentRetargetingOnChildren","","`text /** * True if new child docshells should allow content retargeting. * Setting allowContentRetargeting also overwrites this value. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetInheritPrivateBrowsingId","","`text /** * True if this docShell should inherit the private browsing ID from * its parent when reparented. * * NOTE: This should *not* be set false in new code, or for docShells * inserted anywhere other than as children of panels. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetInheritPrivateBrowsingId","","`text /** * True if this docShell should inherit the private browsing ID from * its parent when reparented. * * NOTE: This should *not* be set false in new code, or for docShells * inserted anywhere other than as children of panels. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetDocShellEnumerator","","`nsISimpleEnumerator getDocShellEnumerator (in long aItemType, in long aDirection);`",1374,null],[11,"GetAppType","","`attribute unsigned long appType;`",1374,null],[11,"SetAppType","","`attribute unsigned long appType;`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetAllowAuth","","`text /** * certain dochshells (like the message pane) * should not throw up auth dialogs * because it can act as a password trojan */`",1374,null],[11,"SetAllowAuth","","`text /** * certain dochshells (like the message pane) * should not throw up auth dialogs * because it can act as a password trojan */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetZoom","","`text /** * Set/Get the document scale factor. When setting this attribute, a * NS_ERROR_NOT_IMPLEMENTED error may be returned by implementations * not supporting zoom. Implementations not supporting zoom should return * 1.0 all the time for the Get operation. 1.0 by the way is the default * of zoom. This means 100% of normal scaling or in other words normal size * no zoom. */`",1374,null],[11,"SetZoom","","`text /** * Set/Get the document scale factor. When setting this attribute, a * NS_ERROR_NOT_IMPLEMENTED error may be returned by implementations * not supporting zoom. Implementations not supporting zoom should return * 1.0 all the time for the Get operation. 1.0 by the way is the default * of zoom. This means 100% of normal scaling or in other words normal size * no zoom. */`",1374,{"inputs":[{"name":"self"},{"name":"c_float"}],"output":{"name":"nsresult"}}],[11,"GetMarginWidth","","`attribute long marginWidth;`",1374,null],[11,"SetMarginWidth","","`attribute long marginWidth;`",1374,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetMarginHeight","","`attribute long marginHeight;`",1374,null],[11,"SetMarginHeight","","`attribute long marginHeight;`",1374,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"TabToTreeOwner","","`bool tabToTreeOwner (in boolean forward, in boolean forDocumentNavigation);`",1374,null],[11,"GetBusyFlags","","`readonly attribute unsigned long busyFlags;`",1374,null],[11,"GetLoadType","","`attribute unsigned long loadType;`",1374,null],[11,"SetLoadType","","`attribute unsigned long loadType;`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetDefaultLoadFlags","","`attribute nsLoadFlags defaultLoadFlags;`",1374,null],[11,"SetDefaultLoadFlags","","`attribute nsLoadFlags defaultLoadFlags;`",1374,{"inputs":[{"name":"self"},{"name":"nsloadflags"}],"output":{"name":"nsresult"}}],[11,"IsBeingDestroyed","","`boolean isBeingDestroyed ();`",1374,null],[11,"GetIsExecutingOnLoadHandler","","`readonly attribute boolean isExecutingOnLoadHandler;`",1374,null],[11,"GetLayoutHistoryState","","`attribute nsILayoutHistoryState layoutHistoryState;`",1374,null],[11,"SetLayoutHistoryState","","`attribute nsILayoutHistoryState layoutHistoryState;`",1374,null],[11,"GetShouldSaveLayoutState","","`readonly attribute boolean shouldSaveLayoutState;`",1374,null],[11,"GetSecurityUI","","`text /** * The SecureBrowserUI object for this docshell. This is set by XUL * <browser> or nsWebBrowser for their root docshell. */`",1374,null],[11,"SetSecurityUI","","`text /** * The SecureBrowserUI object for this docshell. This is set by XUL * <browser> or nsWebBrowser for their root docshell. */`",1374,null],[11,"GetLoadURIDelegate","","`text /** * Object used to delegate URI loading to an upper context. * Currently only set for GeckoView to allow handling of load requests * at the application level. */`",1374,null],[11,"SetLoadURIDelegate","","`text /** * Object used to delegate URI loading to an upper context. * Currently only set for GeckoView to allow handling of load requests * at the application level. */`",1374,null],[11,"SuspendRefreshURIs","","`text /** * Cancel the XPCOM timers for each meta-refresh URI in this docshell, * and this docshell's children, recursively. The meta-refresh timers can be * restarted using resumeRefreshURIs(). If the timers are already suspended, * this has no effect. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"ResumeRefreshURIs","","`text /** * Restart the XPCOM timers for each meta-refresh URI in this docshell, * and this docshell's children, recursively. If the timers are already * running, this has no effect. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"BeginRestore","","`text /** * Begin firing WebProgressListener notifications for restoring a page * presentation. |viewer| is the content viewer whose document we are * starting to load. If null, it defaults to the docshell's current content * viewer, creating one if necessary. |top| should be true for the toplevel * docshell that is being restored; it will be set to false when this method * is called for child docshells. This method will post an event to * complete the simulated load after returning to the event loop. */`",1374,null],[11,"FinishRestore","","`text /** * Finish firing WebProgressListener notifications and DOM events for * restoring a page presentation. This should only be called via * beginRestore(). */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetRestoringDocument","","`readonly attribute boolean restoringDocument;`",1374,null],[11,"GetUseErrorPages","","`attribute boolean useErrorPages;`",1374,null],[11,"SetUseErrorPages","","`attribute boolean useErrorPages;`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DisplayLoadError","","`text /** * Display a load error in a frame while keeping that frame's currentURI * pointing correctly to the page where the error ocurred, rather than to * the error document page. You must provide either the aURI or aURL parameter. * * @param aError The error code to be displayed * @param aURI nsIURI of the page where the error happened * @param aURL wstring of the page where the error happened * @param aFailedChannel The channel related to this error * * Returns whether or not we displayed an error page (note: will always * return false if in-content error pages are disabled!) */`",1374,null],[11,"GetFailedChannel","","`text /** * The channel that failed to load and resulted in an error page. * May be null. Relevant only to error pages. */`",1374,null],[11,"GetPreviousTransIndex","","`text /** * Keeps track of the previous SHTransaction index and the current * SHTransaction index at the time that the doc shell begins to load. * Used for ContentViewer eviction. */`",1374,null],[11,"GetLoadedTransIndex","","`readonly attribute long loadedTransIndex;`",1374,null],[11,"HistoryPurged","","`text /** * Notification that entries have been removed from the beginning of a * nsSHistory which has this as its rootDocShell. * * @param numEntries - The number of entries removed */`",1374,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetCurrentDocumentChannel","","`text /** * Gets the channel for the currently loaded document, if any. * For a new document load, this will be the channel of the previous document * until after OnLocationChange fires. */`",1374,null],[11,"GetChildOffset","","`text /** * The original offset of this child in its container. This property is -1 for * dynamically added docShells. */`",1374,null],[11,"SetChildOffset","","`text /** * The original offset of this child in its container. This property is -1 for * dynamically added docShells. */`",1374,{"inputs":[{"name":"self"},{"name":"int32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsInUnload","","`text /** * Find out whether the docshell is currently in the middle of a page * transition. This is set just before the pagehide/unload events fire. */`",1374,null],[11,"GetChannelIsUnsafe","","`text /** * Find out if the currently loaded document came from a suspicious channel * (such as a JAR channel where the server-returned content type isn't a * known JAR type). */`",1374,null],[11,"GetHasMixedActiveContentLoaded","","`text /** * This attribute determines whether Mixed Active Content is loaded on the * document. When it is true, mixed active content was not blocked and has * loaded (or is about to load) on the page. When it is false, mixed active content * has not loaded on the page, either because there was no mixed active content * requests on the page or such requests were blocked by nsMixedContentBlocker. * This boolean is set to true in nsMixedContentBlocker if Mixed Active Content * is allowed (either explicitly on the page by the user or when the about:config * setting security.mixed_content.block_active_content is set to false). */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHasMixedActiveContentBlocked","","`text /** * This attribute determines whether a document has Mixed Active Content * that has been blocked from loading. When it is true, there is definitely * mixed active content on a page that has been blocked by * nsMixedContentBlocker. When it is false, there may or may not be mixed * active content on a page, but if there is, it will load. Note that if the * about:config setting security.mixed_content.block_active_content is set * false, this boolean will be false, since blocking active content has been * disabled. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHasMixedDisplayContentLoaded","","`text /** * This attribute determines whether Mixed Display Content is loaded on the * document. When it is true, mixed display content was not blocked and has * loaded (or is about to load) on the page. Similar behavior to * hasMixedActiveContentLoaded. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHasMixedDisplayContentBlocked","","`text /** * This attribute determines whether a document has Mixed Display Content * that has been blocked from loading. Similar behavior to * hasMixedActiveContentBlocked. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHasTrackingContentBlocked","","`text /** * This attribute determines whether a document has Tracking Content * that has been blocked from loading. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHasTrackingContentLoaded","","`text /** * This attribute determines whether Tracking Content is loaded on the * document. When it is true, tracking content was not blocked and has * loaded (or is about to load) on the page. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"DetachEditorFromWindow","","`text /** * Disconnects this docshell's editor from its window, and stores the * editor data in the open document's session history entry. This * should be called only during page transitions. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"c_void"}}],[11,"GetIsOffScreenBrowser","","`text /** * If true, this browser is not visible in the traditional sense, but * is actively being rendered to the screen (ex. painted on a canvas) * and should be treated accordingly. **/`",1374,null],[11,"SetIsOffScreenBrowser","","`text /** * If true, this browser is not visible in the traditional sense, but * is actively being rendered to the screen (ex. painted on a canvas) * and should be treated accordingly. **/`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetPrintPreview","","`text /** * If the current content viewer isn't initialized for print preview, * it is replaced with one which is and to which an about:blank document * is loaded. */`",1374,null],[11,"GetCanExecuteScripts","","`text /** * Whether this docshell can execute scripts based on its hierarchy. * The rule of thumb here is that we disable js if this docshell or any * of its parents disallow scripting. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsActive","","`text /** * Sets whether a docshell is active. An active docshell is one that is * visible, and thus is not a good candidate for certain optimizations * like image frame discarding. Docshells are active unless told otherwise. */`",1374,null],[11,"SetIsActive","","`text /** * Sets whether a docshell is active. An active docshell is one that is * visible, and thus is not a good candidate for certain optimizations * like image frame discarding. Docshells are active unless told otherwise. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetIsPrerendered","","`text /** * Puts the docshell in prerendering mode. noscript because we want only * native code to be able to put a docshell in prerendering. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetIsPrerendered","","`text /** * Whether this docshell is in prerender mode. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetHistoryID","","`text /** * The ID of the docshell in the session history. */`",1374,null],[11,"HistoryID","","`text /** * Helper method for accessing this value from C++ */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsid"}}],[11,"GetIsAppTab","","`text /** * Sets whether a docshell is an app tab. An app tab docshell may behave * differently than a non-app tab docshell in some cases, such as when * handling link clicks. Docshells are not app tabs unless told otherwise. */`",1374,null],[11,"SetIsAppTab","","`text /** * Sets whether a docshell is an app tab. An app tab docshell may behave * differently than a non-app tab docshell in some cases, such as when * handling link clicks. Docshells are not app tabs unless told otherwise. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CreateAboutBlankContentViewer","","`text /** * Create a new about:blank document and content viewer. * @param aPrincipal the principal to use for the new document. */`",1374,null],[11,"ForceCreateAboutBlankContentViewer","","`text /** * Like createAboutBlankContentViewer, but don't check for permit unload. * Only used by special session history operation. * @param aPrincipal the principal to use for the new document. */`",1374,null],[11,"GetCharset","","`text /** * Upon getting, returns the canonical encoding label of the document * currently loaded into this docshell. * * Upon setting, sets forcedCharset for compatibility with legacy callers. */`",1374,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetCharset","","`text /** * Upon getting, returns the canonical encoding label of the document * currently loaded into this docshell. * * Upon setting, sets forcedCharset for compatibility with legacy callers. */`",1374,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GatherCharsetMenuTelemetry","","`text /** * Called when the user chose an encoding override from the character * encoding menu. Separate from the setter for the charset property to avoid * extensions adding noise to the data. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetForcedCharset","","`text /** * The charset forced by the user. */`",1374,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"SetForcedCharset","","`text /** * The charset forced by the user. */`",1374,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetRecordProfileTimelineMarkers","","`text /** * Whether the docShell records profile timeline markers at the moment */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetRecordProfileTimelineMarkers","","`text /** * Whether the docShell records profile timeline markers at the moment */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"Now","","`text /** * Return a DOMHighResTimeStamp representing the number of * milliseconds from an arbitrary point in time. The reference * point is shared by all DocShells and is also used by timestamps * on markers. */`",1374,null],[11,"AddWeakPrivacyTransitionObserver","","`text /** * Add an observer to the list of parties to be notified when this docshell's * private browsing status is changed. |obs| must support weak references. */`",1374,null],[11,"AddWeakReflowObserver","","`text /** * Add an observer to the list of parties to be notified when reflows are * occurring. |obs| must support weak references. */`",1374,null],[11,"RemoveWeakReflowObserver","","`text /** * Remove an observer from the list of parties to be notified about reflows. */`",1374,null],[11,"NotifyReflowObservers","","`text /** * Notify all attached observers that a reflow has just occurred. * * @param interruptible if true, the reflow was interruptible. * @param start timestamp when reflow started, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) * @param end timestamp when reflow ended, in milliseconds since * navigationStart (accurate to 1/1000 of a ms) */`",1374,{"inputs":[{"name":"self"},{"name":"bool"},{"name":"domhighrestimestamp"},{"name":"domhighrestimestamp"}],"output":{"name":"nsresult"}}],[11,"AddWeakScrollObserver","","`text /** * Add an observer to the list of parties to be notified when scroll position * of some elements is changed. */`",1374,null],[11,"RemoveWeakScrollObserver","","`text /** * Add an observer to the list of parties to be notified when scroll position * of some elements is changed. */`",1374,null],[11,"NotifyScrollObservers","","`text /** * Notify all attached observers that the scroll position of some element * has changed. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetFrameType","","`[infallible] attribute unsigned long frameType;`",1374,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"SetFrameType","","`[infallible] attribute unsigned long frameType;`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsMozBrowser","","`text /** * Returns true if this docshell corresponds to an <iframe mozbrowser>. * <xul:browser> returns false here. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsIsolatedMozBrowserElement","","`text /** * Returns true if this docshell corresponds to an isolated <iframe * mozbrowser>. * * <xul:browser> is not considered to be a mozbrowser element. * <iframe mozbrowser noisolation> does not count as isolated since * isolation is disabled. Isolation can only be disabled if the * containing document is chrome. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsInIsolatedMozBrowserElement","","`text /** * Returns true if this docshell corresponds to an isolated <iframe * mozbrowser> or if the docshell is contained in an isolated <iframe * mozbrowser>. * * <xul:browser> is not considered to be a mozbrowser element. <iframe * mozbrowser noisolation> does not count as isolated since isolation is * disabled. Isolation can only be disabled if the containing document is * chrome. * * Our notion here of \"contained in\" means: Walk up the docshell hierarchy in * this process until we hit an <iframe mozbrowser> (or until the hierarchy * ends). Return true iff the docshell we stopped on has * isIsolatedMozBrowserElement == true. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsInMozBrowser","","`text /** * Returns true if this docshell corresponds to an <iframe mozbrowser>, or * if this docshell is contained in an <iframe mozbrowser>. <xul:browser> * returns false here. * * To compute this value, we walk up the docshell hierarchy. If we encounter * a docshell with isMozBrowser before we hit the end of the hierarchy, * we return true. Otherwise, we return false. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetIsTopLevelContentDocShell","","`text /** * Returns true if this docshell is the top level content docshell. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetSameTypeParentIgnoreBrowserBoundaries","","`text /** * Like nsIDocShellTreeItem::GetSameTypeParent, except this ignores <iframe * mozbrowser> boundaries. */`",1374,null],[11,"GetSameTypeRootTreeItemIgnoreBrowserBoundaries","","`text /** * Like nsIDocShellTreeItem::GetSameTypeRootTreeItem, except this ignores * <iframe mozbrowser> boundaries. */`",1374,null],[11,"GetAsyncPanZoomEnabled","","`text /** * True iff asynchronous panning and zooming is enabled for this * docshell. */`",1374,null],[11,"GetSandboxFlags","","`text /** * The sandbox flags on the docshell. These reflect the value of the sandbox * attribute of the associated IFRAME or CSP-protectable content, if * existent. See the HTML5 spec for more details. * These flags on the docshell reflect the current state of the sandbox * attribute, which is modifiable. They are only used when loading new * content, sandbox flags are also immutably set on the document when it is * loaded. * The sandbox flags of a document depend on the sandbox flags on its * docshell and of its parent document, if any. * See nsSandboxFlags.h for the possible flags. */`",1374,null],[11,"SetSandboxFlags","","`text /** * The sandbox flags on the docshell. These reflect the value of the sandbox * attribute of the associated IFRAME or CSP-protectable content, if * existent. See the HTML5 spec for more details. * These flags on the docshell reflect the current state of the sandbox * attribute, which is modifiable. They are only used when loading new * content, sandbox flags are also immutably set on the document when it is * loaded. * The sandbox flags of a document depend on the sandbox flags on its * docshell and of its parent document, if any. * See nsSandboxFlags.h for the possible flags. */`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetOnePermittedSandboxedNavigator","","`text /** * When a new browsing context is opened by a sandboxed document, it needs to * keep track of the browsing context that opened it, so that it can be * navigated by it. This is the \"one permitted sandboxed navigator\". */`",1374,null],[11,"SetOnePermittedSandboxedNavigator","","`text /** * When a new browsing context is opened by a sandboxed document, it needs to * keep track of the browsing context that opened it, so that it can be * navigated by it. This is the \"one permitted sandboxed navigator\". */`",1374,null],[11,"GetMixedContentChannel","","`text /** * This member variable determines whether a document has Mixed Active Content that * was initially blocked from loading, but the user has choosen to override the * block and allow the content to load. mMixedContentChannel is set to the document's * channel when the user allows mixed content. The nsMixedContentBlocker content policy * checks if the document's root channel matches the mMixedContentChannel. If it matches, * then Mixed Content is loaded. If it does match, mixed content is blocked. * * A match implies that there is definitely mixed active content on a page that was * initially blocked by nsMixedContentBlocker and then allowed and loaded by the user. * A miss imples that IF there is mixed active content on the page AND it was * blocked by nsMixedContentBlocker.cpp, the user has not choosen to override * the block. Note that if the about:config setting * security.mixed_content.block_active_content is set to false, this boolean * will be false, mMixedContentChannel will remain null since blocking active content has * been disabled and hence mMixedContentChannel will never be set. */`",1374,null],[11,"SetMixedContentChannel","","`text /** * This member variable determines whether a document has Mixed Active Content that * was initially blocked from loading, but the user has choosen to override the * block and allow the content to load. mMixedContentChannel is set to the document's * channel when the user allows mixed content. The nsMixedContentBlocker content policy * checks if the document's root channel matches the mMixedContentChannel. If it matches, * then Mixed Content is loaded. If it does match, mixed content is blocked. * * A match implies that there is definitely mixed active content on a page that was * initially blocked by nsMixedContentBlocker and then allowed and loaded by the user. * A miss imples that IF there is mixed active content on the page AND it was * blocked by nsMixedContentBlocker.cpp, the user has not choosen to override * the block. Note that if the about:config setting * security.mixed_content.block_active_content is set to false, this boolean * will be false, mMixedContentChannel will remain null since blocking active content has * been disabled and hence mMixedContentChannel will never be set. */`",1374,null],[11,"GetAllowMixedContentAndConnectionData","","`text /** * Checks whether the channel associated with the root docShell is equal to * mMixedContentChannel. If they are the same, allowMixedContent is set to true. * Checks if the root document has a secure connection. If it is, sets * rootHasSecureConnection to true. If the docShell is the root doc shell, * isRootDocShell is set to true. */`",1374,null],[11,"PluginsAllowedInCurrentDoc","","`text /** * Are plugins allowed in the current document loaded in this docshell ? * (if there is one). This depends on whether plugins are allowed by this * docshell itself or if the document is sandboxed and hence plugins should * not be allowed. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetFullscreenAllowed","","`text /** * Attribute that determines whether fullscreen is allowed to be entered for * this subtree of the docshell tree. This is true when all iframes containing * this docshell have their \"allowfullscreen\" attribute set to \"true\". * fullscreenAllowed is only writable at content boundaries, where it is used * to propagate the value of the cross process parent's iframe's * \"allowfullscreen\" attribute to the child process. Setting * fullscreenAllowed on docshells which aren't content boundaries throws an * exception. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetFullscreenAllowed","","`void setFullscreenAllowed (in boolean allowed);`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"OrientationLock","","`[notxpcom] uint32_t orientationLock ();`",1374,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"SetOrientationLock","","`[notxpcom] void setOrientationLock (in uint32_t orientationLock);`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"c_void"}}],[11,"GetAffectPrivateSessionLifetime","","`[infallible,noscript] attribute boolean affectPrivateSessionLifetime;`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetAffectPrivateSessionLifetime","","`[infallible,noscript] attribute boolean affectPrivateSessionLifetime;`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMayEnableCharacterEncodingMenu","","`text /** * Indicates whether the UI may enable the character encoding menu. The UI * must disable the menu when this property is false. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetEditor","","`attribute nsIEditor editor;`",1374,null],[11,"SetEditor","","`attribute nsIEditor editor;`",1374,null],[11,"GetEditable","","`readonly attribute boolean editable;`",1374,null],[11,"GetHasEditingSession","","`readonly attribute boolean hasEditingSession;`",1374,null],[11,"MakeEditable","","`text /** * Make this docShell editable, setting a flag that causes * an editor to get created, either immediately, or after * a url has been loaded. * @param inWaitForUriLoad true to wait for a URI before * creating the editor. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetChildSHEntry","","`text /** * Get the SHEntry associated with a child docshell */`",1374,null],[11,"AddChildSHEntry","","`text /** * Add a Child SHEntry for a frameset page, given the child's loadtype. * If aCloneChildren is true, then aCloneReference's children will be * cloned onto aHistoryEntry. */`",1374,null],[11,"GetUseGlobalHistory","","`text /** * Whether this docshell should save entries in global history. */`",1374,null],[11,"SetUseGlobalHistory","","`text /** * Whether this docshell should save entries in global history. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"RemoveFromSessionHistory","","`text /** * Removes nsISHEntry objects related to this docshell from session history. * Use this only with subdocuments, like iframes. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetCreatedDynamically","","`text /** * Set when an iframe/frame is added dynamically. */`",1374,null],[11,"SetCreatedDynamically","","`text /** * Set when an iframe/frame is added dynamically. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCurrentSHEntry","","`text /** * Returns false for mLSHE, true for mOSHE */`",1374,null],[11,"IsCommandEnabled","","`text /** * Cherry picked parts of nsIController. * They are here, because we want to call these functions * from JS. */`",1374,null],[11,"DoCommand","","`void doCommand (in string command);`",1374,null],[11,"DoCommandWithParams","","`void doCommandWithParams (in string command, in nsICommandParams aParams);`",1374,null],[11,"IsInvisible","","`text /** * Invisible DocShell are dummy construct to simulate DOM windows * without any actual visual representation. They have to be marked * at construction time, to avoid any painting activity. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetInvisible","","`[noscript,notxpcom] void SetInvisible (in bool aIsInvisibleDochsell);`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"c_void"}}],[11,"GetDeviceSizeIsPageSize","","`text /** * If deviceSizeIsPageSize is set to true, device-width/height media queries * will be calculated from the page size, not the device size. * * Used by the Responsive Design Mode and B2G Simulator. * * Default is False. * Default value can be overriden with * docshell.device_size_is_page_size pref. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"SetDeviceSizeIsPageSize","","`text /** * If deviceSizeIsPageSize is set to true, device-width/height media queries * will be calculated from the page size, not the device size. * * Used by the Responsive Design Mode and B2G Simulator. * * Default is False. * Default value can be overriden with * docshell.device_size_is_page_size pref. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetHasLoadedNonBlankURI","","`text /** * This attribute determines whether a document which is not about:blank has * already be loaded by this docShell. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetWindowDraggingAllowed","","`text /** * Allow usage of -moz-window-dragging:drag for content docshells. * True for top level chrome docshells. Throws if set to false with * top level chrome docshell. */`",1374,null],[11,"SetWindowDraggingAllowed","","`text /** * Allow usage of -moz-window-dragging:drag for content docshells. * True for top level chrome docshells. Throws if set to false with * top level chrome docshell. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetCurrentScrollRestorationIsManual","","`text /** * Sets/gets the current scroll restoration mode. * @see https://html.spec.whatwg.org/#dom-history-scroll-restoration */`",1374,null],[11,"SetCurrentScrollRestorationIsManual","","`text /** * Sets/gets the current scroll restoration mode. * @see https://html.spec.whatwg.org/#dom-history-scroll-restoration */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEditingSession","","`text /** * The editing session for this docshell. */`",1374,null],[11,"GetScriptableTabChild","","`text /** * The tab child for this docshell. */`",1374,null],[11,"GetTouchEventsOverride","","`text /** * This allows chrome to override the default choice of whether touch events * are available on a specific docshell. Possible values are listed below. */`",1374,null],[11,"SetTouchEventsOverride","","`text /** * This allows chrome to override the default choice of whether touch events * are available on a specific docshell. Possible values are listed below. */`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"GetIsOnlyToplevelInTabGroup","","`text /** * This value is `true` if its corresponding unit of related browsing contexts * (TabGroup) contains only 1 toplevel window, and that window is the outer * window corresponding to this docshell. * * The value is `false` otherwise. This is the case if the docshell is an * iframe, has window.opener set, or another window with window.opener * referring to this window exists. * * If this value is `false`, it would be web content visible for a load * occuring in this docshell to be performed within a different docshell. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetAwaitingLargeAlloc","","`text /** * Returns `true` if this docshell was created due to a Large-Allocation * header, and has not seen the initiating load yet. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetUseTrackingProtection","","`text /** * Attribute that determines whether tracking protection is enabled. */`",1374,null],[11,"SetUseTrackingProtection","","`text /** * Attribute that determines whether tracking protection is enabled. */`",1374,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"DispatchLocationChangeEvent","","`text /** * Fire a dummy location change event asynchronously. */`",1374,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetDisplayMode","","`text /** * Display mode for this docshell. Defaults to DISPLAY_MODE_BROWSER. * Media queries only look at the value in the top-most docshell. */`",1374,null],[11,"SetDisplayMode","","`text /** * Display mode for this docshell. Defaults to DISPLAY_MODE_BROWSER. * Media queries only look at the value in the top-most docshell. */`",1374,{"inputs":[{"name":"self"},{"name":"uint32_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1375,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1375,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsITabSource` to one of its base interfaces.",1375,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1375,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTabToStream","","`mozIDOMWindowProxy getTabToStream ();`",1375,null],[11,"NotifyStreamStart","","`void notifyStreamStart (in mozIDOMWindowProxy window);`",1375,null],[11,"NotifyStreamStop","","`void notifyStreamStop (in mozIDOMWindowProxy window);`",1375,null],[11,"addref","","",1376,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1376,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIErrorService` to one of its base interfaces.",1376,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1376,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"RegisterErrorStringBundle","","`text /** * Registers a string bundle URL for an error module. Error modules are obtained from * nsresult code with NS_ERROR_GET_MODULE. */`",1376,null],[11,"UnregisterErrorStringBundle","","`text /** * Unregisters a string bundle URL for an error module. */`",1376,{"inputs":[{"name":"self"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"GetErrorStringBundle","","`text /** * Retrieves a string bundle URL for an error module. */`",1376,null],[11,"addref","","",1377,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1377,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISSLSocketControl` to one of its base interfaces.",1377,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1377,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"KEY_EXCHANGE_UNKNOWN","","",1377,null],[18,"SSL_VERSION_3","","",1377,null],[18,"TLS_VERSION_1","","",1377,null],[18,"TLS_VERSION_1_1","","",1377,null],[18,"TLS_VERSION_1_2","","",1377,null],[18,"TLS_VERSION_1_3","","",1377,null],[18,"SSL_VERSION_UNKNOWN","","",1377,null],[18,"SSL_MAC_UNKNOWN","","",1377,null],[18,"SSL_MAC_NULL","","",1377,null],[18,"SSL_MAC_MD5","","",1377,null],[18,"SSL_MAC_SHA","","",1377,null],[18,"SSL_HMAC_MD5","","",1377,null],[18,"SSL_HMAC_SHA","","",1377,null],[18,"SSL_HMAC_SHA256","","",1377,null],[18,"SSL_MAC_AEAD","","",1377,null],[11,"GetNotificationCallbacks","","`attribute nsIInterfaceRequestor notificationCallbacks;`",1377,null],[11,"SetNotificationCallbacks","","`attribute nsIInterfaceRequestor notificationCallbacks;`",1377,null],[11,"ProxyStartSSL","","`void proxyStartSSL ();`",1377,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"StartTLS","","`void StartTLS ();`",1377,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"GetNegotiatedNPN","","`readonly attribute ACString negotiatedNPN;`",1377,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAlpnEarlySelection","","`ACString getAlpnEarlySelection ();`",1377,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetEarlyDataAccepted","","`readonly attribute bool earlyDataAccepted;`",1377,null],[11,"DriveHandshake","","`void driveHandshake ();`",1377,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"JoinConnection","","`boolean joinConnection (in ACString npnProtocol, in ACString hostname, in long port);`",1377,null],[11,"TestJoinConnection","","`boolean testJoinConnection (in ACString npnProtocol, in ACString hostname, in long port);`",1377,null],[11,"IsAcceptableForHost","","`boolean isAcceptableForHost (in ACString hostname);`",1377,null],[11,"GetKEAUsed","","`[infallible] readonly attribute short KEAUsed;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"int16_t"}}],[11,"GetKEAKeyBits","","`[infallible] readonly attribute unsigned long KEAKeyBits;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"uint32_t"}}],[11,"GetProviderFlags","","`readonly attribute uint32_t providerFlags;`",1377,null],[11,"GetProviderTlsFlags","","`readonly attribute uint32_t providerTlsFlags;`",1377,null],[11,"GetSSLVersionUsed","","`[infallible] readonly attribute short SSLVersionUsed;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"int16_t"}}],[11,"GetSSLVersionOffered","","`[infallible] readonly attribute short SSLVersionOffered;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"int16_t"}}],[11,"GetMACAlgorithmUsed","","`[infallible] readonly attribute short MACAlgorithmUsed;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"int16_t"}}],[11,"GetClientCert","","`text /** * If set before the server requests a client cert (assuming it does so at * all), then this cert will be presented to the server, instead of asking * the user or searching the set of rememebered user cert decisions. */`",1377,null],[11,"SetClientCert","","`text /** * If set before the server requests a client cert (assuming it does so at * all), then this cert will be presented to the server, instead of asking * the user or searching the set of rememebered user cert decisions. */`",1377,null],[11,"GetBypassAuthentication","","`text /** * bypassAuthentication is true if the server certificate checks are * not be enforced. This is to enable non-secure transport over TLS. */`",1377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"GetFailedVerification","","`[infallible] readonly attribute boolean failedVerification;`",1377,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"addref","","",1378,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1378,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsICommandLineValidator` to one of its base interfaces.",1378,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1378,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Validate","","`text /** * Process the command-line validators in the proper order, calling * \"validate()\" on each. * * @throws NS_ERROR_ABORT if any validator throws NS_ERROR_ABORT. All other * errors thrown by validators will be silently ignored. */`",1378,null],[11,"addref","","",1379,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1379,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISelectionPrivate` to one of its base interfaces.",1379,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1379,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ENDOFPRECEDINGLINE","","",1379,null],[18,"STARTOFNEXTLINE","","",1379,null],[18,"TABLESELECTION_NONE","","",1379,null],[18,"TABLESELECTION_CELL","","",1379,null],[18,"TABLESELECTION_ROW","","",1379,null],[18,"TABLESELECTION_COLUMN","","",1379,null],[18,"TABLESELECTION_TABLE","","",1379,null],[18,"TABLESELECTION_ALLCELLS","","",1379,null],[11,"GetInterlinePosition","","`attribute boolean interlinePosition;`",1379,null],[11,"SetInterlinePosition","","`attribute boolean interlinePosition;`",1379,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetAncestorLimiter","","`[noscript] attribute nsIContent ancestorLimiter;`",1379,null],[11,"SetAncestorLimiter","","`[noscript] attribute nsIContent ancestorLimiter;`",1379,null],[11,"ToStringWithFormat","","`DOMString toStringWithFormat (in string formatType, in unsigned long flags, in int32_t wrapColumn);`",1379,null],[11,"AddSelectionListener","","`void addSelectionListener (in nsISelectionListener newListener);`",1379,null],[11,"RemoveSelectionListener","","`void removeSelectionListener (in nsISelectionListener listenerToRemove);`",1379,null],[11,"GetTableSelectionType","","`text /** Test if supplied range points to a single table element: * Result is one of above constants. \"None\" means * a table element isn't selected. */`",1379,null],[11,"GetCanCacheFrameOffset","","`[noscript] attribute boolean canCacheFrameOffset;`",1379,null],[11,"SetCanCacheFrameOffset","","`[noscript] attribute boolean canCacheFrameOffset;`",1379,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetType","","`text /** * Returns the type of the selection (see nsISelectionController for * available constants). */`",1379,null],[11,"GetRangesForInterval","","`text /** * Return array of ranges intersecting with the given DOM interval. */`",1379,null],[11,"ScrollIntoView","","`text /** * Scrolls a region of the selection, so that it is visible in * the scrolled view. * * @param aRegion - the region inside the selection to scroll into view * (see selection region constants defined in * nsISelectionController). * @param aIsSynchronous - when true, scrolls the selection into view * before returning. If false, posts a request which * is processed at some point after the method returns. * @param aVPercent - how to align the frame vertically. * @param aHPercent - how to align the frame horizontally. */`",1379,{"inputs":[{"name":"self"},{"name":"int16_t"},{"name":"bool"},{"name":"int16_t"},{"name":"int16_t"}],"output":{"name":"nsresult"}}],[11,"SelectionLanguageChange","","`text /** * Modifies the cursor Bidi level after a change in keyboard direction * @param langRTL is PR_TRUE if the new language is right-to-left or * PR_FALSE if the new language is left-to-right. */`",1379,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"SetColors","","`text /** * setColors() sets custom colors for the selection. * Currently, this is supported only when the selection type is SELECTION_FIND. * Otherwise, throws an exception. * * @param aForegroundColor The foreground color of the selection. * If this is \"currentColor\", foreground color * isn't changed by this selection. * @param aBackgroundColor The background color of the selection. * If this is \"transparent\", background color is * never painted. * @param aAltForegroundColor The alternative foreground color of the * selection. * If aBackgroundColor doesn't have sufficient * contrast with its around or foreground color * if \"currentColor\" is specified, alternative * colors are used if it have higher contrast. * @param aAltBackgroundColor The alternative background color of the * selection. */`",1379,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"ResetColors","","`text /** * resetColors() forget the customized colors which were set by setColors(). */`",1379,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1380,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1380,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIComponentRegistrar` to one of its base interfaces.",1380,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1380,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"AutoRegister","","`text /** * autoRegister * * Register a .manifest file, or an entire directory containing * these files. Registration lasts for this run only, and is not cached. * * @note Formerly this method would register component files directly. This * is no longer supported. */`",1380,null],[11,"AutoUnregister","","`text /** * autoUnregister * @status OBSOLETE: This method is no longer implemented, but preserved * in this interface for binary compatibility with * Mozilla 1.9.2. */`",1380,null],[11,"RegisterFactory","","`text /** * registerFactory * * Register a factory with a given ContractID, CID and Class Name. * * @param aClass : CID of object * @param aClassName : Class Name of CID (unused) * @param aContractID : ContractID associated with CID aClass. May be null * if no contract ID is needed. * @param aFactory : Factory that will be registered for CID aClass. * If aFactory is null, the contract will be associated * with a previously registered CID. */`",1380,null],[11,"UnregisterFactory","","`text /** * unregisterFactory * * Unregister a factory associated with CID aClass. * * @param aClass : CID being unregistered * @param aFactory : Factory previously registered to create instances of * CID aClass. * * @throws NS_ERROR* Method failure. */`",1380,null],[11,"RegisterFactoryLocation","","`text /** * registerFactoryLocation * @status OBSOLETE: This method is no longer implemented, but preserved * in this interface for binary compatibility with * Mozilla 1.9.2. */`",1380,null],[11,"UnregisterFactoryLocation","","`text /** * unregisterFactoryLocation * @status OBSOLETE: This method is no longer implemented, but preserved * in this interface for binary compatibility with * Mozilla 1.9.2. */`",1380,null],[11,"IsCIDRegistered","","`text /** * isCIDRegistered * * Returns true if a factory is registered for the CID. * * @param aClass : CID queried for registeration * @return : true if a factory is registered for CID * false otherwise. */`",1380,null],[11,"IsContractIDRegistered","","`text /** * isContractIDRegistered * * Returns true if a factory is registered for the contract id. * * @param aClass : contract id queried for registeration * @return : true if a factory is registered for contract id * false otherwise. */`",1380,null],[11,"EnumerateCIDs","","`text /** * enumerateCIDs * * Enumerate the list of all registered CIDs. * * @return : enumerator for CIDs. Elements of the enumeration can be QI'ed * for the nsISupportsID interface. From the nsISupportsID, you * can obtain the actual CID. */`",1380,null],[11,"EnumerateContractIDs","","`text /** * enumerateContractIDs * * Enumerate the list of all registered ContractIDs. * * @return : enumerator for ContractIDs. Elements of the enumeration can be * QI'ed for the nsISupportsCString interface. From the * nsISupportsCString interface, you can obtain the actual * Contract ID string. */`",1380,null],[11,"CIDToContractID","","`text /** * CIDToContractID * @status OBSOLETE: This method is no longer implemented, but preserved * in this interface for binary compatibility with * Mozilla 1.9.2. */`",1380,null],[11,"ContractIDToCID","","`text /** * contractIDToCID * * Returns the CID for a given Contract ID, if one exists and is registered. * * @return : Contract ID. */`",1380,null],[11,"addref","","",1381,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1381,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIParentChannel` to one of its base interfaces.",1381,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1381,{"inputs":[{"name":"self"}],"output":{"name":"nsistreamlistener"}}],[11,"NotifyTrackingProtectionDisabled","","`text /** * Called to notify the HttpChannelChild that tracking protection was * disabled for this load. */`",1381,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"SetClassifierMatchedInfo","","`text /** * Called to set matched information when URL matches SafeBrowsing list. * @param aList * Name of the list that matched * @param aProvider * Name of provider that matched * @param aFullHash * String represents full hash that matched */`",1381,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsacstring"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"NotifyTrackingResource","","`text /** * Called to notify the HttpChannelChild that the resource being loaded * is on the tracking protection list. */`",1381,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Delete","","`text /** * Called to invoke deletion of the IPC protocol. */`",1381,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1382,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1382,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserFind` to one of its base interfaces.",1382,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1382,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"FindNext","","`text /** * findNext * * Finds, highlights, and scrolls into view the next occurrence of the * search string, using the current search settings. Fails if the * search string is empty. * * @return Whether an occurrence was found */`",1382,null],[11,"GetSearchString","","`text /** * searchString * * The string to search for. This must be non-empty to search. */`",1382,null],[11,"SetSearchString","","`text /** * searchString * * The string to search for. This must be non-empty to search. */`",1382,null],[11,"GetFindBackwards","","`text /** * findBackwards * * Whether to find backwards (towards the beginning of the document). * Default is false (search forward). */`",1382,null],[11,"SetFindBackwards","","`text /** * findBackwards * * Whether to find backwards (towards the beginning of the document). * Default is false (search forward). */`",1382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetWrapFind","","`text /** * wrapFind * * Whether the search wraps around to the start (or end) of the document * if no match was found between the current position and the end (or * beginning). Works correctly when searching backwards. Default is * false. */`",1382,null],[11,"SetWrapFind","","`text /** * wrapFind * * Whether the search wraps around to the start (or end) of the document * if no match was found between the current position and the end (or * beginning). Works correctly when searching backwards. Default is * false. */`",1382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetEntireWord","","`text /** * entireWord * * Whether to match entire words only. Default is false. */`",1382,null],[11,"SetEntireWord","","`text /** * entireWord * * Whether to match entire words only. Default is false. */`",1382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetMatchCase","","`text /** * matchCase * * Whether to match case (case sensitive) when searching. Default is false. */`",1382,null],[11,"SetMatchCase","","`text /** * matchCase * * Whether to match case (case sensitive) when searching. Default is false. */`",1382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSearchFrames","","`text /** * searchFrames * * Whether to search through all frames in the content area. Default is true. * * Note that you can control whether the search propagates into child or * parent frames explicitly using nsIWebBrowserFindInFrames, but if one, * but not both, of searchSubframes and searchParentFrames are set, this * returns false. */`",1382,null],[11,"SetSearchFrames","","`text /** * searchFrames * * Whether to search through all frames in the content area. Default is true. * * Note that you can control whether the search propagates into child or * parent frames explicitly using nsIWebBrowserFindInFrames, but if one, * but not both, of searchSubframes and searchParentFrames are set, this * returns false. */`",1382,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1383,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1383,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIWebBrowserFindInFrames` to one of its base interfaces.",1383,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1383,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetCurrentSearchFrame","","`text /** * currentSearchFrame * * Frame at which to start the search. Once the search is done, this will * be set to be the last frame searched, whether or not a result was found. * Has to be equal to or contained within the rootSearchFrame. */`",1383,null],[11,"SetCurrentSearchFrame","","`text /** * currentSearchFrame * * Frame at which to start the search. Once the search is done, this will * be set to be the last frame searched, whether or not a result was found. * Has to be equal to or contained within the rootSearchFrame. */`",1383,null],[11,"GetRootSearchFrame","","`text /** * rootSearchFrame * * Frame within which to confine the search (normally the content area frame). * Set this to only search a subtree of the frame hierarchy. */`",1383,null],[11,"SetRootSearchFrame","","`text /** * rootSearchFrame * * Frame within which to confine the search (normally the content area frame). * Set this to only search a subtree of the frame hierarchy. */`",1383,null],[11,"GetSearchSubframes","","`text /** * searchSubframes * * Whether to recurse down into subframes while searching. Default is true. * * Setting nsIWebBrowserfind.searchFrames to true sets this to true. */`",1383,null],[11,"SetSearchSubframes","","`text /** * searchSubframes * * Whether to recurse down into subframes while searching. Default is true. * * Setting nsIWebBrowserfind.searchFrames to true sets this to true. */`",1383,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"GetSearchParentFrames","","`text /** * searchParentFrames * * Whether to allow the search to propagate out of the currentSearchFrame into its * parent frame(s). Search is always confined within the rootSearchFrame. Default * is true. * * Setting nsIWebBrowserfind.searchFrames to true sets this to true. */`",1383,null],[11,"SetSearchParentFrames","","`text /** * searchParentFrames * * Whether to allow the search to propagate out of the currentSearchFrame into its * parent frame(s). Search is always confined within the rootSearchFrame. Default * is true. * * Setting nsIWebBrowserfind.searchFrames to true sets this to true. */`",1383,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1384,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1384,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedResultService` to one of its base interfaces.",1384,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1384,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetForcePreviewPage","","`text /** * When set to true, forces the preview page to be displayed, regardless * of the user's preferences. */`",1384,null],[11,"SetForcePreviewPage","","`text /** * When set to true, forces the preview page to be displayed, regardless * of the user's preferences. */`",1384,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddToClientReader","","`text /** * Adds a URI to the user's specified external feed handler, or live * bookmarks. * @param uri * The uri of the feed to add. * @param title * The title of the feed to add. * @param subtitle * The subtitle of the feed to add. * @param feedType * The nsIFeed type of the feed. See nsIFeed.idl * @param feedReader * The type of feed reader we're using (client, bookmarks, default) * If this parameter is null, the type is set to default */`",1384,{"inputs":[{"name":"self"},{"name":"nsacstring"},{"name":"nsastring"},{"name":"nsastring"},{"name":"uint32_t"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"AddFeedResult","","`text /** * Registers a Feed Result object with a globally accessible service * so that it can be accessed by a singleton method outside the usual * flow of control in document loading. * * @param feedResult * An object implementing nsIFeedResult representing the feed. */`",1384,null],[11,"GetFeedResult","","`text /** * Gets a Feed Handler object registered using addFeedResult. * * @param uri * The URI of the feed a handler is being requested for */`",1384,null],[11,"RemoveFeedResult","","`text /** * Unregisters a Feed Handler object registered using addFeedResult. * @param uri * The feed URI the handler was registered under. This must be * the same *instance* the feed was registered under. */`",1384,null],[11,"addref","","",1385,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1385,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIHttpChannelAuthProvider` to one of its base interfaces.",1385,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1385,{"inputs":[{"name":"self"}],"output":{"name":"nsicancelable"}}],[11,"Init","","`text /** * Initializes the http authentication support for the channel. * Implementations must hold a weak reference of the channel. */`",1385,null],[11,"ProcessAuthentication","","`text /** * Upon receipt of a server challenge, this function is called to determine * the credentials to send. * * @param httpStatus * the http status received. * @param sslConnectFailed * if the last ssl tunnel connection attempt was or not successful. * @param callback * the callback to be called when it returns NS_ERROR_IN_PROGRESS. * The implementation must hold a weak reference. * * @returns NS_OK if the credentials were got and set successfully. * NS_ERROR_IN_PROGRESS if the credentials are going to be asked to * the user. The channel reference must be * alive until the feedback from * nsIHttpAuthenticableChannel's methods or * until disconnect be called. */`",1385,{"inputs":[{"name":"self"},{"name":"uint32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"AddAuthorizationHeaders","","`text /** * Add credentials from the http auth cache. * * @param dontUseCachedWWWCreds * When true, the method will not add any Authorization headers from * the auth cache. */`",1385,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"CheckForSuperfluousAuth","","`text /** * Check if an unnecessary(and maybe malicious) url authentication has been * provided. */`",1385,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"Disconnect","","`text /** * Cancel pending user auth prompts and release the callback and channel * weak references. */`",1385,{"inputs":[{"name":"self"},{"name":"nsresult"}],"output":{"name":"nsresult"}}],[11,"addref","","",1386,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1386,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIUTF8ConverterService` to one of its base interfaces.",1386,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1386,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"ConvertURISpecToUTF8","","`text /** * Ensure that |aSpec| (after URL-unescaping it) is encoded in UTF-8. * If not, convert it to UTF-8, assuming it's encoded in |aCharset|, * and return the result. * * <p>Make sure that all characters outside US-ASCII in your input spec * are url-escaped if your spec is not in UTF-8 (before url-escaping) * because the presence of non-ASCII characters is <strong>blindly</strong> * regarded as an indication that your input spec is in unescaped UTF-8 * and it will be returned without further processing. No valid spec * going around in Mozilla code would break this assumption. * * <p>XXX The above may change in the future depending on the usage pattern. * * @param aSpec an url-escaped URI spec to ensure its UTF8ness * @param aCharset the charset to convert from if |aSpec| is not in UTF-8 * @return the converted spec in UTF-8. * @throws NS_ERROR_UCONV_NOCONV when there is no decoder for aCharset * or NS_ERROR_UDEC_ILLEGALINPUT in case of conversion failure */`",1386,null],[11,"addref","","",1387,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1387,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedResultListener` to one of its base interfaces.",1387,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1387,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"HandleResult","","`text /** * Always called, even after an error. There could be new feed-level * data available at this point, if it followed or was interspersed * with the items. Fire-and-Forget implementations only need this. * * @param result * An object implementing nsIFeedResult representing the feed * and its metadata. */`",1387,null],[11,"addref","","",1388,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1388,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIFeedProgressListener` to one of its base interfaces.",1388,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1388,{"inputs":[{"name":"self"}],"output":{"name":"nsifeedresultlistener"}}],[11,"ReportError","","`text /** * ReportError will be called in the event of fatal * XML errors, or if the document is not a feed. The bozo * bit will be set if the error was due to a fatal error. * * @param errorText * A short description of the error. * @param lineNumber * The line on which the error occurred. */`",1388,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"int32_t"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"HandleStartFeed","","`text /** * StartFeed will be called as soon as a reasonable start to * a feed is detected. * * @param result * An object implementing nsIFeedResult representing the feed * and its metadata. At this point, the result has version * information. */`",1388,null],[11,"HandleFeedAtFirstEntry","","`text /** * Called when the first entry/item is encountered. In Atom, all * feed data is required to preceed the entries. In RSS, the data * usually does. If the type is one of the entry/item-only types, * this event will not be called. * * @param result * An object implementing nsIFeedResult representing the feed * and its metadata. At this point, the result will likely have * most of its feed-level metadata. */`",1388,null],[11,"HandleEntry","","`text /** * Called after each entry/item. If the document is a standalone * item or entry, this HandleFeedAtFirstEntry will not have been * called. Also, this entry's parent field will be null. * * @param entry * An object implementing nsIFeedEntry that represents the latest * entry encountered. * @param result * An object implementing nsIFeedResult representing the feed * and its metadata. */`",1388,null],[11,"addref","","",1389,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1389,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIAsyncStreamCopier` to one of its base interfaces.",1389,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1389,{"inputs":[{"name":"self"}],"output":{"name":"nsirequest"}}],[11,"Init","","`text /** * Initialize the stream copier. * * @param aSource * contains the data to be copied. * @param aSink * specifies the destination for the data. * @param aTarget * specifies the thread on which the copy will occur. a null value * is permitted and will cause the copy to occur on an unspecified * background thread. * @param aSourceBuffered * true if aSource implements ReadSegments. * @param aSinkBuffered * true if aSink implements WriteSegments. * @param aChunkSize * specifies how many bytes to read/write at a time. this controls * the granularity of the copying. it should match the segment size * of the \"buffered\" streams involved. * @param aCloseSource * true if aSource should be closed after copying. * @param aCloseSink * true if aSink should be closed after copying. * * NOTE: at least one of the streams must be buffered. If you do not know * whether your streams are buffered, you should use nsIAsyncStreamCopier2 * instead. */`",1389,null],[11,"AsyncCopy","","`text /** * asyncCopy triggers the start of the copy. The observer will be notified * when the copy completes. * * @param aObserver * receives notifications. * @param aObserverContext * passed to observer methods. */`",1389,null],[11,"addref","","",1390,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1390,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIExternalURLHandlerService` to one of its base interfaces.",1390,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1390,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetURLHandlerInfoFromOS","","`text /** * Given a URL, looks up the handler info from the OS. This should be * overridden by each OS's implementation. * * @param aURL The URL we are looking for. * @param aFound Was an OS default handler for this URL found? * @return An nsIHanderInfo for the protocol. */`",1390,null],[11,"addref","","",1391,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1391,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIGeneratingKeypairInfoDialogs` to one of its base interfaces.",1391,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1391,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"DisplayGeneratingKeypairInfo","","`[must_use] void displayGeneratingKeypairInfo (in nsIInterfaceRequestor ctx, in nsIKeygenThread runnable);`",1391,null],[11,"addref","","",1392,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1392,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIPushErrorReporter` to one of its base interfaces.",1392,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1392,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[18,"ACK_DELIVERED","","`text /** * Ack types, reported when the Push service acknowledges an incoming message. * * Acks are sent before the message is dispatched to the service worker, * since the server delays new messages until all outstanding ones have been * acked. |reportDeliveryError| will be called if an error occurs in the * worker's `push` event handler after acking the message. */`",1392,null],[18,"ACK_DECRYPTION_ERROR","","",1392,null],[18,"ACK_NOT_DELIVERED","","",1392,null],[18,"UNSUBSCRIBE_MANUAL","","`text /** * Unsubscribe reasons, reported when the service drops a subscription. */`",1392,null],[18,"UNSUBSCRIBE_QUOTA_EXCEEDED","","",1392,null],[18,"UNSUBSCRIBE_PERMISSION_REVOKED","","",1392,null],[18,"DELIVERY_UNCAUGHT_EXCEPTION","","`text /** * Delivery error reasons, reported when a service worker fails to handle * an incoming push message in its `push` event handler. */`",1392,null],[18,"DELIVERY_UNHANDLED_REJECTION","","",1392,null],[18,"DELIVERY_INTERNAL_ERROR","","",1392,null],[11,"ReportDeliveryError","","`text /** * Reports a `push` event handler error to the Push service. |messageId| is * an opaque string passed to `nsIPushNotifier.notifyPush{WithData}`. * |reason| is a delivery error reason. */`",1392,{"inputs":[{"name":"self"},{"name":"nsastring"},{"name":"uint16_t"}],"output":{"name":"nsresult"}}],[11,"addref","","",1393,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1393,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsISecurityConsoleMessage` to one of its base interfaces.",1393,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1393,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTag","","`attribute AString tag;`",1393,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetTag","","`attribute AString tag;`",1393,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"GetCategory","","`attribute AString category;`",1393,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"SetCategory","","`attribute AString category;`",1393,{"inputs":[{"name":"self"},{"name":"nsastring"}],"output":{"name":"nsresult"}}],[11,"addref","","",1394,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1394,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPermissionType` to one of its base interfaces.",1394,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1394,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetType","","`text /** * The type of the permission request, such as * \"geolocation\". */`",1394,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetAccess","","`text /** * The access of the permission request, such as * \"read\". */`",1394,{"inputs":[{"name":"self"},{"name":"nsacstring"}],"output":{"name":"nsresult"}}],[11,"GetOptions","","`text /** * The array of available options. */`",1394,null],[11,"addref","","",1395,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1395,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPermissionRequestCallback` to one of its base interfaces.",1395,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1395,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"NotifyVisibility","","`text /** * The callback of the visibility result. */`",1395,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"nsresult"}}],[11,"addref","","",1396,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1396,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPermissionRequester` to one of its base interfaces.",1396,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1396,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetVisibility","","`text /** * The function to get the visibility. */`",1396,null],[11,"GetOnVisibilityChange","","`text /** * The callback to get the notification of visibility change. */`",1396,null],[11,"SetOnVisibilityChange","","`text /** * The callback to get the notification of visibility change. */`",1396,null],[11,"addref","","",1397,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1397,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPermissionRequest` to one of its base interfaces.",1397,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1397,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"GetTypes","","`text /** * The array will include the request types. Elements of this array are * nsIContentPermissionType object. */`",1397,null],[11,"GetPrincipal","","`readonly attribute nsIPrincipal principal;`",1397,null],[11,"GetWindow","","`text /** * The window or element that the permission request was * originated in. Typically the element will be non-null * in when using out of process content. window or * element can be null but not both. */`",1397,null],[11,"GetElement","","`readonly attribute nsIDOMElement element;`",1397,null],[11,"GetIsHandlingUserInput","","`readonly attribute boolean isHandlingUserInput;`",1397,null],[11,"GetRequester","","`text /** * The requester to get the required information of * the window. */`",1397,null],[11,"Cancel","","`text /** * allow or cancel the request */`",1397,{"inputs":[{"name":"self"}],"output":{"name":"nsresult"}}],[11,"addref","","",1398,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1398,{"inputs":[{"name":"self"}],"output":null}],[11,"coerce","","Cast this `nsIContentPermissionPrompt` to one of its base interfaces.",1398,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"deref","","",1398,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"Prompt","","`text /** * Called when a request has been made to access * privileged content apis */`",1398,null],[11,"addref","","",1399,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1399,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1399,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1400,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1400,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1400,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1401,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1401,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1401,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1402,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1402,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1402,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1403,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1403,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1403,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1404,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1404,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1404,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1405,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1405,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1405,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1406,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1406,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1406,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1407,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1407,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1407,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1408,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1408,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1408,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1409,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1409,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1409,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[11,"addref","","",1410,{"inputs":[{"name":"self"}],"output":null}],[11,"release","","",1410,{"inputs":[{"name":"self"}],"output":null}],[11,"deref","","",1410,{"inputs":[{"name":"self"}],"output":{"name":"nsisupports"}}],[6,"nsCookieAccess","","`typedef int32_t nsCookieAccess;`",null,null],[6,"PredictorPredictReason","","`typedef uint32_t PredictorPredictReason;`",null,null],[6,"PredictorLearnReason","","`typedef uint32_t PredictorLearnReason;`",null,null],[6,"CSPDirective","","`typedef uint16_t CSPDirective;`",null,null],[6,"AccessibleTextBoundary","","`typedef int32_t AccessibleTextBoundary;`",null,null],[6,"nsHandlerInfoAction","","`typedef int32_t nsHandlerInfoAction;`",null,null],[6,"nsSecurityFlags","","`typedef uint32_t nsSecurityFlags;`",null,null],[6,"nsContentPolicyType","","`typedef uint32_t nsContentPolicyType;`",null,null],[6,"nsServerSocketFlag","","`typedef uint32_t nsServerSocketFlag;`",null,null],[6,"TextBoundaryType","","`typedef int16_t TextBoundaryType;`",null,null],[6,"PivotMoveReason","","`typedef int16_t PivotMoveReason;`",null,null],[6,"uint8_t","","`typedef uint8_t uint8_t;`",null,null],[6,"uint16_t","","`typedef uint16_t uint16_t;`",null,null],[6,"char16_t","","`typedef uint16_t char16_t;`",null,null],[6,"uint32_t","","`typedef uint32_t uint32_t;`",null,null],[6,"uint64_t","","`typedef uint64_t uint64_t;`",null,null],[6,"PRTime","","`typedef int64_t PRTime;`",null,null],[6,"int16_t","","`typedef int16_t int16_t;`",null,null],[6,"int32_t","","`typedef int32_t int32_t;`",null,null],[6,"int64_t","","`typedef int64_t int64_t;`",null,null],[6,"nsrefcnt","","`typedef uint32_t nsrefcnt;`",null,null],[6,"nsresult","","`typedef uint32_t nsresult;`",null,null],[6,"size_t","","`typedef uint32_t size_t;`",null,null],[6,"nsDocShellInfoLoadType","","`typedef int32_t nsDocShellInfoLoadType;`",null,null],[6,"nsDocShellInfoReferrerPolicy","","`typedef uint32_t nsDocShellInfoReferrerPolicy;`",null,null],[6,"DOMTimeStamp","","`typedef uint64_t DOMTimeStamp;`",null,null],[6,"DOMHighResTimeStamp","","`typedef double DOMHighResTimeStamp;`",null,null],[6,"nsViewID","","`typedef uint64_t nsViewID;`",null,null],[6,"AppTrustedRoot","","`typedef uint32_t AppTrustedRoot;`",null,null],[6,"nsSuspendedTypes","","`typedef uint32_t nsSuspendedTypes;`",null,null],[6,"nativeWindow","","`typedef void * nativeWindow;`",null,null],[6,"nsLoadFlags","","`typedef uint32_t nsLoadFlags;`",null,null],[6,"nsCacheStoragePolicy","","`typedef int32_t nsCacheStoragePolicy;`",null,null],[6,"nsCacheAccessMode","","`typedef int32_t nsCacheAccessMode;`",null,null],[6,"nsCookieStatus","","`typedef int32_t nsCookieStatus;`",null,null],[6,"nsCookiePolicy","","`typedef int32_t nsCookiePolicy;`",null,null],[0,"services","xpcom","This module contains convenient accessors for XPCOM services.",null,null],[5,"get_ChromeRegistryService","xpcom::services","Fetches a cached reference to the `ChromeRegistryService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_ToolkitChromeRegistryService","","Fetches a cached reference to the `ToolkitChromeRegistryService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_XULChromeRegistryService","","Fetches a cached reference to the `XULChromeRegistryService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_XULOverlayProviderService","","Fetches a cached reference to the `XULOverlayProviderService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_IOService","","Fetches a cached reference to the `IOService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_ObserverService","","Fetches a cached reference to the `ObserverService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_StringBundleService","","Fetches a cached reference to the `StringBundleService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_XPConnect","","Fetches a cached reference to the `XPConnect`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_InDOMUtils","","Fetches a cached reference to the `InDOMUtils`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_PermissionManager","","Fetches a cached reference to the `PermissionManager`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_ServiceWorkerManager","","Fetches a cached reference to the `ServiceWorkerManager`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_AsyncShutdown","","Fetches a cached reference to the `AsyncShutdown`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_UUIDGenerator","","Fetches a cached reference to the `UUIDGenerator`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_GfxInfo","","Fetches a cached reference to the `GfxInfo`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_SocketTransportService","","Fetches a cached reference to the `SocketTransportService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_StreamTransportService","","Fetches a cached reference to the `StreamTransportService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_CacheStorageService","","Fetches a cached reference to the `CacheStorageService`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_URIClassifier","","Fetches a cached reference to the `URIClassifier`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[5,"get_ActivityDistributor","","Fetches a cached reference to the `ActivityDistributor`. This function will return `None` during XPCOM shutdown.",null,{"inputs":[],"output":{"generics":["refptr"],"name":"option"}}],[6,"nsIID","xpcom","Interface IDs",null,null],[6,"nsCID","","Class IDs",null,null],[8,"XpCom","","A type which implements XpCom must follow the following rules:",null,null],[18,"IID","","",1411,null],[11,"query_interface","","Perform a QueryInterface call on this object, attempting to dynamically cast it to the requested interface type. Returns Some(RefPtr) if the cast succeeded, and None otherwise.",1411,{"inputs":[{"name":"self"}],"output":{"generics":["refptr"],"name":"option"}}],[8,"RefCounted","","A trait representing a type which can be reference counted invasively. The object is responsible for freeing its backing memory when its reference count reaches 0.",null,null],[10,"addref","","Increment the reference count.",1412,{"inputs":[{"name":"self"}],"output":null}],[10,"release","","Decrement the reference count, potentially freeing backing memory.",1412,{"inputs":[{"name":"self"}],"output":null}],[18,"IID","","",1411,null],[11,"query_interface","","Perform a QueryInterface call on this object, attempting to dynamically cast it to the requested interface type. Returns Some(RefPtr) if the cast succeeded, and None otherwise.",1411,{"inputs":[{"name":"self"}],"output":{"generics":["refptr"],"name":"option"}}]],"paths":[[3,"nsID"],[3,"RefPtr"],[3,"GetterAddrefs"],[3,"Refcnt"],[3,"AtomicRefcnt"],[3,"nsIExternalProtocolService"],[3,"nsIDOMHTMLDocument"],[3,"nsIApplicationCacheChannel"],[3,"nsITimeService"],[3,"nsIProtocolProxyService2"],[3,"nsIPK11Token"],[3,"nsIAboutNewTabService"],[3,"nsIDOMParser"],[3,"nsIChannel"],[3,"nsIAsyncVerifyRedirectReadyCallback"],[3,"nsIParentRedirectingChannel"],[3,"nsIProxyInfo"],[3,"nsISecurityReporter"],[3,"nsICryptoHash"],[3,"nsIClipboard"],[3,"nsICacheStorageVisitor"],[3,"nsPIPromptService"],[3,"mozIStorageAggregateFunction"],[3,"nsIHandleReportCallback"],[3,"nsIMemoryReporter"],[3,"nsIFinishReportingCallback"],[3,"nsIHeapAllocatedCallback"],[3,"nsIMemoryReporterManager"],[3,"nsIMIMEInputStream"],[3,"nsIQuotaRequestBase"],[3,"nsIQuotaUsageRequest"],[3,"nsIQuotaRequest"],[3,"nsIArrayExtensions"],[3,"nsIAppShell"],[3,"nsIUnicharStreamLoaderObserver"],[3,"nsIUnicharStreamLoader"],[3,"nsIDOMGeoPositionErrorCallback"],[3,"nsIScriptableBase64Encoder"],[3,"nsITransactionListener"],[3,"nsIMIMEService"],[3,"nsIDOMMozNamedAttrMap"],[3,"rdfITripleVisitor"],[3,"nsIDOMXULControlElement"],[3,"nsIDOMMediaList"],[3,"nsIBidiKeyboard"],[3,"nsIURILoader"],[3,"nsIProperty"],[3,"nsIAutoCompleteResult"],[3,"imgILoader"],[3,"nsIRDFXMLSinkObserver"],[3,"nsIRDFXMLSink"],[3,"nsILoadURIDelegate"],[3,"nsIPrefetchService"],[3,"nsIASN1Object"],[3,"nsIDOMMutationEvent"],[3,"nsIFileURL"],[3,"nsIWebBrowserPersistURIMap"],[3,"nsIWebBrowserPersistDocument"],[3,"nsIWebBrowserPersistResourceVisitor"],[3,"nsIWebBrowserPersistWriteCompletion"],[3,"nsIWebBrowserPersistDocumentReceiver"],[3,"nsIContentProcessInfo"],[3,"nsIContentProcessProvider"],[3,"nsIDOMRange"],[3,"nsIConverterInputStream"],[3,"nsIAccessibleEvent"],[3,"nsIReadConfig"],[3,"nsIDragService"],[3,"nsIAsyncVerifyRedirectCallback"],[3,"nsIDownloadManagerResult"],[3,"nsIDownloadManager"],[3,"nsIDOMScrollAreaEvent"],[3,"nsIDOMCSSValue"],[3,"nsISAXXMLReader"],[3,"nsIPermission"],[3,"nsIDOMCSSGroupingRule"],[3,"nsIBrowser"],[3,"nsICacheService"],[3,"nsICacheServiceInternal"],[3,"nsITCPSocketCallback"],[3,"nsIJARURI"],[3,"amIAddonPathService"],[3,"nsIAccessibleHyperText"],[3,"nsIDOMRect"],[3,"nsIFormFillController"],[3,"nsIStreamBufferAccess"],[3,"nsIURLFormatter"],[3,"nsITabParent"],[3,"nsIJSInspector"],[3,"nsIHttpAuthenticator"],[3,"nsIPrefBranch"],[3,"nsIThread"],[3,"nsIDOMChromeWindow"],[3,"nsIFTPChannel"],[3,"nsIFTPEventSink"],[3,"nsIAutoCompletePopup"],[3,"nsILoginInfo"],[3,"nsIDOMPaintRequest"],[3,"nsIStyleSheetService"],[3,"nsIHttpChannelChild"],[3,"nsIDocShellTreeOwner"],[3,"nsIDocCharset"],[3,"nsIIncrementalDownload"],[3,"mozIAsyncFavicons"],[3,"nsIAboutModule"],[3,"nsIWifiListener"],[3,"nsIHangDetails"],[3,"nsICookiePermission"],[3,"nsICacheEntry"],[3,"nsICacheEntryMetaDataVisitor"],[3,"nsIGeolocationUpdate"],[3,"nsIGeolocationProvider"],[3,"nsIApplicationCacheService"],[3,"nsIEditActionListener"],[3,"nsITreeSelection"],[3,"nsINativeTreeSelection"],[3,"nsIInputStream"],[3,"nsIObserverService"],[3,"nsIDOMMouseScrollEvent"],[3,"nsISelection"],[3,"nsITokenPasswordDialogs"],[3,"nsIWebBrowserPrint"],[3,"nsIHTTPIndex"],[3,"nsIDeprecationWarner"],[3,"nsISensitiveInfoHiddenURI"],[3,"nsIPlatformInfo"],[3,"nsIUrlClassifierPositiveCacheEntry"],[3,"nsIUrlClassifierCacheEntry"],[3,"nsIUrlClassifierCacheInfo"],[3,"nsIUrlClassifierGetCacheCallback"],[3,"nsIUrlClassifierInfo"],[3,"nsIResumableChannel"],[3,"nsIExpatSink"],[3,"nsIPrivateBrowsingChannel"],[3,"nsIWifiMonitor"],[3,"nsIGIOMimeApp"],[3,"nsIGIOService"],[3,"nsILoadGroupChild"],[3,"nsIPluginTag"],[3,"nsIFakePluginTag"],[3,"nsIEditor"],[3,"nsIObserver"],[3,"nsIXPCTestBug809674"],[3,"nsIDOMFileList"],[3,"nsICycleCollectorHandler"],[3,"nsICycleCollectorLogSink"],[3,"nsICycleCollectorListener"],[3,"nsIDivertableChannel"],[3,"nsIDOMDOMException"],[3,"nsISecurityUITelemetry"],[3,"nsIWifiAccessPoint"],[3,"nsIDroppedLinkItem"],[3,"nsIDroppedLinkHandler"],[3,"amIAddonManager"],[3,"nsIAccessibleSelectable"],[3,"nsIClientAuthDialogs"],[3,"nsIClientAuthUserDecision"],[3,"nsINetworkPredictor"],[3,"nsIVersionComparator"],[3,"imgICache"],[3,"nsIReflowObserver"],[3,"nsIFetchTelemetryDataCallback"],[3,"nsITelemetry"],[3,"nsIMessageLoop"],[3,"nsIDOMXULLabelElement"],[3,"nsIPresentationSessionRequest"],[3,"nsICacheSession"],[3,"nsIPrefService"],[3,"nsIBlocklistService"],[3,"nsIBlocklistPrompt"],[3,"nsIFilePickerShownCallback"],[3,"nsIFilePicker"],[3,"nsIUrlClassifierStreamUpdater"],[3,"nsIDOMCSSKeyframesRule"],[3,"mozIGeckoMediaPluginChromeService"],[3,"nsIBadCertListener2"],[3,"nsIServerTiming"],[3,"nsITimedChannel"],[3,"nsIUploadChannel"],[3,"nsIContentSecurityPolicy"],[3,"nsISelectionListener"],[3,"nsIRDFResource"],[3,"nsIRefreshURI"],[3,"nsIHttpPushListener"],[3,"nsIFileView"],[3,"nsIAccessibleApplication"],[3,"nsIDOMGeoPosition"],[3,"nsILoginManagerStorage"],[3,"nsIDOMGeoPositionCoords"],[3,"nsIDOMHTMLFormElement"],[3,"nsIDataType"],[3,"nsIVariant"],[3,"nsIWritableVariant"],[3,"mozIStorageAsyncConnection"],[3,"nsIRDFInMemoryDataSource"],[3,"nsIAuthPromptAdapterFactory"],[3,"inICSSValueSearch"],[3,"nsIHttpServer"],[3,"nsIHttpServerStoppedCallback"],[3,"nsIHttpServerIdentity"],[3,"nsIHttpRequestHandler"],[3,"nsIHttpRequest"],[3,"nsIHttpResponse"],[3,"nsIUrlListManager"],[3,"nsILoginMetaInfo"],[3,"nsIDOMHistory"],[3,"nsIPrintSession"],[3,"nsIContentSecurityManager"],[3,"nsIDOMCSSSupportsRule"],[3,"nsIPKCS11ModuleDB"],[3,"nsIUnicharOutputStream"],[3,"nsIPaymentRequestService"],[3,"nsIUnicharLineInputStream"],[3,"nsIRDFContainerUtils"],[3,"nsIIOService"],[3,"nsIIOServiceInternal"],[3,"nsIByteRangeRequest"],[3,"nsIRemoteBrowser"],[3,"nsIApplicationCacheContainer"],[3,"nsICertificateDialogs"],[3,"nsIClipboardDragDropHookList"],[3,"nsISimpleEnumerator"],[3,"nsIFaviconService"],[3,"nsIFaviconDataCallback"],[3,"nsINSSVersion"],[3,"nsITokenDialogs"],[3,"nsISSLStatus"],[3,"nsIDOMCommandEvent"],[3,"nsISelectionDisplay"],[3,"nsIMemory"],[3,"nsIURIClassifierCallback"],[3,"nsIURIClassifier"],[3,"nsIDOMSerializer"],[3,"nsISerializationHelper"],[3,"nsIInterfaceInfo"],[3,"nsISpeculativeConnect"],[3,"nsISpeculativeConnectionOverrider"],[3,"nsIZipWriter"],[3,"nsIDOMNotifyPaintEvent"],[3,"imgIContainerDebug"],[3,"nsINetworkLinkService"],[3,"nsIConsoleMessage"],[3,"nsITreeColumn"],[3,"nsITreeColumns"],[3,"nsINavHistoryResultNode"],[3,"nsINavHistoryContainerResultNode"],[3,"nsINavHistoryQueryResultNode"],[3,"nsINavHistoryResultObserver"],[3,"nsINavHistoryResultTreeViewer"],[3,"nsINavHistoryResult"],[3,"nsINavHistoryObserver"],[3,"nsINavHistoryQuery"],[3,"nsINavHistoryQueryOptions"],[3,"nsINavHistoryService"],[3,"nsINavHistoryBatchCallback"],[3,"nsIASN1PrintableItem"],[3,"nsIDOMFontFaceList"],[3,"nsIDOMDocument"],[3,"nsIXPCException"],[3,"nsISeekableStream"],[3,"nsISecCheckWrapChannel"],[3,"nsILoadContextInfo"],[3,"nsILoadContextInfoFactory"],[3,"nsIBrowserGlue"],[3,"nsIAccessibleText"],[3,"nsIAutoCompleteSearch"],[3,"nsIAutoCompleteObserver"],[3,"nsIAutoCompleteSearchDescriptor"],[3,"txIFunctionEvaluationContext"],[3,"nsIConsoleListener"],[3,"nsIContentPrefObserver"],[3,"nsIContentPrefService2"],[3,"nsIContentPrefCallback2"],[3,"nsIContentPref"],[3,"nsISelectionController"],[3,"txIXPathObject"],[3,"nsITypeAheadFind"],[3,"nsIHttpAuthenticatorCallback"],[3,"nsIDOMTreeWalker"],[3,"nsIScriptableRegion"],[3,"nsIXULAppInfo"],[3,"nsIXULOverlayProvider"],[3,"nsIHandlerInfo"],[3,"nsIMIMEInfo"],[3,"nsIHandlerApp"],[3,"nsILocalHandlerApp"],[3,"nsIWebHandlerApp"],[3,"nsIDBusHandlerApp"],[3,"nsISAXErrorHandler"],[3,"nsIIdentityCryptoService"],[3,"nsIIdentityKeyPair"],[3,"nsIIdentityKeyGenCallback"],[3,"nsIIdentitySignCallback"],[3,"xpcIJSModuleLoader"],[3,"nsILoadInfo"],[3,"nsIEffectiveTLDService"],[3,"nsIWebProgress"],[3,"nsISupports"],[3,"nsINativeAppSupport"],[3,"mozIExtensionProcessScript"],[3,"nsPICommandUpdater"],[3,"nsIIdleService"],[3,"nsIShellService"],[3,"mozIPlacesPendingOperation"],[3,"nsIScrollable"],[3,"NetDashboardCallback"],[3,"nsIDashboard"],[3,"nsIRDFInferDataSource"],[3,"nsICommandParams"],[3,"nsICacheStorageService"],[3,"nsICacheStorageConsumptionObserver"],[3,"nsPIPlacesDatabase"],[3,"nsIEditorSpellCheck"],[3,"nsIEditorSpellCheckCallback"],[3,"nsIContentHandler"],[3,"nsITimerCallback"],[3,"nsITimer"],[3,"nsIWebBrowserPersistable"],[3,"nsIHttpAuthManager"],[3,"nsIQuotaUsageResult"],[3,"nsIQuotaOriginUsageResult"],[3,"nsIXPCTestObjectReadOnly"],[3,"nsIXPCTestObjectReadWrite"],[3,"nsIHttpHeaderVisitor"],[3,"nsIGfxInfoDebug"],[3,"nsIControllerCommand"],[3,"nsIDragSession"],[3,"nsIProxiedChannel"],[3,"nsIAccessibleTableChangeEvent"],[3,"nsIDOMStorage"],[3,"nsICacheEntryOpenCallback"],[3,"nsIUDPSocket"],[3,"nsIUDPSocketListener"],[3,"nsIUDPMessage"],[3,"nsIObjectLoadingContent"],[3,"nsIXSLTProcessor"],[3,"nsIWorkerDebuggerManagerListener"],[3,"nsIWorkerDebuggerManager"],[3,"nsICacheTesting"],[3,"nsIDOMWindow"],[3,"nsIPluginDocument"],[3,"nsIDOMCustomEvent"],[3,"nsIContentPolicy"],[3,"nsIWritablePropertyBag2"],[3,"nsIRDFLiteral"],[3,"nsIRDFDate"],[3,"nsIRDFInt"],[3,"nsIRDFBlob"],[3,"nsIDOMCSSUnknownRule"],[3,"nsIDataSignatureVerifier"],[3,"mozIPersonalDictionary"],[3,"nsISecureBrowserUI"],[3,"nsIDOMMozBrowserFrame"],[3,"nsIListNetworkAddressesListener"],[3,"nsIGetHostnameListener"],[3,"nsINetworkInfoService"],[3,"nsIEditingSession"],[3,"nsITreeView"],[3,"nsINativeTreeView"],[3,"nsIDOMDocumentXBL"],[3,"nsIMenuBoxObject"],[3,"nsICursorContinueCallback"],[3,"nsIDOMDOMCursor"],[3,"nsICommandLineRunner"],[3,"nsIHangReport"],[3,"nsISHistory"],[3,"nsIClassInfo"],[3,"nsIWyciwygChannel"],[3,"mozIAsyncLivemarks"],[3,"mozILivemarkInfo"],[3,"mozILivemark"],[3,"nsIRDFDataSource"],[3,"nsIDOMCSSRuleList"],[3,"nsIParentalControlsService"],[3,"mozIDownloadPlatform"],[3,"nsIRemoteWindowContext"],[3,"nsITransactionManager"],[3,"nsIWorkerTestCallback"],[3,"nsIWorkerTest"],[3,"nsIEditorObserver"],[3,"nsITreeContentView"],[3,"nsIFinalizationWitnessService"],[3,"inISearchProcess"],[3,"nsIPaymentActionCallback"],[3,"nsIPaymentActionRequest"],[3,"nsIPaymentCreateActionRequest"],[3,"nsIPaymentCompleteActionRequest"],[3,"nsIPaymentUpdateActionRequest"],[3,"nsIDOMXULLabeledControlElement"],[3,"nsIPaymentResponseData"],[3,"nsIGeneralResponseData"],[3,"nsIBasicCardResponseData"],[3,"nsIPaymentActionResponse"],[3,"nsIPaymentCanMakeActionResponse"],[3,"nsIPaymentShowActionResponse"],[3,"nsIPaymentAbortActionResponse"],[3,"nsIPaymentCompleteActionResponse"],[3,"nsIWebBrowserChrome2"],[3,"nsIWebSocketFrame"],[3,"nsIWebSocketEventListener"],[3,"nsIWebSocketEventService"],[3,"nsIServerSocket"],[3,"nsIServerSocketListener"],[3,"nsIProxiedProtocolHandler"],[3,"nsIStorageStream"],[3,"nsIScriptableUnicodeConverter"],[3,"nsIForcePendingChannel"],[3,"nsIExternalProtocolHandler"],[3,"nsIInlineSpellChecker"],[3,"nsIQueryContentEventResult"],[3,"nsIDOMClipboardEvent"],[3,"nsIDOMXULElement"],[3,"inIDOMUtils"],[3,"nsIPushSubscription"],[3,"nsIPushSubscriptionCallback"],[3,"nsIUnsubscribeResultCallback"],[3,"nsIPushClearResultCallback"],[3,"nsIPushService"],[3,"nsIPushQuotaManager"],[3,"nsITabChild"],[3,"nsISHContainer"],[3,"nsIRDFObserver"],[3,"nsINetworkPredictorVerifier"],[3,"nsIControllerContext"],[3,"nsIDNSListener"],[3,"nsIDNSListenerProxy"],[3,"IPeerConnectionObserver"],[3,"IPeerConnection"],[3,"mozIStorageResultSet"],[3,"nsIDocumentLoaderFactory"],[3,"nsIAccessiblePivot"],[3,"nsIAccessiblePivotObserver"],[3,"nsIAccessibleTraversalRule"],[3,"nsIAutoConfig"],[3,"nsINullChannel"],[3,"nsIDOMSVGLength"],[3,"nsIUnicharInputStream"],[3,"nsISOCKSSocketInfo"],[3,"nsIPartialSHistoryListener"],[3,"nsIXPCTestFunctionInterface"],[3,"nsIXPCTestUtils"],[3,"nsIContainerBoxObject"],[3,"nsICacheEntryDescriptor"],[3,"nsICacheMetaDataVisitor"],[3,"nsIStringInputStream"],[3,"nsIPresentationAvailabilityListener"],[3,"nsIPresentationSessionListener"],[3,"nsIPresentationRespondingListener"],[3,"nsIStringEnumerator"],[3,"nsIUTF8StringEnumerator"],[3,"nsIServiceWorkerUnregisterCallback"],[3,"nsIServiceWorkerInfo"],[3,"nsIServiceWorkerRegistrationInfoListener"],[3,"nsIServiceWorkerRegistrationInfo"],[3,"nsIServiceWorkerManagerListener"],[3,"nsIServiceWorkerManager"],[3,"nsISecurityEventSink"],[3,"nsIClearSiteDataCallback"],[3,"nsIPluginHost"],[3,"nsIUrlClassifierParseFindFullHashCallback"],[3,"nsIUrlClassifierUtils"],[3,"nsIEnvironment"],[3,"nsIEmbeddingSiteWindow"],[3,"nsIDOMClientRectList"],[3,"nsISessionStartup"],[3,"nsIIOUtil"],[3,"nsIUrlClassifierPrefixSet"],[3,"nsIURISetSpec"],[3,"nsIURISetters"],[3,"nsIURIMutator"],[3,"nsIJARProtocolHandler"],[3,"nsIListBoxObject"],[3,"nsIGfxInfo"],[3,"nsIDOMHTMLInputElement"],[3,"inIDOMView"],[3,"nsIOutputIterator"],[3,"nsIInputIterator"],[3,"nsIForwardIterator"],[3,"nsIBidirectionalIterator"],[3,"nsIRandomAccessIterator"],[3,"nsINativeOSFileResult"],[3,"nsINativeOSFileSuccessCallback"],[3,"nsINativeOSFileErrorCallback"],[3,"nsINativeOSFileInternalsService"],[3,"nsIUpdatePatch"],[3,"nsIUpdate"],[3,"nsIUpdateCheckListener"],[3,"nsIUpdateChecker"],[3,"nsIApplicationUpdateService"],[3,"nsIUpdateProcessor"],[3,"nsIUpdateManager"],[3,"nsIUpdatePrompt"],[3,"nsIWeakReference"],[3,"nsISupportsWeakReference"],[3,"nsINestedURI"],[3,"nsIWebVTTParserWrapper"],[3,"nsIPromptFactory"],[3,"nsISocketTransport"],[3,"nsIDocShellLoadInfo"],[3,"nsIDateTimeInputArea"],[3,"mozIStorageValueArray"],[3,"nsICommandLineHandler"],[3,"nsIPlaintextEditor"],[3,"nsICookie2"],[3,"txINodeSet"],[3,"nsISecretDecoderRing"],[3,"nsIZipEntry"],[3,"nsIZipReader"],[3,"nsIZipReaderCache"],[3,"nsIXULBrowserWindow"],[3,"imgIScriptedNotificationObserver"],[3,"nsIASN1Sequence"],[3,"nsIPrintSettings"],[3,"nsIDOMUIEvent"],[3,"mozISpellI18NUtil"],[3,"nsIToolkitChromeRegistry"],[3,"nsIRDFCompositeDataSource"],[3,"rdfIDataSource"],[3,"nsIDOMCSSConditionRule"],[3,"nsIX509CertValidity"],[3,"nsIDocShellTreeItem"],[3,"nsISharingHandlerApp"],[3,"nsIExternalSharingAppService"],[3,"nsIImageDocument"],[3,"nsIAsyncInputStream"],[3,"nsIInputStreamCallback"],[3,"nsINamed"],[3,"nsISystemProxySettings"],[3,"nsIProgressEventSink"],[3,"nsIURL"],[3,"nsILoginReputationResult"],[3,"nsILoginReputationQuery"],[3,"nsILoginReputationQueryCallback"],[3,"nsILoginReputationService"],[3,"nsIURLParser"],[3,"nsIDOMCounter"],[3,"nsITLSServerSocket"],[3,"nsITLSClientStatus"],[3,"nsITLSServerConnectionInfo"],[3,"nsITLSServerSecurityObserver"],[3,"nsIPrintProgress"],[3,"nsIClassOfService"],[3,"nsIDOMGlobalPropertyInitializer"],[3,"nsIDOMSVGElement"],[3,"nsIFTPChannelParentInternal"],[3,"mozISpellI18NManager"],[3,"nsIDirectoryEnumerator"],[3,"nsIWebBrowser"],[3,"mozIOSPreferences"],[3,"nsIMutable"],[3,"nsIPrefLocalizedString"],[3,"nsIPrintSettingsService"],[3,"nsIThreadPoolListener"],[3,"nsIThreadPool"],[3,"nsIFeedPerson"],[3,"nsISocketProvider"],[3,"nsISessionStore"],[3,"nsIRandomGenerator"],[3,"mozILocaleService"],[3,"nsIDOMFocusEvent"],[3,"nsIDOMXULTextBoxElement"],[3,"nsIProtocolHandlerWithDynamicFlags"],[3,"nsIProtocolHandler"],[3,"mozIPlacesAutoComplete"],[3,"nsIScriptableInputStream"],[3,"nsIMenuBuilder"],[3,"txIEXSLTRegExFunctions"],[3,"nsIAccessibilityService"],[3,"nsIDOMClientRect"],[3,"nsIWellKnownOpportunisticUtils"],[3,"nsIWebBrowserChromeFocus"],[3,"nsIDOMXULRelatedElement"],[3,"nsISessionStoreUtilsFrameCallback"],[3,"nsISessionStoreUtils"],[3,"nsIDOMCSSMozDocumentRule"],[3,"nsIConsoleAPIStorage"],[3,"nsIDomainPolicy"],[3,"nsIDomainSet"],[3,"nsIDOMMozWakeLockListener"],[3,"nsIPresentationChannelDescription"],[3,"nsIPresentationControlChannelListener"],[3,"nsIPresentationControlChannel"],[3,"nsIPaymentAddress"],[3,"nsIObjectInputStream"],[3,"nsIRDFContainer"],[3,"inIDeepTreeWalker"],[3,"nsIResProtocolHandler"],[3,"nsITransportSecurityInfo"],[3,"nsIClipboardHelper"],[3,"nsIDOMXULCheckboxElement"],[3,"nsIProperties"],[3,"nsIAccessibleTable"],[3,"nsIAccessibleTableCell"],[3,"nsIDOMCSSKeyframeRule"],[3,"nsIProtocolProxyCallback"],[3,"nsIRequestObserverProxy"],[3,"nsIDownloader"],[3,"nsIDownloadObserver"],[3,"nsIMIMEHeaderParam"],[3,"nsICaptivePortalCallback"],[3,"nsICaptivePortalDetector"],[3,"IJSDebugger"],[3,"nsISearchSubmission"],[3,"nsISearchEngine"],[3,"nsISearchParseSubmissionResult"],[3,"nsISearchInstallCallback"],[3,"nsIBrowserSearchInitObserver"],[3,"nsIBrowserSearchService"],[3,"nsIDOMDOMConstructor"],[3,"mozIStorageBindingParamsArray"],[3,"nsITCPDeviceInfo"],[3,"nsIPresentationControlServerListener"],[3,"nsIPresentationControlService"],[3,"nsIWindowProvider"],[3,"nsIFeedProcessor"],[3,"nsIWebProgressListener"],[3,"nsPILoadGroupInternal"],[3,"nsIFontEnumerator"],[3,"nsIThreadRetargetableStreamListener"],[3,"nsISiteSecurityState"],[3,"nsISiteHSTSState"],[3,"nsISiteHPKPState"],[3,"nsISiteSecurityService"],[3,"nsIPowerManagerService"],[3,"nsICancelable"],[3,"nsIControllerCommandTable"],[3,"nsIPresentationSessionTransportCallback"],[3,"nsIPresentationSessionTransport"],[3,"nsIMozNavigatorNetwork"],[3,"nsIDOMStorageManager"],[3,"nsICrashService"],[3,"nsIFullHashMatch"],[3,"nsIUrlClassifierHashCompleterCallback"],[3,"nsIUrlClassifierHashCompleter"],[3,"nsIPresentationRequestUIGlue"],[3,"nsIDOMXULDescriptionElement"],[3,"nsIAuthModule"],[3,"nsIViewSourceChannel"],[3,"nsIMediaManagerService"],[3,"nsISynthVoiceRegistry"],[3,"nsINetworkActivityData"],[3,"nsIProfileStartup"],[3,"nsIProfileMigrator"],[3,"nsIQuotaUsageCallback"],[3,"nsIQuotaCallback"],[3,"nsIWebBrowserSetup"],[3,"nsIProfileUnlocker"],[3,"nsIInterfaceRequestor"],[3,"nsIAppShellService"],[3,"nsIPresentationTerminateRequest"],[3,"nsIDOMModalContentWindow"],[3,"nsIFindService"],[3,"nsIArrayBufferInputStream"],[3,"nsITooltipTextProvider"],[3,"nsIWebBrowserFocus"],[3,"nsIStreamConverter"],[3,"mozIRepresentativeColorCallback"],[3,"mozIColorAnalyzer"],[3,"nsIDOMCSSStyleRule"],[3,"nsIIdleServiceInternal"],[3,"nsIRedirectResultListener"],[3,"nsIDocumentLoader"],[3,"nsITransport"],[3,"nsITransportEventSink"],[3,"nsIDOMCanvasRenderingContext2D"],[3,"nsIPrintProgressParams"],[3,"nsIDownloadProgressListener"],[3,"nsIDOMNode"],[3,"nsIBinaryOutputStream"],[3,"nsIAddonPolicyService"],[3,"nsIAddonContentPolicy"],[3,"nsIAccessibleStates"],[3,"nsITransportProvider"],[3,"nsIDOMEventListener"],[3,"nsIBrowserHistory"],[3,"nsIScrollBoxObject"],[3,"nsIUUIDGenerator"],[3,"nsISupportsPrimitive"],[3,"nsISupportsID"],[3,"nsISupportsCString"],[3,"nsISupportsString"],[3,"nsISupportsPRBool"],[3,"nsISupportsPRUint8"],[3,"nsISupportsPRUint16"],[3,"nsISupportsPRUint32"],[3,"nsISupportsPRUint64"],[3,"nsISupportsPRTime"],[3,"nsISupportsChar"],[3,"nsISupportsPRInt16"],[3,"nsISupportsPRInt32"],[3,"nsISupportsPRInt64"],[3,"nsISupportsFloat"],[3,"nsISupportsDouble"],[3,"nsISupportsInterfacePointer"],[3,"nsIPKCS11Module"],[3,"nsIURIFixupInfo"],[3,"nsIURIFixup"],[3,"nsIWebSocketChannel"],[3,"nsITraceableChannel"],[3,"nsIQuotaManagerService"],[3,"nsIControllers"],[3,"nsIDOMScreen"],[3,"nsIInputListAutoComplete"],[3,"nsITransaction"],[3,"nsIRDFRemoteDataSource"],[3,"nsIRedirectHistoryEntry"],[3,"nsIGSettingsCollection"],[3,"nsIGSettingsService"],[3,"nsIFile"],[3,"nsIDOMStyleSheetList"],[3,"nsIHttpActivityObserver"],[3,"nsIHttpActivityDistributor"],[3,"nsIWindowlessBrowser"],[3,"nsIPK11TokenDB"],[3,"nsINotificationStorageCallback"],[3,"nsINotificationStorage"],[3,"nsIPageThumbsStorageService"],[3,"nsIPipe"],[3,"nsISearchableInputStream"],[3,"nsIOSFileConstantsService"],[3,"nsIPrivateModeCallback"],[3,"nsICookieManager"],[3,"nsIFeedContainer"],[3,"nsPIEditorTransaction"],[3,"nsIDOMDragEvent"],[3,"nsIPresentationDeviceRequest"],[3,"nsIPresentationDevicePrompt"],[3,"nsISpeechGrammarCompilationCallback"],[3,"nsISpeechRecognitionService"],[3,"nsIHapticFeedback"],[3,"nsIHstsPrimingCallback"],[3,"nsIDOMGeoPositionCallback"],[3,"nsIXULSortService"],[3,"nsIInterceptedBodyCallback"],[3,"nsIInterceptedChannel"],[3,"nsINetworkInterceptController"],[3,"nsIDOMCSSPageRule"],[3,"nsIXULWindow"],[3,"nsIDOMValidityState"],[3,"nsIDOMXULMultiSelectControlElement"],[3,"mozISandboxSettings"],[3,"nsIAccessibleTextRange"],[3,"nsICategoryManager"],[3,"nsIBufferedInputStream"],[3,"nsIBufferedOutputStream"],[3,"nsIDNSRecord"],[3,"nsIWebContentHandlerRegistrar"],[3,"nsIXMLHttpRequestEventTarget"],[3,"nsIXMLHttpRequestUpload"],[3,"nsIXMLHttpRequest"],[3,"nsIXHRSendable"],[3,"nsIPresentationDeviceManager"],[3,"nsIOutputStream"],[3,"nsIDOMCrypto"],[3,"nsITreeBoxObject"],[3,"nsICommandManager"],[3,"nsIStructuredCloneContainer"],[3,"nsIINIParser"],[3,"nsIINIParserWriter"],[3,"nsIINIParserFactory"],[3,"nsIAccessibleStateChangeEvent"],[3,"nsIDownloadHistory"],[3,"mozIMozIntlHelper"],[3,"nsIWebBrowserChrome"],[3,"nsIDOMComment"],[3,"nsIStreamTransportService"],[3,"nsIInputAvailableCallback"],[3,"nsIDOMXULButtonElement"],[3,"nsIWorkerDebuggerListener"],[3,"nsIWorkerDebugger"],[3,"nsIBackgroundChannelRegistrar"],[3,"nsIPermissionManager"],[3,"nsIHelperAppLauncherDialog"],[3,"nsISerializable"],[3,"nsIHTMLAbsPosEditor"],[3,"nsITextScroll"],[3,"nsIDOMTimeEvent"],[3,"nsIStreamListener"],[3,"nsIDirIndex"],[3,"nsIDOMXPathResult"],[3,"nsIContentViewerEdit"],[3,"nsIDOMDOMRequest"],[3,"nsIDOMRequestService"],[3,"nsIAccessibleRole"],[3,"nsICompressConvStats"],[3,"nsIDOMDOMImplementation"],[3,"nsILoginManagerCrypto"],[3,"nsICommandLine"],[3,"nsIHashable"],[3,"nsIPresentationSessionTransportBuilderListener"],[3,"nsIPresentationSessionTransportBuilder"],[3,"nsIPresentationTransportBuilderConstructor"],[3,"nsIPresentationTCPSessionTransportBuilder"],[3,"nsIPresentationDataChannelSessionTransportBuilder"],[3,"nsIPrintStatusFeedback"],[3,"nsIFeedResult"],[3,"nsICacheEntryDoomCallback"],[3,"nsIWebPageDescriptor"],[3,"nsIKeygenThread"],[3,"nsIRaceCacheWithNetwork"],[3,"nsIPrompt"],[3,"nsIDOMCDATASection"],[3,"mozIStorageBindingParams"],[3,"mozIStorageBaseStatement"],[3,"nsIDirectoryServiceProvider"],[3,"nsIDirectoryServiceProvider2"],[3,"nsIDirectoryService"],[3,"nsIScriptSecurityManager"],[3,"nsICacheVisitor"],[3,"nsICacheDeviceInfo"],[3,"nsICacheEntryInfo"],[3,"nsIGlobalHistory2"],[3,"nsIFormAutoComplete"],[3,"nsIFormAutoCompleteObserver"],[3,"nsIXULRuntime"],[3,"nsITransfer"],[3,"nsIStreamConverterService"],[3,"nsIX509Cert"],[3,"nsIDOMXULMenuListElement"],[3,"nsIStringBundle"],[3,"nsIStringBundleService"],[3,"nsIStackFrame"],[3,"nsIException"],[3,"nsIFlavorDataProvider"],[3,"nsITransferable"],[3,"nsINavBookmarkObserver"],[3,"nsINavBookmarksService"],[3,"nsICookieTransactionCallback"],[3,"nsICookieService"],[3,"nsIColorPickerShownCallback"],[3,"nsIColorPicker"],[3,"nsICacheListener"],[3,"nsIContentSniffer"],[3,"nsPISocketTransportService"],[3,"nsIEventListenerChange"],[3,"nsIListenerChangeListener"],[3,"nsIEventListenerInfo"],[3,"nsIEventListenerService"],[3,"nsINSSErrorsService"],[3,"imgIRequest"],[3,"nsIUDPSocketChild"],[3,"nsIUDPSocketInternal"],[3,"nsIChildChannel"],[3,"nsIXULStore"],[3,"nsIHTMLEditor"],[3,"mozIMozIntl"],[3,"nsIUserInfo"],[3,"nsISHistoryInternal"],[3,"nsIAccessibleCaretMoveEvent"],[3,"nsILocalFileWin"],[3,"nsIPaymentUIService"],[3,"nsIInputChannelThrottleQueue"],[3,"nsIThrottledInputChannel"],[3,"nsIMessageListener"],[3,"nsIMessageListenerManager"],[3,"nsIMessageSender"],[3,"nsIMessageBroadcaster"],[3,"nsISyncMessageSender"],[3,"nsIMessageManagerGlobal"],[3,"nsIContentFrameMessageManager"],[3,"nsIInProcessContentFrameMessageManager"],[3,"nsIContentProcessMessageManager"],[3,"nsIFrameScriptLoader"],[3,"nsIProcessScriptLoader"],[3,"nsIGlobalProcessScriptLoader"],[3,"mozIStorageProgressHandler"],[3,"nsIOpenSignedAppFileCallback"],[3,"nsIVerifySignedDirectoryCallback"],[3,"nsICertVerificationCallback"],[3,"nsIX509CertDB"],[3,"nsIDOMDocumentFragment"],[3,"nsIFileChannel"],[3,"nsISliderListener"],[3,"nsIThreadRetargetableRequest"],[3,"nsIProcess"],[3,"nsIAddonInterposition"],[3,"mozIStorageStatementCallback"],[3,"nsINetworkProperties"],[3,"nsIPresentationServiceCallback"],[3,"nsIPresentationService"],[3,"nsIAlertNotificationImageListener"],[3,"nsIAlertNotification"],[3,"nsIAlertsService"],[3,"nsIAlertsDoNotDisturb"],[3,"nsIAlertsIconData"],[3,"nsIAlertsIconURI"],[3,"nsIWebBrowserChrome3"],[3,"nsIWindowMediator"],[3,"nsIWindowMediator_44"],[3,"nsIScriptLoaderObserver"],[3,"nsICaptivePortalServiceCallback"],[3,"nsICaptivePortalService"],[3,"nsIDOMStyleSheet"],[3,"nsIDOMElement"],[3,"nsIInputStreamTee"],[3,"nsISHTransaction"],[3,"nsIFrameLoader"],[3,"nsIFrameLoaderOwner"],[3,"nsIDOMWindowUtils"],[3,"nsITranslationNodeList"],[3,"nsIJSRAIIHelper"],[3,"nsIAuthPrompt"],[3,"nsIFind"],[3,"nsIDOMXULDocument"],[3,"nsIDOMNSEvent"],[3,"nsIAccessibleObjectAttributeChangedEvent"],[3,"nsIDOMNodeList"],[3,"nsICertTreeItem"],[3,"nsICertTree"],[3,"nsIAccessibleImage"],[3,"nsIDownload"],[3,"nsIDOMOfflineResourceList"],[3,"nsIDOMCSSImportRule"],[3,"nsIFeedElementBase"],[3,"nsISupportsPriority"],[3,"nsIParserUtils"],[3,"nsIGroupedSHistory"],[3,"nsIDOMBlob"],[3,"nsIChromeRegistry"],[3,"nsIXULChromeRegistry"],[3,"nsIX509CertList"],[3,"nsIStreamLoaderObserver"],[3,"nsIStreamLoader"],[3,"nsIGZFileWriter"],[3,"nsIPaymentMethodData"],[3,"nsIPaymentCurrencyAmount"],[3,"nsIPaymentItem"],[3,"nsIPaymentDetailsModifier"],[3,"nsIPaymentShippingOption"],[3,"nsIPaymentDetails"],[3,"nsIPaymentOptions"],[3,"nsIPaymentRequest"],[3,"nsIDOMHTMLElement"],[3,"nsIDOMWheelEvent"],[3,"nsIHTMLInlineTableEditor"],[3,"nsIXPConnectJSObjectHolder"],[3,"nsIXPConnectWrappedNative"],[3,"nsIXPConnectWrappedJS"],[3,"nsIXPConnectWrappedJSUnmarkGray"],[3,"nsIXPCWrappedJSObjectGetter"],[3,"nsIXPCFunctionThisTranslator"],[3,"nsIXPConnect"],[3,"nsISubstitutingProtocolHandler"],[3,"nsILayoutHistoryState"],[3,"nsIXPCTestReturnCodeParent"],[3,"nsIXPCTestReturnCodeChild"],[3,"mozIStorageVacuumParticipant"],[3,"nsIDOMFontFace"],[3,"nsIBFCacheEntry"],[3,"nsIDashboardEventNotifier"],[3,"nsIWebVTTListener"],[3,"nsIFeedTextConstruct"],[3,"nsIDOMEventTarget"],[3,"nsIBinaryInputStream"],[3,"nsIDOMCSSFontFeatureValuesRule"],[3,"nsIAsyncStreamCopier2"],[3,"nsIAsyncOutputStream"],[3,"nsIOutputStreamCallback"],[3,"nsIHttpAuthenticableChannel"],[3,"nsIWebProgressListener2"],[3,"nsIDisplayInfo"],[3,"nsIClipboardDragDropHooks"],[3,"nsIPresentationDevice"],[3,"nsIOfflineCacheUpdateObserver"],[3,"nsIOfflineCacheUpdate"],[3,"nsIOfflineCacheUpdateService"],[3,"nsITableEditor"],[3,"mozIStorageService"],[3,"nsISecurityInfoProvider"],[3,"nsITextToSubURI"],[3,"nsIDOMXULTreeElement"],[3,"nsIAccessibleScrollType"],[3,"nsIAccessibleCoordinateType"],[3,"nsIDOMFormData"],[3,"nsISAXContentHandler"],[3,"nsIDOMAnimationEvent"],[3,"nsIPrivacyTransitionObserver"],[3,"nsIDOMCSSFontFaceRule"],[3,"nsIWritablePropertyBag"],[3,"nsIPopupWindowManager"],[3,"nsIPreloadedStyleSheet"],[3,"nsIProtocolProxyFilter"],[3,"nsIProtocolProxyChannelFilter"],[3,"nsIURI"],[3,"mozIStorageCompletionCallback"],[3,"nsIMozBrowserFrame"],[3,"nsIProtocolProxyService"],[3,"nsIBrowserHandler"],[3,"nsIURIWithPrincipal"],[3,"nsIInterfaceInfoManager"],[3,"nsIWebNavigationInfo"],[3,"nsIDOMXMLDocument"],[3,"nsIDOMBeforeUnloadEvent"],[3,"imgIEncoder"],[3,"nsIDOMProcessingInstruction"],[3,"mozIStorageStatement"],[3,"nsIEventTarget"],[3,"nsILoginManager"],[3,"nsINestedEventLoopCondition"],[3,"nsIThreadManager"],[3,"nsIAccessibleVirtualCursorChangeEvent"],[3,"nsIInputStreamChannel"],[3,"nsISerialEventTarget"],[3,"nsIAutoCompleteController"],[3,"nsIPluginInstanceOwner"],[3,"nsIAssociatedContentSecurity"],[3,"nsIHTMLObjectResizer"],[3,"nsIToolkitProfileService"],[3,"nsIStringBundleOverride"],[3,"nsIHandlerService"],[3,"nsIDOMCSSStyleSheet"],[3,"nsIDOMTimeRanges"],[3,"nsIRDFXMLParser"],[3,"mozIJSSubScriptLoader"],[3,"nsIProtectedAuthThread"],[3,"nsIXPCTestInterfaceA"],[3,"nsIXPCTestInterfaceB"],[3,"nsIXPCTestInterfaceC"],[3,"mozIStorageError"],[3,"nsISocketProviderService"],[3,"nsIRemoteService"],[3,"nsIWindowCreator2"],[3,"nsISimpleStreamListener"],[3,"nsIDOMXPathEvaluator"],[3,"nsINativeFileWatcherErrorCallback"],[3,"nsINativeFileWatcherCallback"],[3,"nsINativeFileWatcherSuccessCallback"],[3,"nsINativeFileWatcherService"],[3,"nsIAuthPromptCallback"],[3,"nsIStreamListenerTee"],[3,"imgITools"],[3,"imgIContainerCallback"],[3,"nsITextServicesFilter"],[3,"nsIPrinterEnumerator"],[3,"nsISHistoryListener"],[3,"nsIPKCS11Slot"],[3,"nsIDOMGeoGeolocation"],[3,"nsIXPCScriptable"],[3,"nsISuspendedTypes"],[3,"nsIAudioChannelAgentCallback"],[3,"nsIAudioChannelAgent"],[3,"nsILoadGroup"],[3,"nsIDebug2"],[3,"nsIDOMGeoPositionError"],[3,"nsIHttpChannel"],[3,"nsINetUtil"],[3,"nsIASN1Tree"],[3,"nsIDialogParamBlock"],[3,"nsIScreenManager"],[3,"nsIMultiPartChannel"],[3,"nsIPushNotifier"],[3,"nsIPushData"],[3,"nsIPushMessage"],[3,"nsISubstitutionObserver"],[3,"nsIDOMCSSCounterStyleRule"],[3,"nsIPresentationDeviceListener"],[3,"nsIPresentationDeviceProvider"],[3,"nsILocalCertService"],[3,"nsILocalCertGetCallback"],[3,"nsILocalCertCallback"],[3,"nsISocketTransportService"],[3,"nsIRoutedSocketTransportService"],[3,"nsIXPCTestParams"],[3,"nsIDOMXULCommandDispatcher"],[3,"nsIAuthInformation"],[3,"nsIFinishDumpingCallback"],[3,"nsIDumpGCAndCCLogsCallback"],[3,"nsIMemoryInfoDumper"],[3,"nsIAccessibleDocument"],[3,"nsIRequestTailUnblockCallback"],[3,"nsIRequestContext"],[3,"nsIRequestContextService"],[3,"nsIBackgroundFileSaver"],[3,"nsIBackgroundFileSaverObserver"],[3,"nsIAuthPromptProvider"],[3,"nsIFormatConverter"],[3,"imgIContainer"],[3,"amIAddonManagerStartup"],[3,"nsIWindowWatcher"],[3,"nsIXSLTProcessorPrivate"],[3,"nsIDOMDataTransfer"],[3,"nsIFileInputStream"],[3,"nsIFileOutputStream"],[3,"nsIFileStream"],[3,"nsIFileMetadata"],[3,"nsIAsyncFileMetadata"],[3,"nsIFileMetadataCallback"],[3,"nsIRDFDelegateFactory"],[3,"nsIAccessibleTextChangeEvent"],[3,"nsIRDFService"],[3,"nsIUpdateTimerManager"],[3,"nsIRelativeFilePref"],[3,"nsIXBLAccessible"],[3,"inISearchObserver"],[3,"nsIBoxObject"],[3,"nsIBrowserProfileMigrator"],[3,"mozISpellCheckingEngine"],[3,"nsIRDFPurgeableDataSource"],[3,"nsIKeyObject"],[3,"nsIKeyObjectFactory"],[3,"nsIInputStreamPump"],[3,"nsIEditorStyleSheets"],[3,"nsIDOMNavigator"],[3,"nsIIncrementalStreamLoaderObserver"],[3,"nsIIncrementalStreamLoader"],[3,"nsPIWindowWatcher"],[3,"mozIStorageAsyncStatement"],[3,"nsIIdlePeriod"],[3,"nsIFeed"],[3,"nsIModule"],[3,"nsIDOMHTMLMediaElement"],[3,"nsIFocusManager"],[3,"nsIDOMEvent"],[3,"nsIPrintingPromptService"],[3,"mozIVisitInfo"],[3,"mozIPlaceInfo"],[3,"mozIVisitInfoCallback"],[3,"mozIVisitedStatusCallback"],[3,"mozIAsyncHistory"],[3,"nsIClipboardCommands"],[3,"nsIRDFPropagatableDataSource"],[3,"nsIContentSignatureVerifier"],[3,"nsIContentSignatureReceiverCallback"],[3,"nsIContentViewer"],[3,"nsIDOMDataChannel"],[3,"nsICryptoHMAC"],[3,"nsPIDNSService"],[3,"nsIScreen"],[3,"nsIEditorMailSupport"],[3,"nsIDOMKeyEvent"],[3,"nsIMultiplexInputStream"],[3,"nsICrashReporter"],[3,"xpcIJSWeakReference"],[3,"nsISyncStreamListener"],[3,"nsICollationFactory"],[3,"nsICollation"],[3,"nsIDocumentEncoderNodeFixup"],[3,"nsIDocumentEncoder"],[3,"nsIHttpProtocolHandler"],[3,"nsIFileProtocolHandler"],[3,"nsIHTTPHeaderListener"],[3,"nsIClipboardOwner"],[3,"nsIComponentManager"],[3,"nsILoginManagerPrompter"],[3,"nsIPromptService"],[3,"nsIDOMCSSPrimitiveValue"],[3,"nsIRDFNode"],[3,"imgINotificationObserver"],[3,"nsIMediaDevice"],[3,"nsIGetUserMediaDevicesSuccessCallback"],[3,"nsIDOMGetUserMediaSuccessCallback"],[3,"nsIDOMGetUserMediaErrorCallback"],[3,"nsIAutoCompleteInput"],[3,"nsIAccessibleRelation"],[3,"nsITextInputProcessorNotification"],[3,"nsITextInputProcessorCallback"],[3,"nsIPluginInputStream"],[3,"nsIDeviceSensorData"],[3,"nsIDeviceSensors"],[3,"mozIStorageRow"],[3,"nsISound"],[3,"nsIDNSServiceInfo"],[3,"nsIDNSServiceDiscoveryListener"],[3,"nsIDNSRegistrationListener"],[3,"nsIDNSServiceResolveListener"],[3,"nsIDNSServiceDiscovery"],[3,"nsIDOMDocumentType"],[3,"nsIApplicationCacheNamespace"],[3,"nsIApplicationCache"],[3,"nsIExternalHelperAppService"],[3,"nsPIExternalAppLauncher"],[3,"nsIHelperAppLauncher"],[3,"nsIDOMXULContainerItemElement"],[3,"nsIDOMXULContainerElement"],[3,"nsIDOMText"],[3,"nsIDOMCSSValueList"],[3,"nsIDOMXULSelectControlItemElement"],[3,"nsIJARChannel"],[3,"nsIApplicationChooserFinishedCallback"],[3,"nsIApplicationChooser"],[3,"nsIDOMCSSMediaRule"],[3,"nsITaggingService"],[3,"nsISHEntry"],[3,"nsISHEntryInternal"],[3,"nsIURIRefObject"],[3,"nsIScriptErrorNote"],[3,"nsIScriptError"],[3,"nsIImageLoadingContent"],[3,"nsIAccessible"],[3,"nsIContentDispatchChooser"],[3,"nsIUploadChannel2"],[3,"nsIConsoleService"],[3,"nsIDOMWindowCollection"],[3,"nsIDOMNodeFilter"],[3,"nsIAudioDeviceInfo"],[3,"nsIIDNService"],[3,"nsIRequestObserver"],[3,"IUrlClassifierUITelemetry"],[3,"nsIChannelEventSink"],[3,"nsIDOMCharacterData"],[3,"nsIGNOMEShellService"],[3,"mozIDOMWindow"],[3,"mozIDOMWindowProxy"],[3,"nsIPresentationLocalDevice"],[3,"nsIContentViewerContainer"],[3,"nsIWebNavigation"],[3,"nsIStandardURL"],[3,"mozIStoragePendingStatement"],[3,"mozISandboxReport"],[3,"mozISandboxReportArray"],[3,"mozISandboxReporter"],[3,"nsILineInputStream"],[3,"nsIFxAccountsUIGlue"],[3,"nsIRedirectChannelRegistrar"],[3,"nsIFeedGenerator"],[3,"nsIAsyncShutdownBlocker"],[3,"nsIAsyncShutdownClient"],[3,"nsIAsyncShutdownCompletionCallback"],[3,"nsIAsyncShutdownBarrier"],[3,"nsIAsyncShutdownService"],[3,"nsIAccessibleHideEvent"],[3,"nsIMarionette"],[3,"nsIDirIndexListener"],[3,"nsIDirIndexParser"],[3,"nsIPrivateBrowsingTrackingProtectionWhitelist"],[3,"nsIFactory"],[3,"nsIClassifiedChannel"],[3,"nsIJSID"],[3,"nsIJSIID"],[3,"nsIJSCID"],[3,"nsIDNSService"],[3,"nsIBrowserElementNextPaintListener"],[3,"nsIBrowserElementAPI"],[3,"nsIChannelWithDivertableParentListener"],[3,"nsICacheStorage"],[3,"nsIPropertyBag"],[3,"nsIDownloadManagerUI"],[3,"nsIRDFXMLSource"],[3,"nsIThreadInternal"],[3,"nsIThreadObserver"],[3,"mozIGeckoMediaPluginService"],[3,"nsIWebBrowserPersist"],[3,"nsIRunnable"],[3,"nsIRunnablePriority"],[3,"nsIAnnotationObserver"],[3,"nsIAnnotationService"],[3,"mozIAnnotatedResult"],[3,"nsIXPCComponents_InterfacesByID"],[3,"nsIXPCComponents_Interfaces"],[3,"nsIXPCComponents_Classes"],[3,"nsIXPCComponents_ClassesByID"],[3,"nsIXPCComponents_Results"],[3,"nsIXPCComponents_ID"],[3,"nsIXPCComponents_Exception"],[3,"nsIXPCComponents_Constructor"],[3,"nsIXPCConstructor"],[3,"nsIXPCComponents_utils_Sandbox"],[3,"ScheduledGCCallback"],[3,"nsIBlockThreadedExecutionCallback"],[3,"nsIXPCComponents_Utils"],[3,"nsIXPCComponentsBase"],[3,"nsIXPCComponents"],[3,"nsIAccessibleValue"],[3,"nsIUrlClassifierCallback"],[3,"nsIUrlClassifierUpdateObserver"],[3,"nsIUrlClassifierDBService"],[3,"nsIUrlClassifierLookupCallback"],[3,"nsIUrlClassifierClassifyCallback"],[3,"nsIApplicationReputationService"],[3,"nsIApplicationReputationQuery"],[3,"nsIApplicationReputationCallback"],[3,"nsIAccessibleEditableText"],[3,"nsIDOMTransitionEvent"],[3,"nsIFeedEntry"],[3,"nsIDOMCSSStyleDeclaration"],[3,"mozIStorageFunction"],[3,"nsIDOMCSSRule"],[3,"nsIIdleObserver"],[3,"nsIBaseWindow"],[3,"nsIFormSubmitObserver"],[3,"nsIDocumentStateListener"],[3,"nsIDOMNSEditableElement"],[3,"nsIConverterOutputStream"],[3,"nsIRequest"],[3,"mozITXTToHTMLConv"],[3,"ScriptableOK"],[3,"ScriptableWithNotXPCOM"],[3,"ScriptableWithNotXPCOMBase"],[3,"nsIScriptChannel"],[3,"nsIHttpUpgradeListener"],[3,"nsIHttpChannelInternal"],[3,"nsIArray"],[3,"nsIProfilerStartParams"],[3,"nsIProfiler"],[3,"nsIAppStartup"],[3,"nsIDOMWebGLRenderingContext"],[3,"nsIFormPOSTActionChannel"],[3,"nsIOpenURIInFrameParams"],[3,"nsIBrowserDOMWindow"],[3,"nsIDOMXULCommandEvent"],[3,"nsICacheInfoChannel"],[3,"nsIMutableArray"],[3,"nsIGConfService"],[3,"nsIPropertyBag2"],[3,"nsISpeechTaskCallback"],[3,"nsISpeechTask"],[3,"nsISpeechService"],[3,"nsIDOMAttr"],[3,"nsIDOMNodeIterator"],[3,"nsICookie"],[3,"nsICloneableInputStream"],[3,"nsICloneableInputStreamWithRange"],[3,"nsIPropertyElement"],[3,"nsIPersistentProperties"],[3,"nsIDOMSimpleGestureEvent"],[3,"nsIScriptableUnescapeHTML"],[3,"nsITooltipListener"],[3,"nsIEncodedChannel"],[3,"nsIContentURIGrouper"],[3,"nsIController"],[3,"nsICommandController"],[3,"nsIControllerCommandGroup"],[3,"nsICachingChannel"],[3,"nsIAutoCompleteSimpleResult"],[3,"nsIAutoCompleteSimpleResultListener"],[3,"nsIDOMXULSelectControlElement"],[3,"nsIAccessibleHyperLink"],[3,"nsITextInputProcessor"],[3,"nsIWindowCreator"],[3,"nsIObjectOutputStream"],[3,"nsIMozIconURI"],[3,"nsIRDFXMLSerializer"],[3,"nsIPrincipal"],[3,"nsIExpandedPrincipal"],[3,"nsICertBlocklist"],[3,"nsILoadContext"],[3,"nsITXTToHTMLConv"],[3,"nsIDOMMouseEvent"],[3,"nsINetAddr"],[3,"nsISAXAttributes"],[3,"xpcIJSGetFactory"],[3,"mozIStorageConnection"],[3,"nsIURIWithBlobImpl"],[3,"nsISafeOutputStream"],[3,"nsISocketFilter"],[3,"nsISocketFilterHandler"],[3,"nsICertOverrideService"],[3,"nsIWebContentHandlerInfo"],[3,"nsIWebContentConverterService"],[3,"nsIServiceManager"],[3,"nsIPartialSHistory"],[3,"nsIPerformanceGroupDetails"],[3,"nsIPerformanceStats"],[3,"nsIPerformanceSnapshot"],[3,"nsIPerformanceAlert"],[3,"nsIPerformanceObserver"],[3,"nsIPerformanceObservable"],[3,"nsIPerformanceStatsService"],[3,"nsISSLStatusProvider"],[3,"nsIDiskSpaceWatcher"],[3,"nsISlowScriptDebugCallback"],[3,"nsISlowScriptDebuggerStartupCallback"],[3,"nsISlowScriptDebugRemoteCallback"],[3,"nsISlowScriptDebug"],[3,"nsIURIContentListener"],[3,"nsIProfileLock"],[3,"nsIToolkitProfile"],[3,"nsIWebSocketListener"],[3,"nsIEditorBlobListener"],[3,"nsIEditorUtils"],[3,"nsIWindowMediatorListener"],[3,"amIWebInstallPrompt"],[3,"mozIThirdPartyUtil"],[3,"nsIAuthPrompt2"],[3,"nsIDocShell"],[3,"nsITabSource"],[3,"nsIErrorService"],[3,"nsISSLSocketControl"],[3,"nsICommandLineValidator"],[3,"nsISelectionPrivate"],[3,"nsIComponentRegistrar"],[3,"nsIParentChannel"],[3,"nsIWebBrowserFind"],[3,"nsIWebBrowserFindInFrames"],[3,"nsIFeedResultService"],[3,"nsIHttpChannelAuthProvider"],[3,"nsIUTF8ConverterService"],[3,"nsIFeedResultListener"],[3,"nsIFeedProgressListener"],[3,"nsIAsyncStreamCopier"],[3,"nsIExternalURLHandlerService"],[3,"nsIGeneratingKeypairInfoDialogs"],[3,"nsIPushErrorReporter"],[3,"nsISecurityConsoleMessage"],[3,"nsIContentPermissionType"],[3,"nsIContentPermissionRequestCallback"],[3,"nsIContentPermissionRequester"],[3,"nsIContentPermissionRequest"],[3,"nsIContentPermissionPrompt"],[3,"nsIDocument"],[3,"nsINode"],[3,"nsIContent"],[3,"nsIConsoleReportCollector"],[3,"nsIGlobalObject"],[3,"nsIScriptElement"],[3,"nsPIDOMWindowOuter"],[3,"nsPIDOMWindowInner"],[3,"nsIScriptContext"],[3,"nsIScriptGlobalObject"],[3,"nsIScrollObserver"],[3,"nsIWidget"],[8,"XpCom"],[8,"RefCounted"]]};
searchIndex["xpcom_macros"] = {"doc":"This crate provides the `#[derive(xpcom)]` custom derive. This custom derive is used in order to implement xpcom interfaces.","items":[[5,"xpcom_internal","xpcom_macros","",null,{"inputs":[{"name":"tokenstream"}],"output":{"name":"tokenstream"}}]],"paths":[]};
initSearch(searchIndex);
