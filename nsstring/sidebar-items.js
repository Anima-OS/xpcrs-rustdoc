initSidebarItems({"enum":[["nsCStringAdapter","An adapter type to allow for passing both types which coerce to &[$char_type], and &$AString to a function, while still performing optimized operations when passed the $AString."],["nsStringAdapter","An adapter type to allow for passing both types which coerce to &[$char_type], and &$AString to a function, while still performing optimized operations when passed the $AString."]],"mod":[["test_helpers","This module only exists to help with ensuring that the layout of the structs inside of rust and C++ are identical."]],"struct":[["nsACString","This type is the abstract type which is used for interacting with strings in rust. Each string type can derefence to an instance of this type, which provides the useful operations on strings."],["nsAString","This type is the abstract type which is used for interacting with strings in rust. Each string type can derefence to an instance of this type, which provides the useful operations on strings."],["nsCStr",""],["nsCString",""],["nsCStringRepr","The representation of a ns[C]String type in C++. This type is used internally by our definition of ns[C]String to ensure layout compatibility with the C++ ns[C]String type."],["nsStr",""],["nsString",""],["nsStringRepr","The representation of a ns[C]String type in C++. This type is used internally by our definition of ns[C]String to ensure layout compatibility with the C++ ns[C]String type."]],"trait":[["nsCStringLike","This trait is implemented on types which are `ns[C]String`-like, in that they can at very low cost be converted to a borrowed `&nsA[C]String`. Unfortunately, the intermediate type `ns[C]StringAdapter` is required as well due to types like `&[u8]` needing to be (cheaply) wrapped in a `nsCString` on the stack to create the `&nsACString`."],["nsStringLike","This trait is implemented on types which are `ns[C]String`-like, in that they can at very low cost be converted to a borrowed `&nsA[C]String`. Unfortunately, the intermediate type `ns[C]StringAdapter` is required as well due to types like `&[u8]` needing to be (cheaply) wrapped in a `nsCString` on the stack to create the `&nsACString`."]]});